{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":"<p>Actualit\u00e9s</p> <ul> <li>Langage SQL</li> </ul> <p>Note</p> <p>Le sujet de l\u2019\u00e9preuve \u00e9crite de la sp\u00e9cialit\u00e9 num\u00e9rique et sciences informatiques, comporte trois exercices ind\u00e9pendants les uns des autres, qui permettent d\u2019\u00e9valuer les connaissances et comp\u00e9tences des candidats. </p>"},{"location":"#notions-a-lepreuve-ecrite-de-mars-2023-mis-a-jours-30092022","title":"Notions \u00e0 l'\u00e9preuve \u00e9crite de Mars 2023 (mis \u00e0 jours 30/09/2022):","text":""},{"location":"#theme-structure-de-donnees","title":"\u27a1 Th\u00e8me : Structure de donn\u00e9es","text":"<p>\u25a1 Structure de donn\u00e9es abstraites( file) : interface et impl\u00e9mentation \u25a1 Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets  \u25a1 Listes, piles, files : structures lin\u00e9aires.  \u25a1 Dictionnaires, index et cl\u00e9 \u25a1 Arbres : structures hi\u00e9rarchiques. Arbres binaires : n\u0153uds, racines, feuilles, sous-arbres gauches, sous-arbres droits</p>"},{"location":"#theme-base-de-donnees","title":"\u27a1 Th\u00e8me : Base de donn\u00e9es","text":"<p>\u25a1 Mod\u00e8le relationnel : relation, attribut, domaine, clef primaire, clef \u00e9trang\u00e8re, sch\u00e9ma relationnel  \u25a1 Base de donn\u00e9es relationnelle et SGBD. \u25a1 Langage SQL : requ\u00eates d'interrogation et de mise \u00e0 jour d'une base de donn\u00e9es  </p>"},{"location":"#theme-architectures-materielles-systeme-dexploitation-et-reseauxarse","title":"\u27a1 Th\u00e8me : Architectures mat\u00e9rielles, syst\u00e8me d\u2019exploitation et r\u00e9seaux(ARSE)","text":"<p>\u25a1 Gestion des processus et des ressources par un syst\u00e8me d'exploitation \u25a1 Protocoles de routage  </p>"},{"location":"#theme-langage-de-programmationlp","title":"\u27a1 Th\u00e8me : Langage de programmation(LP)","text":"<p>\u25a1 R\u00e9cursivit\u00e9 \u25a1 Modularit\u00e9   \u25a1 Mise au point des programmes. Gestion des bugs.</p>"},{"location":"#theme-algorithmiquea","title":"\u27a1 Th\u00e8me : Algorithmique(A)","text":"<p>\u25a1 Algorithmes sur les arbres binaires et sur les arbres binaires de recherche.</p> <p>\u25a1 M\u00e9thode \u00ab diviser pour r\u00e9gner \u00bb</p>"},{"location":"#notions-aux-programmes-mais-non-au-bac-ecrit","title":"Notions aux programmes mais non au BAC (\u00e9crit)","text":"<p>\u25a1 Les graphes \u25a1 Algorithme de Boyer Moore \u25a1 Programmation dynamique  </p>"},{"location":"#comment-calculer-sa-note-au-bac-2023-et-repartition-des-notes","title":"Comment calculer sa note au BAC 2023 et R\u00e9partition des notes :","text":"<p>Fiche pour calculer sa note au BAC 2023 </p> <p></p> <p></p>"},{"location":"credit/","title":"Cr\u00e9dits","text":""},{"location":"credit/#autres-sites-proposant-des-cours-de-nsi","title":"Autres sites proposant des cours de NSI","text":"<ul> <li>Pixees informatique lyc\u00e9e</li> <li>Github de Gilles Lassus</li> <li>Cours de Franck Chambon</li> <li>Cours de Vincent-Xavier Jumel</li> <li>Cours du lyc\u00e9e Angellier</li> <li>Site d'Oliver Lecluse</li> <li>Qkzk</li> <li>Cours de Thomas Beline</li> <li>Les cours en Vid\u00e9o Lumni</li> </ul>"},{"location":"credit/#remerciements","title":"Remerciements","text":"<p>Aux coll\u00e8gues qui avant moi ont mis en ligne leurs propres cours et notamment :  </p> <ul> <li>Le site de David Roche,  </li> <li>Le site de Gilles Lassus,</li> <li>le site de  M.Gouygou   </li> <li>Le site de Fabrive Nativel.</li> </ul>"},{"location":"epreuve_pratique/","title":"\u00c9preuve pratique","text":""},{"location":"epreuve_pratique/#modalites","title":"Modalit\u00e9s","text":"<p>Textes r\u00e8glementaires</p> <ul> <li>https://www.education.gouv.fr/bo/20/Special2/MENE2001797N.htm?cid_bo=149244</li> </ul> <ul> <li>Dur\u00e9e : 1 heure</li> <li>L'\u00e9preuve pratique donne lieu \u00e0 une note sur 8 points, qui s'ajouteront aux 12 points de l'\u00e9preuve \u00e9crite.</li> </ul> <p>La partie pratique consiste en la r\u00e9solution de deux exercices sur ordinateur, chacun \u00e9tant not\u00e9 sur 4 points.</p> <p>Le candidat est \u00e9valu\u00e9 sur la base d\u2019un dialogue avec un professeur-examinateur. Un examinateur \u00e9value au maximum quatre \u00e9l\u00e8ves. L\u2019examinateur ne peut pas \u00e9valuer un \u00e9l\u00e8ve qu\u2019il a eu en classe durant l\u2019ann\u00e9e en cours. L\u2019\u00e9valuation de cette partie se d\u00e9roule au cours du deuxi\u00e8me trimestre pendant la p\u00e9riode de l\u2019\u00e9preuve \u00e9crite de sp\u00e9cialit\u00e9.</p> <p>Premier exercice</p> <p>Le premier exercice consiste \u00e0 programmer un algorithme figurant explicitement au programme, ne pr\u00e9sentant pas de difficult\u00e9 particuli\u00e8re, dont on fournit une sp\u00e9cification. Il s\u2019agit donc de restituer un algorithme rencontr\u00e9 et travaill\u00e9 \u00e0 plusieurs reprises en cours de formation. Le sujet peut proposer un jeu de test avec les r\u00e9ponses attendues pour permettre au candidat de v\u00e9rifier son travail.</p> <p>Deuxi\u00e8me exercice</p> <p>Pour le second exercice, un programme est fourni au candidat. Cet exercice ne demande pas l\u2019\u00e9criture compl\u00e8te d\u2019un programme, mais permet de valider des comp\u00e9tences de programmation suivant des modalit\u00e9s vari\u00e9es : le candidat doit, par exemple, compl\u00e9ter un programme \u00ab \u00e0 trous \u00bb afin de r\u00e9pondre \u00e0 une sp\u00e9cification donn\u00e9e, ou encore compl\u00e9ter un programme pour le documenter, ou encore compl\u00e9ter un programme en ajoutant des assertions, etc.</p>"},{"location":"epreuve_pratique/#banque-dexercices","title":"Banque d'exercices","text":"<p>Textes r\u00e8glementaires</p> <ul> <li>https://eduscol.education.fr/2661/banque-des-epreuves-pratiques-de-specialite-nsi</li> </ul> <p>La banque d'exercices est publique et peut \u00eatre t\u00e9l\u00e9charg\u00e9e en un pdf unique ici.</p>"},{"location":"index_annales/","title":"Annales du bac","text":""},{"location":"index_annales/#annee-2021","title":"Ann\u00e9e 2021","text":""},{"location":"index_annales/#epreuves-ecrites","title":"Epr\u00e9uves \u00e9crites","text":""},{"location":"index_annales/#annee-2022","title":"Ann\u00e9e 2022","text":""},{"location":"index_annales/#epreuves-ecrites_1","title":"Epr\u00e9uves \u00e9crites","text":""},{"location":"progression/","title":"Progression","text":""},{"location":"progression/#devoirs-sur-lannee","title":"Devoirs sur l'ann\u00e9e","text":"Devoir Le DS 1- Langage SQL DS 3- Pile-File et Protocole de Routage 16/11/2023 DS 4- Les tris - Diviser pour r\u00e9gner 02/12/2023 DS 5- Les arbres binaires 16/12/2023 DS 6- Gestion Processus 19/01/2023"},{"location":"Algo/T5_2_algo_tri%20copy/","title":"Macro Rendering Error","text":"<p>File: <code>Algo/T5_2_algo_tri copy.md</code></p> <p>UndefinedError: 'niveau' is undefined</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 1, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\njinja2.exceptions.UndefinedError: 'niveau' is undefined\n</code></pre>"},{"location":"Algo/T5_2_algo_tri/","title":"Macro Rendering Error","text":"<p>File: <code>Algo/T5_2_algo_tri.md</code></p> <p>KeyError: 7</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 7\n</code></pre>"},{"location":"Algo/T5_3_Diviser_pour_regner/","title":"Macro Rendering Error","text":"<p>File: <code>Algo/T5_3_Diviser_pour_regner.md</code></p> <p>KeyError: 8</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 8\n</code></pre>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/","title":"Sujet BAC 8 :  \u00a0 Diviser pour r\u00e9gner","text":""},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#france-2021","title":"France 2021","text":"<p>Sujet n\u00b01 : France 2021</p> <p>Cet exercice porte sur l\u2019algorithme de tri fusion, qui s\u2019appuie sur la m\u00e9thode dite de \u00ab diviser pour r\u00e9gner \u00bb.</p> <p>Question 1</p> Enonc\u00e9Solution <p>a. Quel est l\u2019ordre de grandeur du co\u00fbt, en nombre de comparaisons, de l\u2019algorithme de tri fusion pour une liste de longueur ? b. Citer le nom d\u2019un autre algorithme de tri. Donner l\u2019ordre de grandeur de son co\u00fbt, en nombre de comparaisons, pour une liste de longueur . Comparer ce co\u00fbt \u00e0 celui du tri fusion. Aucune justification n\u2019est attendue.  </p> <p>a. \\(O(nlog_2(n))\\) b. L\u2019algorithme de tri par insertion a une complexit\u00e9 en temps dans le pire des cas en \\(O(n^2)\\). L\u2019algorithme du tri par insertion est moins efficace que l\u2019algorithme de tri fusion.  </p> <p>L\u2019algorithme de tri fusion utilise deux fonctions moitie_gauche et moitie_droite qui prennent en argument une liste L et renvoient respectivement : </p> <ul> <li>la sous-liste de L form\u00e9e des \u00e9l\u00e9ments d\u2019indice strictement inf\u00e9rieur \u00e0 <code>len(L)//2</code> ;  </li> <li>la sous-liste de L form\u00e9e des \u00e9l\u00e9ments d\u2019indice sup\u00e9rieur ou \u00e9gal \u00e0 <code>len(L)//2</code>.  </li> </ul> <p>On rappelle que la syntaxe a//b d\u00e9signe la division enti\u00e8re de a par b.  </p> <p>Par exemple, \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; L = [3, 5, 2, 7, 1, 9, 0]\n&gt;&gt;&gt; moitie_gauche(L)\n[3, 5, 2]\n&gt;&gt;&gt; moitie_droite(L)\n[7, 1, 9, 0]\n&gt;&gt;&gt; M = [4, 1, 11, 7]\n&gt;&gt;&gt; moitie_gauche(M)\n[4, 1]\n&gt;&gt;&gt; moitie_droite(M)\n[11, 7]\n</code></pre></p> <p>L\u2019algorithme utilise aussi une fonction fusion qui prend en argument deux listes tri\u00e9es L1 et L2 et renvoie une liste L tri\u00e9e et compos\u00e9e des \u00e9l\u00e9ments de L1 et L2. On donne ci-dessous le code python d\u2019une fonction r\u00e9cursive tri_fusion qui prend en argument une liste L et renvoie une nouvelle liste tri\u00e9e form\u00e9e des \u00e9l\u00e9ments de L.</p> \ud83d\udc0d Script Python<pre><code>def tri_fusion(L):\n    n = len(L)\n    if n&lt;=1 :\n        return L\n    print(L)\n    mg = moitie_gauche(L)\n    md = moitie_droite(L)\n    L1 = tri_fusion(mg)\n    L2 = tri_fusion(md)\n    return fusion(L1, L2)\n</code></pre> <p>Question 2</p> Enonc\u00e9Solution <p>Donner la liste des affichages produits par l\u2019appel suivant. \ud83d\udc0d Script Python<pre><code>tri_fusion([7, 4, 2, 1, 8, 5, 6, 3])\n</code></pre></p> <p>Voici l\u2019affichage obtenu : \ud83d\udc0d Script Python<pre><code>[7, 4, 2, 1, 8, 5, 6, 3]\n[7, 4, 2, 1]\n[7,4]\n[2, 1]\n[8, 5, 6, 3]\n[8, 5]\n[6, 3]\n</code></pre> r\u00e9sultat renvoy\u00e9 par la fonction : <code>[1, 2, 3, 4, 5, 6, 7, 8]</code></p> <p>On s\u2019int\u00e9resse d\u00e9sormais \u00e0 diff\u00e9rentes fonctions appel\u00e9es par tri_fusion, \u00e0 savoir moitie_droite et fusion.  </p> <p>Question 3</p> Enonc\u00e9Solution <p>Ecrire la fonction moitie_droite.</p> \ud83d\udc0d Script Python<pre><code>def moitie_droite(L):\n    n = len(L)\n    deb = n//2\n    tab = []\n    for i in range(deb,n):\n        tab.append(L[i])\n    return tab\n</code></pre> <p>Question 4</p> Enonc\u00e9Solution <p>On donne ci-dessous une version incompl\u00e8te de la fonction fusion. \ud83d\udc0d Script Python<pre><code>def fusion(L1, L2):\n    L = []\n    n1 = len(L1)\n    n2 = len(L2)\n    i1 = 0\n    i2 = 0\n    while i1 &lt; n1 or i2 &lt; n2 :\n        if i1 &gt;= n1:\n            L.append(L2[i2])\n            i2 = i2 + 1\n        elif i2 &gt;= n2:\n            L.append(L1[i1])\n            i1 = i1 + 1\n        else:\n            e1 = L1[i1]\n            e2 = L2[i2]\n\n\n\n    return L\n</code></pre> Dans cette fonction, les entiers i1 et i2 repr\u00e9sentent respectivement les indices des \u00e9l\u00e9ments des listes L1 et L2 que l\u2019on souhaite comparer :  </p> <ul> <li>Si aucun des deux indices n\u2019est valide, la boucle while est interrompue ;  </li> <li>Si i1 n\u2019est plus un indice valide, on va ajouter \u00e0 L les \u00e9l\u00e9ments de L2 \u00e0 partir de l\u2019indice i2 ;  </li> <li>Si i2 n\u2019est plus un indice valide, on va ajouter \u00e0 L les \u00e9l\u00e9ments de L1 \u00e0 partir de l\u2019indice i1 ;  </li> <li>Sinon, le plus petit \u00e9l\u00e9ment non encore trait\u00e9 est ajout\u00e9 \u00e0 L et on d\u00e9cale l\u2019indice correspondant.  </li> </ul> <p>\u00c9crire sur la copie les instructions manquantes des lignes 17 \u00e0 22 permettant d\u2019ins\u00e9rer dans la liste L les \u00e9l\u00e9ments des listes L1 et L2 par ordre croissant. </p> \ud83d\udc0d Script Python<pre><code>def fusion(L1, L2):\n    L=[]\n    n1 = len(L1)\n    n2 = len(L2)\n    i1 = 0\n    i2 = 0\n    while i1&lt;n1 or i2&lt;n2:\n        if i1&gt;=n1:\n            L.append(L2[i2])\n            i2 = i2+1\n        elif i2&gt;=n2:\n            L.append(L1[i1])\n            i1=i1+1\n        else :\n            e1 = L1[i1]\n            e2 = L2[i2]\n            if e1 &gt; e2:\n                L.append(e2)\n                i2 = i2 + 1\n            else :\n                L.append(e1)\n                i1 = i1 + 1\n    return L\n</code></pre>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#polynesie-2021","title":"Polyn\u00e9sie 2021","text":"<p>Sujet n\u00b02 : BAC Polyn\u00e9sie 2021</p> <p>Cet exercice traite principalement du th\u00e8me \u00ab algorithmique, langages et programmation \u00bb. Le but est de comparer le tri par insertion (l'un des algorithmes \u00e9tudi\u00e9s en 1\u00e8re NSI pour trier un tableau) avec le tri fusion (un algorithme qui applique le principe de \u00ab diviser pour r\u00e9gner \u00bb).</p>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#partie-a-manipulation-dune-liste-en-python","title":"Partie A : Manipulation d\u2019une liste en Python","text":"<p>Question A.1</p> Enonc\u00e9eSolution <p>Donner les affichages obtenus apr\u00e8s l\u2019ex\u00e9cution du code Python suivant.  \ud83d\udc0d Script Python<pre><code>notes = [8, 7, 18, 14, 12, 9, 17, 3]\nnotes[3] = 16\nprint(len(notes))\nprint(notes)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; 8\n&gt;&gt;&gt; [8, 7, 18, 16, 12, 9, 17, 3]\n</code></pre> <p>`!!! fabquestion \"Question A.2\"     === \"Enonc\u00e9\"         \u00c9crire un code Python permettant d'afficher les \u00e9l\u00e9ments d'indice 2 \u00e0 4 de la liste notes.</p> \ud83d\udccb Texte<pre><code>=== \"Solution\"\n\n    ```python\n    for i in range(2,5):\n        print(notes[i])\n    ```\n</code></pre>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#partie-b-tri-par-insertion","title":"Partie B : Tri par insertion","text":"<p>Le tri par insertion est un algorithme efficace qui s'inspire de la fa\u00e7on dont on peut trier une poign\u00e9e de cartes. On commence avec une seule carte dans la main gauche (les autres cartes sont en tas sur la table) puis on pioche la carte suivante et on l'ins\u00e8re au bon endroit dans la main gauche.</p> <p>Question B.1</p> Enonc\u00e9Solution <p>Voici une impl\u00e9mentation en Python de cet algorithme. Recopier et compl\u00e9ter les lignes 6 et 7 surlign\u00e9es (uniquement celles-ci). \ud83d\udc0d Script Python<pre><code>def tri_insertion(liste):\n\"\"\" trie par insertion la liste en param\u00e8tre \"\"\"\n    for indice_courant in range(1,len(liste)):\n        element_a_inserer = liste[indice_courant]\n        i = indice_courant - 1\n        while i &gt;= 0 and liste[i] &gt; ................................ :\n            liste[...........] = liste[...........]\n            i = i - 1\n            liste[i + 1] = element_a_inserer\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(liste):\n    for indice_courant in range(1, len(liste)):\n        element_a_inserer = liste[indice_courant]\n        i = indice_courant - 1\n        while i &gt;= 0 and liste[i] &gt; element_a_inserer:\n            liste[i+1] = liste[i]\n            i=i-1\n        liste[i + 1] = element_a_inserer\n</code></pre> <p>On a \u00e9crit dans la console les instructions suivantes : \ud83d\udc0d Script Python<pre><code>notes = [8, 7, 18, 14, 12, 9, 17, 3]\ntri_insertion(notes)\nprint(notes)\n</code></pre> On a obtenu l'affichage suivant :  \ud83d\udc0d Script Python<pre><code>[3, 7, 8, 9, 12, 14, 17, 18]\n</code></pre></p> <p>On s'interroge sur ce qui s\u2019est pass\u00e9 lors de l\u2019ex\u00e9cution de tri_insertion(notes).  </p> <p>Question B.2</p> Enonc\u00e9Solution <p>Donner le contenu de la liste notes apr\u00e8s le premier passage dans la boucle for.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; [7, 8, 18, 14, 12, 9, 17, 3]\n</code></pre> <p>Question B.3</p> Enonc\u00e9Solution <p>Donner le contenu de la liste notes apr\u00e8s le troisi\u00e8me passage dans la boucle for.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; [7, 8, 14, 18, 12, 9, 17, 3]\n</code></pre>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#partie-c-tri-fusion","title":"Partie C : Tri fusion","text":"<p>L'algorithme de tri fusion suit le principe de \u00ab diviser pour r\u00e9gner \u00bb.  </p> <p>(1) Si le tableau \u00e0 trier n\u2019a qu\u2019un \u00e9l\u00e9ment, il est d\u00e9j\u00e0 tri\u00e9. (2) Sinon, s\u00e9parer le tableau en deux parties \u00e0 peu pr\u00e8s \u00e9gales. (3) Trier les deux parties avec l\u2019algorithme de tri fusion. (4) Fusionner les deux tableaux tri\u00e9s en un seul tableau. </p> <p>source : Wikipedia  </p> <p>Question C.1</p> Enonc\u00e9Solution <p>Cet algorithme est-il it\u00e9ratif ou r\u00e9cursif ? Justifier en une phrase.</p> <p>r\u00e9cursif : \u00e0 l\u2019\u00e9tape (3) l\u2019algorithme de tri fusion s\u2019appelle lui-m\u00eame.</p> <p>Question C.2</p> Enonc\u00e9Solution <p>Expliquer en trois lignes comment faire pour rassembler dans une main deux tas d\u00e9j\u00e0 tri\u00e9s de cartes, la carte en haut d'un tas \u00e9tant la plus petite de ce m\u00eame tas ; la deuxi\u00e8me carte d'un tas n'\u00e9tant visible qu'apr\u00e8s avoir retir\u00e9 la premi\u00e8re carte de ce tas.</p> <ol> <li>Comparer les cartes du haut des 2 tas.  </li> <li>Placer la carte de valeur plus faible dans la main.  </li> <li>Recommencer l\u2019\u00e9tape 1 jusqu\u2019\u00e0 \u00e9puisement des tas.</li> </ol> <p>\u00c0 la fin du proc\u00e9d\u00e9, les cartes en main doivent \u00eatre tri\u00e9es par ordre croissant. Une fonction fusionner a \u00e9t\u00e9 impl\u00e9ment\u00e9e en Python en s'inspirant du proc\u00e9d\u00e9 de la question pr\u00e9c\u00e9dente. Elle prend quatre arguments : la liste qui est en train d'\u00eatre tri\u00e9e, l'indice o\u00f9 commence la sous-liste de gauche \u00e0 fusionner, l'indice o\u00f9 termine cette sousliste, et l'indice o\u00f9 se termine la sous-liste de droite.  </p> <p>Question C.3</p> Enonc\u00e9Solution <p>Voici une impl\u00e9mentation de l\u2019algorithme de tri fusion. Recopier et compl\u00e9ter les lignes 8, 9 et 10 surlign\u00e9es (uniquement celles-ci).</p> <p>\ud83d\udc0d Script Python<pre><code>from math import floor\n\ndef tri_fusion (liste, i_debut, i_fin):\n    if i_debut &lt; i_fin:\n        i_partage = floor((i_debut + i_fin) / 2)\n        tri_fusion(liste, i_debut, ..............................)\n        tri_fusion(liste, ..................................., i_fin)\n        fusionner(liste, ........................., ........................., ......................)\n</code></pre> Remarque : la fonction floor renvoie la partie enti\u00e8re du nombre pass\u00e9 en param\u00e8tre. </p> \ud83d\udc0d Script Python<pre><code>from math import floor\n\ndef tri_fusion (liste, i_debut, i_fin):\n    if i_debut &lt; i_fin:\n        i_partage = floor((i_debut + i_fin) / 2) # milieu pour diviser le tableau en deux moiti\u00e9s\n        tri_fusion(liste, i_debut, i_partage) # Appel tri_fusion pour 1\u00e8re moiti\u00e9 du tableau\n        tri_fusion(liste, i_partage + 1, i_fin) # Appel tri_fusion pour 2\u00e8me moiti\u00e9 du tableau\n        fusionner(liste, i_debut, i_fin, i_partage) # Fusion des deux moiti\u00e9s tri\u00e9es\n</code></pre> <p>Question C.4</p> Enonc\u00e9Solution <p>Expliquer le r\u00f4le de la premi\u00e8re ligne du code de la question 3.</p> <p>permet d\u2019importer la fonction floor() du module math utilis\u00e9e \u00e0 la ligne 7</p>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#partie-d-comparaison-du-tri-par-insertion-et-du-tri-fusion","title":"Partie D : Comparaison du tri par insertion et du tri fusion","text":"<p>Voici une illustration des \u00e9tapes d\u2019un tri effectu\u00e9 sur la liste <code>[3, 41, 52, 26, 38, 57, 9, 49]</code>.</p> <p>[:.center}]</p> <p>Question D.1</p> Enonc\u00e9Solution <p>Quel algorithme a \u00e9t\u00e9 utilis\u00e9 : le tri par insertion ou le tri fusion ? Justifier.</p> <p>tri par fusion : \u00e0 chaque \u00e9tape, le tri se fait par fusion de 2 tas d\u00e9j\u00e0 tri\u00e9s</p> <p>Question D.2</p> Enonc\u00e9Solution <p>Identifier le tri qui a une complexit\u00e9, dans le pire des cas, en \\(O(n^2)\\) et identifier le tri qui a une complexit\u00e9, dans le pire des cas, en \\(O(n log_2 n)\\). Remarque : n repr\u00e9sente la longueur de la liste \u00e0 trier.</p> <ul> <li>tri par insertion : \\(O(n^2)\\) </li> <li>tri par fusion : \\(O(n.log_2 n)\\)</li> </ul> <p>Question D.3</p> Enonc\u00e9Solution <p>Justifier bri\u00e8vement ces deux complexit\u00e9s. </p> <ul> <li>Le tri par insertion utilise 2 boucles imbriqu\u00e9es, soit dans le pire des cas ~ \\(\\dfrac{1}{2}  imes n(n+1)\\) op\u00e9rations soir \\(O(n^2)\\).  </li> <li>Le tri par fusion, divise la liste \u00e0 trier par 2 pour chaque it\u00e9rations, soit ~ \\(log_2 n\\) op\u00e9rations d'o\u00f9 une complexit\u00e9 global \\(O(n.log_2 n)\\).</li> </ul> <p>Inversions dans une liste : FRANCE CANDIDAT LIBRE SUJET 1</p> <p>Cet exercice traite de manipulation de tableaux, de r\u00e9cursivit\u00e9 et du paradigme \u00ab diviser pour r\u00e9gner \u00bb. </p> <p>Dans un tableau Python d'entiers tab, on dit que le couple d\u2019indices (\u0745,\u0746) forme une inversion lorsque \u0745 &lt; \u0746 et tab[i] &gt; tab[j]. On donne ci-dessous quelques exemples.  </p> <ul> <li>Dans le tableau [1, 5, 3, 7], le couple d\u2019indices (1,2) forme une inversion car 5&gt; 3. Par contre, le couple (1,3) ne forme pas d'inversion car 5&lt;7. Il n\u2019y a qu\u2019une inversion dans ce tableau.  </li> <li>Il y a trois inversions dans le tableau [1, 6, 2, 7, 3], \u00e0 savoir les couples d'indices (1, 2), (1, 4) et (3, 4).  </li> <li>On peut compter six inversions dans le tableau [7, 6, 5, 3] : les couples d'indices (0, 1), (0, 2), (0, 3), (1, 2), (1, 3) et (2, 3).  </li> </ul> <p>On se propose dans cet exercice de d\u00e9terminer le nombre d\u2019inversions dans un tableau quelconque.  </p> <p>Questions pr\u00e9liminaires  </p> <p>Question 1</p> Enonc\u00e9Solution <p>Expliquer pourquoi le couple (1, 3) est une inversion dans le tableau [4, 8, 3, 7].</p> <p>\u00c0 l\u2019indice 1 du tableau on trouve 8, \u00e0 l\u2019indice 3 on trouve 7. Nous avons 1 &lt; 3 alors que 8 &gt; 7, nous avons donc bien une inversion</p> <p>Question2</p> Enonc\u00e9Solution <p>Justifier que le couple (2, 3) n\u2019en est pas une.</p> <p>\u00c0 l\u2019indice 2 du tableau on trouve 3, \u00e0 l\u2019indice 3 on trouve 7. Nous avons 2 &lt; 3 et 3 &lt; 7, nous n\u2019avons donc pas d\u2019inversion</p>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#partie-a-methode-iterative","title":"Partie A : M\u00e9thode it\u00e9rative","text":"<p>Le but de cette partie est d\u2019\u00e9crire une fonction it\u00e9rative nombre_inversion qui renvoie le nombre d\u2019inversions dans un tableau. Pour cela, on commence par \u00e9crire une fonction fonction1 qui sera ensuite utilis\u00e9e pour \u00e9crire la fonction nombre_inversion.</p> <p>Question A.1</p> Enonc\u00e9Solution <p>On donne la fonction suivante. \ud83d\udc0d Script Python<pre><code>def fonction1(tab, i):\n    nb_elem = len(tab)\n    cpt = 0\n    for j in range(i+1, nb_elem):\n        if tab[j] &lt; tab[i]:\n            cpt += 1\n    return cpt\n</code></pre></p> <p>a. Indiquer ce que renvoie la fonction1(tab, i) dans les cas suivants.  </p> <ul> <li>Cas n\u00b01 : tab = [1, 5, 3, 7] et i = 0.  </li> <li>Cas n\u00b02 : tab = [1, 5, 3, 7] et i = 1.  </li> <li>Cas n\u00b03 : tab = [1, 5, 2, 6, 4] et i = 1.  </li> </ul> <p>b. Expliquer ce que permet de d\u00e9terminer cette fonction. </p> <p>a.  </p> <ul> <li>cas n\u00b01 : 0</li> <li>cas n\u00b02 : 1</li> <li>cas n\u00b03 : 2</li> </ul> <p>b.  </p> <p>Question A.2</p> Enonc\u00e9Solution <p>En utilisant la fonction pr\u00e9c\u00e9dente, \u00e9crire une fonction nombre_inversion(tab) qui prend en argument un tableau et renvoie le nombre d\u2019inversions dans ce tableau. On donne ci-dessous les r\u00e9sultats attendus pour certains appels. \ud83d\udccb Texte<pre><code>&gt;&gt;&gt; nombre_inversions([1, 5, 7])\n0\n&gt;&gt;&gt; nombre_inversions([1, 6, 2, 7, 3])\n3\n&gt;&gt;&gt; nombre_inversions([7, 6, 5, 3])\n6\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nombre_inversions(tab):\n    nb_inv = 0\n    n = len(tab)\n    for i in range(n-1):\n        nb_inv = nb_inv + fonction1(tab, i)\n    return nb_inv\n</code></pre> <p>Question A.3</p> Enonc\u00e9Solution <p>Quelle est l\u2019ordre de grandeur de la complexit\u00e9 en temps de l'algorithme obtenu ? Aucune justification n'est attendue.</p> <p>L\u2019ordre de grandeur de la complexit\u00e9 en temps de l\u2019algorithme est \\(O(n^2)\\)</p>"},{"location":"Algo/T5_4_Diviser_pour_regner_BAC/#partie-b-methode-recursive","title":"Partie B : M\u00e9thode r\u00e9cursive","text":"<p>Le but de cette partie est de concevoir une version r\u00e9cursive de la fonction nombre_inversion. On d\u00e9finit pour cela des fonctions auxiliaires.</p> <p>Question B.1</p> Enonc\u00e9Solution <p>Donner le nom d\u2019un algorithme de tri ayant une complexit\u00e9 meilleure que quadratique. Dans la suite de cet exercice, on suppose qu\u2019on dispose d'une fonction tri(tab) qui prend en argument un tableau et renvoie un tableau contenant les m\u00eames \u00e9l\u00e9ments rang\u00e9s dans l'ordre croissant.  </p> <p>Le tri fusion a une complexit\u00e9 en \\(O(n.log_2 (n))\\)</p> <p>Question B.2</p> Enonc\u00e9Solution <p>\u00c9crire une fonction moitie_gauche(tab) qui prend en argument un tableau tab et renvoie un nouveau tableau contenant la moiti\u00e9 gauche de tab. Si le nombre d'\u00e9l\u00e9ments de tab est impair, l'\u00e9l\u00e9ment du centre se trouve dans cette partie gauche. On donne ci-dessous les r\u00e9sultats attendus pour certains appels. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moitie_gauche([])\n[]\n&gt;&gt;&gt; moitie_gauche([4, 8, 3])\n[4, 8]\n&gt;&gt;&gt; moitie_gauche ([4, 8, 3, 7])\n[4, 8]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moitie_gauche(tab):\n    n = len(tab)\n    nvx_tab = []\n    if n==0:\n        return []\n    mil = n//2\n    if n%2 == 0:\n        lim = mil\n    else :\n        lim =mil+1\n    for i in range(lim):\n        nvx_tab.append(tab[i])\n    return nvx_tab\n</code></pre> <p>une autre possibilit\u00e9 un peu plus concise :</p> \ud83d\udc0d Script Python<pre><code>def moitie_gauche(tab):\n    return [tab[i] for i in range(len(tab)//2+len(tab)%2)]\n</code></pre> <p>Dans la suite, on suppose qu\u2019on dispose de la fonction moitie_droite(tab) qui renvoie la moiti\u00e9 droite sans l\u2019\u00e9l\u00e9ment du milieu. </p> <p>Question B.3</p> Enonc\u00e9Solution <p>On suppose qu\u2019une fonction nb_inv_tab(tab1, tab2)a \u00e9t\u00e9 \u00e9crite. Cette fonction renvoie le nombre d\u2019inversions du tableau obtenu en mettant bout \u00e0 bout les tableaux tab1 et tab2, \u00e0 condition que tab1 et tab2 soient tri\u00e9s dans l\u2019ordre croissant. On donne ci-dessous deux exemples d\u2019appel de cette fonction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_inv_tab([3, 7, 9], [2, 10])\n3\n&gt;&gt;&gt; nb_inv_tab([7, 9, 13], [7, 10, 14])\n3\n</code></pre></p> <p>En utilisant la fonction nb_inv_tab et les questions pr\u00e9c\u00e9dentes, \u00e9crire une fonction r\u00e9cursive nb_inversions_rec(tab) qui permet de calculer le nombre d'inversions dans un tableau. * Cette fonction renverra le m\u00eame nombre que nombre_inversions(tab) de la partie A. On proc\u00e9dera de la fa\u00e7on suivante :  </p> <ul> <li>S\u00e9parer le tableau en deux tableaux de tailles \u00e9gales (\u00e0 une unit\u00e9 pr\u00e8s).</li> <li>Appeler r\u00e9cursivement la fonction nb_inversions_rec pour compter le nombre d\u2019inversions dans chacun des deux tableaux.  </li> <li>Trier les deux tableaux (on rappelle qu'une fonction de tri est d\u00e9j\u00e0 d\u00e9finie).  </li> <li>Ajouter au nombre d'inversions pr\u00e9c\u00e9demment compt\u00e9es le nombre renvoy\u00e9 par la fonction nb_inv_tab avec pour arguments les deux tableaux tri\u00e9s.  </li> </ul> \ud83d\udc0d Script Python<pre><code>def nb_inversions_rec(tab):\n    if len(tab) &gt; 1:\n        tab_g = moitie_gauche(tab)\n        tab_d = moitie_droite(tab)\n        return nb_inv_tab(tri(tab_g), tri(tab_d))\n        nb_inversions_rec(tab_g) + nb_inversions_rec(tab_d)\n    else:\n        return 0\n</code></pre> <p>ou </p> \ud83d\udc0d Script Python<pre><code>def nb_inversions_rec(tab : list, n : int = 0) -&gt; int:\n    if len(tab) &lt;= 1:\n        return 0\n    else:\n        #S\u00e9parer le tableau en deux tableaux de tailles \u00e9gales (\u00e0 une unit\u00e9 pr\u00e8s).\n        gauche = moitie_gauche(tab)\n        droite = moitie_droite(tab)\n        #Compter le nombre d\u2019inversions dans chacun des deux tableaux.\n        n = nb_inv_tab(sorted(gauche), sorted(droite))\n        #Appeler r\u00e9cursivement la fonction nb_inversions_rec\n        return n + nb_inversions_rec(gauche, n) + nb_inversions_rec(droite, n)\n</code></pre> <p>Quart de tour d'une image</p> <ol> <li> <p>Pour faire tourner une image carr\u00e9 de c\u00f4t\u00e9 \\(2^n\\) pixels d'un quart de tour \u00e0 gauche, on propose la m\u00e9thode suivante :</p> <ul> <li>Diviser l'image en quatre quarts Q1,Q2,Q3,Q4  </li> <li>Faire tourner chacun des quarts d'un quart de tour \u00e0 gauche  </li> <li>Permuter chaque quart afin de le placer correctement  </li> </ul> <p>Expliquer pourquoi cette m\u00e9thode est une illustration de la technique diviser pour r\u00e9gner.</p> </li> <li> <p>C'est algorithme est-il du type it\u00e9ratif ou r\u00e9cursif ? Justifier.</p> </li> <li> <p>D\u00e9coupage de l'image en quatres quarts \u00e0 l'aide du module pil de manipulation d'images</p> <ol> <li>On a repr\u00e9sent\u00e9 une image carr\u00e9 de \\(n\\) pixels de c\u00f4t\u00e9 avec le syst\u00e8me de coordonn\u00e9es d'une image dans le module pil. Quelles sont les coordonn\u00e9es manquantes ?  </li> <li> <p>La m\u00e9thode <code>crop</code> du module pil permet d'extraire une portion rectangulaire d'une image en donnant les coordonn\u00e9es des coins sup\u00e9rieur gauche et inf\u00e9rieur droit du rectangle. Compl\u00e9ter la fonction Python suivante qui prend en entr\u00e9e une image et retourne les quatre quarts de cette image.</p> \ud83d\udc0d Script Python<pre><code>    from PIL import Image\n    def partage_quart(image):\n        n = image.width\n        if n &gt; 1:\n            q1 = image.crop((0,0,n//2,n//2))\n            q2 = image.crop((...,...,...,...))\n            q3 = image.crop((...,...,...,...))\n            q4 = image.crop((...,...,...,...))\n            return q1,q2,q3,q4\n</code></pre> </li> <li> <p>Tester cette fonction (on pourra utiliser cette image carr\u00e9)</p> <p>Aide</p> <ul> <li>La cr\u00e9ation d'une image dans pil \u00e0 partir d'un fichier s'effectue \u00e0 l'aide de : \ud83d\udc0d Script Python<pre><code>    img_test = Image.open(\"mettre ici le nom du fichier\")\n</code></pre></li> <li>La visualisation d'une image s'effectue \u00e0 l'aide de : \ud83d\udc0d Script Python<pre><code>    img_test.show()\n</code></pre></li> </ul> </li> <li> <p>Ajouter une instruction <code>assert</code> permettant de v\u00e9rifier que l'image est carr\u00e9 (c'est \u00e0 dire <code>image.width==image.height</code>)</p> </li> <li>Ajouter une instruction <code>assert</code> permettant de v\u00e9rifier que <code>n</code> est pair.</li> </ol> </li> <li> <p>Compl\u00e9ter puis tester la fonction python qui impl\u00e9mente l'algorithme d\u00e9crit \u00e0 la question 1. \ud83d\udc0d Script Python<pre><code>    def quart_tour(image):\n        n = image.width\n        # Partage de l'image en quatre quarts\n        if n&gt;1:\n            q1,q2,q3,q4 = partage_quart(image)\n            # Rotation de chacun des quarts\n            rq1 = quart_tour(q1)\n            rq2 = quart_tour(q2)\n            rq3 = quart_tour(q3)\n            rq4 = quart_tour(q4)\n            # Reconstruction de l'image\n            resultat = Image.new('RGB',image.size)\n            resultat.paste(rq2,(0,0))\n            resultat.paste(...,(n//2,0))\n            resultat.paste(rq1,(...,...))\n            resultat.paste(...,(...,...))\n            return resultat\n        else:\n            return image\n</code></pre></p> </li> </ol>"},{"location":"Algo/T5_6_algo_arbre_BAC/","title":"Sujet BAC 11 :  \u00a0 Algorihtmes Arbres Binaires","text":""},{"location":"Algo/T5_6_algo_arbre_BAC/#amerique-du-sud-2022-j2","title":"Am\u00e9rique du Sud 2022 J2","text":"<p>Exo</p> <p>Dans un arbre binaire, chaque noeud admet au plus deux enfants, appel\u00e9s sous-arbre gauche et sous-arbre droit. On consid\u00e8re dans cet exercice des arbres binaires \u00e9tiquet\u00e9s avec des nombres entiers. On d\u00e9finit un chemin racine-feuille dans un tel arbre comme une liste ordonn\u00e9e de noeuds telle que :  </p> <ul> <li>le premier noeud est la racine  </li> <li>chaque noeud suivant est enfant du pr\u00e9c\u00e9dent;  </li> <li>le dernier noeud est une feuille.  </li> </ul> <p>On appellera somme d'un chemin racine-feuille la somme des \u00e9tiquettes des noeuds du chemin. Enfin, la plus graande somme racine-feuille d'un arbre est la plus grande somme qu'il est possible d'obtenir en consid\u00e9rant tous les chemins racine-feuille de l'arbre.  </p> <p>Question 1</p> <p>D\u00e9terminer la plus grande somme racine-feuille de l'arbre repr\u00e9sent\u00e9 ci-dessous <pre><code>graph TD  \n    A(\"2\") --&gt; B(\"7\") \n    B --&gt; D(\"4\")\n    B --&gt; E(\"1\")\n    A --&gt; C(\"5\")\n    C --&gt; C1(\"3\")\n    C --&gt; C2(\"8\")\n    D --&gt; D1(\"2\")\n    D --&gt; D2(\"3\")\n    E --&gt; F(\" \")\n    E --&gt; E1(\"5\")\n    linkStyle 8 stroke-width:0px;\n    style F opacity:0;\n    C1 --&gt; C3(\" \")\n    C1 --&gt; C4(\"1\")\n    C2 --&gt; C5(\" \")\n    C2 --&gt; C6(\" \")\n    linkStyle 10 stroke-width:0px;\n    style C3 opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style C5 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style C6 opacity:0;</code></pre></p> R\u00e9ponse <p>La plus grand somme racine-feuille de cette arbre est 16, elle est obtenu pour la branche en rouge dans le sch\u00e9ma suivant : <pre><code>    graph TD\n    A[\"2\"] --&gt; B[\"7\"]\n    A --&gt; C[\"5\"]\n    B --&gt; D[\"4\"]\n    B --&gt; E[\"1\"]\n    C --&gt; F[\"3\"]\n    C --&gt; G[\"8\"]\n    D --&gt; H[\"2\"]\n    D --&gt; I[\"3\"]\n    E --&gt; V1[\" \"]\n    E --&gt; J[\"5\"]\n    F --&gt; V2[\" \"]\n    F --&gt; K[\"1\"]\n    style V1 opacity:0;\n    style V2 opacity:0;\n    linkStyle 8 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 10 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 0 stroke:#FF0000,stroke-width:2px\n    linkStyle 2 stroke:#FF0000,stroke-width:2px\n    linkStyle 7 stroke:#FF0000,stroke-width:2px</code></pre></p> <p>Question 2</p> <p>La class <code>Noeud</code> ci-dessous impl\u00e9mente le type abstrait d'arbre binaire.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self,v):\n        self.etiquette = v\n        self.sag = None\n        self.sad = None\n\n    def niveau(self):\n        if self.sag != None and self.sad != None:\n            hg = self.sag.niveau()\n            hd = self.sad.niveau()\n            return 1 + max(hg,hd)\n        if self.sag != None:\n            return self.sag.niveau() + 1\n        if self.sad != None:\n            return self.sad.niveau() + 1\n        return 0\n\n    def modifier_sag(self,nsag):\n        self.sag = nsag\n\n    def modifier_sad(self,nsad):\n        self.sad = nsad\n</code></pre> <p>a. Ecrire une suite d'instructions utilisant la class <code>Noeud</code> permettant de repr\u00e9senter l'arbre ci-dessous : </p> <pre><code>graph TD  \n    A(\"2\") --&gt; B(\"7\") \n    B --&gt; D(\"4\")\n    B --&gt; E(\"1\")\n    A --&gt; C(\"5\")\n    C --&gt; C1(\" \")\n    C --&gt; C2(\"8\")\n    D --&gt; D2(\" \")\n    linkStyle 6 stroke-width:0px;\n    style D2 opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style C1 opacity:0;</code></pre> <p>b. Que renvoie l'appel de la m\u00e9thode <code>niveau</code> sur l'arbre ci-dessus ?</p> R\u00e9ponse <p>a. On peut \u00e9crire la suite d'instructions suivante : \ud83d\udc0d Script Python<pre><code>s2 = Noeud(2)\ns7 = Noeud(7)\ns5 = Noeud(5)\ns2.modifier_sag(s7)\ns2.modifier_sad(s5)\ns4 = Noeud(4)\ns1 = Noeud(1)\ns7.modifier_sag(s4)\ns7.modifier_sad(s1)\ns8 = Noeud(8)\ns5.modifier_sad(s8)\n</code></pre></p> <p>b. L'appel \u00e0 niveau sur cet arbre renvoie 3.</p> <p>Question 3</p> <p>S'inspirer du code de la m\u00e9thode <code>niveau</code> pour \u00e9crire une m\u00e9thode r\u00e9cursive <code>pgde_somme</code> qui renvoie la plus grande somme racine-feuille d'un arbre.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def pgde_somme(self):\n    if self.sag != None and self.sad!=None:\n        pgde_gauche = self.sag.pgde_somme()\n        pgde_droite = self.sad.pgde_somme()\n        return self.etiquette + max(pgde_gauche,pgde_droite)\n    if self.sag != None:\n        return self.etiquette + self.sag.pgde_somme()\n    if self.sad != None:\n        return self.etiquette + self.sad.pgde_somme()\n    return self.etiquette\n</code></pre> <p>Question 4</p> <p>On appelle arbre magique un arbre binaire dont toutes les sommes des chemins racine-feuille sont \u00e9gales.  </p> <p>a. Recopier et compl\u00e9ter l'arbre ci-dessous pour qu'il soit magique. <pre><code>graph TD  \n    A(\"5\") --&gt; B(\"...\") \n    B --&gt; D(\"4\")\n    B --&gt; E(\"...\")\n    A --&gt; C(\"5\")\n    C --&gt; C1(\"3\")\n    C --&gt; C2(\"...\")\n    D --&gt; D1(\"2\")\n    D --&gt; D2(\"...\")\n    E --&gt; F(\"...\")\n    E --&gt; E1(\"3\")\n    linkStyle 8 stroke-width:0px;\n    style F opacity:0;\n    C1 --&gt; C3(\"...\")\n    C1 --&gt; C4(\"1\")\n    C2 --&gt; C5(\"...\")\n    C2 --&gt; C6(\"...\")\n    linkStyle 10 stroke-width:0px;\n    style C3 opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style C5 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style C6 opacity:0;</code></pre> b. Un arbre est magique si ses sous-arbres sont magiques et qu'ils ont de plus la m\u00eame plus grande somme racine-feuille. Ecrire une m\u00e9thode r\u00e9cursive <code>est_magique</code> quie renvoie <code>True</code> si l'arbre est magique et <code>False</code> sinon.</p> R\u00e9ponse <p>a. Arbre compl\u00e9t\u00e9 : <pre><code>    graph TD\n    A[\"2\"] --&gt; B[\"3\"]\n    A --&gt; C[\"5\"]\n    B --&gt; D[\"4\"]\n    B --&gt; E[\"3\"]\n    C --&gt; F[\"3\"]\n    C --&gt; G[\"4\"]\n    D --&gt; H[\"2\"]\n    D --&gt; I[\"2\"]\n    E --&gt; V1[\" \"]\n    E --&gt; J[\"5\"]\n    F --&gt; V2[\" \"]\n    F --&gt; K[\"1\"]\n    style V1 opacity:0;\n    style V2 opacity:0;\n    style B stroke:#FF0000\n    style E stroke:#FF0000\n    style G stroke:#FF0000\n    style I stroke:#FF0000\n    linkStyle 8 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 10 stroke:#FFFFFF,stroke-width:0px</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>def est_magique(self):\n    if self.sad is not None and self.sag is not None:\n        return self.sad.est_magique() and self.sag.est_magique() and self.sag.pgde_somme() == self.sad.pgde_somme()\n    elif self.sad is not None:\n        return self.sad.est_magique()\n    elif self.sag is not None:\n        return self.sag.est_magique()\n    else:\n        return True\n</code></pre></p>"},{"location":"Algo/T5_6_algo_arbre_BAC/#2022-mayotte-j1","title":"2022 Mayotte J1","text":"<p>Exo</p> <p>On s\u2019int\u00e9resse dans cet exercice \u00e0 l\u2019\u00e9tude d\u2019un arbre g\u00e9n\u00e9alogique. Voici un extrait de l\u2019arbre g\u00e9n\u00e9alogique fictif d\u2019une personne nomm\u00e9e Albert Normand.  </p> <p>L\u2019arbre g\u00e9n\u00e9alogique est pr\u00e9sent\u00e9 avec les parents vers le bas et les enfants vers le haut.  </p> <p>Albert Normand est consid\u00e9r\u00e9 comme la g\u00e9n\u00e9ration 0. On consid\u00e8re ses parents comme la g\u00e9n\u00e9ration  1, ses grands-parents comme la g\u00e9n\u00e9ration 2 et ainsi de suite pour les g\u00e9n\u00e9rations pr\u00e9c\u00e9dentes. </p> <pre><code>graph TD  \n    A(\"Albert &lt;br&gt; Normand\") --&gt; B(\"Jules &lt;br&gt; Normand &lt;br&gt; P\u00e8re\") \n    B --&gt; D(\"Michel &lt;br&gt; Normand &lt;br&gt; (P\u00e8re)\")\n    B --&gt; E(\"H\u00e9l\u00e8ne &lt;br&gt; Breton &lt;br&gt; (M\u00e8re)\")\n    A --&gt; C(\"Marie &lt;br&gt; Comtois &lt;br&gt; (M\u00e8re)\")\n    C --&gt; C1(\"Thibaut &lt;br&gt; Comtois &lt;br&gt; (P\u00e8re)\")\n    C --&gt; C2(\"Gabrielle &lt;br&gt; Savoyard &lt;br&gt; (M\u00e8re)\")\n    D --&gt; D1(\"Jules &lt;br&gt; Normand &lt;br&gt; (P\u00e8re)\")\n    D --&gt; D2(\"Odile &lt;br&gt; Picard &lt;br&gt; (M\u00e8re)\")\n    E --&gt; F(\"Evariste &lt;br&gt; Breton &lt;br&gt; (P\u00e8re)\")\n    E --&gt; E1(\"Cam\u00e8lia &lt;br&gt; Charentais &lt;br&gt; (M\u00e8re)\")\n    C1 --&gt; C3(\"L\u00e9o &lt;br&gt; Comtois &lt;br&gt; (P\u00e8re)\")\n    C1 --&gt; C4(\"Eulalie &lt;br&gt; Lorrain &lt;br&gt; (M\u00e8re)\")\n    C2 --&gt; C5(\"Guillaume &lt;br&gt; Savoyard &lt;br&gt; (P\u00e8re)\")\n    C2 --&gt; C6(\"Janet &lt;br&gt; Chesterfield &lt;br&gt; (M\u00e8re)\")</code></pre> <p>MODELISATION DE L\u2019ARBRE L\u2019arbre g\u00e9n\u00e9alogique d\u2019un individu est mod\u00e9lis\u00e9 par un arbre :  </p> <ul> <li>chaque n\u0153ud de l\u2019arbre repr\u00e9sente un individu ;  </li> <li>le premier n\u0153ud du sous-arbre gauche d\u2019un individu est associ\u00e9 \u00e0 son p\u00e8re ;  </li> <li>le premier n\u0153ud du sous-arbre droit est associ\u00e9 \u00e0 sa m\u00e8re. </li> </ul> <p>IMPLEMENTATION DE L\u2019ARBRE Pour impl\u00e9menter l\u2019arbre, on utilise des notions de programmation orient\u00e9e objet. Chaque n\u0153ud de l\u2019arbre est repr\u00e9sent\u00e9 par un objet qui est l\u2019instance d\u2019une classe Noeud  ayant trois attributs. Ainsi l\u2019objet N de type Noeud aura les attributs suivants :  </p> <ul> <li><code>N.identite</code> de type tuple : <code>(prenom,nom)</code> de l\u2019individu r\u00e9f\u00e9renc\u00e9 par l\u2019objet N ;  </li> <li><code>N.gauche</code> de type arbre binaire : le sous-arbre gauche de l\u2019objet N ;  </li> <li><code>N.droit</code> de type arbre binaire : le sous-arbre droit de l\u2019objet N.</li> </ul> <p>Pour un individu, r\u00e9f\u00e9renc\u00e9 par l\u2019objet N de type Noeud, dont on ne connait pas les parents, on consid\u00e8rera que <code>N.gauche</code> et <code>N.droit</code> ont la valeur <code>None</code>. </p> <p>Question 1</p> <p>a. Expliquer en quoi cet arbre g\u00e9n\u00e9alogique est un arbre binaire. b. Pourquoi un arbre g\u00e9n\u00e9alogique n'est pas un arbre binaire de recherche (ABR) ? </p> R\u00e9ponse <p>a. Un arbre binaire est un arbre d'arit\u00e9 2, c'est \u00e0 dire un arbre dans lequel chaque noeud poss\u00e8de au plus deux fils. C'est bien le cas ici, une personne   ayant au maximum deux parents connus. b. Dans un arbre binaire de recherche, on dispose d'une relation d'ordre entre les cl\u00e9s associ\u00e9es \u00e0 chaque noeud et pour tout noeud, sa cl\u00e9 est sup\u00e9rieure aux  cl\u00e9s du sous arbre gauche et inf\u00e9rieure aux cl\u00e9s du sous arbre droit. Ici les cl\u00e9s sont des personnes sur lesquelles on n'a pas de relation d'ordre.</p> <p>Question 2</p> <p>On souhaite obtenir la liste de tous les ascendants (anc\u00eatres) d'Albert Normand. Pour cela, on utilise un parcours en profondeur de l\u2019arbre. a. Ecrire les sept premi\u00e8res personnes (nom et pr\u00e9nom) rencontr\u00e9es si on utilise le parcours en profondeur pr\u00e9fixe. b. Ecrire les sept premi\u00e8res personnes (nom et pr\u00e9nom) rencontr\u00e9es si on utilise le parcours en profondeur infixe. On donne ci-dessous le code incomplet de la fonction d\u2019un parcours en profondeur de l\u2019arbre, dans lequel il manque la ligne correspondant \u00e0 l\u2019instruction d\u2019affichage du pr\u00e9nom et du nom de l'individu : \ud83d\udc0d Script Python<pre><code>def parcours(racine_de_l_arbre) : \n    if racine_de_l_arbre != None : \n        noeud_actuel = racine_de_l_arbre \n        parcours(noeud_actuel.gauche)   \n        parcours(noeud_actuel.droite)\n</code></pre> c. Recopier et compl\u00e9ter l\u2019algorithme ci-dessus en y ins\u00e9rant au bon endroit la ligne contenant l\u2019instruction d\u2019affichage pour que cet algorithme corresponde \u00e0 un parcours en profondeur pr\u00e9fixe. d. Recopier et compl\u00e9ter l\u2019algorithme ci-dessus en y ins\u00e9rant au bon endroit la ligne contenant l\u2019instruction d\u2019affichage pour que cet algorithme corresponde \u00e0 un parcours en profondeur infixe. </p> R\u00e9ponse <p>a. On rappelle que dans un parcours en profondeur pr\u00e9fixe, on liste en premier la racine puis r\u00e9cursivement les cl\u00e9s du sous arbre gauche et du sous arbre droit. Ce qui donne ici : Albert Normand  Jules Normand  Michel Normand  Jules Normand  Odile Picard  H\u00e9l\u00e8ne Breton   Evariste Breton</p> <p>b. Dans le parcours en profondeur infixe, on liste r\u00e9cursivement les cl\u00e9s du sag puis la racine puis les cl\u00e9s du sad. Ce qui donne ici : Jules Normand  Michel Normand  Odile Picard  Jules Normand  Evariste Breton  H\u00e9l\u00e8ne Breton  Cam\u00e9lia Charentais</p> <p>c. En parcours prefixe on ins\u00e8re l'affichage du tuple <code>(prenom,nom)</code> avant de relancer les parcours r\u00e9cursifs sur les deux sous arbres. \ud83d\udc0d Script Python<pre><code>def parcours(racine_de_l_arbre) :\n    if racine_de_l_arbre != None :\n    noeud_actuel = racine_de_l_arbre\n    print(noeud_actuel.identite)\n    parcours(noeud_actuel.gauche)\n    parcours(noeud_actuel.droite)\n</code></pre></p> <p>d. En parcours infixe on ins\u00e8re l'affichage du tuple <code>(prenom,nom)</code> entre  les parcours r\u00e9cursifs sur les deux sous arbres. \ud83d\udc0d Script Python<pre><code>def parcours(racine_de_l_arbre) :\n    if racine_de_l_arbre != None :\n    noeud_actuel = racine_de_l_arbre\n    parcours(noeud_actuel.gauche)\n    print(noeud_actuel.identite)\n    parcours(noeud_actuel.droite)\n</code></pre></p> <p>Question 3</p> <p>On souhaite maintenant pr\u00e9ciser la g\u00e9n\u00e9ration d\u2019un individu dans l'impl\u00e9mentation de l'arbre g\u00e9n\u00e9alogique. Lors de la cr\u00e9ation de l'instance, on donnera la valeur 0 par d\u00e9faut. a. Recopier et compl\u00e9ter la d\u00e9finition de la classe <code>Noeud</code> pour ajouter un attribut generation qui indique la g\u00e9n\u00e9ration d\u2019un individu. \ud83d\udc0d Script Python<pre><code>class Noeud(): \n    def __init__(prenom, nom) : \n        self.identite = (prenom, nom) \n        self.gauche = None \n        self.droite = None\n</code></pre> b. Ecrire la fonction r\u00e9cursive <code>numerotation</code> qui parcourt l\u2019arbre et modifie l\u2019attribut generation de tous les anc\u00eatres d\u2019Albert Normand, de sorte que les parents d\u2019Albert Normand soient la g\u00e9n\u00e9ration 1 etc... Cette fonction prend en param\u00e8tres <code>racine_de_l_arbre</code>  de type <code>Noeud</code>  et <code>num_gen</code> de type entier. \ud83d\udc0d Script Python<pre><code>def numerotation(racine_de_l_arbre, num_gen=0) :\n    ...\n</code></pre></p> R\u00e9ponse <p>a.  \ud83d\udc0d Script Python<pre><code>class Noeud() :\n    def __init__(self, prenom, nom) :\n        self.identite = (prenom, nom)\n        self.gauche = None\n        self.droite = None\n        self.generation = 0\n</code></pre></p> <p>Bug</p> <p>Dans l'\u00e9nonc\u00e9, <code>self</code>  ne figure pas dans les param\u00e8tres de <code>__init__</code> (ajout\u00e9 dans cette correction)</p> <p>b.  \ud83d\udc0d Script Python<pre><code>def numerotation(racine_de_l_arbre, num_gen=0) :\n    if racine_de_l_arbre != None:\n        racine_de_l_arbre.generation = num_gen\n        numerotation(racine_de_l_arbre.gauche,num_gen+1)\n        numerotation(racine_de_l_arbre.droit,num_gen+1)\n</code></pre></p> <p>Question 4</p> <p>On donne la fonction suivante qui prend en param\u00e8tres l\u2019objet N de type <code>Noeud</code> et la variable affiche de type bool\u00e9en : \ud83d\udc0d Script Python<pre><code>def mystere(N,affiche) : \n    if N != None : \n        if affiche : \n            print( N.identite[0])\n        mystere(N.gauche,False) \n        mystere(N.droite,True)\n</code></pre> Ecrire, dans l\u2019ordre d\u2019affichage, le r\u00e9sultat de l\u2019ex\u00e9cution de <code>mystere(racine_de_l_arbre,False)</code> o\u00f9 <code>racine_de_l_arbre</code> est le <code>n\u0153ud</code> qui r\u00e9f\u00e9rence Albert Normand</p> R\u00e9ponse <p>Cette fonction parcourt l'arbre en pr\u00e9fixe mais affiche seulement les noeuds droit, ce qui donne : Odile Picard  H\u00e9l\u00e8ne Breton  Cam\u00e9lia Charentais  Marie Comtois  Eulalie Lorrain  Gabrielle Savoyard  Janet Chesterfield </p>"},{"location":"Algo/T5_6_algo_arbre_BAC/#2021-france-j2","title":"2021 France J2","text":"<p>Exo</p> <p>Une agence immobili\u00e8re d\u00e9veloppe un programme pour g\u00e9rer les biens immobiliers qu\u2019elle propose \u00e0 la vente. Dans ce programme, pour mod\u00e9liser les donn\u00e9es de biens immobiliers, on d\u00e9finit une classe Bim avec les attributs suivants :  </p> <ul> <li><code>nt</code> de type <code>str</code> repr\u00e9sente la nature du bien (appartement, maison, bureau, commerces,... );  </li> <li><code>sf</code> de type <code>float</code> est la surface du bien ;  </li> <li><code>pm</code> de type <code>float</code> est le prix moyen par m\u00b2 du bien qui d\u00e9pend de son emplacement.  </li> </ul> <p>La classe <code>Bim</code> poss\u00e8de une m\u00e9thode <code>estim_prix</code> qui renvoie une estimation du prix du bien. Le code (incomplet) de la classe <code>Bim</code> est donn\u00e9 ci-dessous :  </p> \ud83d\udc0d Script Python<pre><code>class Bim:    \n    def __init__(self, nature, surface, prix_moy):\n        ...\n\n    def estim_prix(self): \n        return self.sf * self.pm \n</code></pre> <p>Question 1</p> <p>Recopier et compl\u00e9ter le code du constructeur de la classe <code>Bim</code>. </p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def __init__(self, nature, surface, prix_moy): \n    self.nt = nature \n    self.sf = surface \n    self.pm = prix_moy\n</code></pre> <p>Question 2</p> <p>On ex\u00e9cute l'instruction suivante :  \ud83d\udc0d Script Python<pre><code>b1 = Bim('maison', 70.0, 2000.0)\n</code></pre> Que renvoie l'instruction <code>b1.estim_prix()</code> ? Pr\u00e9ciser le type de la valeur renvoy\u00e9e. </p> R\u00e9ponse <p>L\u2019instruction <code>b1.estim_prix()</code> renvoie 140000.0 (estimation du prix de b1) ; la valeur renvoy\u00e9e est de type flottant, car <code>self.sf</code> et <code>self.pm</code> sont de type flottant.</p> <p>Question 3</p> <p>On souhaite affiner l\u2019estimation du prix d\u2019un bien en prenant en compte sa nature :  </p> <ul> <li>pour un bien dont l\u2019attribut <code>nt</code> est  'maison' la nouvelle estimation du prix est le produit de sa surface par le prix moyen par m\u00b2 multipli\u00e9 par 1,1 ;  </li> <li>pour un bien dont l\u2019attribut <code>nt</code> est  'bureau' la nouvelle estimation du prix est le produit de sa surface par le prix moyen par m\u00b2 multipli\u00e9 par 0,8 ;  </li> <li>pour les biens d\u2019autres natures, l\u2019estimation du prix ne change pas.  </li> </ul> <p>Modifier le code de la m\u00e9thode <code>estim_prix</code>  afin de prendre en compte ce changement de calcul.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def estim_prix(self): \n    prix_brut = self.sf * self.pm \n    if self.nt=='maison': \n        return prix_brut*1.1 \n    elif self.nt=='bureau': \n        return prix_brut*0.8 \n    else : \n        return prix_brut\n</code></pre> <p>Question 4</p> <p>\u00c9crire le code Python d'une fonction <code>nb_maison(lst)</code> qui prend en argument une liste Python de biens immobiliers de type <code>Bim</code> et qui renvoie le nombre d\u2019objets de nature 'maison' contenus dans la liste <code>lst</code>. </p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def nb_maison(lst): \n    compteur = 0 \n    for b in lst : \n        if b.nt=='maison': \n            compteur = compteur + 1 \n    return compteur\n</code></pre> <p>Question 5</p> <p>Pour une recherche efficace des biens immobiliers selon le crit\u00e8re de leur surface, on stocke les objets de type <code>Bim</code> dans un arbre binaire de recherche, nomm\u00e9 <code>abr</code>. Pour tout n\u0153ud de cet arbre :  </p> <ul> <li>tous les objets de son sous-arbre gauche ont une surface inf\u00e9rieure ou \u00e9gale \u00e0 la surface de l\u2019objet contenue dans ce n\u0153ud ;  </li> <li>tous les objets de son sous-arbre droit ont une surface strictement sup\u00e9rieure \u00e0 la surface de l\u2019objet contenue dans ce n\u0153ud.  </li> </ul> <p>L\u2019objet abr dispose des m\u00e9thodes suivantes :  </p> <ul> <li><code>abr.est_vide()</code> : renvoie True si abr est vide et False sinon. </li> <li><code>abr.get_v()</code> : renvoie l\u2019\u00e9l\u00e9ment (de type <code>Bim</code>) situ\u00e9 \u00e0 la racine de <code>abr</code> si <code>abr</code> n\u2019est pas vide et <code>None</code> sinon.  </li> <li><code>abr.get_g()</code> : renvoie le sous-arbre gauche de <code>abr</code> si <code>abr</code> n\u2019est pas vide et <code>None</code> sinon.  </li> <li><code>abr.get_d()</code> : renvoie le sous-arbre droit de abr si <code>abr</code> n\u2019est pas vide et <code>None</code> sinon.</li> </ul> <p>a. Dans cette question, on suppose que l'arbre binaire abr a la forme ci-dessous : </p> <p></p> <p>Donner la liste les biens b1, b2, b3, b4, b5, b6 tri\u00e9e dans l'ordre croissant de leur surface. b. Recopier et compl\u00e9ter le code de la fonction r\u00e9cursive contient donn\u00e9e ci-dessous, qui prend en arguments un nombre surface de type float et un arbre binaire de recherche abr contenant des \u00e9l\u00e9ments de type Bim ordonn\u00e9s selon leur attribut de surface sf. La fonction <code>contient(surface, abr)</code> renvoie <code>True</code> s'il existe un bien dans abr d'une surface sup\u00e9rieure ou \u00e9gale \u00e0 surface et <code>False</code> sinon. \ud83d\udc0d Script Python<pre><code>def contient(surface, abr):\n    if abr.est_vide():  \n        return False  \n    elif abr.get_v().sf &gt;= ...:  \n        return True  \n    else:  \n        return contient( surface,... )\n</code></pre></p> R\u00e9ponse <p>a. on effectue un parcours infixe : b2 - b4 - b1 - b5 - b3 - b6   b.  \ud83d\udc0d Script Python<pre><code>def contient(surface,abr): \n    if abr.est_vide(): \n        return False \n    elif abr.get_v().sf &gt;= surface: \n        return True \n    else : \n        return contient(surface, abr.get_d())\n</code></pre></p>"},{"location":"Algo/TP5_5_Implementation_arbres/","title":"Macro Rendering Error","text":"<p>File: <code>Algo/TP5_5_Implementation_arbres.md</code></p> <p>KeyError: 11</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 11\n</code></pre>"},{"location":"Algo/TP6_1_kppv/","title":"Macro Rendering Error","text":"<p>File: <code>Algo/TP6_1_kppv.md</code></p> <p>KeyError: 15</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 15\n</code></pre>"},{"location":"Algo/index_algo/","title":"\u27a1 Th\u00e8me : Algorithmique(A)","text":"<p>Histoire de l'informatique</p> <p> </p> <p></p> <p>Al Hwarizmi (~780-850) est un math\u00e9maticien persan membre de la Maison de la sagesse de Bagdad. Ses travaux d'alg\u00e8bre sur les m\u00e9thodes de r\u00e9solution des \u00e9quations ont donn\u00e9, par d\u00e9formation de son nom latinis\u00e9, au mot algorithme.</p> <p>Alan Turing  (1912-1954) est un math\u00e9maticien britannique, connu pour avoir d\u00e9crypt\u00e9 la machine Enigma pendant la deuxi\u00e8me guerre mondiale. Ses travaux sur les liens entre algorithme et raisonnement math\u00e9matique l'ont conduit \u00e0 imaginer un proc\u00e9d\u00e9 de calcul universel, la machine de Turing, \u00e0 l'origine de la conception des ordinateurs.</p> <p>Tout comme les plus grands chefs con\u00e7oivent leurs recettes \u00e0 partir de recettes de base classiques, on retrouve dans les algorithmes les plus complexes des r\u00e9solutions de probl\u00e8mes simples et r\u00e9currents: parcourir une liste, trier...</p> <p>Info</p> <p>\ud83d\uddf9 Algorithmes sur les arbres binaires et sur les arbres binaires de recherche.</p> <p>\ud83d\uddf9 M\u00e9thode \u00ab diviser pour r\u00e9gner \u00bb</p> <p> </p>"},{"location":"Annales/Sujets_2022/","title":"Sujets 2022","text":"<p>Sujet   Corrig\u00e9 Exercice 1  Exercice 2 sujet 1 corrig\u00e9 nombre d'occurences rendu monnaie, algo glouton r\u00e9curssif sujet 2 corrig\u00e9 moyenne pond\u00e9r\u00e9e    triangle de Pascal sujet 3 corrig\u00e9 codage par diff\u00e9rence   arithm\u00e9tique gr\u00e2ce \u00e0 un arbre binaire sujet 4 corrig\u00e9 recherche d'entiers cons\u00e9cutifs composante d'image binaire sujet 5 corrig\u00e9 minimum et maximum d'un tableau paquet de carte, poo sujet 6 corrig\u00e9 indice du maximum et maximum d'un tableau   recherche sous-chaine, ADN sujet 7 corrig\u00e9 conversion d\u00e9cimal vers binaire tri bulle sujet 8 corrig\u00e9 recherche \u00e9l\u00e9ment dans un tableau   insertion d'un \u00e9l\u00e9ment dans un tableau tri\u00e9 sujet 9 corrig\u00e9 probl\u00e8me 3n+1, suite    mots parfait sujet 10    corrig\u00e9 occurence de caract\u00e8res dans une phrase fusion de liste tri\u00e9es sujet 11    corrig\u00e9 recherche dichotomique  codage de C\u00e9sar sujet 12    corrig\u00e9 moyenne d'un tableau    tri tableau de 0 et 1 sujet 13    corrig\u00e9 rendu monaie, algorithme glouton    file avec liste chain\u00e9e sujet 14    corrig\u00e9 mots \u00e0 trou envois de messages, cycles sujet 15    corrig\u00e9 nombre de r\u00e9p\u00e9titions (occurences) dans un tableau  conversion d\u00e9cimale vers binaire sujet 16    corrig\u00e9 indice du maximum et maximum d'un tableau   extraction des entiers positifs d'une pile sujet 17    corrig\u00e9 nombre de mots dans une phrase  parcours et recherche dans un ABR sujet 18    corrig\u00e9 minimum de deux tableaux li\u00e9s   nombre palindrome sujet 19    corrig\u00e9 multiplication avec addition et soustraction    recherche dans un sous-tableau tri\u00e9 sujet 20    corrig\u00e9 ou exclusif de deux tableaux    carr\u00e9 magique sujet 21    corrig\u00e9 multiplication avec addition et soustraction    recherche par dichotomie sujet 22    corrig\u00e9 renverser une cha\u00eene de caract\u00e8res  nombres premiers, crible d'\u00c9ratosth\u00e8ne sujet 23    corrig\u00e9 likes dans un r\u00e9seau social, dictionnaires  notation postfixe des expression arithm\u00e9tiques sujet 24    corrig\u00e9 maximum d'un tableau    parenth\u00e9sage, piles sujet 25    corrig\u00e9 animaux dans un refuge, dictionnaires   trouver l'intrus dans un tableau sujet 26    corrig\u00e9 indice du minimum d'un tableau  tri d'un tableau de 0 et 1 sujet 27    corrig\u00e9 taille d'un arbre binaire, dictionnaires    tri par s\u00e9lection (it\u00e9ratif) sujet 28    corrig\u00e9 moyenne d'un tableau    conversion d\u00e9cimal vers binaire sujet 29    corrig\u00e9 suite de Fibonnaci sans r\u00e9cursivit\u00e9 listes li\u00e9es de notes et d'\u00e9l\u00e8ves, maximum sujet 30    corrig\u00e9 fusion de deux tableaux tri\u00e9s   conversion chiffres romains vers d\u00e9cimal sujet 31    corrig\u00e9 nombre d'occurrence dans un tableau (float ou int)  rendu monaie, algorithme glouton sujet 32    corrig\u00e9 indice d'un \u00e9l\u00e9ment dans un tableau adresses IP, POO sujet 33    corrig\u00e9 conversion binaire vers d\u00e9cimal, tableaux   tri par insertion sujet 34    corrig\u00e9 maximum d'occurences dans une chaine de caract\u00e8res  image, pixels, n\u00e9gatif sujet 35    corrig\u00e9 moyenne d'un tableau avec assertions    recherche par dichotomie dans un tableau tri\u00e9 sujet 36    corrig\u00e9 indice de derni\u00e8re occurence d'un entier dans un tableau    distance entre points sujet 37    corrig\u00e9 v\u00e9rification du tri d'un tableau    comptage des votes dans un tableau sujet 38    corrig\u00e9 tri par s\u00e9lection   jeu du plus ou moins sujet 39    corrig\u00e9 moyenne d'un tableau    zoom sur dessin sujet 40    corrig\u00e9 recherche dans un tableau, tableau d'indices    moyenne pond\u00e9r\u00e9e, dictionnaires</p>"},{"location":"Annales/Sujets_2023/","title":"Sujets 2023","text":"<p>Sujet 2023,Ancien sujet,Ex1,Ex2 1,37,V\u00e9rification si une liste est tri\u00e9e ou non,Comptabilisation de votes (dictionnaires) 2,16,Maximum et indice d\u2019un \u00e9l\u00e9ment dans une liste,Structure de donn\u00e9es : piles 3,39,Calcul d\u2019une moyenne pond\u00e9r\u00e9e,Repr\u00e9sentation d\u2019une image par une liste de liste 4,,Recherche de doublon dans une liste,D\u00e9mineur matrice 5,,Paire de 6,Repr\u00e9sentation d\u2019une image par une liste de listes 6,36,Derni\u00e8re occurrence d\u2019un \u00e9l\u00e9ment dans une liste,Calcul de la distance entre deux points 7,30,Fusion de deux listes d\u00e9j\u00e0 tri\u00e9es,Conversion num\u00e9ration romaine 8,23,Maximum des valeurs d\u2019un dictionnaire,POO : pile pour noter une expression arithm\u00e9tique 9,19,Multiplications avec uniquement additions et soustractions,Recherche dichotomique 10,24,Maximum des \u00e9l\u00e9ments d\u2019une liste,POO : expression bien parenth\u00e9s\u00e9e et piles 11,33,Conversion binaire d\u00e9cimal,Tri par insertion 12,,Ajouter un \u00e9l\u00e9ment dans un ABR,algorithme glouton 13,31,Nombre d\u2019occurrence d\u2019un \u00e9l\u00e9ment dans une liste,Rendu de monnaie 14,8,Recherche de la premi\u00e8re occurrence,Insertion dans une liste tri\u00e9e 15,18,Minimum d\u2019une liste de temp\u00e9ratures,Palindrome 16,,Recherche d\u2019indices &lt; = &gt;,Moyenne pod\u00e9r\u00e9e avec un disctionnaire 17,2,Calcul d\u2019une moyenne,Triangle de Pascal 18,,Indice de premi\u00e8re appartion du max,Chromosome parcours d\u2019une liste 19,11,Recherche dichotomique,Code de C\u00e9sar 20,,Fusion de dictionnaires,Tirage au sort 21,3,Codage par diff\u00e9rence,Arbre binaire et expression arithm\u00e9tique 22,9,Suite de Collatz,Codage d\u2019un mot 23,25,Traitement de donn\u00e9es en tables,Recherche r\u00e9cursive dans un tableau 24,10,Nombre d\u2019occurrence avec un dictionnaire,Fusion de deux listes tri\u00e9es 25,,Occurrence d\u2019un nombre dans une liste,Insertion dans un ABR 26,21,Multiplications avec uniquement additions et soustractions,Recherche dichotomique dans un tableau tri\u00e9 27,26,Taille d\u2019un arbre binaire repr\u00e9sent\u00e9 par un dictionnaire,Tri par s\u00e9lection 28,35,Calcul d\u2019une moyenne,Recherche dichotomique 29,,Taille et hauteur d\u2019un arbre,Insertion dans une liste tri\u00e9e 30,28,Calcul de moyenne,Conversion decimal en binaire 31,15,Nombre d\u2019occurrence d\u2019un \u00e9l\u00e9ment dans une liste,Rendu de monnaie 32,5,Recherche du minimum et du maximum,POO : cartes et paquet de cartes 33,27,Conversion binaire d\u00e9cimal,Tri par insertion 34,12,Calcul d\u2019une moyenne,S\u00e9paration des 0 et des 1 dans une liste 35,20,Ou exclusif entre deux tableaux,POO : Test de carr\u00e9s magiques 36,4,Entiers cons\u00e9cutifs dans un tableau,Codage d\u2019une image en liste de liste 37,32,Derni\u00e8re occurrence d\u2019un \u00e9l\u00e9ment dans une liste,POO : adresse IP 38,14,Mots correspodants \u00e0 un motif,Recherche d\u2019un cycle 39,29,Termes de la suite de Fibonacci,Recherche de maximum dans une liste 40,,Compter le nombre de mots,Insertion d\u2019un n\u0153ud dans un ABR 41,1,Recherche d\u2019occurrences,Rendu de monnaie r\u00e9cursif 42,38,Tri par s\u00e9lection,Jeu du nombre myst\u00e8re 43,7,Conversion binaire/d\u00e9cimal,Tri \u00e0 bulles 44,22,Ecriture d\u2019une cha\u00eene de caract\u00e8res \u00e0 l\u2019envers,Crible d\u2019Eratosth\u00e8ne 45,,Tri et occurrence d\u2019une listte,Convertir bin \u2192 Dec et Dec \u2192 Bin</p>"},{"location":"Annales/2021/Correction_EE/","title":"2021 Correction \u00e9preuves \u00e9crites","text":"<p>Remarques :</p> <ul> <li>si un exercice est corrig\u00e9 son num\u00e9ro est indiqu\u00e9 en bleu, sinon en rouge</li> </ul> Centre Jour T\u00e9l\u00e9chargement Correction Am\u00e9rique du nord 1 21-NSIJ1AN1 Etranger 1 21-NSIJ1G11 M\u00e9tropole 1 21-NSIJ1ME1 M\u00e9tropole candidats libres 1 21-NSIJ1ME2 M\u00e9tropole session de septembre 1 21-NSIJ1ME3 Etranger 2 21-NSIJ2G11 M\u00e9tropole 2 21-NSIJ2ME1 M\u00e9tropole candidats libres 2 21-NSIJ2ME2 M\u00e9tropole session de septembre 2 21-NSIJ2ME3 Polyn\u00e9sie 2 21-NSIJ2PO1"},{"location":"Annales/2021/EE/","title":"2021 Correction \u00e9preuves \u00e9crites","text":"<p>Remarques :</p> <ul> <li>si un exercice est corrig\u00e9 son num\u00e9ro est indiqu\u00e9 en bleu, sinon en rouge</li> </ul> Centre Jour T\u00e9l\u00e9chargement Correction Am\u00e9rique du nord 1 21-NSIJ1AN1 Etranger 1 21-NSIJ1G11 M\u00e9tropole 1 21-NSIJ1ME1 M\u00e9tropole candidats libres 1 21-NSIJ1ME2 M\u00e9tropole session de septembre 1 21-NSIJ1ME3 Etranger 2 21-NSIJ2G11 M\u00e9tropole 2 21-NSIJ2ME1 M\u00e9tropole candidats libres 2 21-NSIJ2ME2 M\u00e9tropole session de septembre 2 21-NSIJ2ME3 Polyn\u00e9sie 2 21-NSIJ2PO1"},{"location":"Annales/2021/EE/#amerique-du-nord-jour-1-21-nsij1an1","title":"Am\u00e9rique du nord - jour 1 : 21-NSIJ1AN1","text":""},{"location":"Annales/2021/EE/#enonce","title":"Enonc\u00e9","text":"<p>21-NSIJ1AN1 </p> <ul> <li> <p>Exercice 1  : bases de donn\u00e9es relationnelles et langage SQL </p> </li> <li> <p>Exercice 2  : routage, processsus et syst\u00e8mes sur puces </p> </li> <li> <p>Exercice 3  : tableaux et programmation de base en Python </p> </li> <li> <p>Exercice 4  : arbres binaires et algorithmes associ\u00e9s </p> </li> <li> <p>Exercice 5  : notion de pile, de file et programmation de base en Python </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction","title":"Correction","text":""},{"location":"Annales/2021/EE/#etranger-jour-1-21-nsij1g11","title":"Etranger - jour 1 : 21-NSIJ1G11","text":""},{"location":"Annales/2021/EE/#enonce_1","title":"Enonc\u00e9","text":"<p>21-NSIJ1G11 </p> <ul> <li> <p>Exercice 1  : programmation objet (code de C\u00e9sar) </p> </li> <li> <p>Exercice 2  : structures de donn\u00e9es (dictionnaires) </p> </li> <li> <p>Exercice 3  : arbres binaires de recherche </p> </li> <li> <p>Exercice 4  : r\u00e9seau </p> </li> <li> <p>Exercice 5  : structure de donn\u00e9es (piles) </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_1","title":"Correction","text":""},{"location":"Annales/2021/EE/#metropole-jour-1-21-nsij1me1","title":"M\u00e9tropole - jour 1 : 21-NSIJ1ME1","text":""},{"location":"Annales/2021/EE/#enonce_2","title":"Enonc\u00e9","text":"<p>21-NSIJ1ME1 </p> <ul> <li> <p>Exercice 1  : abres binaires de recherche </p> </li> <li> <p>Exercice 2  : gestion des processus, op\u00e9rateurs bool\u00e9ens </p> </li> <li> <p>Exercice 3  : base de donn\u00e9es et langage SQL </p> </li> <li> <p>Exercice 4  : algorithme de tri fusion et m\u00e9thode diviser pour r\u00e9gner </p> </li> <li> <p>Exercice 5  : r\u00e9seaux et protocoles de routage </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_2","title":"Correction","text":""},{"location":"Annales/2021/EE/#metropole-candidats-libres-jour-1-21-nsij1me2","title":"M\u00e9tropole candidats libres - jour 1 : 21-NSIJ1ME2","text":""},{"location":"Annales/2021/EE/#enonce_3","title":"Enonc\u00e9","text":"<p>21-NSIJ1ME2 </p> <ul> <li> <p>Exercice 1  : bases de donn\u00e9es </p> </li> <li> <p>Exercice 2  : notions de piles et programmation orient\u00e9e objet </p> </li> <li> <p>Exercice 3  : gestion des processus et protocoles de routage </p> </li> <li> <p>Exercice 4  : algorithme et programmation en Python </p> </li> <li> <p>Exercice 5  : manipulation de tableaux, r\u00e9cursivit\u00e9, m\u00e9thode \"diviser pour r\u00e9gner\" </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_3","title":"Correction","text":""},{"location":"Annales/2021/EE/#metropole-session-de-septembre-jour-1-21-nsij1me3","title":"M\u00e9tropole session de septembre - jour 1 : 21-NSIJ1ME3","text":""},{"location":"Annales/2021/EE/#enonce_4","title":"Enonc\u00e9","text":"<p>21-NSIJ1ME3 </p> <ul> <li> <p>Exercice 1  : protocoles de communication, r\u00e9seau, protocoles de routage </p> </li> <li> <p>Exercice 2  : algorithmique (recherche dichotomique), langages et programmation (r\u00e9cursivit\u00e9) </p> </li> <li> <p>Exercice 3  : bases de donn\u00e9es et langage SQL </p> </li> <li> <p>Exercice 4  : Structure de donn\u00e9es (programmation objet), langages et programmation </p> </li> <li> <p>Exercice 5  : structures de donn\u00e9es (arbre, arbre binaire, pile) </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_4","title":"Correction","text":""},{"location":"Annales/2021/EE/#etranger-jour-2-21-nsij2g11","title":"Etranger - jour 2 : 21-NSIJ2G11","text":""},{"location":"Annales/2021/EE/#enonce_5","title":"Enonc\u00e9","text":"<p>21-NSIJ2G11 </p> <ul> <li> <p>Exercice 1  : structures de donn\u00e9es : piles </p> </li> <li> <p>Exercice 2  : programmation python, tuples et liste </p> </li> <li> <p>Exercice 3  : Conversion d\u00e9cimal/binaire, table de v\u00e9rit\u00e9, codages des caract\u00e8res </p> </li> <li> <p>Exercice 4  : Base de donn\u00e9es </p> </li> <li> <p>Exercice 5  : programmation Python : commande d'un bandeau de diodes \u00e0 l'aide d'un raspberry </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_5","title":"Correction","text":""},{"location":"Annales/2021/EE/#metropole-jour-2-21-nsij2me1","title":"M\u00e9tropole - jour 2 : 21-NSIJ2ME1","text":""},{"location":"Annales/2021/EE/#enonce_6","title":"Enonc\u00e9","text":"<p>21-NSIJ2ME1 </p> <ul> <li> <p>Exercice 1  : abres et programmation orient\u00e9e objet </p> </li> <li> <p>Exercice 2  : base de donn\u00e9es relationnelles </p> </li> <li> <p>Exercice 3  : r\u00e9seaux et protocoles de routage </p> </li> <li> <p>Exercice 4  : gestion des processus et des ressources </p> </li> <li> <p>Exercice 5  : structure de donn\u00e9es lin\u00e9aires </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_6","title":"Correction","text":""},{"location":"Annales/2021/EE/#metropole-candidats-libres-jour-2-21-nsij2me2","title":"M\u00e9tropole candidats libres - jour 2 : 21-NSIJ2ME2","text":""},{"location":"Annales/2021/EE/#enonce_7","title":"Enonc\u00e9","text":"<p>21-NSIJ2ME2 </p> <ul> <li> <p>Exercice 1  : bases de donn\u00e9es relationnelles et langage SQL </p> </li> <li> <p>Exercice 2  : gestion des processus et des ressources par un syst\u00e8me d'exploitation </p> </li> <li> <p>Exercice 3  : arbres binaires de recherche et programmation orient\u00e9e objet </p> </li> <li> <p>Exercice 4  : programmation et r\u00e9cursivit\u00e9 </p> </li> <li> <p>Exercice 5  : programmation </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_7","title":"Correction","text":""},{"location":"Annales/2021/EE/#metropole-session-de-septembre-jour-2-21-nsij2me3","title":"M\u00e9tropole session de septembre - jour 2 : 21-NSIJ2ME3","text":""},{"location":"Annales/2021/EE/#enonce_8","title":"Enonc\u00e9","text":"<p>21-NSIJ2ME3 </p> <ul> <li> <p>Exercice 1  : r\u00e9seau, protocoles de communication et de routages </p> </li> <li> <p>Exercice 2  : structure de donn\u00e9es, langages et programmation </p> </li> <li> <p>Exercice 3  : base de donn\u00e9es </p> </li> <li> <p>Exercice 4  : programmation orient\u00e9e objet, langages et programmation </p> </li> <li> <p>Exercice 5  : traitement de donn\u00e9es en table (CSV), langages et programmation\" </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_8","title":"Correction","text":""},{"location":"Annales/2021/EE/#polynesie-jour-2-21-nsij2po1","title":"Polyn\u00e9sie - jour 2 : 21-NSIJ2PO1","text":""},{"location":"Annales/2021/EE/#enonce_9","title":"Enonc\u00e9","text":"<p>21-NSIJ2PO1 </p> <ul> <li> <p>Exercice 1  : algorithmique et programmation (algorithmes de tri) </p> </li> <li> <p>Exercice 2  : donn\u00e9es en table, bases de donn\u00e9es </p> </li> <li> <p>Exercice 3  : arbres binaires de recherche et programmation orient\u00e9e objet </p> </li> <li> <p>Exercice 4  : routage, architecture mat\u00e9rielle </p> </li> <li> <p>Exercice 5  : donn\u00e9es en table, bases de donn\u00e9es </p> </li> </ul>"},{"location":"Annales/2021/EE/#correction_9","title":"Correction","text":""},{"location":"Annales/2021/EP/","title":"Ann\u00e9e 2021 : Sujets d'\u00e9preuves pratiques","text":"<p>Attention</p> <p>Des erreurs figurent dans certains des sujets.  </p> Num\u00e9ro Lien de t\u00e9l\u00e9chargement Th\u00e8me exercice 1 Th\u00e8me exercice 2 Code fourni Correction 1 Sujet N\u00b01 Recherche d'occurrences Distance entre deux points  Code Sur Pixees 2 Sujet N\u00b02 Calcul d'une moyenne Tri  Code Sur Pixees 3 Sujet N\u00b03 Multiplication de deux entiers Recherche dichotomique  Code Sur Pixees 4 Sujet N\u00b04 Calcul d'une moyenne Recherche dichotomique  Code Sur Pixees 5 Sujet N\u00b05 Conversion binaire Tri par insertion  Code Sur Pixees 6 Sujet N\u00b06 Rendu de monnaie Liste cha\u00een\u00e9e  Code Sur Pixees 7 Sujet N\u00b07 Suite de Fibonacci Recherche de maximum  Code Sur Pixees 8 Sujet N\u00b08 Recherche d'occurrences Rendu de monnaie r\u00e9cursif  Code Sur Pixees 9 Sujet N\u00b09 Calcul d'une moyenne Triangle de Pascal  Code Sur Pixees 10 Sujet N\u00b010 Recherche du maximum Piles  Code Sur Pixees 11 Sujet N\u00b011 Conversion binaire Tri \u00e0 bulles  Code Sur Pixees 12 Sujet N\u00b012 Recherche de maximum Recherche textuelle  Code Sur Pixees 13 Sujet N\u00b013 Tri par s\u00e9lection Jeu du plus ou moins  Code Sur Pixees 14 Sujet N\u00b014 Recherche d'occurrences Dictionnaires  Code Sur Pixees 15 Sujet N\u00b015 Recherche de maximum Programmation objet  Code Sur Pixees 16 Sujet N\u00b016 Calcul d'une moyenne Conversion binaire  Code Sur Pixees 17 Sujet N\u00b017 Recherche de minimum Tri  Code Sur Pixees 18 Sujet N\u00b018 Recherche d'occurrences Insertion dans une liste  Code Sur Pixees 19 Sujet N\u00b019 Recherche d'occurrences Code de C\u00e9sar  Code Sur Pixees 20 Sujet N\u00b020 Recherche de minimum Palindrome  Code Sur Pixees 21 Sujet N\u00b021 Nombre de r\u00e9p\u00e9titions Conversion binaire  Code Sur Pixees 22 Sujet N\u00b022 Recherche d'occurrences Rendu de monnaie  Code Sur Pixees 23 Sujet N\u00b023 Recherche d'occurrences Fusion de deux listes  Code Sur Pixees 24 Sujet N\u00b024 Recherche d'occurrences Programmation objet  Code Sur Pixees 25 Sujet N\u00b025 Recherche d'entiers cons\u00e9cutifs Propagation r\u00e9cursive  Code Sur Pixees 26 Sujet N\u00b026 Occurence la plus fr\u00e9quente Manipulation d'image  Code Sur Pixees 27 Sujet N\u00b027 Calcul de moyenne Manipulation d'image  Code Sur Pixees 28 Sujet N\u00b028 Taille d'un arbre binaire Algorithme de tri  Code Sur Pixees 29 Sujet N\u00b029 Suite de Syracuse Codage alphab\u00e9tique  Code Sur Pixees 30 Sujet N\u00b030 Multiplication de deux entiers Recherche dichotomique  Code Sur Pixees"},{"location":"Annales/2022/Correction_EE/","title":"2022 Correction \u00e9preuves \u00e9crites","text":"<p>Remarques :</p> <ul> <li>si un exercice est corrig\u00e9 son num\u00e9ro est indiqu\u00e9 en bleu, sinon en rouge</li> </ul> Centre Jour T\u00e9l\u00e9chargement Correction Am\u00e9rique du nord 1 22-NSIJ1AN1 Am\u00e9rique du sud 1 22-NSIJ1AS1 Etranger 1 22-NSIJ1G11 Asie-Pacifique 1 22-NSIJ1JA1 Mayotte et r\u00e9seau AEFE 1 22-NSIJ1LR1 M\u00e9tropole 1 22-NSIJ1ME1 M\u00e9tropole session de septembre 1 22-NSIJ1ME3 Polyn\u00e9sie 1 22-NSIJ1PO1 Am\u00e9rique du nord 2 22-NSIJ2AN1 Am\u00e9rique du sud 2 22-NSIJ2AS1 Etranger 2 22-NSIJ2G11 Asie-Pacifique 2 22-NSIJ2JA1 Mayotte et r\u00e9seau AEFE 2 22-NSIJ2LR1 M\u00e9tropole 2 22-NSIJ2ME1"},{"location":"Annales/2022/EE/","title":"2022 Correction \u00e9preuves \u00e9crites","text":"<p>Remarques :</p> <ul> <li>si un exercice est corrig\u00e9 son num\u00e9ro est indiqu\u00e9 en bleu, sinon en rouge</li> </ul> Centre Jour T\u00e9l\u00e9chargement Correction Am\u00e9rique du nord 1 22-NSIJ1AN1 Am\u00e9rique du sud 1 22-NSIJ1AS1 Etranger 1 22-NSIJ1G11 Asie-Pacifique 1 22-NSIJ1JA1 Mayotte et r\u00e9seau AEFE 1 22-NSIJ1LR1 M\u00e9tropole 1 22-NSIJ1ME1 M\u00e9tropole session de septembre 1 22-NSIJ1ME3 Polyn\u00e9sie 1 22-NSIJ1PO1 Am\u00e9rique du nord 2 22-NSIJ2AN1 Am\u00e9rique du sud 2 22-NSIJ2AS1 Etranger 2 22-NSIJ2G11 Asie-Pacifique 2 22-NSIJ2JA1 Mayotte et r\u00e9seau AEFE 2 22-NSIJ2LR1 M\u00e9tropole 2 22-NSIJ2ME1"},{"location":"Annales/2022/EE/#amerique-du-nord-jour-1-22-nsij1an1","title":"Am\u00e9rique du nord - jour 1 : 22-NSIJ1AN1","text":""},{"location":"Annales/2022/EE/#enonce","title":"Enonc\u00e9","text":"<p>22-NSIJ1AN1 </p> <ul> <li> <p>Exercice 1  : bases de donn\u00e9es relationnelles et langage SQL </p> </li> <li> <p>Exercice 2  : r\u00e9seaux et protocoles de routage </p> </li> <li> <p>Exercice 3  : abres binaires de recherche et algorithmes associ\u00e9s </p> </li> <li> <p>Exercice 4  : cha\u00eenes de caract\u00e8res, tableau et programmation de base en Python </p> </li> <li> <p>Exercice 5  : files, tableaux et algorithmes associ\u00e9s </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction","title":"Correction","text":""},{"location":"Annales/2022/EE/#amerique-du-sud-jour-1-22-nsij1as1","title":"Am\u00e9rique du sud - jour 1 : 22-NSIJ1AS1","text":""},{"location":"Annales/2022/EE/#enonce_1","title":"Enonc\u00e9","text":"<p>22-NSIJ1AS1 </p> <ul> <li> <p>Exercice 1  : bases de donn\u00e9es </p> </li> <li> <p>Exercice 2  : programmation et algorithmes de tri </p> </li> <li> <p>Exercice 3  : arbres binaires </p> </li> <li> <p>Exercice 4  : gestion des processus et des ressources par un syst\u00e8me d'exploitation </p> </li> <li> <p>Exercice 5  : r\u00e9seaux et protocoles de routage </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_1","title":"Correction","text":""},{"location":"Annales/2022/EE/#etranger-jour-1-22-nsij1g11","title":"Etranger - jour 1 : 22-NSIJ1G11","text":""},{"location":"Annales/2022/EE/#enonce_2","title":"Enonc\u00e9","text":"<p>22-NSIJ1G11 </p> <ul> <li> <p>Exercice 1  : structures de donn\u00e9es (listes, p-uplets et dictionnaires) </p> </li> <li> <p>Exercice 2  : structures de donn\u00e9es (files et la programmation objet en langage python) </p> </li> <li> <p>Exercice 3  : structures de donn\u00e9es (dictionnaires) </p> </li> <li> <p>Exercice 4  : les bases de donn\u00e9es </p> </li> <li> <p>Exercice 5  : architecture mat\u00e9rielle des ordinateurs, les r\u00e9seaux et sur les protocoles de routage </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_2","title":"Correction","text":""},{"location":"Annales/2022/EE/#asie-pacifique-jour-1-22-nsij1ja1","title":"Asie-Pacifique - jour 1 : 22-NSIJ1JA1","text":""},{"location":"Annales/2022/EE/#enonce_3","title":"Enonc\u00e9","text":"<p>22-NSIJ1JA1 </p> <ul> <li> <p>Exercice 1  : algorithmique, cha\u00eenes de caract\u00e8res, complexit\u00e9 </p> </li> <li> <p>Exercice 2  : base de donn\u00e9es </p> </li> <li> <p>Exercice 3  : syst\u00e8mes d'exploitation </p> </li> <li> <p>Exercice 4  : programmation objet en langage Python </p> </li> <li> <p>Exercice 5  : programmation Python </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_3","title":"Correction","text":""},{"location":"Annales/2022/EE/#mayotte-et-reseau-aefe-jour-1-22-nsij1lr1","title":"Mayotte et r\u00e9seau AEFE - jour 1 : 22-NSIJ1LR1","text":""},{"location":"Annales/2022/EE/#enonce_4","title":"Enonc\u00e9","text":"<p>22-NSIJ1LR1 </p> <ul> <li> <p>Exercice 1  : structures de donn\u00e9es (listes, piles et files) </p> </li> <li> <p>Exercice 2  : structures de donn\u00e9es (programmation objet) </p> </li> <li> <p>Exercice 3  : bases de donn\u00e9es relationnelles et langage SQL </p> </li> <li> <p>Exercice 4  : algorithmique (arbres binaires en profondeurs pr\u00e9fixe et infixe) </p> </li> <li> <p>Exercice 5  : r\u00e9seau, protocoles de routage, langage et programmation </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_4","title":"Correction","text":""},{"location":"Annales/2022/EE/#metropole-jour-1-22-nsij1me1","title":"M\u00e9tropole - jour 1 : 22-NSIJ1ME1","text":""},{"location":"Annales/2022/EE/#enonce_5","title":"Enonc\u00e9","text":"<p>22-NSIJ1ME1 </p> <ul> <li> <p>Exercice 1  : structures de donn\u00e9es </p> </li> <li> <p>Exercice 2  : bases de donn\u00e9es </p> </li> <li> <p>Exercice 3  : repr\u00e9sentations binaires et protocoles de routage </p> </li> <li> <p>Exercice 4  : parcours des arbres binaires, diviser pour r\u00e9gner, r\u00e9cursivit\u00e9 </p> </li> <li> <p>Exercice 5  : programmation orient\u00e9e objet </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_5","title":"Correction","text":""},{"location":"Annales/2022/EE/#metropole-session-de-septembre-jour-1-22-nsij1me3","title":"M\u00e9tropole session de septembre - jour 1 : 22-NSIJ1ME3","text":""},{"location":"Annales/2022/EE/#enonce_6","title":"Enonc\u00e9","text":"<p>22-NSIJ1ME3 </p> <ul> <li> <p>Exercice 1  : algorithmique, arbres binaires de recherche et leurs parcours </p> </li> <li> <p>Exercice 2  : programmation orient\u00e9e objet, it\u00e9rations et r\u00e9cursivit\u00e9 </p> </li> <li> <p>Exercice 3  : bases de donn\u00e9es relationnelles et langage SQL </p> </li> <li> <p>Exercice 4  : architecture mat\u00e9rielle, gestion de processus et r\u00e9seaux </p> </li> <li> <p>Exercice 5  : notion de file et programmation en Python </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_6","title":"Correction","text":""},{"location":"Annales/2022/EE/#polynesie-jour-1-22-nsij1po1","title":"Polyn\u00e9sie - jour 1 : 22-NSIJ1PO1","text":""},{"location":"Annales/2022/EE/#enonce_7","title":"Enonc\u00e9","text":"<p>22-NSIJ1PO1 </p> <ul> <li> <p>Exercice 1  : programmation et r\u00e9cursivit\u00e9 </p> </li> <li> <p>Exercice 2  : architecture mat\u00e9rielle, ordonnancement et expressions bool\u00e9ennes </p> </li> <li> <p>Exercice 3  : base de donn\u00e9es, mod\u00e8le relationnel, langage SQL </p> </li> <li> <p>Exercice 4  : structures de donn\u00e9es, piles </p> </li> <li> <p>Exercice 5  : algorithmique, algorithme sur les abres binaires </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_7","title":"Correction","text":""},{"location":"Annales/2022/EE/#amerique-du-nord-jour-2-22-nsij2an1","title":"Am\u00e9rique du nord - jour 2 : 22-NSIJ2AN1","text":""},{"location":"Annales/2022/EE/#enonce_8","title":"Enonc\u00e9","text":"<p>22-NSIJ2AN1 </p> <ul> <li> <p>Exercice 1  : listes, arbres binaires de recherche et programmation orient\u00e9e objet </p> </li> <li> <p>Exercice 2  : syst\u00e8mes d'exploitation, gestion des processus par un syst\u00e8me d'exploitation </p> </li> <li> <p>Exercice 3  : bases de donn\u00e9es relationnelles et le langage SQL </p> </li> <li> <p>Exercice 4  : arbres binaires et algorithmes associ\u00e9s </p> </li> <li> <p>Exercice 5  : tableaux \u00e0 deux dimensions et la programmation Python en g\u00e9n\u00e9ral </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_8","title":"Correction","text":""},{"location":"Annales/2022/EE/#amerique-du-sud-jour-2-22-nsij2as1","title":"Am\u00e9rique du sud - jour 2 : 22-NSIJ2AS1","text":""},{"location":"Annales/2022/EE/#enonce_9","title":"Enonc\u00e9","text":"<p>22-NSIJ2AS1 </p> <ul> <li> <p>Exercice 1  : programmation, algorithmique et complexit\u00e9 </p> </li> <li> <p>Exercice 2  : r\u00e9seaux et routage </p> </li> <li> <p>Exercice 3  : base de donn\u00e9es </p> </li> <li> <p>Exercice 4  : programmation en Python, r\u00e9cursivit\u00e9 et m\u00e9thode diviser pour r\u00e9gner </p> </li> <li> <p>Exercice 5  : arbres binaires, programmation orient\u00e9e objet et r\u00e9cursivit\u00e9 </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_9","title":"Correction","text":""},{"location":"Annales/2022/EE/#etranger-jour-2-22-nsij2g11","title":"Etranger - jour 2 : 22-NSIJ2G11","text":""},{"location":"Annales/2022/EE/#enonce_10","title":"Enonc\u00e9","text":"<p>22-NSIJ2G11 </p> <ul> <li> <p>Exercice 1  : langages et programmation (r\u00e9cursivit\u00e9) </p> </li> <li> <p>Exercice 2  : structure de donn\u00e9es (dictionnaires) </p> </li> <li> <p>Exercice 3  : base de donn\u00e9es </p> </li> <li> <p>Exercice 4  : structures de donn\u00e9es, programmation objet </p> </li> <li> <p>Exercice 5  : architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux (protocoles de routage) </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_10","title":"Correction","text":""},{"location":"Annales/2022/EE/#asie-pacifique-jour-2-22-nsij2ja1","title":"Asie-Pacifique - jour 2 : 22-NSIJ2JA1","text":""},{"location":"Annales/2022/EE/#enonce_11","title":"Enonc\u00e9","text":"<p>22-NSIJ2JA1 </p> <ul> <li> <p>Exercice 1  : syst\u00e8mes d'exploitation Linux </p> </li> <li> <p>Exercice 2  : arbres binaires de recherche </p> </li> <li> <p>Exercice 3  : structures de donn\u00e9es, programmation </p> </li> <li> <p>Exercice 4  : bases de donn\u00e9es et langage SQL </p> </li> <li> <p>Exercice 5  : Ex\u00e9cution de programmes, recherche et corrections de bugs </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_11","title":"Correction","text":""},{"location":"Annales/2022/EE/#mayotte-et-reseau-aefe-jour-2-22-nsij2lr1","title":"Mayotte et r\u00e9seau AEFE - jour 2 : 22-NSIJ2LR1","text":""},{"location":"Annales/2022/EE/#enonce_12","title":"Enonc\u00e9","text":"<p>22-NSIJ2LR1 </p> <ul> <li> <p>Exercice 1  : structures de donn\u00e9es (pile) </p> </li> <li> <p>Exercice 2  : bases de donn\u00e9es </p> </li> <li> <p>Exercice 3  : repr\u00e9sentation binaire d'un entier relatif, syst\u00e8mes d'exploitation </p> </li> <li> <p>Exercice 4  : arbres binaires de recherche </p> </li> <li> <p>Exercice 5  : algorithmes et programmation Python </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_12","title":"Correction","text":""},{"location":"Annales/2022/EE/#metropole-jour-2-22-nsij2me1","title":"M\u00e9tropole - jour 2 : 22-NSIJ2ME1","text":""},{"location":"Annales/2022/EE/#enonce_13","title":"Enonc\u00e9","text":"<p>22-NSIJ2ME1 </p> <ul> <li> <p>Exercice 1  : arbres binaires de recherche, la programmation orient\u00e9e objet et la r\u00e9cursivit\u00e9 </p> </li> <li> <p>Exercice 2  : structures de donn\u00e9es </p> </li> <li> <p>Exercice 3  : r\u00e9seaux et protocoles de routage </p> </li> <li> <p>Exercice 4  : base de donn\u00e9es relationnelles et langage SQL </p> </li> <li> <p>Exercice 5  : programmation objet et m\u00e9thode diviser pour r\u00e9gner </p> </li> </ul>"},{"location":"Annales/2022/EE/#correction_13","title":"Correction","text":""},{"location":"Annales/2022/EP/","title":"Ann\u00e9e 2022 : Sujets d'\u00e9preuves pratiques","text":"<p>Attention</p> <p>Des erreurs d'\u00e9nonc\u00e9 figurent dans certains des sujets, dans la correction ils sont signal\u00e9s par une mention \u00a0Bug. De la m\u00eame fa\u00e7on, certains sujets contiennent des techniques de programmation probl\u00e9matiques indiqu\u00e9es par une mention \u00a0Attention.</p> Num\u00e9ro Lien de t\u00e9l\u00e9chargement Th\u00e8me exercice 1 Th\u00e8me exercice 2 Code fourni Correction 1 Sujet N\u00b01 Recherche d'occurrences Rendu de monnaie r\u00e9cursif  Code 2022-S01 2 Sujet N\u00b02 Calcul d'une moyenne Triangle de Pascal  Code 2022-S02 3 Sujet N\u00b03 Codage par diff\u00e9rence Arbre binaire et expression arithm\u00e9tique  Code 2022-S03 4 Sujet N\u00b04 Entiers cons\u00e9cutifs dans un tableau Codage d'une image en liste de liste  Code 2022-S04 5 Sujet N\u00b05 Recherche du minimum et du maximum POO : cartes et paquet de cartes  Code 2022-S05 6 Sujet N\u00b06 Valeur et indice du maximum dans une liste Recherche textuelle  Code 2022-S06 7 Sujet N\u00b07 Conversion binaire/d\u00e9cimal Tri \u00e0 bulles  Code 2022-S07 8 Sujet N\u00b08 Recherche de la premi\u00e8re occurrence Insertion dans une liste tri\u00e9e  Code 2022-S08 9 Sujet N\u00b09 Suite de Collatz Codage d'un mot  Code 2022-S09 10 Sujet N\u00b010 Nombre d'occurrence avec un dictionnaire Fusion de deux listes tri\u00e9es  Code 2022-S10 11 Sujet N\u00b011 Recherche dichotomique Code de C\u00e9sar  Code 2022-S11 12 Sujet N\u00b012 Calcul d'une moyenne S\u00e9paration des 0 et des 1 dans une liste  Code 2022-S12 13 Sujet N\u00b013 Rendu de monnaie POO : gestion d'une file  Code 2022-S13 14 Sujet N\u00b014 Mots correspodants \u00e0 un motif Recherche d'un cycle  Code 2022-S14 15 Sujet N\u00b015 Nombre de r\u00e9p\u00e9titions d'un \u00e9l\u00e9ment Conversion en binaire  Code 2022-S15 16 Sujet N\u00b016 Maximum d'un \u00e9l\u00e9ment dans une liste Structure de donn\u00e9es : piles  Code 2022-S16 17 Sujet N\u00b017 Nombre de mots dans une phrase POO : arbre binaire de recherche  Code 2022-S17 18 Sujet N\u00b018 Minimum d'une liste de temp\u00e9ratures Palindrome  Code 2022-S18 19 Sujet N\u00b019 Multiplications avec uniquement additions et soustractions Recherche dichotomique  Code 2022-S19 20 Sujet N\u00b020 Ou exclusif entre deux tableaux POO : Test de carr\u00e9s magiques  Code 2022-S20 21 Sujet N\u00b021 Multiplications avec uniquement additions et soustractions Recherche dichotomique dans un tableau tri\u00e9  Code 2022-S21 22 Sujet N\u00b022 Ecriture d'une cha\u00eene de caract\u00e8res \u00e0 l'envers Crible d'Eratosth\u00e8ne  Code 2022-S22 23 Sujet N\u00b023 Maximum des valeurs d'un dictionnaire POO : pile pour noter une expression arithm\u00e9tique  Code 2022-S23 24 Sujet N\u00b024 Maximum des \u00e9l\u00e9ments d'une liste POO : expression bien parenth\u00e9s\u00e9e et piles  Code 2022-S24 25 Sujet N\u00b025 Traitement de donn\u00e9es en tables Recherche r\u00e9cursive dans un tableau  Code 2022-S25 26 Sujet N\u00b026 Minimum des \u00e9l\u00e9ments d'une liste S\u00e9paration des 0 et des 1 dans une liste  Code 2022-S26 27 Sujet N\u00b027 Taille d'un arbre binaire repr\u00e9sent\u00e9 par un dictionnaire Tri par s\u00e9lection  Code 2022-S27 28 Sujet N\u00b028 Calcul de moyenne Conversion decimal en binaire  Code 2022-S28 29 Sujet N\u00b029 Termes de la suite de Fibonacci Recherche de maximum dans une liste  Code 2022-S29 30 Sujet N\u00b030 Fusion de deux listes d\u00e9j\u00e0 tri\u00e9es Conversion num\u00e9ration romaine  Code 2022-S30 31 Sujet N\u00b031 Nombre d'occurrence d'un \u00e9l\u00e9ment dans une liste Rendu de monnaie  Code 2022-S31 32 Sujet N\u00b032 Derni\u00e8re occurrence d'un \u00e9l\u00e9ment dans une liste POO : adresse IP  Code 2022-S32 33 Sujet N\u00b033 Conversion binaire d\u00e9cimal Tri par insertion  Code 2022-S33 34 Sujet N\u00b034 Lettre la plus fr\u00e9quente dans un texte Repr\u00e9sentation d'une image par une liste de listes  Code 2022-S34 35 Sujet N\u00b035 Calcul d'une moyenne Recherche dichotomique  Code 2022-S35 36 Sujet N\u00b036 Derni\u00e8re occurrence d'un \u00e9l\u00e9ment dans une liste Calcul de la distance entre deux points  Code 2022-S36 37 Sujet N\u00b037 V\u00e9rification si une liste est tri\u00e9e ou non Comptabilisation de votes (dictionnaires)  Code 2022-S37 38 Sujet N\u00b038 Tri par s\u00e9lection Jeu du nombre myst\u00e8re  Code 2022-S38 39 Sujet N\u00b039 Calcul d'une moyenne Repr\u00e9sentation d'une image par une liste de liste  Code 2022-S39 40 Sujet N\u00b040 Recherche d'un \u00e9l\u00e9ment dans une liste Calcul de moyennes (dictionnaires)  Code 2022-S40"},{"location":"Annales/2022/Enonces/22-NSIJ2LR1/","title":"Macro Rendering Error","text":"<p>File: <code>Annales/2022/Enonces/22-NSIJ2LR1.md</code></p> <p>UndefinedError: 'enonce_sujetbac' is undefined</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 3, in top-level template code\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/utils.py\", line 83, in from_obj\n    if hasattr(obj, \"jinja_pass_arg\"):\njinja2.exceptions.UndefinedError: 'enonce_sujetbac' is undefined\n</code></pre>"},{"location":"Annales/2023/Correction_EE/","title":"2023 Correction \u00e9preuves \u00e9crites","text":"<p>Remarques :</p> <ul> <li>si un exercice est corrig\u00e9 son num\u00e9ro est indiqu\u00e9 en bleu, sinon en rouge</li> </ul> Centre Jour T\u00e9l\u00e9chargement Exerciec 1 Exercice 2 Exercice 3 Correction Centres-Etrangers J1 23-NSIJ1G11 SQL R\u00e9s\u00e9aux et protocoles de routages Structures de Files Liban J1 23-NSIJ1LI1 Algorithmique et programmation SQL, repr\u00e9sentation donn\u00e9es et r\u00e9seaux Piles, arbres et algorithmique R\u00e9union J1 23-NSIJ1LR1 R\u00e9seaux et protocole routage POO et dictionnaires SQL M\u00e9tropole J1 23-NSIJ1ME1 SQL Routage Programmation et POO Polyn\u00e9sie  J1 23-NSIJ1PO1 SQL Processus et POO POO et diviser pour r\u00e9gner Centres-Etrangers J2 23-NSIJ2G11 Adressage IP et routages SQL Architecture mat\u00e9rille - Gestion processus et programmation Liban J2 23-NSIJ2LI1 SQL R\u00e9seaux, programmation python Arbres et algorithmique R\u00e9union J2 23-NSIJ2LR1 ABR, POO et r\u00e9cursivit\u00e9 R\u00e9seaux et protocoles routage SQL M\u00e9tropole J2 23-NSIJ2ME1 R\u00e9seaux et routage SQL Arbres binaires et POO Polyn\u00e9sie J2 23-NSIJ2PO1 Arbres binaires, ABR, POO et r\u00e9cursivit\u00e9 SQL Programmation python Sujet Z\u00e9ro-A x 23-NSIZERO-A Bases de donn\u00e9es et types construits de donn\u00e9es Architecture mat\u00e9rielle, R\u00e9seaux et syst\u00e8mes d'exploitation ABR et programmation objet Sujet Z\u00e9ro-B x 23-NSIZERO-B Ligne de commande sous Linux, traitement de donn\u00e9es en tables et bases de donn\u00e9es Analyse et \u00e9criture de programmes r\u00e9cursifs ABR et POO"},{"location":"Annales/2023/EE/","title":"2023 Correction \u00e9preuves \u00e9crites","text":"<p>Remarques :</p> <ul> <li>si un exercice est corrig\u00e9 son num\u00e9ro est indiqu\u00e9 en bleu, sinon en rouge</li> </ul> Centre Jour T\u00e9l\u00e9chargement Exerciec 1 Exercice 2 Exercice 3 Correction Centres-Etrangers J1 23-NSIJ1G11 SQL R\u00e9s\u00e9aux et protocoles de routages Structures de Files Liban J1 23-NSIJ1LI1 Algorithmique et programmation SQL, repr\u00e9sentation donn\u00e9es et r\u00e9seaux Piles, arbres et algorithmique R\u00e9union J1 23-NSIJ1LR1 R\u00e9seaux et protocole routage POO et dictionnaires SQL M\u00e9tropole J1 23-NSIJ1ME1 SQL Routage Programmation et POO Polyn\u00e9sie  J1 23-NSIJ1PO1 SQL Processus et POO POO et diviser pour r\u00e9gner Centres-Etrangers J2 23-NSIJ2G11 Adressage IP et routages SQL Architecture mat\u00e9rille - Gestion processus et programmation Liban J2 23-NSIJ2LI1 SQL R\u00e9seaux, programmation python Arbres et algorithmique R\u00e9union J2 23-NSIJ2LR1 ABR, POO et r\u00e9cursivit\u00e9 R\u00e9seaux et protocoles routage SQL M\u00e9tropole J2 23-NSIJ2ME1 R\u00e9seaux et routage SQL Arbres binaires et POO Polyn\u00e9sie J2 23-NSIJ2PO1 Arbres binaires, ABR, POO et r\u00e9cursivit\u00e9 SQL Programmation python Sujet Z\u00e9ro-A x 23-NSIZERO-A Bases de donn\u00e9es et types construits de donn\u00e9es Architecture mat\u00e9rielle, R\u00e9seaux et syst\u00e8mes d'exploitation ABR et programmation objet Sujet Z\u00e9ro-B x 23-NSIZERO-B Ligne de commande sous Linux, traitement de donn\u00e9es en tables et bases de donn\u00e9es Analyse et \u00e9criture de programmes r\u00e9cursifs ABR et POO"},{"location":"Annales/2023/EE/#centres-etrangers-jour-j1-23-nsij1g11","title":"Centres-Etrangers - jour J1 : 23-NSIJ1G11","text":""},{"location":"Annales/2023/EE/#enonce","title":"Enonc\u00e9","text":"<p>23-NSIJ1G11 </p> <ul> <li> <p>Exercice 1 [3 points] : SQL </p> </li> <li> <p>Exercice 2 [3 points] : R\u00e9s\u00e9aux et protocoles de routages </p> </li> <li> <p>Exercice 3 [6 points] : Structures de Files </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction","title":"Correction","text":""},{"location":"Annales/2023/EE/#liban-jour-j1-23-nsij1li1","title":"Liban - jour J1 : 23-NSIJ1LI1","text":""},{"location":"Annales/2023/EE/#enonce_1","title":"Enonc\u00e9","text":"<p>23-NSIJ1LI1 </p> <ul> <li> <p>Exercice 1 [3 points] : Algorithmique et programmation </p> </li> <li> <p>Exercice 2 [5 points] : SQL, repr\u00e9sentation donn\u00e9es et r\u00e9seaux </p> </li> <li> <p>Exercice 3 [4 points] : Piles, arbres et algorithmique </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_1","title":"Correction","text":""},{"location":"Annales/2023/EE/#reunion-jour-j1-23-nsij1lr1","title":"R\u00e9union - jour J1 : 23-NSIJ1LR1","text":""},{"location":"Annales/2023/EE/#enonce_2","title":"Enonc\u00e9","text":"<p>23-NSIJ1LR1 </p> <ul> <li> <p>Exercice 1 [4 points] : R\u00e9seaux et protocole routage </p> </li> <li> <p>Exercice 2 [4 points] : POO et dictionnaires </p> </li> <li> <p>Exercice 3 [4 points] : SQL </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_2","title":"Correction","text":""},{"location":"Annales/2023/EE/#metropole-jour-j1-23-nsij1me1","title":"M\u00e9tropole - jour J1 : 23-NSIJ1ME1","text":""},{"location":"Annales/2023/EE/#enonce_3","title":"Enonc\u00e9","text":"<p>23-NSIJ1ME1 </p> <ul> <li> <p>Exercice 1 [3 points] : SQL </p> </li> <li> <p>Exercice 2 [3 points] : Routage </p> </li> <li> <p>Exercice 3 [6 points] : Programmation et POO </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_3","title":"Correction","text":""},{"location":"Annales/2023/EE/#polynesie-jour-j1-23-nsij1po1","title":"Polyn\u00e9sie  - jour J1 : 23-NSIJ1PO1","text":""},{"location":"Annales/2023/EE/#enonce_4","title":"Enonc\u00e9","text":"<p>23-NSIJ1PO1 </p> <ul> <li> <p>Exercice 1 [4 points] : SQL </p> </li> <li> <p>Exercice 2 [4 points] : Processus et POO </p> </li> <li> <p>Exercice 3 [4 points] : POO et diviser pour r\u00e9gner </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_4","title":"Correction","text":""},{"location":"Annales/2023/EE/#centres-etrangers-jour-j2-23-nsij2g11","title":"Centres-Etrangers - jour J2 : 23-NSIJ2G11","text":""},{"location":"Annales/2023/EE/#enonce_5","title":"Enonc\u00e9","text":"<p>23-NSIJ2G11 </p> <ul> <li> <p>Exercice 1 [4 points] : Adressage IP et routages </p> </li> <li> <p>Exercice 2 [4 points] : SQL </p> </li> <li> <p>Exercice 3 [4 points] : Architecture mat\u00e9rille - Gestion processus et programmation </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_5","title":"Correction","text":""},{"location":"Annales/2023/EE/#liban-jour-j2-23-nsij2li1","title":"Liban - jour J2 : 23-NSIJ2LI1","text":""},{"location":"Annales/2023/EE/#enonce_6","title":"Enonc\u00e9","text":"<p>23-NSIJ2LI1 </p> <ul> <li> <p>Exercice 1 [4 points] : SQL </p> </li> <li> <p>Exercice 2 [3 points] : R\u00e9seaux, programmation python </p> </li> <li> <p>Exercice 3 [5 points] : Arbres et algorithmique </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_6","title":"Correction","text":""},{"location":"Annales/2023/EE/#reunion-jour-j2-23-nsij2lr1","title":"R\u00e9union - jour J2 : 23-NSIJ2LR1","text":""},{"location":"Annales/2023/EE/#enonce_7","title":"Enonc\u00e9","text":"<p>23-NSIJ2LR1 </p> <ul> <li> <p>Exercice 1 [4 points] : ABR, POO et r\u00e9cursivit\u00e9 </p> </li> <li> <p>Exercice 2 [4 points] : R\u00e9seaux et protocoles routage </p> </li> <li> <p>Exercice 3 [4 points] : SQL </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_7","title":"Correction","text":""},{"location":"Annales/2023/EE/#metropole-jour-j2-23-nsij2me1","title":"M\u00e9tropole - jour J2 : 23-NSIJ2ME1","text":""},{"location":"Annales/2023/EE/#enonce_8","title":"Enonc\u00e9","text":"<p>23-NSIJ2ME1 </p> <ul> <li> <p>Exercice 1 [3 points] : R\u00e9seaux et routage </p> </li> <li> <p>Exercice 2 [3 points] : SQL </p> </li> <li> <p>Exercice 3 [6 points] : Arbres binaires et POO </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_8","title":"Correction","text":""},{"location":"Annales/2023/EE/#polynesie-jour-j2-23-nsij2po1","title":"Polyn\u00e9sie - jour J2 : 23-NSIJ2PO1","text":""},{"location":"Annales/2023/EE/#enonce_9","title":"Enonc\u00e9","text":"<p>23-NSIJ2PO1 </p> <ul> <li> <p>Exercice 1 [4 points] : Arbres binaires, ABR, POO et r\u00e9cursivit\u00e9 </p> </li> <li> <p>Exercice 2 [4 points] : SQL </p> </li> <li> <p>Exercice 3 [4 points] : Programmation python </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_9","title":"Correction","text":""},{"location":"Annales/2023/EE/#sujet-zero-a-jour-x-23-nsizero-a","title":"Sujet Z\u00e9ro-A - jour x : 23-NSIZERO-A","text":""},{"location":"Annales/2023/EE/#enonce_10","title":"Enonc\u00e9","text":"<p>23-NSIZERO-A </p> <ul> <li> <p>Exercice 1 [3 points] : Bases de donn\u00e9es et types construits de donn\u00e9es </p> </li> <li> <p>Exercice 2 [3 points] : Architecture mat\u00e9rielle, R\u00e9seaux et syst\u00e8mes d'exploitation </p> </li> <li> <p>Exercice 3 [6 points] : ABR et programmation objet </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_10","title":"Correction","text":""},{"location":"Annales/2023/EE/#sujet-zero-b-jour-x-23-nsizero-b","title":"Sujet Z\u00e9ro-B - jour x : 23-NSIZERO-B","text":""},{"location":"Annales/2023/EE/#enonce_11","title":"Enonc\u00e9","text":"<p>23-NSIZERO-B </p> <ul> <li> <p>Exercice 1 [4 points] : Ligne de commande sous Linux, traitement de donn\u00e9es en tables et bases de donn\u00e9es </p> </li> <li> <p>Exercice 2 [4 points] : Analyse et \u00e9criture de programmes r\u00e9cursifs </p> </li> <li> <p>Exercice 3 [4 points] : ABR et POO </p> </li> </ul>"},{"location":"Annales/2023/EE/#correction_11","title":"Correction","text":""},{"location":"Annales/2023/EP/","title":"Ann\u00e9e 2023 : Sujets d'\u00e9preuves pratiques","text":"<p>Attention : signification des ic\u00f4nes</p> <ul> <li> : indique un nouveau sujet par rapport \u00e0 la session 2022, si cette ic\u00f4ne n'est pas pr\u00e9sente, le sujet est identique ou l\u00e9g\u00e8rement diff\u00e9rent d'un sujet de le session 2022</li> <li> : indique que le sujet propose un exercice en rapport avec les math\u00e9matiques</li> </ul> <p>Fichier comportant tous les sujets 2023 </p> Num\u00e9ro Lien de t\u00e9l\u00e9chargement Th\u00e8me exercice 1 Th\u00e8me exercice 2 Code fourni Correction 1 Sujet N\u00b01 Verifier qu'un tableau est tri\u00e9 D\u00e9pouillement d'un vote (dictionnaire)  Code 2023-S01 2 Sujet N\u00b02 Liste des indices du maximum Pile des \u00e9l\u00e9ments positifs  Code 2023-S02 3 Sujet N\u00b03 Moyenne pond\u00e9r\u00e9e Codage d'une image (liste de listes)  Code 2023-S03 4 Sujet N\u00b04 Pr\u00e9sence de doublons dans une liste tri\u00e9e Cr\u00e9ation de grille au d\u00e9mineur  Code 2023-S04 5 Sujet N\u00b05 Simulation de lancers de d\u00e9s Repr\u00e9sentation d'une image par une liste de listes  Code 2023-S05 6 Sujet N\u00b06 Recherche de la derni\u00e8re occurrence Plus courte distance entre un point et une liste de points  Code 2023-S06 7 Sujet N\u00b07 Fusion de deux listes d\u00e9j\u00e0 tri\u00e9es Conversion de nombres en chiffres romains  Code 2023-S07 8 Sujet N\u00b08 Recherche de maximum dans un dictionnaire Evaluation d'une expression en notation postfixe (pile)  Code 2023-S08 9 Sujet N\u00b09 Multiplication avec uniquement additions et soustractions Recherche dichotomique r\u00e9cursive  Code 2023-S09 10 Sujet N\u00b010 Maximum des \u00e9l\u00e9ments d'un tableau Parenth\u00e9sage correct (pile)  Code 2023-S10 11 Sujet N\u00b011 Conversion du binaire vers le d\u00e9cimal Tri par insertion  Code 2023-S11 12 Sujet N\u00b012 Ajout d'une cl\u00e9 dans un arbre binaire (r\u00e9cursivit\u00e9) Algorithme glouton pour un rangement d'objet  Code 2023-S12 13 Sujet N\u00b013 Nombre d'occurrences d'un \u00e9l\u00e9ment dans une liste Rendu de monnaie  Code 2023-S13 14 Sujet N\u00b014 Recherche de l'indice de la premi\u00e8re occurrence insertion dans une liste d\u00e9j\u00e0 tri\u00e9e  Code 2023-S14 15 Sujet N\u00b015 Minimum d'une liste de temp\u00e9rature Palindromes  Code 2023-S15 16 Sujet N\u00b016 Liste des indices des \u00e9l\u00e9ments inf\u00e9rieures \u00e9gaux et sup\u00e9rieurs \u00e0 une valeur  Code 2023-S16 17 Sujet N\u00b017 Moyenne pond\u00e9r\u00e9e Triangle de Pascal  Code 2023-S17 18 Sujet N\u00b018 Valeur et indice du maximum Ordre des g\u00e8nes sur un chromosome  Code 2023-S18 19 Sujet N\u00b019 Recherche dichotomique Code de C\u00e9sar  Code 2023-S19 20 Sujet N\u00b020 Fusion de deux dictionnaires Simulation d'un jeu de d\u00e9s  Code 2023-S20 21 Sujet N\u00b021 Codage par diff\u00e9rence Expression arithm\u00e9tique repr\u00e9sent\u00e9e par un arbre binaire  Code 2023-S21 22 Sujet N\u00b022 Calcul de puissances avec multiplication successives Codage d'un mot  Code 2023-S22 23 Sujet N\u00b023 Traitement de donn\u00e9es en table (animaux et enclos) Recherche r\u00e9cursive dans un tableau  Code 2023-S23 24 Sujet N\u00b024 Nombre d'occurrences des caract\u00e8res (dictionnaire) Fusion de deux listes d\u00e9j\u00e0 tri\u00e9es  Code 2023-S24 25 Sujet N\u00b025 Enum\u00e9ration des positions des \u00e9l\u00e9ments dans une liste (dictionnaire) Arbre binaire (r\u00e9cursivit\u00e9)  Code 2023-S25 26 Sujet N\u00b026 Multiplications avec uniquement additions et soustractions Recherche par dichotomique  Code 2023-S26 27 Sujet N\u00b027 Premi\u00e8re occurence du minimum Separation des 0 et des 1 dans un tableau  Code Voir 2022 28 Sujet N\u00b028 Moyenne des \u00e9l\u00e9ments d'un tableau Recherche par dichotomie  Code 2023-S28 29 Sujet N\u00b029 Taille d'un arbre binaire Insertion d'un \u00e9l\u00e9ment dans une liste \u00e0 une position donn\u00e9e  Code 2023-S29 30 Sujet N\u00b030 Calcul de moyenne Conversion du d\u00e9cimal vers le binaire  Code 2023-S30 31 Sujet N\u00b031 Nombre d'occurrences d'un \u00e9l\u00e9ment dans une liste Conversion du d\u00e9cimal vers le binaire  Code 2023-S31 32 Sujet N\u00b032 Minimum et maximum des \u00e9l\u00e9ments d'un tableau Classe repr\u00e9sentant des cartes (POO)  Code 2023-S32 33 Sujet N\u00b033 Taille d'un arbre binaire (r\u00e9cursivit\u00e9) Tri par s\u00e9lection  Code 2023-S33 34 Sujet N\u00b034 Calcul d'une moyenne S\u00e9paration des 0 et des 1 dans un tableau  Code Voir 2022 35 Sujet N\u00b035 Ou exclusif bit \u00e0 bit entre deux listes de 0 et de 1 Carr\u00e9s semi-magiques  Code 2023-S35 36 Sujet N\u00b036 Liste des couples d'entiers cons\u00e9cutifs Codage d'une image  Code 2023-S36 37 Sujet N\u00b037 Indice de la derni\u00e8re occurence Classe des adresse Ip (POO)  Code 2023-S37 38 Sujet N\u00b038 Mots correspondants \u00e0 un motif Recherche d'un cycle  Code 2023-S38 39 Sujet N\u00b039 Calcul des termes de la suite de Fibonacci Liste des \u00e9l\u00e8ves ayant obtenu la note maximale  Code 2023-S39 40 Sujet N\u00b040 Nombre de mots dans une phrase Arbre binaire (POO)  Code 2023-S40 41 Sujet N\u00b041 Nombre d'occurrences d'un caract\u00e8res dans une chaine Rendu de monnaie en r\u00e9cursif  Code 2023-S41 42 Sujet N\u00b042 Tri par s\u00e9lection Jeu du plus ou moins  Code 2023-S42 43 Sujet N\u00b043 Conversion du d\u00e9cimal vers le binaire Tri \u00e0 bulles  Code 2023-S43 44 Sujet N\u00b044 Ecriture d'une chaine de caract\u00e8res \u00e0 l'envers Crible d'Erasthot\u00e8ne  Code 2023-S44 45 Sujet N\u00b045 Tri par d\u00e9nombrement Conversion binaire vers d\u00e9cimal et inversement  Code 2023-S45"},{"location":"Annales/Corriges/2022-S01/","title":"Corrig\u00e9 sujet 01 - Ann\u00e9e : 2022","text":"<p>Sujet 01 - 2022 </p>"},{"location":"Annales/Corriges/2022-S01/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(caractere,mot):\n    occurrence = 0\n    for c in mot:\n        if c == caractere:\n            occurrence += 1\n    return occurrence\n</code></pre> <p>Commentaires</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable en comptant les occurrences d'apparition d'une valeur. Un parcours par \u00e9l\u00e9ment suffit, les indices des occurrences n'\u00e9tant pas utilis\u00e9es.</p>"},{"location":"Annales/Corriges/2022-S01/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>Pieces = [100,50,20,10,5,2,1]\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\nreturn solution #(1)\np = Pieces[i]\nif p &lt;= arendre : #(2)\nsolution.append(p)\n        return rendu_glouton(arendre - p, solution, i)\n    else :\nreturn rendu_glouton(arendre, solution, i+1) #(3)\n</code></pre> <ol> <li>Lorsqu'il n'y a plus rien \u00e0 rendre on renvoie la solution</li> <li>Si la pi\u00e8ce est plus petite que la somme \u00e0 rendre on l'ajoute \u00e0 la solution et on diminue la somme \u00e0 rendre</li> <li>La pi\u00e8ce d\u00e9passe la somme \u00e0 rendre, on relance le processus en regardant la pi\u00e8ce suivante dans la liste</li> </ol> <p>Attention<ul> <li>Le code fourni utilise un objet mutable (une liste) comme param\u00e8tre par d\u00e9faut d'une fonction : \ud83d\udc0d Script Python<pre><code>def rendu_glouton(arendre, solution=[], i=0):\n</code></pre> C'est une tr\u00e8s mauvaise pratique car source d'erreurs, en effet la variable <code>solution</code> \u00e9tant mutable elle est modifi\u00e9e par la fonction lors d'un premier appel et ne sera donc plus vide lors des appels suivants. Pour constater le probl\u00e8me, faire plusieurs appels \u00e0 cette fonction sans sp\u00e9cifier les arguments ayant des valeurs par d\u00e9faut. Pour une solution \u00e0 ce probl\u00e8me, on pourra par exemple consulter ce site</li> </ul> </p>"},{"location":"Annales/Corriges/2022-S02/","title":"Corrig\u00e9 sujet 02 - Ann\u00e9e : 2022","text":"<p>Sujet 02 - 2022 </p>"},{"location":"Annales/Corriges/2022-S02/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(donnees):\n    somme_notes = 0\n    somme_coefficients = 0\n    for d in donnees:\n        note = d[0]\n        coefficient = d[1]\n        somme_notes += note*coefficient\n        somme_coefficients += coefficient\n    return somme_notes/somme_coefficients\n</code></pre> <p>Commentaires</p> <p>Bien comprendre la fa\u00e7on dont les donn\u00e9es sont organis\u00e9es, c'est une liste dont chaque \u00e9l\u00e9ment est un tuple <code>(couple,coefficient)</code>. Ainsi dans l'exemple de l'\u00e9nonc\u00e9 : <code>donnees=[(15,2),(9,1),(12,3)]</code>  la premi\u00e8re donn\u00e9e not\u00e9e<code>d</code> est le couple <code>(15,2)</code> et donc la premi\u00e8re note est <code>d[0]</code> et le premier coefficient <code>d[1]</code>.</p>"},{"location":"Annales/Corriges/2022-S02/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def pascal(n):\nC= [[1]] #(1)\nfor k in range(1,n+1):\nCk = [1] #(2)\nfor i in range(1,k):\nCk.append(C[k-1][i-1]+C[k-1][i] ) #(3)\nCk.append(1) #(2)\n        C.append(Ck)\n    return C\n</code></pre> <ol> <li>La variable C est la liste des lignes du triangle de Pascal et la toute premi\u00e8re ligne du triangle de Pascal contient un unique 1</li> <li>Toutes les lignes (sauf la premi\u00e8re) commencent et se terminent par un 1. </li> <li>On construit la ligne en utilisant la relation donn\u00e9e dans l'\u00e9nonc\u00e9.</li> <li>Toutes les lignes (sauf la premi\u00e8re) commencent et se terminent par un 1. </li> </ol> <p>Commentaire<p>Le sujet avantage probablement les \u00e9l\u00e8ves faisant la sp\u00e9cialit\u00e9 math\u00e9matiques en terminale puisqu'ils auront d\u00e9j\u00e0 rencontr\u00e9 le triangle de Pascal ainsi que la relation de Pascal :</p> \\[\\binom{k}{i} = \\binom{k-1}{i-1} + \\binom{k-1}{i}\\] <p>qui sert de base \u00e0 la construction de la \\(k-i\u00e8me\\) ligne du triangle de Pascal \u00e0 partir de la ligne pr\u00e9c\u00e9dente. On peut d'ailleurs signaler que la g\u00e9n\u00e9ration des coefficients binomiaux est un des algorithmes pr\u00e9vus au programme de terminale en sp\u00e9cialit\u00e9 math\u00e9matiques.</p> </p>"},{"location":"Annales/Corriges/2022-S03/","title":"Corrig\u00e9 sujet 03 - Ann\u00e9e : 2022","text":"<p>Sujet 03 - 2022 </p>"},{"location":"Annales/Corriges/2022-S03/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def delta(liste):\n    codage=[liste[0]]\n    for i in range(1,len(liste)):\n        codage.append(liste[i]-liste[i-1])\n    return codage\n</code></pre> <p>Commentaires</p> <ul> <li>On construit le codage en partant du premier \u00e9l\u00e9ment de la liste. Les autres \u00e9l\u00e9ments sont les diff\u00e9rences entre deux \u00e9l\u00e9ments cons\u00e9cutifs de la liste de d\u00e9part.</li> <li>L'\u00e9criture de cette fonction peut aussi se faire (de fa\u00e7on plus concise) en utilisant les listes par compr\u00e9hension : \ud83d\udc0d Script Python<pre><code>    def delta(liste):\n        return [liste[i]-liste[i-1] if i&gt;0 else liste[i] for i in range(len(liste))]\n</code></pre></li> </ul>"},{"location":"Annales/Corriges/2022-S03/#exercice-2","title":"Exercice 2","text":"<p>Bug</p> <p>Le code fourni semble contenir une erreur, en effet, pour le compl\u00e9ter on utilise un <code>if True</code> \u00e0 la ligne 23 ! On devrait donc soit se passer de la ligne 23, soit r\u00e9\u00e9crire cette fonction.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n\n\n\ndef expression_infixe(e):\ns = \"\" #(1)\nif e.gauche is not None: #(2)\ns = '(' + s + expression_infixe(e.gauche)\ns = s + str(e.valeur)\nif e.droit is not None: #(3)\ns = s + expression_infixe(e.droit) + ')'\nif True : #(4)\n        return s\n</code></pre> <ol> <li>La variable <code>s</code> va contenir l'expression arithm\u00e9tique</li> <li>Si le noeud contient un fils gauche, on construit l'expression associ\u00e9e et on ajoute la valeur du noeud \u00e0 la suite.</li> <li>On construit la partie droite de l'expression (si elle existe)</li> <li>Si on atteint cette ligne, l'expression a \u00e9t\u00e9 construite en totalit\u00e9, il reste \u00e0 la renvoyer. Il ne devrait pas y avoir de <code>if</code> ! </li> </ol> <p>Commentaire<p>Sujet assez difficile en plus d'\u00eatre bugg\u00e9 et qui utilise diverses notions du programme (arbre, r\u00e9cursivit\u00e9) et qui pr\u00e9sente de plus un aspect math\u00e9matique.</p> </p>"},{"location":"Annales/Corriges/2022-S04/","title":"Corrig\u00e9 sujet 04 - Ann\u00e9e : 2022","text":"<p>Sujet 04 - 2022 </p>"},{"location":"Annales/Corriges/2022-S04/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(liste):\n    consecutifs = []\n    for i in range(len(liste)-1):\n        if liste[i+1]==liste[i]+1:\n            consecutifs.append((liste[i],liste[i+1]))\n    return consecutifs\n</code></pre> <p>Commentaires</p> <ul> <li>La condition <code>liste[i+1]==liste[i]+1</code> permet de tester que deux \u00e9l\u00e9ments cons\u00e9cutifs de la liste sont deux entiers qui se suivent.</li> <li>On peut utiliser les d\u00e9finitions de liste par compr\u00e9hension : \ud83d\udc0d Script Python<pre><code>    def recherche(liste):\n        return [(liste[i],liste[i+1])  for i in range(len(liste)-1) if liste[i+1]==liste[i]+1]\n</code></pre></li> </ul>"},{"location":"Annales/Corriges/2022-S04/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\nif M[i][j]== val: #(1)\nreturn\n\n    M[i][j]=val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\nif ((i-1) &gt;= 0 and M[i-1][j] == 1): #(2)\npropager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\nif ((i+1) &lt; len(M) and M[i+1][j] == 1): #(2)\npropager(M, i+1, j, val)\n# l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\nif ((j-1) &gt;= 0 and M[i][j-1] == 1): #(2)\npropager(M, i, j-1, val)\n# l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\nif ((j+1) &lt; len(M) and M[i][j+1] == 1): #(2)\npropager(M, i, j+1, val)\n</code></pre> <ol> <li>C'est la condition d'arr\u00eat de la r\u00e9cursivit\u00e9, on ne relance pas la propagation sur les cases voisines</li> <li>On relance la propagation \u00e0 partir de la case voisine si celle-ci est  est dans la grille (premi\u00e8re partie de la condition) et aussi dans la m\u00eame composante (seconde partie de la condition)</li> <li>On relance la propagation \u00e0 partir de la case voisine si celle-ci est  est dans la grille (premi\u00e8re partie de la condition) et aussi dans la m\u00eame composante (seconde partie de la condition)</li> <li>On relance la propagation \u00e0 partir de la case voisine si celle-ci est  est dans la grille (premi\u00e8re partie de la condition) et aussi dans la m\u00eame composante (seconde partie de la condition)</li> <li>On relance la propagation \u00e0 partir de la case voisine si celle-ci est  est dans la grille (premi\u00e8re partie de la condition) et aussi dans la m\u00eame composante (seconde partie de la condition)</li> </ol> <p>Commentaire</p> <p>Le <code>return</code> ligne 3 (\u00e9quivalent \u00e0 un <code>return None</code>) permet de mettre fin \u00e0 la r\u00e9cursivit\u00e9. On peut faire autrement et \u00e9viter d'utiliser <code>return</code> d'autant plus que cette fonction modifie une liste en place mais ne renvoie pas de valeur.</p>"},{"location":"Annales/Corriges/2022-S05/","title":"Corrig\u00e9 sujet 05 - Ann\u00e9e : 2022","text":"<p>Sujet 05 - 2022 </p>"},{"location":"Annales/Corriges/2022-S05/#exercice-1","title":"Exercice 1","text":"<p>Bug</p> <p>La fonction \u00e0 \u00e9crire s'appelle <code>RechercheMinMax</code> dans l'\u00e9nonc\u00e9 (avec le <code>R</code> majusucule) mais devient <code>rechercheMinMax</code> avec un <code>r</code> miniscule dans les appels.</p> \ud83d\udc0d Script Python<pre><code>def RechercheMinMax(tab):\n    if tab==[]:\n        return {'min':None,'max':None}\n    mini,maxi = tab[0],tab[0]\n    for elt in tab:\n        if elt&lt;mini: mini=elt\n        if elt&gt;maxi: maxi=elt\n    return {'min' : mini, 'max' : maxi}\n</code></pre> <p>Commentaires</p> <p>Encore une recherche classique de minimum et de maximum, le r\u00e9sultat est renvoy\u00e9 sous la forme d'un dictionnaire.</p>"},{"location":"Annales/Corriges/2022-S05/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 a 4), et Valeur (entre 1 a 13)\"\"\"\n    def __init__(self, c, v):\nassert 1&lt;=c&lt;=4, \"La couleur est entre 1 et 4\" \nassert 1&lt;=v&lt;=13, \"La valeur est entre 1 et 13\" #(1)\nself.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, \n       Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\nself.contenu = [Carte(couleur,valeur) for couleur in range(1, 5) for valeur in range(1, 14)] #(2)\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donnee\"\"\"\n    def getCarteAt(self, pos):\n        assert 0&lt;=pos&lt;52, \"Le num\u00e9ro de la carte doit \u00eatre entre 0 et 51\"\nif 0 &lt;= pos &lt; 52 :\nreturn self.contenu[pos]\n</code></pre> <ol> <li>Ce sont les instructions <code>assert</code> permettant de v\u00e9rifier que la couleur est entre 1 et 4 inclus et la valeur entre 1 et 13 inclus.</li> <li>On utilise une d\u00e9finition de liste par compr\u00e9hension pour parcourir les couleurs et valeurs possibles.</li> <li>Un jeu de cartes contient 52 cartes, la position d'une carte est entre 0 et 51 inclus. </li> </ol> <p>Attention</p> <ul> <li>Le sujet demande d'ajouter des instructions assert dans la m\u00e9thode <code>getCarteAt</code> mais cette m\u00e9thode teste d\u00e9j\u00e0 que le num\u00e9ro de la carte est entre les limites impos\u00e9s. Le <code>assert</code> pourrait v\u00e9rifier ici que <code>pos</code> est bien une variable de type <code>int</code>.</li> <li>Les docstring devraient \u00eatre plac\u00e9es juste apr\u00e8s la ligne <code>def</code> de d\u00e9finition des m\u00e9thodes et pas avant.</li> <li>Il serait pertinent d'utiliser un dictionnaire afin d'associer valeur et nom de d'une carte : <code>{1 : 'As', 2:'2', ...., 12: 'Dame',13 : 'Roi'}</code></li> </ul>"},{"location":"Annales/Corriges/2022-S06/","title":"Corrig\u00e9 sujet 06 - Ann\u00e9e : 2022","text":"<p>Sujet 06 - 2022 </p>"},{"location":"Annales/Corriges/2022-S06/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    if tab==[]: return None,None\n    indice_maxi,maxi = 0, tab[0]\n    for indice in range(1,len(tab)):\n        if tab[indice]&gt;maxi:\n            indice_maxi,maxi = indice,tab[indice]\n    return maxi,indice_maxi\n</code></pre> <p>Commentaires</p> <ul> <li>Rien n'est indiqu\u00e9 pour la liste vide, on a choisit de renvoyer le couple <code>(None,None)</code> dans ce cas</li> <li>Un parcours par indice est n\u00e9cessaire puisqu'on a besoin de la position du maximum.</li> </ul>"},{"location":"Annales/Corriges/2022-S06/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\ni = 0 #(1)\ntrouve = False\nwhile i &lt; n-g and trouve == False : #(2)\nj = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\nj += 1 #(3)\nif j == g:\n            trouve = True\ni+=1 #(4)\nreturn trouve\n\nprint(recherche(\"AATC\", \"GTACAAATCTTGCC\"))\nprint(recherche(\"AGTC\", \"GTACAAATCTTGCC\"))\n</code></pre> <ol> <li>C'est l'indice <code>i</code> de parcours de la cha\u00eene, initialis\u00e9 \u00e0 0</li> <li>La recherche continue tant que <code>i</code> est inf\u00e9rieure \u00e0 la longueur de la chaine (<code>n</code>) - la longueur du motif (<code>g</code>) et que la motif n'a pas \u00e9t\u00e9 trouv\u00e9</li> <li>On a une correspondance, <code>j</code> est l'indice de parcours du motif, on continue \u00e0 chercher en avan\u00e7ant dans le motif <code>j=j+1</code>.</li> <li>On passe \u00e0 l'indice suivant de la cha\u00eene.</li> </ol> <p>Attention</p> <ul> <li>La recherche textuelle n'est pas au programme de l'\u00e9preuve de Bac.</li> <li>Le double parcours avec un indice parcourant la cha\u00eene et un autre le motif pr\u00e9sente sans doute une difficult\u00e9.</li> <li>Au lieu de <code>trouve == False</code> (ligne 6), on peut \u00e9crire <code>not trouve</code> qui est sans doute plus parlant.</li> </ul>"},{"location":"Annales/Corriges/2022-S07/","title":"Corrig\u00e9 sujet 07 - Ann\u00e9e : 2022","text":"<p>Sujet 07 - 2022 </p>"},{"location":"Annales/Corriges/2022-S07/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def conv_bin(n):\n    liste_bit=[n%2]\n    n=n//2\n    while n!=0:\n        liste_bit.append(n%2)\n        n=n//2\n    liste_bit.reverse()\n    return liste_bit,len(liste_bit)\n</code></pre> <p>Commentaires</p> <ol> <li>L'exemple de l'\u00e9nonc\u00e9 est mal choisi, en effet l'\u00e9criture binaire de 9 : \\(9_{10}=1001_2\\) \u00e9tant un palindrome (identique \u00e0 l'envers), cet exemple ne permet pas de d\u00e9tecter un \u00e9ventuel oubli de l'utilisation de <code>reverse</code>.</li> <li>Dans la correction, l'initialisation <code>liste_bit=[n%2]</code> permet de traiter le cas de 0.</li> </ol>"},{"location":"Annales/Corriges/2022-S07/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T) \nfor i in range(len(T)-1,0,-1): #(1)\nfor j in range(i):\nif T[j] &gt; T[j+1]: #(2)\ntemp = T[j] #(3)\nT[j] = T[j+1] \nT[j+1] = temp\n    return T\n</code></pre> <ol> <li>On parcourt la liste \u00e0 l'envers \u00e0 l'aide de l'indice <code>i</code> (le dernier \u00e9l\u00e9ment de <code>T</code> a pour indice <code>len(T)-1</code>)</li> <li>On teste si deux \u00e9l\u00e9ments cons\u00e9cutifs ne sont pas dans le bon ordre</li> <li>Si oui, alors on les \u00e9change</li> </ol> <p>Attention</p> <ul> <li>Cet exercice demande de coder le tri \u00e0 bulles qui n'est pourtant pas au programme. Son principe est de faire remonter les plus petits \u00e9l\u00e9ments de la liste vers le d\u00e9but en les \u00e9changeant avec leur voisins.</li> <li>Les lignes 6,7 et 8 permettant d'\u00e9changer <code>T[j]</code> et <code>T[j+1]</code> en utilisant la variable temporaire <code>temp</code>, on pourrait \u00e9crire plus simplement : <code>T[j],T[j+1]=T[j+1],T[j]</code></li> <li>Le <code>return T</code> peut laisser penser qu'on veut r\u00e9cup\u00e9rer la liste tri\u00e9e, alors que <code>T</code> est modifi\u00e9e et tri\u00e9e par la fonction puisque mutable.</li> </ul>"},{"location":"Annales/Corriges/2022-S08/","title":"Corrig\u00e9 sujet 08 - Ann\u00e9e : 2022","text":"<p>Sujet 08 - 2022 </p>"},{"location":"Annales/Corriges/2022-S08/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt,tab):\n  for i in range(len(tab)):\n    if tab[i]==elt:\n      return i\n  return -1\n</code></pre> <p>Commentaires</p> <p>Exercice classique de recherche dans une liste, un parcours par les indices s'impose puisqu'on renvoie la position de l'\u00e9l\u00e9ment dans la liste.</p>"},{"location":"Annales/Corriges/2022-S08/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a) \ni = len(tab)-1 #(1)\nwhile a &lt; l[i] and i &gt;= 0:  #(2)\nl[i+1] = l[i] #(3)\nl[i] = a\ni = i - 1 #(4)\nreturn l\n</code></pre> <ol> <li>C'est l'indice auquel se trouve l'\u00e9l\u00e9ment pr\u00e9c\u00e9dant celui qui a \u00e9t\u00e9 ins\u00e9r\u00e9. Au d\u00e9but on ins\u00e8re \u00e0 la fin (en position <code>len(tab)</code>) donc celui qui pr\u00e9c\u00e8de a l'indice <code>len(tab)-1</code>. </li> <li>On \u00e9change <code>a</code> avec le pr\u00e9c\u00e9dent tant qu'il est inf\u00e9rieur et que le d\u00e9but de liste n'est pas atteint.</li> <li>Cette ligne et la suivante permettent d'effectuer l'\u00e9change.</li> <li>D\u00e9cr\u00e9mentation de la position \u00e0 tester.</li> </ol> <p>Attention</p> <ul> <li>Pour compl\u00e9ter le code, il faut comprendre l'algorithme mis en oeuvre pour ins\u00e9rer au bon emplacement :   <ol> <li>Ajouter \u00e0 la fin</li> <li>Remonter l'\u00e9l\u00e9ment en l'\u00e9changeant avec son voisin de gauche tant qu'il est inf\u00e9rieur \u00e0 ce dernier </li> </ol> </li> <li>La ligne 2 a pour but de faire une copie du tableau <code>tab</code> afin de ne pas le modifier. On aurait pu utiliser <code>copy</code>.</li> </ul>"},{"location":"Annales/Corriges/2022-S09/","title":"Corrig\u00e9 sujet 09 - Ann\u00e9e : 2022","text":"<p>Sujet 09 - 2022 </p>"},{"location":"Annales/Corriges/2022-S09/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def calcul(k):\n  resultat=[k]\n  while k!=1:\n    if k%2==0: \n      k=k//2\n    else:\n      k=3*k+1\n    resultat.append(k)\n  return resultat\n\nprint(calcul(7))\n</code></pre> <p>Commentaires</p> <ul> <li>Le sujet avantage les \u00e9l\u00e8ves ayant suivi l'enseignement de sp\u00e9cialit\u00e9s math\u00e9matiques. Les suites d\u00e9finies par r\u00e9currence comme celle de l'\u00e9nonc\u00e9 y sont vues d\u00e8s la classe de premi\u00e8re. </li> <li>Le test permettant de savoir si un entier <code>2</code> est pair s'\u00e9crit <code>n%2 == 0</code>, c'est \u00e0 dire qu'on teste qu'en divisant par 2 il reste 0.</li> <li>Attention \u00e0 la ligne 5 \u00e0 bien utiliser la division euclidienne <code>\\\\</code> et pas la division d\u00e9cimale <code>\\</code> (sinon le r\u00e9sultat obtenu serait alors un flottant).</li> </ul>"},{"location":"Annales/Corriges/2022-S09/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n        \"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n        \"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n        \"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\ncode_a = 0 #(1)\nfor c in mot :\ncode_c = code_c + str(dico[c]) #(2)\ncode_a = code_a + dico[c] #(3)\ncode_c = int(code_c)\nif code_c%code_a==0 : #(4)\nmot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> <ol> <li>Bien comprendre que le <code>code_a</code> est un entier (addition des entiers), tandis que <code>code_c</code> est une cha\u00eene de caract\u00e8res (concat\u00e9nation).</li> <li>Les valeurs du dictionnaires sont des entiers pour concat\u00e9ner avec la chaine <code>code_c</code> il faut convertir en <code>str</code></li> <li>On addition des entiers, pas de conversion n\u00e9cessaire</li> <li>Teste si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</li> </ol> <p>Attention</p> <ul> <li>Les lignes 14,15,16, et 17 se r\u00e9sument \u00e0 <code>mot_est_parfait = (code_c%code_a==0)</code></li> <li>M\u00eame si cela est autoris\u00e9 en Python, le changement de type d'une variable tel que celui effectu\u00e9 ligne 13 (o\u00f9 <code>int_c</code> qui \u00e9tait une cha\u00eene de caract\u00e8res devient un entier) est largement consid\u00e9r\u00e9 comme une mauvaise pratique de programmation.</li> <li>On aurait pu se passer du dictionnaire en utilisant les fonctions <code>ord</code> et <code>chr</code>.</li> </ul>"},{"location":"Annales/Corriges/2022-S10/","title":"Corrig\u00e9 sujet 10 - Ann\u00e9e : 2022","text":"<p>Sujet 10 - 2022 </p>"},{"location":"Annales/Corriges/2022-S10/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def occurrence_lettres(phrase):\n    occ = {}\n    for caractere in phrase:\n        if caractere in occ:\n            occ[caractere] += 1\n        else:\n            occ[caractere]=1\n    return occ\n</code></pre> <p>Commentaire</p> <ul> <li>Bon exercice pour revoir l'utilisation des dictionnaires.</li> <li>Le terme occurrence est utilis\u00e9 avec le sens habituellement attribu\u00e9 \u00e0 nombre d'occurrences</li> <li>Dans le nom de la fonction dans l'\u00e9nonc\u00e9, <code>occurence</code> s'\u00e9crit avec un seul <code>r</code>, ce serait deux sans faute d'orthographe.</li> </ul>"},{"location":"Annales/Corriges/2022-S10/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\nwhile i1 &lt; n1 and i2&lt;n2 : #(1)\nif L1[i1] &lt; L2[i2]:\nL12[i] = L1[i1] #(2)\ni1 = i1 + 1\nelse:\n            L12[i] = L2[i2]\ni2 = i2 + 1 \ni += 1\n    while i1 &lt; n1:\nL12[i] = L1[i1] #(3)\ni1 = i1 + 1\ni = i + 1\nwhile i2 &lt; n2:\nL12[i] = L2[i2]\ni2 = i2 + 1\ni = i + 1\nreturn L12\n</code></pre> <ol> <li><code>i1</code> est l'indice de parcours de <code>L1</code> (de longueur <code>n1</code>) <code>i2</code> est l'indice de parcours de <code>L2</code> (de longueur <code>n2</code>)</li> <li>On se trouve dans le cas o\u00f9 le plus petit \u00e9l\u00e9ment se trouve dans <code>L1</code>, c'est donc lui qui est ajout\u00e9 \u00e0 liste fusionn\u00e9e <code>L12</code>.</li> <li>On a atteint la fin de l'une des listes, il reste donc \u00e0 ajouter les \u00e9l\u00e9ments restants de l'autre liste. </li> </ol>"},{"location":"Annales/Corriges/2022-S11/","title":"Corrig\u00e9 sujet 11 - Ann\u00e9e : 2022","text":"<p>Sujet 11 - 2022 </p>"},{"location":"Annales/Corriges/2022-S11/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab,elt):\n    ind_debut = 0\n    ind_fin = len(tab)-1\n    while ind_fin &gt; ind_debut:\n        ind_milieu = (ind_fin+ind_debut)//2\n        if tab[ind_milieu]==elt:\n            return ind_milieu\n        elif tab[ind_milieu]&gt;elt:\n            ind_fin=ind_milieu-1\n        else:\n            ind_debut=ind_milieu+1\n    return -1\n</code></pre> <p>Commentaire</p> <ul> <li>Bien qu'au programme (m\u00e9thode diviser pour r\u00e9gner), cet exercice est bien plus difficile que ceux propos\u00e9s habituellement en exercice 1 (recherche simple, recherche de maximum, calcul de moyennes, ... ).</li> <li>En cas de difficult\u00e9s, revenir au chapitre de premi\u00e8re sur la recherche par dichotomie</li> </ul>"},{"location":"Annales/Corriges/2022-S11/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\nfor lettre in message : #(1)\nif lettre in ALPHABET :\nindice = (position_alphabet(lettre) + decalage)%26 #(2)\nresultat = resultat + ALPHABET[indice]\nelse:\nresultat = resultat + lettre #(3)\n    return resultat\n</code></pre> <ol> <li>La variable de parcours du message s'appelle <code>lettre</code> comme indiqu\u00e9 \u00e0 la ligne suivante !</li> <li>On ajoute le decalage \u00e0 la position de la lettre le <code>%26</code> sert ensuite \u00e0 s'assurer qu'on retombe entre 0 et 25.</li> <li>Si la lettre n'est pas dans l'alphabet, on la laisse telle quelle</li> </ol> <p>Attention</p> <ol> <li>La variable <code>lettre</code> de parcours du message peut contenir justement autre chose qu'une lettre (ponctuation, espace, ...)</li> <li>La m\u00e9thode <code>find</code> de recherche de l'indice de la lettre dans l'alphabet pourrait s'\u00e9crire sans utiliser la m\u00e9thode <code>find</code> (par exemple avec <code>ord</code>)</li> </ol>"},{"location":"Annales/Corriges/2022-S12/","title":"Corrig\u00e9 sujet 12 - Ann\u00e9e : 2022","text":"<p>Sujet 12 - 2022 </p>"},{"location":"Annales/Corriges/2022-S12/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    assert tab!=[], \"erreur\"\n    somme = 0\n    for valeur in tab:\n        somme = somme + valeur\n    return somme/len(tab)\n</code></pre> <p>Commentaire</p> <ol> <li>Le traitement demand\u00e9 dans le cas d'un tableau vide n'est pas explicite, on ne sait pas s'il faut juste faire un <code>print(erreur)</code> ou plut\u00f4t utiliser un <code>assert</code> (comme dans cette correction)</li> </ol>"},{"location":"Annales/Corriges/2022-S12/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice. \n    #Au debut, la zone non triee est le tableau entier.\ni= 0\nj= len(tab)-1 #(1)\nwhile i != j :\n        if tab[i]== 0:\ni = i + 1 #(2) \nelse :\n            valeur = tab[j]\ntab[j] = tab[i] #(3)\ntab[i] = valeur\nj= j-1 #(4)\nreturn tab\n</code></pre> <ol> <li>Le dernier \u00e9l\u00e9ment d'un tableau <code>tab</code> a pour indice <code>len(tab)-1</code></li> <li>Si l'\u00e9l\u00e9ment est un 0, on incr\u00e9mente le debut de la zone non tri\u00e9e d'indice <code>i</code>. La zone non tri\u00e9e diminue \"par la gauche\".</li> <li>Sinon, on \u00e9change cette valeur avec la fin de zone non tri\u00e9e (situ\u00e9e en indice <code>j</code>).</li> <li>La zone non tri\u00e9e diminue \"par la droite\", on d\u00e9cr\u00e9mente donc sa fin d'indice <code>j</code></li> </ol> <p>Attention</p> <p>Les lignes 10 \u00e0 12 qui permettent d'\u00e9changer <code>tab[j]</code> et <code>tab[i]</code> en utilisant la variable temporaire <code>valeur</code> peuvent \u00eatre simplifi\u00e9es en remarquant que <code>tab[i]</code> vaut forc\u00e9ment 1 dans cette branche du <code>if</code>.</p>"},{"location":"Annales/Corriges/2022-S13/","title":"Corrig\u00e9 sujet 13 - Ann\u00e9e : 2022","text":"<p>Sujet 13 - 2022 </p>"},{"location":"Annales/Corriges/2022-S13/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    n1 = somme_a_rendre//5\n    somme_a_rendre = somme_a_rendre%5\n    n2 = somme_a_rendre//2\n    n3 = somme_a_rendre%2\n    return [n1,n2,n3]\n</code></pre> <p>Commentaire</p> <ul> <li>Bien qu'au programme de premi\u00e8re (algorithme glouton), cet exercice est bien plus difficile que ceux propos\u00e9s habituellement en exercice 1 (recherche simple, recherche de maximum, calcul de moyennes, ... ).</li> <li>La correction propos\u00e9e ici utilise les trois variables <code>n1</code>,<code>n2</code> et <code>n3</code> propos\u00e9es dans l'\u00e9nonc\u00e9. Dans un cadre plus g\u00e9n\u00e9ral, une boucle travaillant sur une liste de pi\u00e8ces serait pr\u00e9f\u00e9rable. Voir par exemple la correction propos\u00e9e ici.</li> </ul>"},{"location":"Annales/Corriges/2022-S13/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n\nclass File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\nnouveau_maillon = Maillon(element) #(1)\nnouveau_maillon.suivant = self.dernier_file\nself.dernier_file = nouveau_maillon #(2)\ndef est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\nwhile maillon != None : #(3)\nprint(maillon.valeur)\nmaillon = maillon.suivant #(4)\ndef defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\nmaillon = self.dernier_file #(5)\nwhile maillon.suivant.suivant != None :\n                maillon = maillon.suivant\nresultat = maillon.suivant.valeur\nmaillon.suivant = None\n            return resultat\n        return None \n</code></pre> <ol> <li>Le constructeur de la classe <code>Maillon</code> prend en argument la valeur <code>v</code> (appel\u00e9e ici <code>element</code>)</li> <li>Comme indiqu\u00e9 dans l'\u00e9nonc\u00e9, l'attribut <code>dernier_file</code> doit contenir le dernier maillon enfil\u00e9.</li> <li>La fin de file est atteinte lorsque le maillon vaut <code>None</code></li> <li>Passage au maillon suivant</li> <li>On commence au dernier maillon en s'assurant avant que le maillon suivant n'est pas <code>None</code></li> </ol> <p>Attention</p> <ol> <li>L'impl\u00e9mentation d'une file propos\u00e9e ici est probl\u00e9matique, pour d\u00e9filer, il faut partir de la fin (seul acc\u00e8s \u00e0 la file), la remonter en entier afin de d\u00e9filer le premier.</li> <li>Faire un sch\u00e9ma de l'impl\u00e9mentation propos\u00e9e peut aider \u00e0 la compr\u00e9hension du code donn\u00e9 dans l'\u00e9nonc\u00e9.</li> </ol>"},{"location":"Annales/Corriges/2022-S14/","title":"Corrig\u00e9 sujet 14 - Ann\u00e9e : 2022","text":"<p>Sujet 14 - 2022 </p>"},{"location":"Annales/Corriges/2022-S14/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def correspond(mot,mot_a_trous):\n    for indice in range(len(mot)):\n        if mot_a_trous[indice]!=\"*\" and mot[indice]!=mot_a_trous[indice]:\n            return False\n    return True\n</code></pre> <p>Commentaire</p> <p>Le sujet ne pr\u00e9cise pas le comportement attendu si <code>mot</code> et <code>mot_a_trous</code> n'ont pas la m\u00eame longueur.</p>"},{"location":"Annales/Corriges/2022-S14/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \n    \u00e0 un plan d'envoi de messages entre `N` personnes A, B, C, \n    D, E, F ...(avec N &lt;= 26).\n    Renvoie True si le plan d'envoi de messages est cyclique\n    et False sinon. \n    '''\n    personne = 'A'\nN = len(plan)                          \nfor i in range(N-1): #(1)\nif plan[personne] == 'A': #(2)\nreturn False\nelse:\npersonne = plan[personne] #(3)\nreturn True\n</code></pre> <ol> <li>Attention \u00e0 ne pas parcourir en totalit\u00e9 le dictionnaire (sinon on trouvera forcement un cycle). On s'arr\u00eate donc \u00e0 l'avant dernier.</li> <li>C'est le fait de retomber sur la personne de d\u00e9part (donc <code>'A'</code>) qui indique qu'on a trouv\u00e9 un cycle.</li> <li>Passage \u00e0 la personne suivante (revoir si besoin les dictionnaires)    </li> </ol>"},{"location":"Annales/Corriges/2022-S15/","title":"Corrig\u00e9 sujet 15 - Ann\u00e9e : 2022","text":"<p>Sujet 15 - 2022 </p>"},{"location":"Annales/Corriges/2022-S15/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt,tab):\n    nb_rep = 0\n    for x in tab:\n        if x==elt:\n            nb_rep += 1\n    return nb_rep\n</code></pre> <p>Commentaire</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable en comptant les occurrences d'apparition d'une valeur. Un parcours par \u00e9l\u00e9ment suffit, les indices des occurrences n'\u00e9tant pas utilis\u00e9es.</p>"},{"location":"Annales/Corriges/2022-S15/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2) #(1)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a #(2)\na = a//2 #(3)\nreturn bin_a\n</code></pre> <ol> <li>On rappelle que <code>a%2</code> est le reste dans la division euclidienne de <code>a</code> par <code>2</code> et donc le premier chiffre (\u00e0 droite) de son \u00e9criture binaire.</li> <li>Ajout du nouveau chiffre (en le convertissant en cha\u00eene de caract\u00e8res)</li> <li>On rappelle que <code>a//2</code> est le quotient dans la division euclidienne de a par 2.</li> </ol> <p>Attention</p> <p>L'illustration de l'algorithme propos\u00e9 dans l'\u00e9nonc\u00e9 laisse penser que la condition d'arr\u00eat de l'algorithme est <code>a==1</code>.</p>"},{"location":"Annales/Corriges/2022-S16/","title":"Corrig\u00e9 sujet 16 - Ann\u00e9e : 2022","text":"<p>Sujet 16 - 2022 </p>"},{"location":"Annales/Corriges/2022-S16/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    indice_maximum, maximum = 0,tab[0]\n    for indice in range(len(tab)):\n        if tab[indice]&gt;maximum:\n            indice_maximum,maximum = indice, tab[indice]\n    return maximum, indice_maximum\n</code></pre> <p>Commentaire</p> <p>L'\u00e9nonc\u00e9 n'indique pas le comportement attendu dans le cas de la liste vide.</p>"},{"location":"Annales/Corriges/2022-S16/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def positif(T):\nT2 = list(T) #(1)\nT3 = []\nwhile T2 != []:\nx = T2.pop()\nif x &gt;= 0: #(2)\nT3.append(x)\nT2 = []\n    while T3 != []:\nx = T3.pop()\nT2.append(x)\nprint('T = ',T)\nreturn T2\n</code></pre> <ol> <li>Copie ind\u00e9pendante de la liste de d\u00e9part avec la technique de l'\u00e9nonc\u00e9 : <code>list</code>.</li> <li>On d\u00e9pile en totalit\u00e9 <code>T2</code>, les \u00e9l\u00e9ments positifs sont empil\u00e9s dans <code>T3</code>.</li> <li>On d\u00e9pile <code>T3</code> et on empile son contenu dans <code>T2</code>, afin de les remettre dans l'ordre de d\u00e9part.</li> </ol> <p>Attention</p> <ol> <li>Bien comprendre que le sujet se limite \u00e0 l'interface habituelle d'une pile (<code>empile</code> avec <code>append</code>, <code>depile</code> avec <code>pop</code> et <code>est_vide</code> avec <code>==[]</code>). </li> <li>La ligne 8 est inutile, <code>T2</code> est vide puisqu'on a quitt\u00e9 la boucle.</li> </ol>"},{"location":"Annales/Corriges/2022-S17/","title":"Corrig\u00e9 sujet 17 - Ann\u00e9e : 2022","text":"<p>Sujet 17 - 2022 </p>"},{"location":"Annales/Corriges/2022-S17/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_espace = 0\n    for caractere in phrase:\n        if caractere==\" \":\n            nb_espace+=1\n    if phrase[-1]==\".\":\n        return nb_espace+1\n    else:\n        return nb_espace\n</code></pre> <p>Commentaire</p> <ol> <li>Il faut avoir remarqu\u00e9 que le nombre de mots est \u00e9gal:<ul> <li>au nombre d'espace si la phrase se termine par \"!\" ou \"?\",</li> <li>au nombre d'espace plus un si la phrase se termine par un \".\".</li> </ul> </li> <li>Les exemples de l'\u00e9nonc\u00e9 ne testent que la fin avec un point d'exclamation.</li> <li>Dans le corrig\u00e9, on a compt\u00e9 le nombre d'espace en effectuant un parcours de la phrase, on pouvait aussi utiliser la m\u00e9thode <code>count</code> des chaines de caract\u00e8res.</li> </ol>"},{"location":"Annales/Corriges/2022-S17/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    Classe impl\u00e9mentant un noeud d'arbre binaire \n    disposant de 3 attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit.\n    '''\n    def __init__(self, v, g, d):\n        self.valeur = v\n        self.gauche = g\n        self.droite = d\n\nclass ABR:\n'''\n    Classe impl\u00e9mentant une structure \n    d'arbre binaire de recherche.\n    '''\n\n    def __init__(self):\n'''Cr\u00e9e un arbre binaire de recherche vide'''\n        self.racine = None\n\n    def est_vide(self):\n'''Renvoie True si l'ABR est vide et False sinon.'''\n        return self.racine is None\n\n    def parcours(self, tab = []):\n'''\n      Renvoie la liste tab compl\u00e9t\u00e9e avec tous les \n        \u00e9l\u00e9ments de \n        l'ABR tri\u00e9s par ordre croissant.\n        '''\n        if self.est_vide():\n            return tab\n        else:\n            self.racine.gauche.parcours(tab)\ntab.append(self.racine.valeur) #(1)\nself.racine.droite.parcours(tab)\nreturn tab\n\n    def insere(self, element):\n'''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''\n        if self.est_vide():\n            self.racine = Noeud(element, ABR(), ABR())\n        else:\n            if element &lt; self.racine.valeur:\n                self.racine.gauche.insere(element)\n            else : \n                self.racine.droite.insere(element)\n\n    def recherche(self, element):\n'''\n        Renvoie True si element est pr\u00e9sent dans l'arbre \n        binaire et False sinon.\n     '''\n        if self.est_vide():\nreturn False #(2)\nelse:\n            if element &lt; self.racine.valeur:\nreturn self.racine.gauche.recherche(element) #(3)\nelif element &gt; self.racine.valeur:\nreturn self.racine.droite.recherche(element)\nelse:\nreturn True\n</code></pre> <ol> <li>On parcours \u00e0 gauche, on ajoute la valeur de la racine puis on parcourt \u00e0 droite.</li> <li>Si l'arbre est vide alors l'\u00e9l\u00e9ment ne s'y trouve pas !</li> <li>Si l'arbre n'est pas vide, on compare avec la valeur de la racine. Si ce n'est pas la valeur cherch\u00e9e on recherche \u00e0 droite ou \u00e0 gauche suivant les cas.</li> </ol> <p>Attention<ul> <li>Le code fourni utilise un objet mutable (une liste) comme param\u00e8tre par d\u00e9faut de la m\u00e9thode de parcours  : \ud83d\udc0d Script Python<pre><code>def parcours(self, tab = []):\n</code></pre> C'est une tr\u00e8s mauvaise pratique car source d'erreurs, en effet la variable <code>tab</code> \u00e9tant mutable elle est modifi\u00e9e par la fonction lors d'un premier appel et ne sera donc plus vide lors des appels suivants. Pour une solution \u00e0 ce probl\u00e8me, on pourra par exemple consulter ce site</li> </ul> </p>"},{"location":"Annales/Corriges/2022-S18/","title":"Corrig\u00e9 sujet 18 - Ann\u00e9e : 2022","text":"<p>Sujet 18 - 2022 </p>"},{"location":"Annales/Corriges/2022-S18/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def mini(releve,date):\n    indice_mini, temp_mini = 0, releve[0]\n    for i in range(len(releve)):\n        if releve[i]&lt;temp_mini:\n            indice_mini,temp_mini = i,releve[i]\n    return temp_mini,date[indice_mini]\n</code></pre> <p>Commentaire</p> <p>Bien comprendre que les ann\u00e9es et les temp\u00e9ratures moyennes correspondantes sont aux m\u00eames indices dans les deux listes. On recherche donc l'indice de la temp\u00e9rature moyenne et on l'utilise pour retrouver l'ann\u00e9e correspondante.</p>"},{"location":"Annales/Corriges/2022-S18/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\nresult = \"\"\nfor caractere in chaine:\nresult = caractere + result #(1)\nreturn result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\nreturn inverse==chaine #(2)\ndef est_nbre_palindrome(nbre):\nchaine = str(nbre) #(3)\nreturn est_palindrome(chaine)\n</code></pre> <ol> <li>Le dernier caract\u00e8re a \u00eatre ajout\u00e9 doit \u00eatre au d\u00e9but, il faut donc \u00e9crire <code>result = caractere + result</code> et pas <code>result = result + caractere</code></li> <li>Cela est \u00e9quivalent \u00e0 \u00e9crire :      \ud83d\udc0d Script Python<pre><code>    if inverse==chaine:\n        return True\n    else:\n        return False\n</code></pre></li> <li>Conversion en chaines de caract\u00e8res afin de pouvoir utiliser <code>est_palindrome</code>.</li> </ol>"},{"location":"Annales/Corriges/2022-S19/","title":"Corrig\u00e9 sujet 19 - Ann\u00e9e : 2022","text":"<p>Sujet 19 - 2022 </p>"},{"location":"Annales/Corriges/2022-S19/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(a,b):\n    produit=0\n    for i in range(abs(a)):\n        produit += abs(b)\n    if (a&gt;0 and b&lt;0) or (a&lt;0 and b&gt;0): \n        return -produit\n    else:\n        return produit\n</code></pre> <p>Commentaires</p> <ol> <li>On peut rappeler la r\u00e8gle des signes pour un produit :<ul> <li>un produit est n\u00e9gatif si les deux facteurs ne sont pas de m\u00eame signe (ligne 5)</li> <li>et positif sinon.</li> </ul> </li> <li>Si <code>a</code> et <code>b</code> sont deux entiers positifs :     $$ a \\times b = \\underbrace{b + b + \\dots + b}_{a \\quad \\mathrm{termes}} $$</li> <li>L'\u00e9nonc\u00e9 pourrait aiguiller vers l'utilisation de <code>abs</code> (valeur absolue) pour traiter les probl\u00e8mes de signe.</li> </ol>"},{"location":"Annales/Corriges/2022-S19/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def chercher(T,n,i,j):\nif i &lt; 0 or j&gt;len(T)-1: #(1)\nprint(\"Erreur\")\n        return None    \n    if i &gt; j :\n        return None\nm = (i+j) // 2 #(2)\nif T[m] &lt; n :\nreturn chercher(T, n, m+1 , j) #(3) \nelif T[m]&gt;n :\nreturn chercher(T, n, i , m-1)\nelse:\nreturn m \n</code></pre> <ol> <li>L'indice du dernier \u00e9l\u00e9ment d'un tableau <code>T</code> est <code>len(T)-1</code>.</li> <li>Calcul de l'indice au milieu</li> <li>On peut chercher apr\u00e8s l'indice <code>m</code> \u00e0 cause du strictement inf\u00e9rieur dans le test de comparaison <code>T[m]&lt;n</code>.</li> </ol>"},{"location":"Annales/Corriges/2022-S20/","title":"Corrig\u00e9 sujet 20 - Ann\u00e9e : 2022","text":"<p>Sujet 20 - 2022 </p>"},{"location":"Annales/Corriges/2022-S20/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def xor(a,b):\n    resultat = []\n    for i in range(len(a)):\n        if a[i]==b[i]:\n            resultat.append(0)\n        else:\n            resultat.append(1)\n    return resultat\n</code></pre> <p>Commentaire</p> <p>On peut aussi utiliser une d\u00e9finition de listes par compr\u00e9hension.</p>"},{"location":"Annales/Corriges/2022-S20/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, tableau = [[]]):\n        self.ordre = len(tableau)\n        self.valeurs = tableau\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.valeurs[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        return sum(self.valeurs[i])\n\n    def somme_col(self, j):\n'''calcule la somme des valeurs de la colonne j'''\n        return sum([self.valeurs[i][j] for i in range(self.ordre)])\n\ndef est_magique(carre):\n    n = carre.ordre\n    s = carre.somme_ligne(0)\n\n    #test de la somme de chaque ligne\nfor i in range(1,n): #(1)\nif carre.somme_ligne(i) != s:\nreturn False\n#test de la somme de chaque colonne\n    for j in range(n):\nif carre.somme_col(j) != s: #(2)\nreturn False\n\n    #test de la somme de chaque diagonale\nif sum([carre.valeurs[k][k] for k in range(n)]) != s: #(3)\nreturn False\n    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:\n            return False\nreturn True   #(4)\n</code></pre> <ol> <li>Par la peine de tester la ligne d'indice 0, elle a servi \u00e0 calculer la somme de r\u00e9f\u00e9rence <code>s</code> (ligne 21), on commence donc \u00e0 1.</li> <li>On utilise la m\u00e9thode <code>somme_col</code> de la classe <code>Carre</code></li> <li>La diagonale principale se caract\u00e9rise par des indices de lignes et de colonne identiques.</li> <li>Si on atteint cette ligne, tous les tests ont \u00e9t\u00e9 pass\u00e9 avec succ\u00e8s, le carr\u00e9 est magique ! </li> </ol> <p>Attention</p> <ul> <li>Le code fourni utilise un objet mutable (une liste) comme param\u00e8tre par d\u00e9faut d'une fonction :     \ud83d\udc0d Script Python<pre><code>def __init__(self, tableau = [[]]):\n</code></pre>     C'est une tr\u00e8s mauvaise pratique car source d'erreurs, en effet la variable <code>tableau</code> \u00e9tant mutable elle est modifi\u00e9e par la fonction lors d'un premier appel et ne sera donc plus vide lors des appels suivants. Pour une solution \u00e0 ce probl\u00e8me, on pourra par exemple consulter ce site</li> </ul>"},{"location":"Annales/Corriges/2022-S21/","title":"Corrig\u00e9 sujet 21 - Ann\u00e9e : 2022","text":"<p>Sujet 21 - 2022 </p>"},{"location":"Annales/Corriges/2022-S21/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(a,b):\n    produit=0\n    for i in range(abs(a)):\n        produit += abs(b)\n    if (a&gt;0 and b&lt;0) or (a&lt;0 and b&gt;0): \n        return -produit\n    else:\n        return produit\n</code></pre> <p>Commentaires</p> <ol> <li>On peut rappeler la r\u00e8gle des signes pour un produit :<ul> <li>un produit est n\u00e9gatif si les deux facteurs ne sont pas de m\u00eame signe (ligne 5)</li> <li>et positif sinon.</li> </ul> </li> <li>Si <code>a</code> et <code>b</code> sont deux entiers positifs :     $$ a \\times b = \\underbrace{b + b + \\dots + b}_{a \\quad \\mathrm{termes}} $$</li> <li>L'\u00e9nonc\u00e9 pourrait aiguiller vers l'utilisation de <code>abs</code> (valeur absolue) pour traiter les probl\u00e8mes de signe.</li> </ol>"},{"location":"Annales/Corriges/2022-S21/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n\n    debut = 0 \n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut+fin)//2 #(1)\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m-1 #(2)         \nreturn False\n</code></pre> <ol> <li>Calcul de l'indice se trouvant \"au milieu\" entre <code>debut</code> et <code>fin</code>.</li> <li>Ici <code>x &lt; tab[m]</code> (la cas d'\u00e9galit\u00e9 est trait\u00e9 avant), donc l'indice de <code>fin</code> de recherche est avant <code>m</code>.</li> </ol>"},{"location":"Annales/Corriges/2022-S22/","title":"Corrig\u00e9 sujet 22 - Ann\u00e9e : 2022","text":"<p>Sujet 22 - 2022 </p>"},{"location":"Annales/Corriges/2022-S22/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def renverse(chaine):\n    chaine_inverse = \"\"\n    for caractere in chaine:\n        chaine_inverse = caractere + chaine_inverse\n    return chaine_inverse\n</code></pre> <p>Remarque</p> <p>On peut proposer une version utilisant la m\u00e9thode <code>join</code> des listes, en effet ajouter des \u00e9l\u00e9ments \u00e0 une liste est plus efficace que d'ajouter des caract\u00e8res \u00e0 une cha\u00eene de caract\u00e8res.</p>"},{"location":"Annales/Corriges/2022-S22/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def crible(N):\n\"\"\"renvoie un tableau contenant tous les nombres premiers plus petit que N\"\"\"\n    premiers = []\n    tab = [True] * N\n    tab[0], tab[1] = False, False\nfor i in range(2, N): \nif tab[i] == True: #(1)\npremiers.append(i)\nfor multiple in range(2*i, N, i): #(2)\ntab[multiple] = False #(3)\nreturn premiers\n</code></pre> <ol> <li>C'est le cas o\u00f9 le nombre est <code>i</code> premier</li> <li>Ce sont les multiples de <code>i</code>, on parcourt donc avec un pas de <code>i</code></li> <li>Les multiples ne sont pas des nombres premiers.</li> </ol> <p>Attention</p> <p>Le crible d'Eratosth\u00e8ne propos\u00e9 ici fait partie des algorithmes propos\u00e9s dans l'option math\u00e9matiques expertes. </p>"},{"location":"Annales/Corriges/2022-S23/","title":"Corrig\u00e9 sujet 23 - Ann\u00e9e : 2022","text":"<p>Sujet 23 - 2022 </p>"},{"location":"Annales/Corriges/2022-S23/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    max_like = 0\n    for pseudo in dico:\n        if dico[pseudo]&gt;max_like:\n            max_pseudo = pseudo\n            max_like=dico[pseudo]\n    return max_pseudo,max_like\n</code></pre> <p>Commentaires</p> <ol> <li>Dans cette correction on a choisit d'initialiser le maximum possible \u00e0 0.</li> <li>L'\u00e9nonc\u00e9 parle de \"la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale\" mais plusieurs cl\u00e9s distinctes peuvent \u00eatre associ\u00e9es \u00e0 cette valeur maximale <code>{'Bob':102,'Alice':102}</code>.</li> </ol>"},{"location":"Annales/Corriges/2022-S23/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\nfor element in tab: #(1)\nif element != '+' and element != '*': #(2)\np.empiler(element)\nelse:\nif element == \"+\": #(3)\nresultat = p.depiler() + p.depiler()\nelse:\nresultat = p.depiler() * p.depiler()\np.empiler(resultat) #(4)\nreturn resultat\n</code></pre> <ol> <li>Le nom de la variable de parcours est indiqu\u00e9 juste en dessous : <code>element</code></li> <li>On suit l'algorithme de l'\u00e9nonc\u00e9 : si l'\u00e9l\u00e9ment n'est pas un op\u00e9rateur, alors on l'empile.</li> <li>Si c'est un op\u00e9rateur, alors on effecture l'op\u00e9ration. C'est soit l'addition, soit la multiplication car on s'est limit\u00e9 \u00e0 ces deux op\u00e9rations. </li> <li>Le r\u00e9sultat est empil\u00e9 comme indiqu\u00e9 dans l'algorithme donn\u00e9 dans l'\u00e9nonc\u00e9.</li> </ol>"},{"location":"Annales/Corriges/2022-S24/","title":"Corrig\u00e9 sujet 24 - Ann\u00e9e : 2022","text":"<p>Sujet 24 - 2022 </p>"},{"location":"Annales/Corriges/2022-S24/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def maxliste(liste):\n    maxi = liste[0]\n    for elt in liste:\n        if elt &gt; maxi:\n            maxi=elt\n    return maxi\n</code></pre> <p>Commentaires</p> <p>L'\u00e9nonc\u00e9 pr\u00e9cise que la liste est non vide, on peut donc se permettre d'initialiser le maximum courant avec le premier \u00e9l\u00e9ment de la liste.</p>"},{"location":"Annales/Corriges/2022-S24/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self, valeurs=[]):\n        self.valeurs = valeurs\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\n\ndef parenthesage (ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\nif c == \"(\": #(1)\np.empiler(c)\nelif c == \")\": #(2)\nif p.est_vide():\nreturn False\nelse:\np.depiler()\nreturn p.est_vide() #(3)\n</code></pre> <ol> <li>On suit l'algorithme donn\u00e9 dans l'\u00e9nonce : si on rencontre une parenth\u00e8se ouvrante alors on l'empile</li> <li>Si c'est une parenth\u00e8se fermante, on d\u00e9pile dans le cas o\u00f9 la pile est vide, l'expression est mal parenth\u00e9s\u00e9e.</li> <li>Si \u00e0 la fin du parcours la pile n'est pas vide, l'expression est mal parenth\u00e9s\u00e9e.</li> </ol> <p>Attention</p> <ul> <li>Le code fourni utilise un objet mutable (une liste) comme param\u00e8tre par d\u00e9faut d'une fonction : \ud83d\udc0d Script Python<pre><code>def __init__(self, valeurs=[]):\n</code></pre> C'est une tr\u00e8s mauvaise pratique car source d'erreurs, en effet la variable <code>valeurs</code> \u00e9tant mutable elle est modifi\u00e9e par la fonction lors d'un premier appel et ne sera donc plus vide lors des appels suivants. Pour une solution \u00e0 ce probl\u00e8me, on pourra par exemple consulter ce site</li> <li>Dans l'\u00e9nonc\u00e9 au format <code>pdf</code>, le <code>else</code> de la ligne 29 n'est pas correctement indent\u00e9, le probl\u00e8me n'appara\u00eet pas dans le fichier <code>.py</code> fourni avec le sujet. Probablement en lien avec ce souci, le <code>elif</code> de la ligne 26 pourrait \u00eatre un <code>else</code>.</li> </ul>"},{"location":"Annales/Corriges/2022-S25/","title":"Corrig\u00e9 sujet 25 - Ann\u00e9e : 2022","text":"<p>Sujet 25 - 2022 </p>"},{"location":"Annales/Corriges/2022-S25/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux,num_enclos):\n    resultat = []\n    for animal in table_animaux:\n        if animal['enclos']==num_enclos:\n            resultat.append(animal)\n    return resultat\n</code></pre> <p>Commentaires</p> <p>Revoir  le chapitre traitement de donn\u00e9es en tablesdu programme de premi\u00e8re en cas de difficult\u00e9s (et aussi l'utilisation des dictionnaires)</p>"},{"location":"Annales/Corriges/2022-S25/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 \n    tab v\u00e9rifie les conditions de l'exercice,\n        g et d sont des multiples de 3.\n    '''\n    if g == d:\nreturn tab[g] #(1)\nelse:\nnombre_de_triplets = (d - g)// 3\nindice = g + 3 * (nombre_de_triplets // 2)\nif tab[indice]==tab[indice+1] : #(2)\nreturn trouver_intrus(tab,indice+3,d) #(3)\nelse:\nreturn trouver_intrus(tab,g,indice)\n</code></pre> <ol> <li>La zone de recherche se limite \u00e0 un \u00e9l\u00e9ment : l'intrus. On peut mettre indiff\u00e9remment <code>tab[g]</code> ou <code>tab[d]</code>, ils sont \u00e9gaux puisque <code>g=d</code> ici.</li> <li>On suit l'algorithme propos\u00e9 dans l'\u00e9nonc\u00e9 et on compare l'\u00e9l\u00e9ment du milieu \u00e0 son voisin de droite</li> <li>Attention \u00e0 la l\u00e9g\u00e8re diff\u00e9rence de traitement dans un cas ou passe \u00e0 <code>indice+3</code> car les \u00e9l\u00e9ments sont situ\u00e9s strictement avant l'intrus</li> </ol> <p>Attention</p> <p>Sujet sans doute difficile et qui pr\u00e9sente un algorithme nouveau (bien que semblable \u00e0 une recherche par dichotomie)</p>"},{"location":"Annales/Corriges/2022-S26/","title":"Corrig\u00e9 sujet 26 - Ann\u00e9e : 2022","text":"<p>Sujet 26 - 2022 </p>"},{"location":"Annales/Corriges/2022-S26/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def RechercheMin(tab):\n    if tab==[]: return None\n    indice_mini,mini = 0, tab[0]\n    for indice in range(1,len(tab)):\n        if tab[indice]&lt;mini:\n            indice_mini,mini = indice,tab[indice]\n    return indice_mini\n</code></pre> <p>Commentaires</p> <ul> <li>Rien n'est indiqu\u00e9 pour la liste vide, on a choisit de renvoyer <code>None</code> dans ce cas</li> <li>Un parcours par indice est n\u00e9cessaire puisqu'on a besoin de la position du minimum.</li> </ul>"},{"location":"Annales/Corriges/2022-S26/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\nj = len(tab)-1 #(1)\nwhile i &lt; j :\n        if tab[i] == 0 :\ni = i + 1 #(2)\nelse :\ntab[i], tab[j] = tab[j],tab[i] #(3)\nj = j-1\nreturn tab\n</code></pre> <ol> <li><code>i</code> et <code>j</code> sont les indices d\u00e9limitant la partie non encore tri\u00e9e du tableau, au d\u00e9but c'est donc le tableau entier. Et on rappelle que l'indice du dernier \u00e9l\u00e9ment d'une liste <code>tab</code> est <code>len(tab)-1</code>.</li> <li>Si on rencontre un 0, la zone non tri\u00e9e diminue \"par la gauche\", donc on incr\u00e9mente <code>i</code></li> <li>Dans le cas contraire, la zone non tri\u00e9e diminue \"par la droite\". On a rencontr\u00e9 un 1, on le positionne donc \u00e0 l'extr\u00e9mit\u00e9 droite de la zone non tri\u00e9e en l'\u00e9changeant avec la valeur situ\u00e9 \u00e0 cet endroit.</li> </ol>"},{"location":"Annales/Corriges/2022-S27/","title":"Corrig\u00e9 sujet 27 - Ann\u00e9e : 2022","text":"<p>Sujet 27 - 2022 </p>"},{"location":"Annales/Corriges/2022-S27/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def taille(arbre,lettre):\n    if arbre[lettre]==['','']:\n        return 1\n    elif arbre[lettre][0]=='':\n        return 1+taille(arbre,arbre[lettre][1])\n    elif arbre[lettre][1]=='':\n        return 1+taille(arbre,arbre[lettre][0])\n    else:\n        return 1+taille(arbre,arbre[lettre][0])+taille(arbre,arbre[lettre][1])\n</code></pre> <p>Commentaires</p> <ol> <li>La correction suit les indications du sujet en traitant les 4 cas. On peut faire autrement (et plus simplement).</li> <li>Ce sujet est sans doute difficile car il utilise une repr\u00e9sentation des arbres binaires inhabituelle, en plus de m\u00e9langer diverses notions du programme (r\u00e9cursivit\u00e9, arbre, dictionnaire, listes)</li> </ol>"},{"location":"Annales/Corriges/2022-S27/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\nfor k in range( len(tab)-1 , 0, -1): #(1)\nimax = 0\nfor i in range(0 , k ): #(2)\nif tab[i] &gt; tab[imax] :\nimax = i\nif tab[imax] &gt; tab[k] :\ntab[k] , tab[imax] = tab[imax] , tab[k]\nreturn tab\n</code></pre> <ol> <li>L'indice du dernier \u00e9l\u00e9ment d'un tableau <code>tab</code> est <code>len(tab)-1</code>. On parcourt ici dans l'ordre inverse (revoir l'instruction <code>range</code> si n\u00e9cessaire)</li> <li>Cette portion du programme est une recherche classique de maximum.</li> <li>Ici on \u00e9change le maximum trouv\u00e9 avec l'\u00e9l\u00e9ment d'indice <code>k</code></li> </ol> <p>Attention</p> <ol> <li>En d\u00e9pit du nom <code>tri_it\u00e9ratif</code>, il fallait reconna\u00eetre ici l'algorithme du tri par s\u00e9lection.</li> <li>Les listes \u00e9tant mutables, <code>tab</code> est modifi\u00e9e par la fonction (tri en place), alors que le <code>return</code> finale peut laisser penser qu'on veut r\u00e9cup\u00e9rer un \"nouveau tableau\".</li> <li>Le test ligne 7 peut para\u00eetre surprenant mais comme on a cherch\u00e9 le maximum entre les indices <code>0</code> et <code>k-1</code>, on doit v\u00e9rifier qu'il ne se trouve pas \u00e0 l'indice <code>k</code> (dans ce cas l'\u00e9change n'est pas n\u00e9cessaire). On aurait pu chercher entre <code>0</code> et <code>k</code> et \u00e9viter ce test.</li> </ol>"},{"location":"Annales/Corriges/2022-S28/","title":"Corrig\u00e9 sujet 28 - Ann\u00e9e : 2022","text":"<p>Sujet 28 - 2022 </p>"},{"location":"Annales/Corriges/2022-S28/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for valeur in tab:\n        somme = somme + valeur\n    return somme/len(tab)\n</code></pre> <p>Commentaires</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable. Un parcours par \u00e9l\u00e9ment suffit.</p>"},{"location":"Annales/Corriges/2022-S28/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\nbin_a = str(a%2) #(1)\na = a//2\nwhile a != 0 : #(2)\nbin_a = str(a%2) + bin_a #(3)\na = a // 2\nreturn bin_a\n</code></pre> <ol> <li>C'est algorithme des divisions successives, on initialise avec le premier chiffre (donc le reste dans division euclidenne de <code>a</code> par 2)</li> <li>L'algorithme s'arr\u00eate lorsque <code>a</code> vaut 0</li> <li>L'algorithme donne l'ordre inverse (du dernier ou premier), on ajoute donc les chiffres successivement obtenu devant l'\u00e9criture binaire.</li> </ol>"},{"location":"Annales/Corriges/2022-S29/","title":"Corrig\u00e9 sujet 29 - Ann\u00e9e : 2022","text":"<p>Sujet 29 - 2022 </p>"},{"location":"Annales/Corriges/2022-S29/#exercice-1","title":"Exercice 1","text":"<p>Bug</p> <ol> <li>La fonction s'appelle <code>fibonacci</code> (un n et deux c) et on parle de la suite de Fibonnaci (un c et deux n). L'orthographe correcte est Fibonacci.</li> </ol> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    d = {1 : 1, 2 : 1}\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> <p>Commentaires</p> <p>On peut aussi utiliser une liste, mais les indices sont alors d\u00e9cal\u00e9s (le premier \u00e9l\u00e9ment d'une liste a pour indice 0 alors que  le premier \u00e9l\u00e9ment de la suite a pour indice 1. L'utilisation d'un dictionnaire simplifie le probl\u00e8me.</p>"},{"location":"Annales/Corriges/2022-S29/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\nnb_eleves_note_maxi = 0 #(1)\nliste_maxi =  []\nfor compteur in range(len(liste_eleves)):\nif liste_notes[compteur] == note_maxi: #(2)\nnb_eleves_note_maxi = nb_eleves_note_maxi + 1\nliste_maxi.append(liste_eleves[compteur])\nif liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur] \nnb_eleves_note_maxi = 1 #(3)\nliste_maxi = [liste_eleves[compteur]]\nreturn (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> <ol> <li>On travaille avec trois variables : la note maximale courante, le nombre d'\u00e9l\u00e8ves ayant cette note et la liste de ces \u00e9l\u00e8ves.</li> <li>Lors du parcours de la liste de note, si on trouve une note \u00e9gale \u00e0 la note maximale alors on ajoute l'\u00e9l\u00e8ve concern\u00e9e \u00e0 la liste de ceux ayant la meilleure note</li> <li>Si on trouve une note sup\u00e9rieur au maximum courant, cette note devient le nouveau maximum et un seul \u00e9l\u00e8ve a cette note, <code>liste_maxi</code> et <code>nb_eleves_note_maxi</code> sont donc mis \u00e0 jour en cons\u00e9quence</li> </ol> <p>Attention</p> <p>L'int\u00e9r\u00eat d'une fonction est de pouvoir \u00eatre appel\u00e9e au sein d'un m\u00eame programme avec des arguments diff\u00e9rents. Par cons\u00e9quent,   <code>liste_eleves</code> et <code>liste_notes</code> devraient \u00eatre des arguments de la fonction <code>meilleures_notes</code> et pas des variables globales du programme. Cette fa\u00e7on de proc\u00e9der est clairement une mauvaise pratique de programmation. </p>"},{"location":"Annales/Corriges/2022-S30/","title":"Corrig\u00e9 sujet 30 - Ann\u00e9e : 2022","text":"<p>Sujet 30 - 2022 </p>"},{"location":"Annales/Corriges/2022-S30/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def fusion(tab1,tab2):\n    i1,i2 = 0,0\n    tab = []\n    while i1&lt;len(tab1) and i2&lt;len(tab2):\n        if tab1[i1]&lt;tab2[i2]:\n            tab.append(tab1[i1])\n            i1 += 1\n        else:\n            tab.append(tab2[i2])\n            i2 += 1\n    tab = tab + tab1[i1:] + tab2[i2:]\n    return tab\n</code></pre> <p>Commentaire</p> <p>M\u00eame si le tri fusion est au programme de terminale, l'exercice est sans doute difficile. On rappelle que pour fusionner deux listes d\u00e9j\u00e0 tri\u00e9es, on peut :</p> <ul> <li>parcourir les deux listes en comparant leurs \u00e9l\u00e9ments, le plus petit est plac\u00e9 dans la liste fusion et on progresse dans le parcours de la liste correspondante</li> <li>lorsque la fin d'une deux listes est atteinte on compl\u00e8te avec les \u00e9l\u00e9ments de l'autre.</li> </ul>"},{"location":"Annales/Corriges/2022-S30/#exercice-2","title":"Exercice 2","text":"<p>Bug</p> <p>Il y a des diff\u00e9rences notables (indentation, lignes, ....) entre le code python qui figure sur le sujet au format <code>pdf</code> et le code python fourni avec le sujet sous forme d'un fichier <code>.py</code></p> \ud83d\udc0d Script Python<pre><code>def rom_to_dec (nombre):\n\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"\n\ndico = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000} #(1)\nif len(nombre) == 1:\nreturn dico[nombre] #(2)\nelse:\n        ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre\n         ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite\n        nombre_droite = nombre[1:]\n\n\n        if dico[nombre[0]] &gt;= dico[nombre[1]]:\nreturn dico[nombre[0]] + rom_to_dec(nombre_droite) #(3)\nelse:\nreturn rom_to_dec(nombre_droite)-dico[nombre[0]] #(4)\n</code></pre> <ol> <li>On compl\u00e8te avec les valeurs des chiffres romains (donn\u00e9es dans l'\u00e9nonc\u00e9).</li> <li>Si le nombre contient un unique chiffre, on renvoie sa valeur.</li> <li>Ici, il faut ajouter la valeur de la premi\u00e8re lettre car elle est sup\u00e9rieure \u00e0 la valeur de la lettre suivante.</li> <li>Ici, il faut soustraire car elle est inf\u00e9rieure \u00e0 la valeur de la lettre suivante.</li> </ol> <p>Attention</p> <ul> <li>Le sujet utilise les slices (<code>nombre_droite = nombre[1:]</code>) qui ne sont pas au programme.</li> </ul>"},{"location":"Annales/Corriges/2022-S31/","title":"Corrig\u00e9 sujet 31 - Ann\u00e9e : 2022","text":"<p>Sujet 31 - 2022 </p>"},{"location":"Annales/Corriges/2022-S31/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(a,t):\n    nb_occurence = 0\n    for elt in t:\n        if elt==a:\n            nb_occurence +=1\n    return nb_occurence\n</code></pre> <p>Commentaires</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable en comptant les occurrences d'apparition d'une valeur. Un parcours par \u00e9l\u00e9ment suffit, les indices des occurrences n'\u00e9tant pas utilis\u00e9es.</p>"},{"location":"Annales/Corriges/2022-S31/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\nrendu = [] #(1)\na_rendre = s_versee - s_due #(2)\ni = len(pieces) - 1\nwhile a_rendre &gt; 0 : #(3)\nif pieces[i] &lt;= a_rendre :\nrendu.append(pieces[i]) #(4)\na_rendre = a_rendre - pieces[i]\nelse :\ni = i-1\nreturn rendu\n</code></pre> <ol> <li>La liste des pi\u00e8ces \u00e0 rendre, initialis\u00e9e \u00e0 <code>[]</code></li> <li>La somme \u00e0 rendre, initialis\u00e9 \u00e0 <code>s_versee - s_due</code></li> <li>La condition d'arr\u00eat, plus rien \u00e0 rendre</li> <li>C'est l'algorithme glouton classique pour le rendu de monnaie (les pieces sont rang\u00e9es dans l'ordre). Si la pi\u00e8ce est inf\u00e9rieure \u00e0 la somme \u00e0 rendre, on l'ajoute au rendu et on diminue la somme \u00e0 rendre. Sinon on passe \u00e0 la pi\u00e8ce suivante.</li> </ol> <p>Attention</p> <ol> <li>On utilise ici une liste de pi\u00e8ces class\u00e9es par ordre croissant de valeurs, cela oblige donc \u00e0 commencer par la fin de la liste. C'est ce qui explique le parcours de la liste \"\u00e0 l'envers\" : initialisation de <code>i</code> \u00e0 <code>len(pi\u00e8ces)-1</code> puis d\u00e9cr\u00e9mentation de <code>i</code>.</li> <li>La fonction utilise deux arguments <code>s_versee</code> et <code>s_due</code> pour calculer la somme \u00e0 rendre (<code>s_versee-s_due</code>), on pourrait directement une fonction qui prend en argument la somme \u00e0 rendre.</li> </ol>"},{"location":"Annales/Corriges/2022-S32/","title":"Corrig\u00e9 sujet 32 - Ann\u00e9e : 2022","text":"<p>Sujet 32 - 2022 </p>"},{"location":"Annales/Corriges/2022-S32/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt,tab):\n    for i in range(len(tab)-1,-1,-1):\n        if elt==tab[i]:\n            return i\n    return -1\n</code></pre> <p>Commentaires</p> <p>Le sujet demande de rechercher la derni\u00e8re occurrence, la correction propos\u00e9e ici parcourt la liste \u00e0 l'envers et renvoie la premi\u00e8re occurrence rencontr\u00e9e. Il faut donc dans ce cas savoir \u00e0 \u00e9crire un parcours \u00e0 l'envers \u00e0 l'aide de <code>range</code>. On peut faire aussi parcourir dans le sens normal jusqu'\u00e0 la fin et mettre la jour l'indice \u00e0 chaque fois qu'on rencontre la valeur: \ud83d\udc0d Script Python<pre><code>    def recherche(elt,tab):\n        indice = -1\n        for i in range(len(tab)):\n            if tab[i] == elt:\n                indice = i\n        return indice\n</code></pre></p>"},{"location":"Annales/Corriges/2022-S32/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n\n    def __init__(self, adresse):\nself.adresse = adresse\ndef liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n           la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")] \n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n           r\u00e9serv\u00e9e, False sinon\"\"\"\nreturn self.liste_octet()[3]==0 or self.liste_octet()[3]==0 #(1)\ndef adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse \n           IP qui suit l\u2019adresse self\n           si elle existe et False sinon\"\"\"\nif self.liste_octet()[3] &lt; 254:\noctet_nouveau = self.liste_octet()[3] + 1\nreturn AdresseIP('192.168.0.' + str(octet_nouveau)) #(2)\nelse:\n            return False\n</code></pre> <ol> <li>Le dernier octet est le 4\u00e8me \u00e9l\u00e9ment (donc celui d'indice 3) de la liste renvoy\u00e9e par la m\u00e9thode <code>liste_octet</code>. L'adresse est r\u00e9serv\u00e9e lorsque ce dernier octect vaut 0 ou 255.</li> <li>Attention \u00e0 la conversion de type, pour concat\u00e9ner le d\u00e9but de l'adresse avec le dernier octet </li> </ol> <p>Attention</p> <p>La m\u00e9thode <code>split</code> des chaines de caract\u00e8res est utilis\u00e9e sans explications ni exemples dans la m\u00e9thode <code>liste_octet</code>. Bien comprendre que cette m\u00e9thode permet de convertir une adresse comme <code>\"192.168.0.0\"</code> (une chaine de caract\u00e8res) en <code>[192,168,0,0]</code> (liste d'entiers). </p>"},{"location":"Annales/Corriges/2022-S33/","title":"Corrig\u00e9 sujet 33 - Ann\u00e9e : 2022","text":"<p>Sujet 33 - 2022 </p>"},{"location":"Annales/Corriges/2022-S33/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def convertir(T):\n    poids =  len(T)-1\n    valeur = 0\n    for elt in T:\n        valeur += 2**poids * elt\n        poids -=1\n    return valeur\n</code></pre> <p>Commentaires</p> <p>On peut aussi effectuer un parcours par indice (cela invite d'utiliser la variable <code>poids</code>)</p>"},{"location":"Annales/Corriges/2022-S33/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\nif L==[]:\nreturn L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'etape j, le sous-tableau L[0,j-1] est trie\n    # et on insere L[j] dans ce sous-tableau en determinant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\nwhile  i &gt; 0 and L[i-1] &gt; L[j]: #(1)\ni = i - 1\n# si i != j, on decale le sous tableau L[i,j-1] d'un cran\n        # vers la droite et on place L[j] en position i\n        if i != j:\nfor k in range(j,i,-1): #(2)\nL[k] = L[k-1]\nL[i] = e #(3)\nreturn L\n</code></pre> <ol> <li>On se contente de suivre les indications donn\u00e9es en commentaire.</li> <li>On d\u00e9cale les \u00e9l\u00e9ments de fa\u00e7on \u00e0 laisser libre l'emplacement d'indice <code>i</code>.</li> <li>On a sauvegard\u00e9 dans <code>e</code> la valeur \u00e0 ins\u00e9rer.</li> </ol> <p>Attention</p> <ol> <li>On peut regretter les noms de variables courts et donc fort peu explicites.</li> <li>L'insertion dans le d\u00e9but de liste se fait souvent en \u00e9changeant le nombre avec son voisin de droite tant qu'il lui est inf\u00e9rieur (ou que le d\u00e9but de liste n'est pas atteint)</li> <li>Le commentaire ligne 18 parle du \"sous tableau L[i,j-1]\", il faut comprendre les \u00e9l\u00e9ments du tableau dont les indices sont entre <code>i</code> et <code>j-1</code>. De m\u00eame ligne 12 pour le sous tableau L[0,j-1].</li> <li>Cette fonction fait un tri en place et modifie donc la liste <code>L</code>, le <code>return</code> final laisse cependant croire qu'on a construit un nouveau table qu'on souhaite renvoyer.</li> </ol>"},{"location":"Annales/Corriges/2022-S34/","title":"Corrig\u00e9 sujet 34 - Ann\u00e9e : 2022","text":"<p>Sujet 34 - 2022 </p>"},{"location":"Annales/Corriges/2022-S34/#exercice-1","title":"Exercice 1","text":"<p>Bug</p> <p>Il y a une faute de frappe dans la variable <code>alphabet</code> de l'\u00e9nonc\u00e9 (une virgule en trop dans la valeur <code>'o,'</code>)</p> \ud83d\udc0d Script Python<pre><code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\n            'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\n            's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\ndef occurrence_max(ch):\n    occurrence = [0]*26\n    for caractere in ch:\n        if caractere in alphabet:\n            index_caractere = alphabet.index(caractere)\n            occurrence[index_caractere] += 1\n    indice_max_occurence = 0\n    max_occurence = occurrence[0]\n    for i in range(0,len(occurrence)):\n        if occurrence[i]&gt;max_occurence:\n            max_occurence = occurrence[i]\n            indice_max_occurence = i \n    return alphabet[indice_max_occurence]\n</code></pre> <p>Commentaires</p> <ol> <li>Le probl\u00e8me du nombre d'occurrence maximal d'un caract\u00e8re dans un texte peut aussi se r\u00e9soudre en utilisant un dictionnaire dont les cl\u00e9s sont les caract\u00e8res et les valeurs les nombres d'occurrences.</li> <li>On utilise dans la correction propos\u00e9e ici, la m\u00e9thode <code>index</code> qui renvoie l'indice de la premi\u00e8re apparition d'un \u00e9l\u00e9ment dans une liste. On peut aussi rechercher cet indice en effectuant un parcourt de la liste.</li> </ol>"},{"location":"Annales/Corriges/2022-S34/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\nreturn len(image) #(1)\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\nreturn len(image[0]) #(2)\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme \n       d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] \n# on cree une image de 0 aux memes dimensions que le parametre image \n    for i in range(len(image)):\nfor j in range(nbCol(image)): #(3)\nL[i][j] = 255-image[i][j] #(4)\nreturn L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme \n       d'une liste de listes contenant des 0 si la valeur \n       du pixel est strictement inferieure au seuil \n       et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cree une image de 0 aux memes dimensions que le parametre image \n    for i in range(len(image)):\nfor j in range(nbCol(image)): \nif image[i][j] &lt; seuil : #(5)\nL[i][j] = 0\nelse:\nL[i][j] = 1\nreturn L\n</code></pre> <ol> <li>Comme indiqu\u00e9 dans l'\u00e9nonc\u00e9, une image est une listes de listes (toutes de m\u00eame longueur).la hauteur de l'image est le nombres de listes</li> <li>La largeur de l'image est la longueur d'une sous-liste (elles ont toute la m\u00eame longueur).</li> <li>On utilise la fonction <code>nbCol</code> d\u00e9finie plus haut</li> <li>Se r\u00e9f\u00e9rer \u00e0 l'\u00e9nonc\u00e9 : la somme du pixel et de son n\u00e9gatif doit faire 255.</li> <li>On applique l'algorithme donn\u00e9 en commentaire : le pixel est mis \u00e0 0 s'il est inf\u00e9rieur au seuil et \u00e0  1 sinon.</li> </ol> <p>Attention</p> <ol> <li>On peut regretter que le programme d\u00e9finisse les fonctions <code>nbLig</code> et <code>nbCol</code> afin de r\u00e9cup\u00e9rer les dimensions d'une image mais ne les utilise pas pour parcourir l'image (voir ligne 14 et 25)</li> </ol>"},{"location":"Annales/Corriges/2022-S35/","title":"Corrig\u00e9 sujet 35 - Ann\u00e9e : 2022","text":"<p>Sujet 35 - 2022 </p>"},{"location":"Annales/Corriges/2022-S35/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for valeur in tab:\n        somme = somme + valeur\n    return somme/len(tab)\n</code></pre> <p>Commentaires</p> <p>Exercice classique de parcours d'une liste, un parcours par \u00e9l\u00e9ment suffit les indices n'\u00e9tant pas utilis\u00e9s.</p>"},{"location":"Annales/Corriges/2022-S35/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau trie dans l'ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\nif tab==[]: #(1)\nreturn False,1\n\n    # cas ou x n'est pas compris entre les valeurs extremes\nif (x &lt; tab[0]) or (x&gt;tab[len(tab)-1]):\nreturn False,2 #(2)\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut+fin)//2 #(3)\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m-1 \nreturn False,3 #(4)\n</code></pre> <ol> <li>Comme indiqu\u00e9 au dessus en commentaire : c'est le cas du tableau vide !</li> <li>Valeur cherch\u00e9e en dehors des valeurs extr\u00eames, on rappelle que l'indice du dernier \u00e9l\u00e9ment d'un tableau <code>tab</code> est <code>len(tab)-1</code>.</li> <li>Calcul de l'indice situ\u00e9 au milieu entre les deux indices de recherche.</li> <li>L'\u00e9nonc\u00e9 demande de renvoyer <code>False,3</code> dans ce cas.</li> </ol> <p>Attention</p> <ol> <li>On utilise de fa\u00e7on pr\u00e9f\u00e9rentielle des fonctions ayant toujours le m\u00eame type de sortie, ici on a parfois  un couple (bool\u00e9en, entier) (comme <code>False,2</code>)  parfois un bool\u00e9en seul.</li> </ol>"},{"location":"Annales/Corriges/2022-S36/","title":"Corrig\u00e9 sujet 36 - Ann\u00e9e : 2022","text":"<p>Sujet 36 - 2022 </p>"},{"location":"Annales/Corriges/2022-S36/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt,tab):\n    for i in range(len(tab)-1,-1,-1):\n        if elt==tab[i]:\n            return i\n    return len(tab)\n</code></pre> <p>Commentaires</p> <p>Le sujet demande de rechercher la derni\u00e8re occurrence, la correction propos\u00e9e ici parcourt la liste \u00e0 l'envers et renvoie la premi\u00e8re occurrence rencontr\u00e9e. Il faut donc dans ce cas savoir \u00e0 \u00e9crire un parcours \u00e0 l'envers \u00e0 l'aide de <code>range</code>. On peut faire aussi parcourir dans le sens normal jusqu'\u00e0 la fin et mettre la jour l'indice \u00e0 chaque fois qu'on rencontre la valeur: \ud83d\udc0d Script Python<pre><code>    def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre></p>"},{"location":"Annales/Corriges/2022-S36/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>from math import sqrt   # import de la fonction racine carree\n\ndef distance(point1, point2): \n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\nreturn sqrt((point1[0]-point2[0])**2 + (point1[1]-point2[1])**2) #(1)\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant a la plus     \n    courte distance du point depart.\"\"\"\n    point = tab[0]\nmin_dist = distance(point,depart) #(2)\nfor i in range (1, len(tab)): #(3)\nif distance(tab[i], depart) &lt; min_dist:\npoint = tab[i]\nmin_dist = distance(tab[i],depart)\nreturn point\n</code></pre> <ol> <li>Un <code>point</code> est un tuple <code>(abcisse,ordonne)</code> donc <code>point[0]</code> contient l'abscisse et <code>point[1]</code> l'ordonn\u00e9e.</li> <li>On initialise le minimum \u00e0 la distance entre le point de d\u00e9part et le premier point de la liste (celui d'indice 0)</li> <li>Algorithme classique de recherche du minimum</li> </ol> <p>Attention</p> <ol> <li>L'exercice demande aussi d'ajouter une ou des pr\u00e9conditions \u00e0 la fonction distance. Les points ayant des coordonn\u00e9es enti\u00e8res on peut proposer :     <code>assert type(point[0])==int and type(point[1])==int</code>. On pourrait aussi s'assurer que <code>point</code> est un tuple de longueur 2.</li> <li>On doit \u00eatre tr\u00e8s prudent en utilisant les tests d'\u00e9galit\u00e9 avec des flottants tels que celui de la ligne 7</li> </ol>"},{"location":"Annales/Corriges/2022-S37/","title":"Corrig\u00e9 sujet 37 - Ann\u00e9e : 2022","text":"<p>Sujet 37 - 2022 </p>"},{"location":"Annales/Corriges/2022-S37/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def verifie(liste):\n    for i in range(len(liste)-1):\n        if liste[i]&gt;liste[i+1]:\n            return False\n    return True\n</code></pre> <p>Commentaire</p> <p>On se contente de v\u00e9rifier que chaque \u00e9l\u00e9ment est bien inf\u00e9rieur \u00e0 celui qui le suit dans le tableau.</p>"},{"location":"Annales/Corriges/2022-S37/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = {} #(1)\n    for bulletin in urne:\nif bulletin in resultat: #(2)\nresultat[bulletin] = resultat[bulletin] + 1\nelse:\nresultat[bulletin] = 1\n    return resultat\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax : #(3)\n            nmax = election[candidat]\nvainqueur = candidat\nliste_finale = [nom for nom in election if election[nom] == nmax] #(4)\nreturn liste_finale\n</code></pre> <ol> <li>Initialisation \u00e0 un dictionnaire vide.</li> <li>Si la cl\u00e9 existe dans le dictionnaire on incr\u00e9mente sa valeur de 1, sinon on ajoute cette cl\u00e9 avec la valeur 1 (c'est le premier vote pour ce groupe)</li> <li>Algorithme classique de recherche du maximum en parcourant toutes les valeurs</li> <li>On construit donc ici par compr\u00e9hension la liste des candidats (car il peut y en avoir plusieurs) ayant le nombre de votes maximales</li> </ol> <p>Attention</p> <p>La variable <code>vainqueur</code> d\u00e9finie \u00e0 la ligne 15 (et qui porte le m\u00eame nom que la fonction) peut laisser penser qu'il y en a un seul ! Alors qu'on construit justement une liste pour g\u00e9rer les cas d'ex-aequo, cette variable n'a en fait aucune utilit\u00e9.</p>"},{"location":"Annales/Corriges/2022-S38/","title":"Corrig\u00e9 sujet 38 - Ann\u00e9e : 2022","text":"<p>Sujet 38 - 2022 </p>"},{"location":"Annales/Corriges/2022-S38/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def minimum(tab, i):\n    ind_minimum = i\n    for j in range(i+1, len(tab)):\n        if tab[j] &lt; tab[ind_minimum]:\n            ind_minimum = j\n    return ind_minimum\n\ndef echange(tab, i, j):\n    tab[i], tab[j] = tab[j], tab[i]\n\ndef tri_selection(tab):\n    for i in range(len(tab)):\n        ind_minimum = minimum(tab, i)\n        echange(tab, i, ind_minimum)\n    return tab\n</code></pre> <p>Commentaires</p> <p>C'est l'algorithme classique du tri par s\u00e9lection, les explications de l'\u00e9nonc\u00e9 sont peut \u00eatre ambigues, on rappelle que ce tri consiste pour <code>i</code> indice de parcours du tableau \u00e0 :</p> <ul> <li>rechercher le minimum \u00e0 partir de la position i </li> <li>\u00e9changer ce minimum avec l'\u00e9l\u00e9ment d'indice i</li> </ul>"},{"location":"Annales/Corriges/2022-S38/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\nnb_mystere = randint(1,99) #(1)\nnb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\ncompteur = 0 #(2)\nwhile nb_mystere != nb_test and compteur &lt; 10 : #(3)\ncompteur = compteur + 1\nif nb_mystere &gt; nb_test:\nnb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\nprint (\"Bravo ! Le nombre etait \",nb_mystere)\nprint(\"Nombre d'essais: \",compteur)\nelse:\nprint (\"Perdu ! Le nombre etait \",nb_mystere)\n</code></pre> <ol> <li>L'aide sur la fonction <code>randint</code> est donn\u00e9e dans l'\u00e9nonc\u00e9</li> <li><code>compteur</code> est la variable comptabilisant le nombre de tentatives du joueur</li> <li>Le jeu se poursuit tant que le nombres de tentatives est inf\u00e9rieur \u00e0 10 et que la bonne r\u00e9ponse n'a pas \u00e9t\u00e9 donn\u00e9e.</li> </ol>"},{"location":"Annales/Corriges/2022-S39/","title":"Corrig\u00e9 sujet 39 - Ann\u00e9e : 2022","text":"<p>Sujet 39 - 2022 </p>"},{"location":"Annales/Corriges/2022-S39/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for valeur in tab:\n        somme = somme + valeur\n    return somme/len(tab)\n</code></pre> <p>Commentaires</p> <p>Exercice classique de parcours d'une liste, un parcours par \u00e9l\u00e9ment suffit les indices n'\u00e9tant pas utilis\u00e9s. Le sujet ne pr\u00e9cise pas le comportement \u00e0 adopter si la liste est vide.</p>"},{"location":"Annales/Corriges/2022-S39/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n         [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n         [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n         [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n         [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repreente par \n        des \"*\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\",end=\"\")\n            else:\n                print(\"  \",end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n       element de liste_depart'''\nliste_zoom = [] #(1)\nfor elt in liste_depart :\nfor i in range(k):\nliste_zoom.append(elt)\nreturn liste_zoom\n\ndef zoomDessin(grille,k):\n'''renvoie une grille ou les lignes sont zoomees k fois \n       ET repetees k fois'''\n    grille_zoom=[]\n    for elt in grille:\nliste_zoom = zoomListe(elt,k) #(2)\nfor i in range(k):\ngrille_zoom.append(liste_zoom)\nreturn grille_zoom\n</code></pre> <ol> <li>On suit l'algorithme de l'\u00e9nonc\u00e9 en dupliquant chaque \u00e9l\u00e9ment de la liste de d\u00e9part <code>k</code> fois gr\u00e2ce \u00e0 la boucle <code>for i in range(k)</code></li> <li>On zoom chaque ligne en utilisant la fonction pr\u00e9c\u00e9dente </li> </ol> <p>Attention</p> <p>Les commentaires sur le code python fourni et ceux \u00e9crits dans le sujet au format <code>pdf</code> ne correspondent pas (fautes dans frappe dans le code au format <code>.py</code>)</p>"},{"location":"Annales/Corriges/2022-S40/","title":"Corrig\u00e9 sujet 40 - Ann\u00e9e : 2022","text":"<p>Sujet 40 - 2022 </p>"},{"location":"Annales/Corriges/2022-S40/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt,tab):\n    liste_indice=[]\n    for i in range(len(tab)):\n        if tab[i]==elt:\n            liste_indice.append(i)\n    return liste_indice\n</code></pre> <p>Commentaires</p> <ol> <li>Exercice classique de parcours de listes, en utilisant ici les indices.</li> <li>On peut utiliser une d\u00e9finition de liste par compr\u00e9hension : \ud83d\udc0d Script Python<pre><code>    def recherche(elt, tab):\n        return [i for i in range(len(tab)) if tab[i] == elt]\n</code></pre></li> </ol>"},{"location":"Annales/Corriges/2022-S40/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{'DS1' : [15.5, 4],\n                       'DM1' : [14.5, 1],\n                       'DS2' : [13, 4],\n                       'PROJET1' : [16, 3],\n                       'DS3' : [14, 4]},\n             'Durand':{'DS1' : [6 , 4],\n                       'DM1' : [14.5, 1],\n                       'DS2' : [8, 4],\n                       'PROJET1' : [9, 3],\n                       'IE1' : [7, 2],\n                       'DS3' : [8, 4],\n                       'DS4' :[15, 4]}}\n\n\ndef moyenne(nom):\nif nom in resultats: #(1)\nnotes = resultats[nom]\ntotal_points = 0 #(2)\ntotal_coefficients = 0\nfor valeurs  in notes.values(): #(3)\nnote , coefficient = valeurs\ntotal_points = total_points + note * coefficient #(4)\ntotal_coefficients = total_coefficients + coefficient\nreturn round( total_points / total_coefficients , 1 )\nelse:\n        return -1\n</code></pre> <ol> <li>On v\u00e9rifie que l'\u00e9l\u00e8ve est bien pr\u00e9sent dans les donn\u00e9es (sinon on renvoie -1)</li> <li>Pour calculer la moyenne il nous faut la somme des notes (pond\u00e9r\u00e9es par leur coefficient) et la somme des coefficients. On commence par initialiser ces deux sommes \u00e0 0</li> <li>Parcours par valeur du dictionnaire des notes de l'\u00e9l\u00e8ves (on rappelle que les cl\u00e9s sont les types d'\u00e9preuve, on en a pas besoin ici)</li> <li>A partir d'ici c'est l'algorithme classique du calcul d'une moyenne</li> </ol> <p>Attention</p> <p>L'exercice est sans doute difficile, il faut comprendre la fa\u00e7on dont les donn\u00e9es sont organis\u00e9es. Il s'agit d'une liste de dictionnaire ayant pour cl\u00e9 les noms des \u00e9l\u00e8ves et comme valeur un dictionnaire qui lui a pour cl\u00e9 les types d'\u00e9preuve et les valeurs une liste contenant la note et son coefficient.</p>"},{"location":"Annales/Corriges/2023-S01/","title":"Corrig\u00e9 sujet 01 - Ann\u00e9e : 2023","text":"<p>Sujet 01 - 2022 </p>"},{"location":"Annales/Corriges/2023-S01/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def verifie(tab):\n    for i in range(len(tab)-1):\n        if tab[i] &gt; tab[i+1]:\n            return False\n    return True\n</code></pre> <p>Note</p> <ul> <li>On parcours le tableau par indice, si un \u00e9l\u00e9ment est sup\u00e9rieur \u00e0 son successeur alors on renvoie <code>False</code>.</li> <li>Si on atteint la fin du tableau, on renvoie <code>True</code> (tous les \u00e9l\u00e9ments sont bien inf\u00e9rieurs \u00e0 leur successeur)</li> <li>On parcours jusqu'\u00e0 l'avant-dernier (le dernier n'a pas de sucesseur)</li> </ul>"},{"location":"Annales/Corriges/2023-S01/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\nresultat = {} #(1)\nfor bulletin in urne:\nif bulletin in resultat: #(2)\nresultat[bulletin] = resultat[bulletin] + 1\n        else:\nresultat[bulletin] = 1\nreturn resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\nif election[candidat] &gt; nmax : #(3)\nnmax = election[candidat]\nvainqueur = candidat\nliste_finale = [nom for nom in election if election[nom] == nmax] #(4)\nreturn liste_finale \n</code></pre> <ol> <li>Initialisation \u00e0 un dictionnaire vide.</li> <li>Si la cl\u00e9 existe dans le dictionnaire on incr\u00e9mente sa valeur de 1, sinon on ajoute cette cl\u00e9 avec la valeur 1 (c'est le premier vote pour ce groupe)</li> <li>Algorithme classique de recherche du maximum en parcourant toutes les valeurs</li> <li>On construit donc ici par compr\u00e9hension la liste des candidats (car il peut y en avoir plusieurs) ayant le nombre de votes maximales</li> </ol> <p>Attention</p> <p>La variable <code>vainqueur</code> d\u00e9finie \u00e0 la ligne 18 (et qui porte le m\u00eame nom que la fonction) peut laisser penser qu'il y en a un seul ! Alors qu'on construit justement une liste pour g\u00e9rer les cas d'ex-aequo, cette variable n'a en fait aucune utilit\u00e9.</p>"},{"location":"Annales/Corriges/2023-S02/","title":"Corrig\u00e9 sujet 02 - Ann\u00e9e : 2023","text":"<p>Sujet 02 - 2022 </p>"},{"location":"Annales/Corriges/2023-S02/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def indices_maxi(tab):\n    maxi, indices_maxi = tab[0], [0]\n    for i in range(1,len(tab)):\n        if tab[i] &gt; maxi:\n            maxi = tab[i]\n            indices_maxi = [i]\n        elif tab[i] == maxi:\n            indices_maxi.append(i)\n    return maxi, indices_maxi\n</code></pre> <p>Note</p> <p>On parcourt la liste par indice:</p> <ul> <li>lignes 4 \u00e0 6 : si on trouve un \u00e9l\u00e9ment plus grand (strictement) que le maximum alors cet \u00e9l\u00e9ment est le nouveau maximum (et la liste des indices du maximum ne contient que l'indice de cet \u00e9l\u00e9ment)</li> <li>lignes 7 et 8 :si on trouve un \u00e9l\u00e9ment \u00e9gal au maximum alors on rajoute son indice \u00e0 la liste des indices du maximum</li> </ul>"},{"location":"Annales/Corriges/2023-S02/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def positif(pile):\npile_1 = list(pile) #(1)\npile_2 = [] #(2)\nwhile pile_1 != []:\nx = pile_1.pop() #(3)\nif x &gt;= 0:\npile_2.append(x) #(4)\nwhile pile_2 != []:\nx = pile_2.pop()\npile_1.append(x) #(5)\nreturn pile_1\n</code></pre> <ol> <li>On r\u00e9alise dans <code>pile_1</code> une copie ind\u00e9pendante de la pile</li> <li><code>pile_2</code> est initialement vide, on y empilera les \u00e9l\u00e9ments positifs de <code>pile_1</code></li> <li>On retire successivement les \u00e9l\u00e9ments <code>x</code> de <code>pile_1</code></li> <li>S'ils sont positifs, on les empile dans <code>pile_2</code></li> <li>On depile tous les \u00e9l\u00e9ments de <code>pile_2</code> dans <code>pile_1</code> afin qu'ils soient dans l'ordre initial</li> </ol> <p>Attention</p> <ol> <li>Bien comprendre que le sujet se limite \u00e0 l'interface habituelle d'une pile (<code>empile</code> avec <code>append</code>, <code>depile</code> avec <code>pop</code> et <code>est_vide</code> avec <code>==[]</code>). On pourrait trier les \u00e9l\u00e9ments positifs d'une liste bien plus simplement (par exemple par compr\u00e9hension).</li> <li>On rappelle que <code>x = pile_1.pop()</code> poss\u00e8de deux effets : supprimer le dernier \u00e9l\u00e9ment de <code>pile_1()</code> et affecte sa valeur \u00e0 <code>x</code>.</li> </ol>"},{"location":"Annales/Corriges/2023-S03/","title":"Corrig\u00e9 sujet 03 - Ann\u00e9e : 2023","text":"<p>Sujet 03 - 2022 </p>"},{"location":"Annales/Corriges/2023-S03/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(liste):\n    somme = 0\n    somme_coefficient = 0\n    for note,coefficient in liste:\n        somme = somme + note*coefficient\n        somme_coefficient = somme_coefficient + coefficient\n    if somme_coefficient != 0:\n        return somme/somme_coefficient\n    else:\n        return None\n</code></pre> <p>Commentaires</p> <p>Bien comprendre la structure de donn\u00e9es utilis\u00e9e, c'est une liste de tuples. Chaque tuple est un couple <code>(note, coefficient)</code>. On peut donc parcourir cette structure avec une boucle du type <code>for note, coefficient in liste</code> (comme dans cette correction) ou alors <code>for note_coeff in liste</code> et dans ce cas <code>note_coeff</code> est un tuple, on acc\u00e8de \u00e0 la note avec <code>note_coeff[0]</code> et au coefficient avec <code>note_coeff[1]</code></p>"},{"location":"Annales/Corriges/2023-S03/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n         [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n         [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n         [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n         [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repreente par \n        des \"*\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\",end=\"\")\n            else:\n                print(\"  \",end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n       element de liste_depart'''\nliste_zoom = [] #(1)\nfor elt in liste_depart :\nfor i in range(k):\nliste_zoom.append(elt)\nreturn liste_zoom\n\ndef zoomDessin(grille,k):\n'''renvoie une grille ou les lignes sont zoomees k fois \n       ET repetees k fois'''\n    grille_zoom=[]\n    for elt in grille:\nliste_zoom = zoomListe(elt,k) #(2)\nfor i in range(k):\ngrille_zoom.append(liste_zoom)\nreturn grille_zoom\n</code></pre> <ol> <li>On suit l'algorithme de l'\u00e9nonc\u00e9 en dupliquant chaque \u00e9l\u00e9ment de la liste de d\u00e9part <code>k</code> fois gr\u00e2ce \u00e0 la boucle <code>for i in range(k)</code></li> <li>On zoom chaque ligne en utilisant la fonction pr\u00e9c\u00e9dente </li> </ol>"},{"location":"Annales/Corriges/2023-S04/","title":"Corrig\u00e9 sujet 04 - Ann\u00e9e : 2023","text":"<p>Sujet 04 - 2022 </p>"},{"location":"Annales/Corriges/2023-S04/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def a_doublon(liste_triee):\n    for i in range(len(liste_triee)-1):\n        if liste_triee[i] == liste_triee[i+1]:\n            return True\n    return False\n</code></pre> <p>Note</p> <ul> <li>La liste est suppos\u00e9e tri\u00e9e, donc si un doublon est pr\u00e9sent c'est que deux nombres cons\u00e9cutifs sont \u00e9gaux.</li> <li>On parcourt la liste jusqu'\u00e0 l'avant-dernier \u00e9l\u00e9ment (le dernier n'a pas de sucesseur)</li> </ul>"},{"location":"Annales/Corriges/2023-S04/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\ndef incremente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\nvoisins = voisinage(len(grille),ligne,colonne)\nfor l, c in voisins:\nif grille[l][c] != -1: # si ce n'est pas une bombe\ngrille[l][c] = grille[l][c] + 1 # on ajoute 1 \u00e0 sa valeur\ndef genere_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de  la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\ngrille[ligne][colonne] = -1# place la bombe\nincremente_voisins(grille,ligne,colonne)# incr\u00e9mente ses voisins\nreturn grille\n\nprint(genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)]))\n</code></pre> <p>Attention</p> <p>Dans le pdf, La fonction <code>genere_grille</code> s'\u00e9crit parfois avec des accents (<code>g\u00e9n\u00e8re_grille</code>)  et parfois sans.</p>"},{"location":"Annales/Corriges/2023-S05/","title":"Corrig\u00e9 sujet 05 - Ann\u00e9e : 2023","text":"<p>Sujet 05 - 2022 </p>"},{"location":"Annales/Corriges/2023-S05/#exercice-1","title":"Exercice 1","text":"<p>Bug</p> <p>La fonction <code>lancer</code> telle que d\u00e9finie dans l'\u00e9nonc\u00e9 renvoie un tableau mais ne produit a priori, pas d'affichage. Or, pendant les tests, on voit : \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n</code></pre> On devrait plut\u00f4t avoir : \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n&gt;&gt;&gt; lancer1\n[5, 6, 6, 2, 2]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>from random import randint \n\ndef lancer(n):\n    resultats = []\n    for i in range(n):\n        de = randint(1,6)\n        resultats.append(de)\n    return resultats\n\ndef paire_6(lancers):\n    nb_6 = 0\n    for de in lancers:\n        if de == 6:\n            nb_6 += 1\n            if nb_6 == 2:\n                return True\n    return False\n</code></pre>"},{"location":"Annales/Corriges/2023-S05/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\nreturn len(image) #(1)\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\nreturn len(image[0]) #(2)\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme \n       d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] \n# on cree une image de 0 aux memes dimensions que le parametre image \n    for i in range(nbLig(image)):\nfor j in range(nbCol(image)): #(3)\nL[i][j] = 255-image[i][j] #(4)\nreturn L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme \n       d'une liste de listes contenant des 0 si la valeur \n       du pixel est strictement inferieure au seuil \n       et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cree une image de 0 aux memes dimensions que le parametre image \n    for i in range(len(image)):\nfor j in range(nbCol(image)): \nif image[i][j] &lt; seuil : #(5)\nL[i][j] = 0\nelse:\nL[i][j] = 1\nreturn L\n</code></pre> <ol> <li>Comme indiqu\u00e9 dans l'\u00e9nonc\u00e9, une image est une listes de listes (toutes de m\u00eame longueur).la hauteur de l'image est le nombres de listes</li> <li>La largeur de l'image est la longueur d'une sous-liste (elles ont toute la m\u00eame longueur).</li> <li>On utilise la fonction <code>nbCol</code> d\u00e9finie plus haut</li> <li>Se r\u00e9f\u00e9rer \u00e0 l'\u00e9nonc\u00e9 : la somme du pixel et de son n\u00e9gatif doit faire 255.</li> <li>On applique l'algorithme donn\u00e9 en commentaire : le pixel est mis \u00e0 0 s'il est inf\u00e9rieur au seuil et \u00e0  1 sinon.</li> </ol>"},{"location":"Annales/Corriges/2023-S06/","title":"Corrig\u00e9 sujet 06 - Ann\u00e9e : 2023","text":"<p>Sujet 06 - 2022 </p>"},{"location":"Annales/Corriges/2023-S06/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt,tab):\n    for i in range(len(tab)-1,-1,-1):\n        if elt==tab[i]:\n            return i\n    return len(tab)\n</code></pre> <p>Commentaires</p> <p>Le sujet demande de rechercher la derni\u00e8re occurrence, la correction propos\u00e9e ici parcourt la liste \u00e0 l'envers et renvoie la premi\u00e8re occurrence rencontr\u00e9e. Il faut donc dans ce cas savoir \u00e0 \u00e9crire un parcours \u00e0 l'envers \u00e0 l'aide de <code>range</code>. On peut faire aussi parcourir dans le sens normal jusqu'\u00e0 la fin et mettre la jour l'indice \u00e0 chaque fois qu'on rencontre la valeur: \ud83d\udc0d Script Python<pre><code>    def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre></p>"},{"location":"Annales/Corriges/2023-S06/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>from math import sqrt   # import de la fonction racine carree\n\ndef distance(point1, point2): \n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\nreturn sqrt((point1[0]-point2[0])**2 + (point1[1]-point2[1])**2) #(1)\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant a la plus     \n    courte distance du point depart.\"\"\"\n    point = tab[0]\nmin_dist = distance(point,depart) #(2)\nfor i in range (1, len(tab)): #(3)\nif distance(tab[i], depart) &lt; min_dist:\npoint = tab[i]\nmin_dist = distance(tab[i],depart)\nreturn point\n</code></pre> <ol> <li>Un <code>point</code> est un tuple <code>(abcisse,ordonne)</code> donc <code>point[0]</code> contient l'abscisse et <code>point[1]</code> l'ordonn\u00e9e.</li> <li>On initialise le minimum \u00e0 la distance entre le point de d\u00e9part et le premier point de la liste (celui d'indice 0)</li> <li>Algorithme classique de recherche du minimum</li> </ol>"},{"location":"Annales/Corriges/2023-S07/","title":"Corrig\u00e9 sujet 07 - Ann\u00e9e : 2023","text":"<p>Sujet 07 - 2022 </p>"},{"location":"Annales/Corriges/2023-S07/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def fusion(tab1,tab2):\n    i1,i2 = 0,0\n    tab = []\n    while i1&lt;len(tab1) and i2&lt;len(tab2):\n        if tab1[i1]&lt;tab2[i2]:\n            tab.append(tab1[i1])\n            i1 += 1\n        else:\n            tab.append(tab2[i2])\n            i2 += 1\n    tab = tab + tab1[i1:] + tab2[i2:]\n    return tab\n</code></pre> <p>Commentaire</p> <p>M\u00eame si le tri fusion est au programme de terminale, l'exercice est sans doute difficile. On peut aussi penser \u00e0 une solution r\u00e9cursive du type: \ud83d\udc0d Script Python<pre><code>def fusion(l1,l2):\n    if l1 == []: return l2\n    if l2 == []: return l1\n    if l1[0]&lt;l2[0]: \n        return [l1[0]] + fusion(l1[1:],l2)\n    else:\n        return [l2[0]] + fusion(l1,l2[1:])\n</code></pre></p>"},{"location":"Annales/Corriges/2023-S07/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre) :\n\"\"\" Renvoie l'ecriture decimale du nombre donn\u00e9 en chiffres romains \"\"\"\n    if len(nombre) == 1:\nreturn romains[nombre] #(1)\nelif romains[nombre[0]] &gt;= romains[nombre[1]] :\nreturn romains[nombre[0]] + traduire_romain(nombre[1:]) #(2)\nelse:\nreturn traduire_romain(nombre[1:]) - romains[nombre[0]] #(3)\n</code></pre> <ol> <li>Si le nombre contient un unique chiffre, on renvoie sa valeur.</li> <li>Ici, il faut ajouter la valeur de la premi\u00e8re lettre car elle est sup\u00e9rieure \u00e0 la valeur de la lettre suivante.</li> <li>Ici, il faut soustraire car elle est inf\u00e9rieure \u00e0 la valeur de la lettre suivante.</li> </ol> <p>Attention</p> <ul> <li>Le sujet utilise les slices (<code>nombre_droite = nombre[1:]</code>) qui ne sont pas au programme.</li> </ul>"},{"location":"Annales/Corriges/2023-S08/","title":"Corrig\u00e9 sujet 08 - Ann\u00e9e : 2023","text":"<p>Sujet 08 - 2022 </p>"},{"location":"Annales/Corriges/2023-S08/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    max_like = 0\n    for pseudo in dico:\n        if dico[pseudo]&gt;max_like:\n            max_pseudo = pseudo\n            max_like=dico[pseudo]\n    return max_pseudo,max_like\n</code></pre> <p>Commentaires</p> <p>Dans cette correction on a choisit d'initialiser le maximum possible \u00e0 0 en supposant que le dictionnaire ne contient que des valeurs positives. Dans le cas contraire, il faut initialiser le maximum \u00e0 une valeur pr\u00e9sente dans le dictionnaire (il est suppos\u00e9 non vide)</p>"},{"location":"Annales/Corriges/2023-S08/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\nfor element in tab: #(1)\nif element != '+' and element != '*': #(2)\np.empiler(element)\nelse:\nif element == \"+\": #(3)\nresultat = p.depiler() + p.depiler()\nelse:\nresultat = p.depiler() * p.depiler()\np.empiler(resultat) #(4)\nreturn resultat\n</code></pre> <ol> <li>Le nom de la variable de parcours est indiqu\u00e9 juste en dessous : <code>element</code></li> <li>On suit l'algorithme de l'\u00e9nonc\u00e9 : si l'\u00e9l\u00e9ment n'est pas un op\u00e9rateur, alors on l'empile.</li> <li>Si c'est un op\u00e9rateur, alors on effecture l'op\u00e9ration. C'est soit l'addition, soit la multiplication car on s'est limit\u00e9 \u00e0 ces deux op\u00e9rations. </li> <li>Le r\u00e9sultat est empil\u00e9 comme indiqu\u00e9 dans l'algorithme donn\u00e9 dans l'\u00e9nonc\u00e9.</li> </ol>"},{"location":"Annales/Corriges/2023-S09/","title":"Corrig\u00e9 sujet 09 - Ann\u00e9e : 2023","text":"<p>Sujet 09 - 2022 </p>"},{"location":"Annales/Corriges/2023-S09/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(a,b):\n    produit=0\n    for i in range(abs(a)):\n        produit += abs(b)\n    if (a&gt;0 and b&lt;0) or (a&lt;0 and b&gt;0): \n        return -produit\n    else:\n        return produit\n</code></pre> <p>Commentaires</p> <ol> <li>On peut rappeler la r\u00e8gle des signes pour un produit :<ul> <li>un produit est n\u00e9gatif si les deux facteurs ne sont pas de m\u00eame signe (ligne 5)</li> <li>et positif sinon.</li> </ul> </li> <li>Si <code>a</code> et <code>b</code> sont deux entiers positifs :     \\(a \\times b = \\underbrace{b + b + \\dots + b}_{a \\quad \\mathrm{termes}}\\)</li> <li>L'\u00e9nonc\u00e9 pourrait aiguiller vers l'utilisation de <code>abs</code> (valeur absolue) pour traiter les probl\u00e8mes de signe.</li> </ol>"},{"location":"Annales/Corriges/2023-S09/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab): #(1)\n        return None\n    elif i &gt; j:\n        return None\nm = (i + j) // 2 #(2)\nif tab[m] &lt; n:\nreturn chercher(tab, n, m+1, j) #(3)\nelif tab[m] &gt; n:\nreturn chercher(tab, n, i, m-1)\nelse:\nreturn m\n</code></pre> <ol> <li>L'indice du dernier \u00e9l\u00e9ment d'un tableau <code>tab</code> est <code>len(tab)-1</code>.</li> <li>Calcul de l'indice <code>m</code> au milieu</li> <li>On peut chercher apr\u00e8s l'indice <code>m</code> \u00e0 cause du strictement inf\u00e9rieur dans le test de comparaison <code>tab[m]&lt;n</code>.</li> </ol>"},{"location":"Annales/Corriges/2023-S10/","title":"Corrig\u00e9 sujet 10 - Ann\u00e9e : 2023","text":"<p>Sujet 10 - 2022 </p>"},{"location":"Annales/Corriges/2023-S10/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def maxliste(tab):\n    maxi = tab[0]\n    for elt in tab:\n        if elt &gt; maxi:\n            maxi=elt\n    return maxi\n</code></pre> <p>Commentaires</p> <p>L'\u00e9nonc\u00e9 pr\u00e9cise que la liste est non vide, on peut donc se permettre d'initialiser le maximum courant avec le premier \u00e9l\u00e9ment de la liste.</p>"},{"location":"Annales/Corriges/2023-S10/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\n\ndef parenthesage (ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\nif c == \"(\": #(1)\np.empiler(c)\nelif c == \")\": #(2)\nif p.est_vide():\nreturn False\nelse:\np.depiler()\nreturn p.est_vide() #(3)\n</code></pre> <ol> <li>On suit l'algorithme donn\u00e9 dans l'\u00e9nonce : si on rencontre une parenth\u00e8se ouvrante alors on l'empile</li> <li>Si c'est une parenth\u00e8se fermante, on d\u00e9pile dans le cas o\u00f9 la pile est vide, l'expression est mal parenth\u00e9s\u00e9e.</li> <li>Si \u00e0 la fin du parcours la pile n'est pas vide, l'expression est mal parenth\u00e9s\u00e9e.</li> </ol> <p>Remarque</p> <p>L'utilisation d'une pile pour v\u00e9rifier le bon parenth\u00e9sage est surtout utile lorsqu'il y a plusieurs types de parenth\u00e8ses ouvrantes et fermantes : <code>()</code> mais aussi <code>{}</code>, <code>[]</code> ...</p>"},{"location":"Annales/Corriges/2023-S11/","title":"Corrig\u00e9 sujet 11 - Ann\u00e9e : 2023","text":"<p>Sujet 11 - 2022 </p>"},{"location":"Annales/Corriges/2023-S11/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n    poids =  len(tab)-1\n    valeur = 0\n    for elt in tab:\n        valeur += 2**poids * elt\n        poids -=1\n    return valeur\n</code></pre> <p>Commentaires</p> <p>On peut aussi effectuer un parcours par indice (cela \u00e9vite d'utiliser la variable <code>poids</code>)</p>"},{"location":"Annales/Corriges/2023-S11/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\nvaleur_insertion = tab[i] #(1)\n# la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\nj = i #(2)\n# tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\nwhile j &gt; 0 and valeur_insertion &lt; tab[j-1]: #(3)\ntab[j] = tab[j-1]\nj = j - 1\ntab[j] = valeur_insertion\n</code></pre> <ol> <li>On ins\u00e8re l'\u00e9l\u00e9ment d'indice <code>i</code> dans le debut de liste (d\u00e9j\u00e0 tri\u00e9e)</li> <li>L'indice de d\u00e9part de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer, on va le diminuer jusqu'\u00e0 trouver le bon emplacement</li> <li>Tant que le voisin de gauche existe (<code>j&gt;0</code>) et que sa valeur est sup\u00e9rieure \u00e0 celle \u00e0 ins\u00e9rer on a pas atteint la bonne position d'insertion</li> </ol>"},{"location":"Annales/Corriges/2023-S12/","title":"Corrig\u00e9 sujet 12 - Ann\u00e9e : 2023","text":"<p>Sujet 12 - 2022 </p>"},{"location":"Annales/Corriges/2023-S12/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>class ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n\nn0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nabr1 = ABR(n0, 1, n2)\n\n\ndef ajoute(cle,a):\n    if a == None:\n        return ABR(None,cle,None)\n    elif a.cle&gt;cle:\n        sag = ajoute(cle,a.gauche)\n        return ABR(sag,a.cle,a.droit)\n    elif a.cle&lt;cle:\n        sad = ajoute(cle,a.droit)\n        return ABR(a.gauche,a.cle,sad)\n    else:\n        return a\n</code></pre> <p>Attention</p> <ul> <li>Le sujet est difficile et aborde diverses notions du programme (arbre binaire de recherche, r\u00e9cursivit\u00e9, programmation objet).</li> <li>De fa\u00e7on tr\u00e8s inhabituelle pour une exercice 1, une portion de code est fournie, c'est le code de la classe <code>ABR</code>, avec la m\u00e9thode d'affichage. A noter que la <code>if</code> de cette m\u00e9thode n'est jamais execut\u00e9, en effet <code>None</code> n'est pas une instance de la classe <code>ABR</code>, par contre <code>None</code> a d\u00e9j\u00e0 une m\u00e9thode <code>__repr__</code> (ce qui arr\u00eate la r\u00e9cursivit\u00e9)</li> <li>La fonction a \u00e9crire <code>ajoute</code> devrait \u00eatre une m\u00e9thode de classe <code>ABR</code> et pas une fonction externe, elle devrait donc modifier l'arbre donn\u00e9 en param\u00e8tre et pas en cr\u00e9er un nouveau.</li> </ul>"},{"location":"Annales/Corriges/2023-S12/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\nfor masse in liste_masses : #(1)\ni=0\nwhile i &lt;= nb_boites and boites[i] + masse &gt; c: #(2) \ni = i + 1\n        if i == nb_boites + 1: #(3) \nnb_boites = nb_boites + 1\nboites[i] = boites[i] + masse\nreturn nb_boites + 1 #(4)\n</code></pre> <ol> <li>Parcours de la liste des masses</li> <li>Tant qu'on a pas atteint la premi\u00e8re boite vide et que la masse ne rentre pas on avance dans la liste de boites.</li> <li>La masse s'ins\u00e8re dans une boite vide, donc le nombre de boite utilis\u00e9e augmente</li> <li>Les boites sont compt\u00e9es \u00e0 partir de z\u00e9ro, donc on ajoute un au nombre</li> </ol> <p>Attention</p> <p>Dans cette correction la fonction renvoie 1 pour si la liste de masse est vide, si on veut que la fonction renvoie <code>0</code>, on doit soit introduire un <code>if</code> dans le <code>return</code> (hors programme), soit modifier le code donn\u00e9.</p>"},{"location":"Annales/Corriges/2023-S13/","title":"Corrig\u00e9 sujet 13 - Ann\u00e9e : 2023","text":"<p>Sujet 13 - 2022 </p>"},{"location":"Annales/Corriges/2023-S13/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(a,tab):\n    nb_occurence = 0\n    for elt in tab:\n        if elt==a:\n            nb_occurence +=1\n    return nb_occurence\n</code></pre> <p>Commentaires</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable en comptant les occurrences d'apparition d'une valeur. Un parcours par \u00e9l\u00e9ment suffit, les indices des occurrences n'\u00e9tant pas utilis\u00e9es.</p>"},{"location":"Annales/Corriges/2023-S13/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\nrendu = [] #(1)\na_rendre = somme_versee - somme_due #(2)\ni = len(pieces) - 1\nwhile a_rendre &gt; 0 : #(3)\nif pieces[i] &lt;= a_rendre :\nrendu.append(pieces[i]) #(4)\na_rendre = a_rendre - pieces[i]\nelse :\ni = i-1\nreturn rendu\n</code></pre> <ol> <li>La liste des pi\u00e8ces \u00e0 rendre, initialis\u00e9e \u00e0 <code>[]</code></li> <li>La somme \u00e0 rendre, initialis\u00e9 \u00e0 <code>s_versee - s_due</code></li> <li>La condition d'arr\u00eat, plus rien \u00e0 rendre</li> <li>C'est l'algorithme glouton classique pour le rendu de monnaie (les pieces sont rang\u00e9es dans l'ordre). Si la pi\u00e8ce est inf\u00e9rieure \u00e0 la somme \u00e0 rendre, on l'ajoute au rendu et on diminue la somme \u00e0 rendre. Sinon on passe \u00e0 la pi\u00e8ce suivante.</li> </ol> <p>Attention</p> <ol> <li>On utilise ici une liste de pi\u00e8ces class\u00e9es par ordre croissant de valeurs, cela oblige donc \u00e0 commencer par la fin de la liste. C'est ce qui explique le parcours de la liste \"\u00e0 l'envers\" : initialisation de <code>i</code> \u00e0 <code>len(pi\u00e8ces)-1</code> puis d\u00e9cr\u00e9mentation de <code>i</code>.</li> <li>La fonction utilise deux arguments <code>s_versee</code> et <code>s_due</code> pour calculer la somme \u00e0 rendre (<code>s_versee-s_due</code>), on pourrait directement une fonction qui prend en argument la somme \u00e0 rendre.</li> </ol>"},{"location":"Annales/Corriges/2023-S14/","title":"Corrig\u00e9 sujet 14 - Ann\u00e9e : 2023","text":"<p>Sujet 14 - 2022 </p>"},{"location":"Annales/Corriges/2023-S14/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt,tab):\n''' Renvoie l'indice de la premi\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon'''\n  for i in range(len(tab)):\n    if tab[i]==elt:\n      return i\n  return -1\n</code></pre> <p>Commentaires</p> <p>Exercice classique de recherche dans une liste, un parcours par les indices s'impose puisqu'on renvoie la position de l'\u00e9l\u00e9ment dans la liste.</p>"},{"location":"Annales/Corriges/2023-S14/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a) \ni = len(tab)-1 #(1)\nwhile a &lt; l[i] and i &gt;= 0:  #(2)\nl[i+1] = l[i] #(3)\nl[i] = a\ni = i - 1 #(4)\nreturn l\n</code></pre> <ol> <li>C'est l'indice auquel se trouve l'\u00e9l\u00e9ment pr\u00e9c\u00e9dant celui qui a \u00e9t\u00e9 ins\u00e9r\u00e9. Au d\u00e9but on ins\u00e8re \u00e0 la fin (en position <code>len(tab)</code>) donc celui qui pr\u00e9c\u00e8de a l'indice <code>len(tab)-1</code>. </li> <li>On \u00e9change <code>a</code> avec le pr\u00e9c\u00e9dent tant qu'il est inf\u00e9rieur et que le d\u00e9but de liste n'est pas atteint.</li> <li>Cette ligne et la suivante permettent d'effectuer l'\u00e9change.</li> <li>D\u00e9cr\u00e9mentation de la position \u00e0 tester.</li> </ol> <p>Attention</p> <ul> <li>Pour compl\u00e9ter le code, il faut comprendre l'algorithme mis en oeuvre pour ins\u00e9rer au bon emplacement :   <ol> <li>Ajouter \u00e0 la fin</li> <li>Remonter l'\u00e9l\u00e9ment en l'\u00e9changeant avec son voisin de gauche tant qu'il est inf\u00e9rieur \u00e0 ce dernier </li> </ol> </li> <li>La ligne 2 a pour but de faire une copie du tableau <code>tab</code> afin de ne pas le modifier. On aurait pu utiliser <code>copy</code>.</li> </ul>"},{"location":"Annales/Corriges/2023-S15/","title":"Corrig\u00e9 sujet 15 - Ann\u00e9e : 2023","text":"<p>Sujet 15 - 2022 </p>"},{"location":"Annales/Corriges/2023-S15/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def mini(releve,date):\n    indice_mini, temp_mini = 0, releve[0]\n    for i in range(len(releve)):\n        if releve[i]&lt;temp_mini:\n            indice_mini,temp_mini = i,releve[i]\n    return temp_mini,date[indice_mini]\n</code></pre> <p>Commentaire</p> <p>Bien comprendre que les ann\u00e9es et les temp\u00e9ratures moyennes correspondantes sont aux m\u00eames indices dans les deux listes. On recherche donc l'indice de la temp\u00e9rature moyenne et on l'utilise pour retrouver l'ann\u00e9e correspondante.</p>"},{"location":"Annales/Corriges/2023-S15/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\nresult = \"\"\nfor caractere in chaine:\nresult = caractere + result #(1)\nreturn result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\nreturn inverse==chaine #(2)\ndef est_nbre_palindrome(nbre):\nchaine = str(nbre) #(3)\nreturn est_palindrome(chaine)\n</code></pre> <ol> <li>Le dernier caract\u00e8re a \u00eatre ajout\u00e9 doit \u00eatre au d\u00e9but, il faut donc \u00e9crire <code>result = caractere + result</code> et pas <code>result = result + caractere</code></li> <li>Cela est \u00e9quivalent \u00e0 \u00e9crire :      \ud83d\udc0d Script Python<pre><code>    if inverse==chaine:\n        return True\n    else:\n        return False\n</code></pre></li> <li>Conversion en chaines de caract\u00e8res afin de pouvoir utiliser <code>est_palindrome</code>.</li> </ol>"},{"location":"Annales/Corriges/2023-S16/","title":"Corrig\u00e9 sujet 16 - Ann\u00e9e : 2023","text":"<p>Sujet 16 - 2022 </p>"},{"location":"Annales/Corriges/2023-S16/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche_indices_classement(elt,tab):\n    inferieur = []\n    egal = []\n    superieur = []\n    for i in range(len(tab)):\n        if tab[i]&lt;elt:\n            inferieur.append(i)\n        elif tab[i]==elt:\n            egal.append(i)\n        else:\n            superieur.append(i)\n    return inferieur, egal, superieur\n</code></pre> <p>Remarques</p> <ul> <li>On initialise \u00e0 vide les trois listes \u00e0 cr\u00e9er </li> <li>On parcourt par indice la liste</li> <li>Suivant le cas (inf\u00e9rieur, \u00e9gal ou sup\u00e9rieur) on rajoute l'indice dans la liste correspondante</li> </ul>"},{"location":"Annales/Corriges/2023-S16/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': {\n                           'DS1': [15.5, 4],\n                           'DM1': [14.5, 1],\n                           'DS2': [13, 4],\n                           'PROJET1': [16, 3],\n                           'DS3': [14, 4]\n                       },\n             'Durand': {\n                           'DS1': [6 , 4],\n                           'DM1': [14.5, 1],\n                           'DS2': [8, 4],\n                           'PROJET1': [9, 3],\n                           'IE1': [7, 2],\n                           'DS3': [8, 4],\n                           'DS4':[15, 4]\n                       }\n            }\n\ndef moyenne(nom, dico_result):\nif nom in dico_result:\nnotes = dico_result[nom] #(1)\ntotal_points = 0\ntotal_coefficients = 0\nfor valeurs  in notes.values(): #(2)\nnote, coefficient = valeurs\ntotal_points = total_points + note * coefficient #(3)\ntotal_coefficients = total_coefficients + coefficient\nreturn round( total_points / total_coefficients, 1 )\nelse:\n        return -1\n</code></pre> <ol> <li>On v\u00e9rifie que le nom de l'\u00e9l\u00e8ve figure bien dans le dictionnaire</li> <li>Parcours du dictionnaire d'\u00e9l\u00e8ves par valeurs (les valeurs sont des dictionnaires ayant pour cl\u00e9 le nom du devoir et pour valeur la liste <code>[note,coefficient]</code>)</li> <li>Mise \u00e0 jour du total de points et de la somme des coefficients</li> </ol>"},{"location":"Annales/Corriges/2023-S17/","title":"Corrig\u00e9 sujet 17 - Ann\u00e9e : 2023","text":"<p>Sujet 17 - 2022 </p>"},{"location":"Annales/Corriges/2023-S17/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(donnees):\n    somme_notes = 0\n    somme_coefficients = 0\n    for d in donnees:\n        note = d[0]\n        coefficient = d[1]\n        somme_notes += note*coefficient\n        somme_coefficients += coefficient\n    return somme_notes/somme_coefficients\n</code></pre> <p>Commentaires</p> <p>Bien comprendre la fa\u00e7on dont les donn\u00e9es sont organis\u00e9es, c'est une liste dont chaque \u00e9l\u00e9ment est un tuple <code>(couple,coefficient)</code>. Ainsi dans l'exemple de l'\u00e9nonc\u00e9 : <code>donnees=[(15,2),(9,1),(12,3)]</code>  la premi\u00e8re donn\u00e9e not\u00e9e<code>d</code> est le couple <code>(15,2)</code> et donc la premi\u00e8re note est <code>d[0]</code> et le premier coefficient <code>d[1]</code>.</p>"},{"location":"Annales/Corriges/2023-S17/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def pascal(n):\ntriangle= [[1]] #(1)\nfor k in range(1,n+1):\nligne_k = [1] #(2)\nfor i in range(1,k):\nligne_k.append(triangle[k-1][i-1]+triangle[k-1][i] ) #(3)\nligne_k.append(1) #(2)\n        triangle.append(ligne_k)\n    return triangle\n\nprint(pascal(5))\n</code></pre> <ol> <li>La variable <code>triangle</code> est la liste des lignes du triangle de Pascal et la toute premi\u00e8re ligne du triangle de Pascal contient un unique 1</li> <li>Toutes les lignes (sauf la premi\u00e8re) commencent et se terminent par un 1. </li> <li>On construit la ligne en utilisant la relation donn\u00e9e dans l'\u00e9nonc\u00e9.</li> <li>Toutes les lignes (sauf la premi\u00e8re) commencent et se terminent par un 1. </li> </ol> <p>Commentaire<p>Le sujet avantage probablement les \u00e9l\u00e8ves faisant la sp\u00e9cialit\u00e9 math\u00e9matiques en terminale puisqu'ils auront d\u00e9j\u00e0 rencontr\u00e9 le triangle de Pascal ainsi que la relation de Pascal :</p> \\[\\binom{k}{i} = \\binom{k-1}{i-1} + \\binom{k-1}{i}\\] <p>qui sert de base \u00e0 la construction de la \\(k\\)-i\u00e8me ligne du triangle de Pascal \u00e0 partir de la ligne pr\u00e9c\u00e9dente. On peut d'ailleurs signaler que la g\u00e9n\u00e9ration des coefficients binomiaux est un des algorithmes pr\u00e9vus au programme de terminale en sp\u00e9cialit\u00e9 math\u00e9matiques.</p> </p>"},{"location":"Annales/Corriges/2023-S18/","title":"Corrig\u00e9 sujet 18 - Ann\u00e9e : 2023","text":"<p>Sujet 18 - 2022 </p>"},{"location":"Annales/Corriges/2023-S18/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def max_et_indice(tab):\n    maxi = tab[0]\n    indice = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; maxi:\n            maxi = tab[i]\n            indice = i\n    return maxi, indice\n</code></pre>"},{"location":"Annales/Corriges/2023-S18/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\nfor i in range(1,len(tab)):\nif i not in tab:  #(1)\nreturn False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\nassert est_un_ordre(ordre) # ordre n'est pas un ordre de g\u00e8nes\nn = len(ordre)\n    nb = 0\nif ordre[0] != 1: # le premier n'est pas 1\nnb = nb + 1\n    i = 0\nwhile i &lt; n-1:\nif ordre[i]-ordre[i+1] not in [-1, 1]: # l'\u00e9cart n'est pas 1 #(2)\nnb = nb + 1\n        i = i + 1\nif ordre[n-1] != n: # le dernier n'est pas n #(3)\nnb = nb + 1\n    return nb\n</code></pre> <ol> <li>On v\u00e9rifie que tous les entiers \\(1, 2, 3,...,n\\) sont bien dans le tableau</li> <li>On pourrait utiliser la valeur absolue : <code>abs(ordre[i]-ordre[i+1]) == 1</code></li> <li>On rappelle que si la longueur d'un tableau est \u00a0<code>n</code>, alors l'indice de son dernier \u00e9l\u00e9ment est <code>n-1</code></li> </ol>"},{"location":"Annales/Corriges/2023-S19/","title":"Corrig\u00e9 sujet 19 - Ann\u00e9e : 2023","text":"<p>Sujet 19 - 2022 </p>"},{"location":"Annales/Corriges/2023-S19/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab,elt):\n    ind_debut = 0\n    ind_fin = len(tab)-1\n    while ind_fin &gt; ind_debut:\n        ind_milieu = (ind_fin+ind_debut)//2\n        if tab[ind_milieu]==elt:\n            return ind_milieu\n        elif tab[ind_milieu]&gt;elt:\n            ind_fin=ind_milieu-1\n        else:\n            ind_debut=ind_milieu+1\n    return -1\n</code></pre> <p>Commentaire</p> <ul> <li>Bien qu'au programme (m\u00e9thode diviser pour r\u00e9gner), cet exercice est bien plus difficile que ceux propos\u00e9s habituellement en exercice 1 (recherche simple, recherche de maximum, calcul de moyennes, ... ).</li> <li>En cas de difficult\u00e9s, revenir au chapitre de premi\u00e8re sur la recherche par dichotomie</li> </ul>"},{"location":"Annales/Corriges/2023-S19/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\nfor c in message : #(1)\nif 'A' &lt;= c and c &lt;='Z': #(2)\nindice = (position_alphabet(c) + decalage)%26 #(3)\nresultat = resultat + ALPHABET[indice]\nelse:\nresultat = resultat + c #(4)\n    return resultat\n</code></pre> <ol> <li>La variable de parcours du message s'appelle <code>c</code> comme indiqu\u00e9 \u00e0 la ligne suivante !</li> <li>On rappelle que Python permet de comparer des chaines de caract\u00e8res (ordre alphab\u00e9tique), ici on s'assure que le caract\u00e8re <code>c</code> est une lettre majuscule.</li> <li>On ajoute le decalage \u00e0 la position de la lettre le <code>%26</code> sert ensuite \u00e0 s'assurer qu'on retombe entre 0 et 25.</li> <li>Si la lettre n'est pas dans l'alphabet, on la laisse telle quelle</li> </ol>"},{"location":"Annales/Corriges/2023-S20/","title":"Corrig\u00e9 sujet 20 - Ann\u00e9e : 2023","text":"<p>Sujet 20 - 2022 </p>"},{"location":"Annales/Corriges/2023-S20/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def ajoute_dictionnaires(d1,d2):\n    d = {}\n    for cle in d1:\n        if cle in d2:\n            d[cle] = d1[cle] + d2[cle]\n        else:\n            d[cle] = d1[cle]\n    for cle in d2:\n        if cle not in d1:\n            d[cle] = d2[cle]\n    return d\n</code></pre> <p>Remarques</p> <ul> <li>La premi\u00e8re boucle ajoute les valeurs associ\u00e9es aux cl\u00e9s de <code>d1</code>, si la cl\u00e9 est aussi pr\u00e9sente dans <code>d2</code> alors la valeur associ\u00e9e est la somme des deux valeurs.</li> <li>La seconde boucle ajoute les valeurs associ\u00e9es aux cl\u00e9s de <code>d2</code> qui ne sont pas des cl\u00e9s de <code>d1</code>.</li> </ul>"},{"location":"Annales/Corriges/2023-S20/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\nn = 0 #(1)\ncases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\nwhile len(cases_vues) &lt; 12: #(2)\nx = randint(1, 6)\ncase_en_cours = (case_en_cours + x) % nbre_cases #(3)\nif case_en_cours not in cases_vues: #(4)\ncases_vues.append(case_en_cours)\nn = n + 1\nreturn n\n</code></pre> <ol> <li><code>n</code> est la variable qui compte le nombre de coups jou\u00e9s, elle est donc initialis\u00e9e \u00e0 0 et incr\u00e9ment\u00e9 \u00e0 chaque coup jou\u00e9 (ligne 13)</li> <li>Le jeu se termine lorsque tous les num\u00e9ros des cases sont dans <code>cases_vues</code>, la longueur de cette liste est donc 12.</li> <li>On ajoute le r\u00e9sultat des d\u00e9s et on prend le reste dans la division euclidienne par le nombre de cases.</li> <li>Si la case actuelle n'est pas encore dans les cases vues on l'ajoute</li> </ol>"},{"location":"Annales/Corriges/2023-S21/","title":"Corrig\u00e9 sujet 21 - Ann\u00e9e : 2023","text":"<p>Sujet 21 - 2022 </p>"},{"location":"Annales/Corriges/2023-S21/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def delta(liste):\n    codage=[liste[0]]\n    for i in range(1,len(liste)):\n        codage.append(liste[i]-liste[i-1])\n    return codage\n</code></pre> <p>Commentaires</p> <ul> <li>On construit le codage en partant du premier \u00e9l\u00e9ment de la liste. Les autres \u00e9l\u00e9ments sont les diff\u00e9rences entre deux \u00e9l\u00e9ments cons\u00e9cutifs de la liste de d\u00e9part.</li> <li>L'\u00e9criture de cette fonction peut aussi se faire (de fa\u00e7on plus concise) en utilisant les listes par compr\u00e9hension : \ud83d\udc0d Script Python<pre><code>    def delta(liste):\n        return [liste[i]-liste[i-1] if i&gt;0 else liste[i] for i in range(len(liste))]\n</code></pre></li> </ul>"},{"location":"Annales/Corriges/2023-S21/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\ns = \"\" #(1)\nif e.gauche is not None: #(2)\ns = '(' + s + expression_infixe(e.gauche)\ns = s + str(e.valeur)\nif e.droit is not None: #(3)\ns = s + expression_infixe(e.droit) + \")\"\nreturn s\n</code></pre> <ol> <li>La variable <code>s</code> va contenir l'expression arithm\u00e9tique</li> <li>Si le noeud contient un fils gauche, on construit l'expression associ\u00e9e et on ajoute la valeur du noeud \u00e0 la suite.</li> <li>On construit la partie droite de l'expression (si elle existe)</li> <li>Si on atteint cette ligne, l'expression a \u00e9t\u00e9 construite en totalit\u00e9, il reste \u00e0 la renvoyer. Il ne devrait pas y avoir de <code>if</code> ! </li> </ol> <p>Attention<p>Sujet  difficile avec diverses notions du programme (arbre, r\u00e9cursivit\u00e9) et qui pr\u00e9sente de plus un aspect math\u00e9matique. </p> </p>"},{"location":"Annales/Corriges/2023-S22/","title":"Corrig\u00e9 sujet 22 - Ann\u00e9e : 2023","text":"<p>Sujet 22 - 2022 </p>"},{"location":"Annales/Corriges/2023-S22/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def liste_puissances(a,n):\n  puissances = [a]\n  for i in range(2,n+1):\n    an = puissances[-1]*a\n    puissances.append(an)\n  return puissances\n\ndef liste_puissances_borne(a,borne):\n  if a &gt; borne : \n    return []\n  else:\n    puissances = [a]\n    while puissances[-1]*a &lt;= borne:\n      an = puissances[-1]*a\n      puissances.append(an)\n    return puissances\n</code></pre> <p>Commentaires</p> <ul> <li>Pour la premi\u00e8re fonction comme on suppose <code>n &gt; 0</code>, la liste contient au moins <code>a</code>, puis \u00e0 chaque it\u00e9ration on multiplie le dernier \u00e9l\u00e9ment du tableau (obtenu avec la notation <code>[-1]</code>) par <code>a</code> et on l'ajoute en fin de tableau</li> <li>Pour la seconde fonction on traite le cas de la liste vide puis on ajoute de la m\u00eame fa\u00e7on que pour la premi\u00e8re question sans d\u00e9passer la borne.</li> </ul>"},{"location":"Annales/Corriges/2023-S22/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\ncode_additionne = 0 #(1)\nfor c in mot:\ncode_concatene = code_concatene + str(dico[c]) #(2)\ncode_additionne = code_additionne + dico[c] #(3)\ncode_concatene = int(code_concatene)\nif  code_concatene%code_additionne == 0 : #(4)\nmot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <ol> <li>Bien comprendre que le <code>code_additione</code> est un entier (addition des entiers), tandis que <code>code_concatene</code> est une cha\u00eene de caract\u00e8res (concat\u00e9nation).</li> <li>Les valeurs du dictionnaires sont des entiers pour concat\u00e9ner avec la chaine <code>code_c</code> il faut convertir en <code>str</code></li> <li>On addition des entiers, pas de conversion n\u00e9cessaire</li> <li>Teste si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</li> </ol> <p>Attention</p> <ul> <li>Les lignes 14,15,16, et 17 se r\u00e9sument \u00e0 <code>mot_est_parfait = (code_concatene%code_additionne==0)</code></li> <li>M\u00eame si cela est autoris\u00e9 en Python, le changement de type d'une variable tel que celui effectu\u00e9 ligne 13 (o\u00f9 <code>int_c</code> qui \u00e9tait une cha\u00eene de caract\u00e8res devient un entier) est largement consid\u00e9r\u00e9 comme une mauvaise pratique de programmation.</li> <li>On aurait pu se passer du dictionnaire en utilisant les fonctions <code>ord</code> et <code>chr</code>.</li> </ul>"},{"location":"Annales/Corriges/2023-S23/","title":"Corrig\u00e9 sujet 23 - Ann\u00e9e : 2023","text":"<p>Sujet 23 - 2022 </p>"},{"location":"Annales/Corriges/2023-S23/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux,num_enclos):\n    resultat = []\n    for animal in table_animaux:\n        if animal['enclos']==num_enclos:\n            resultat.append(animal)\n    return resultat\n</code></pre> <p>Commentaires</p> <p>Revoir  le chapitre traitement de donn\u00e9es en tablesdu programme de premi\u00e8re en cas de difficult\u00e9s (et aussi l'utilisation des dictionnaires)</p>"},{"location":"Annales/Corriges/2023-S23/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 \n    tab v\u00e9rifie les conditions de l'exercice,\n        g et d sont des multiples de 3.\n    '''\n    if g == d:\nreturn tab[g] #(1)\nelse:\nnombre_de_triplets = (d - g)// 3\nindice = g + 3 * (nombre_de_triplets // 2)\nif tab[indice]==tab[indice+1] : #(2)\nreturn trouver_intrus(tab,indice+3,d) #(3)\nelse:\nreturn trouver_intrus(tab,g,indice)\n</code></pre> <ol> <li>La zone de recherche se limite \u00e0 un \u00e9l\u00e9ment : l'intrus. On peut mettre indiff\u00e9remment <code>tab[g]</code> ou <code>tab[d]</code>, ils sont \u00e9gaux puisque <code>g=d</code> ici.</li> <li>On suit l'algorithme propos\u00e9 dans l'\u00e9nonc\u00e9 et on compare l'\u00e9l\u00e9ment du milieu \u00e0 son voisin de droite</li> <li>Attention \u00e0 la l\u00e9g\u00e8re diff\u00e9rence de traitement dans un cas ou passe \u00e0 <code>indice+3</code> car les \u00e9l\u00e9ments sont situ\u00e9s strictement avant l'intrus</li> </ol> <p>Attention</p> <p>Sujet sans doute difficile et qui pr\u00e9sente un algorithme nouveau (bien que semblable \u00e0 une recherche par dichotomie)</p>"},{"location":"Annales/Corriges/2023-S24/","title":"Corrig\u00e9 sujet 24 - Ann\u00e9e : 2023","text":"<p>Sujet 24 - 2022 </p>"},{"location":"Annales/Corriges/2023-S24/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def nbr_occurrences(chaine):\n    occ = {}\n    for caractere in chaine:\n        if caractere in occ:\n            occ[caractere] += 1\n        else:\n            occ[caractere]=1\n    return occ\n</code></pre> <p>Commentaire</p> <p>Bon exercice pour revoir l'utilisation des dictionnaires.</p>"},{"location":"Annales/Corriges/2023-S24/#exercice-2","title":"Exercice 2","text":"<p>Bug</p> <ul> <li>Le code pr\u00e9sent sur le \u00a0\u00a0<code>pdf</code> est bugg\u00e9 : on trouve <code>lst2</code> comme param\u00e8tre mais <code>L2</code> dans le corps de la fonction.</li> </ul> \ud83d\udc0d Script Python<pre><code>def fusion(lst1,lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\nwhile i1 &lt; n1 and i2&lt;n2 : #(1)\nif lst1[i1] &lt; lst2[i2]:\nlst12[i] = lst1[i1] #(2)\ni1 = i1 + 1\nelse:\n            lst12[i] = lst2[i2]\ni2 = i2 + 1 \ni += 1\n    while i1 &lt; n1:\nlst12[i] = lst1[i1] #(3)\ni1 = i1 + 1\ni = i + 1\nwhile i2 &lt; n2:\nlst12[i] = lst2[i2]\ni2 = i2 + 1\ni = i + 1\nreturn lst12\n</code></pre> <ol> <li><code>i1</code> est l'indice de parcours de <code>L1</code> (de longueur <code>n1</code>) <code>i2</code> est l'indice de parcours de <code>L2</code> (de longueur <code>n2</code>)</li> <li>On se trouve dans le cas o\u00f9 le plus petit \u00e9l\u00e9ment se trouve dans <code>L1</code>, c'est donc lui qui est ajout\u00e9 \u00e0 liste fusionn\u00e9e <code>L12</code>.</li> <li>On a atteint la fin de l'une des listes, il reste donc \u00e0 ajouter les \u00e9l\u00e9ments restants de l'autre liste. </li> </ol> <p>Attention</p> <ul> <li>Le sujet est difficile, il faut d'abord comprendre l'algorithme utilis\u00e9 (qui n'est pas expliqu\u00e9)</li> <li>Le m\u00eame exercice figure en exercice 1 du sujet 7</li> </ul>"},{"location":"Annales/Corriges/2023-S25/","title":"Corrig\u00e9 sujet 25 - Ann\u00e9e : 2023","text":"<p>Sujet 25 - 2022 </p>"},{"location":"Annales/Corriges/2023-S25/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def enumere(L):\n    d = {}\n    for i  in range(len(L)):\n        if L[i] in d:\n            d[L[i]].append(i)\n        else:\n            d[L[i]] = [i]\n    return d\n</code></pre> <p>Commentaire</p> <p>On parcourt la liste par indice, si on a d\u00e9j\u00e0 rencontr\u00e9  l'\u00e9l\u00e9ment alors on met \u00e0 jour sa liste d'indice sinon on cr\u00e9e une cl\u00e9 dans le dictionnaire dont la valeur est la liste contenant l'indice.</p>"},{"location":"Annales/Corriges/2023-S25/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n\ndef insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\nif cle &lt; arbre.v: #(1)\nif arbre.fg != None: #(2)\ninsere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\nif arbre.fd != None: #(3)\ninsere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> <ol> <li>On teste si <code>cle</code> est inf\u00e9rieure \u00e0 l'\u00e9tiquete du noeud, dans ce cas il faut ins\u00e9rer \u00e0 gauche</li> <li>Si le fils gauche est <code>None</code> on ins\u00e8re \u00e0 cet endroit, sinon on ins\u00e8re dans l'arbre gauche</li> <li>Traitement identique pour le c\u00f4t\u00e9 droit</li> </ol> <p>Attention</p> <ul> <li>La fonction <code>insere</code> devrait \u00eatre une m\u00e9thode de la classe <code>ABR</code></li> <li>Le sujet ne pr\u00e9cise pas le comportement \u00e0 adopter si on ins\u00e8re une cl\u00e9 existante</li> </ul>"},{"location":"Annales/Corriges/2023-S26/","title":"Corrig\u00e9 sujet 26 - Ann\u00e9e : 2023","text":"<p>Sujet 26 - 2022 </p>"},{"location":"Annales/Corriges/2023-S26/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1,n2):\n    produit=0\n    for i in range(abs(n1)):\n        produit += abs(n2)\n    if (n1&gt;0 and n2&lt;0) or (n1&lt;0 and n2&gt;0): \n        return -produit\n    else:\n        return produit\n</code></pre> <p>Commentaires</p> <ol> <li>On peut rappeler la r\u00e8gle des signes pour un produit :<ul> <li>un produit est n\u00e9gatif si les deux facteurs ne sont pas de m\u00eame signe (ligne 5)</li> <li>et positif sinon.</li> </ul> </li> <li>Si <code>a</code> et <code>b</code> sont deux entiers positifs :     \\(a \\times b = \\underbrace{b + b + \\dots + b}_{a \\quad \\mathrm{termes}}\\)</li> <li>L'\u00e9nonc\u00e9 pourrait aiguiller vers l'utilisation de <code>abs</code> (valeur absolue) pour traiter les probl\u00e8mes de signe.</li> </ol>"},{"location":"Annales/Corriges/2023-S26/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n\n    debut = 0 \n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut+fin)//2 #(1)\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m-1 #(2)         \nreturn False\n</code></pre> <ol> <li>Calcul de l'indice se trouvant \"au milieu\" entre <code>debut</code> et <code>fin</code>.</li> <li>Ici <code>x &lt; tab[m]</code> (la cas d'\u00e9galit\u00e9 est trait\u00e9 avant), donc l'indice de <code>fin</code> de recherche est avant <code>m</code>.</li> </ol>"},{"location":"Annales/Corriges/2023-S27/","title":"Corrig\u00e9 sujet 27 - Ann\u00e9e : 2023","text":"<p>Sujet 27 - 2022 </p>"},{"location":"Annales/Corriges/2023-S27/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche_min(tab):\n    indice_mini,mini = 0, tab[0]\n    for indice in range(1,len(tab)):\n        if tab[indice]&lt;mini:\n            indice_mini,mini = indice,tab[indice]\n    return indice_mini\n</code></pre> <p>Commentaires</p> <p>Un parcours par indice est n\u00e9cessaire puisqu'on a besoin de la position du minimum.</p>"},{"location":"Annales/Corriges/2023-S27/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\ndroite = len(tab)-1 #(1)\nwhile gauche &lt; droite :\n        if tab[gauche] == 0 :\ngauche = gauche + 1 #(2)\nelse :\ntab[gauche], tab[droite] = tab[droite], tab[gauche] #(3)\ndroite = droite - 1\nreturn tab\n</code></pre> <ol> <li><code>gauche</code> et <code>droite</code> sont les indices d\u00e9limitant la partie non encore tri\u00e9e du tableau, au d\u00e9but c'est donc le tableau entier : <code>gauche=0</code> le premier indice. Et on rappelle que l'indice du dernier \u00e9l\u00e9ment d'une liste <code>tab</code> est <code>len(tab)-1</code>.</li> <li>Si on rencontre un 0, la zone non tri\u00e9e diminue \"par la gauche\", donc on incr\u00e9mente <code>i</code></li> <li>Dans le cas contraire, la zone non tri\u00e9e diminue \"par la droite\". On a rencontr\u00e9 un 1, on le positionne donc \u00e0 l'extr\u00e9mit\u00e9 droite de la zone non tri\u00e9e en l'\u00e9changeant avec la valeur situ\u00e9 \u00e0 cet endroit.</li> </ol>"},{"location":"Annales/Corriges/2023-S28/","title":"Corrig\u00e9 sujet 28 - Ann\u00e9e : 2023","text":"<p>Sujet 28 - 2022 </p>"},{"location":"Annales/Corriges/2023-S28/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for valeur in tab:\n        somme = somme + valeur\n    return somme/len(tab)\n</code></pre> <p>Commentaires</p> <p>Exercice classique de parcours d'une liste, un parcours par \u00e9l\u00e9ment suffit les indices n'\u00e9tant pas utilis\u00e9s.</p>"},{"location":"Annales/Corriges/2023-S28/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau trie dans l'ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\nif tab==[]: #(1)\nreturn False,1\n\n    # cas ou x n'est pas compris entre les valeurs extremes\nif (x &lt; tab[0]) or (x&gt;tab[len(tab)-1]):\nreturn False,2 #(2)\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut+fin)//2 #(3)\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m-1 \nreturn False,3 #(4)\n</code></pre> <ol> <li>Comme indiqu\u00e9 au dessus en commentaire : c'est le cas du tableau vide !</li> <li>Valeur cherch\u00e9e en dehors des valeurs extr\u00eames, on rappelle que l'indice du dernier \u00e9l\u00e9ment d'un tableau <code>tab</code> est <code>len(tab)-1</code>.</li> <li>Calcul de l'indice situ\u00e9 au milieu entre les deux indices de recherche.</li> <li>L'\u00e9nonc\u00e9 demande de renvoyer <code>False,3</code> dans ce cas.</li> </ol> <p>Attention</p> <ol> <li>On utilise de fa\u00e7on pr\u00e9f\u00e9rentielle des fonctions ayant toujours le m\u00eame type de sortie, ici on a parfois  un couple (bool\u00e9en, entier) (comme <code>False,2</code>)  parfois un bool\u00e9en seul.</li> </ol>"},{"location":"Annales/Corriges/2023-S29/","title":"Corrig\u00e9 sujet 29 - Ann\u00e9e : 2023","text":"<p>Sujet 29 - 2022 </p>"},{"location":"Annales/Corriges/2023-S29/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef taille(arbre):\n    if arbre == None:\n        return 0\n    else:\n        return 1 + taille(arbre.fg) + taille(arbre.fd)\n\ndef hauteur(arbre):\n    if arbre == None:\n        return 0\n    else:\n        return 1 + max(hauteur(arbre.fg), hauteur(arbre.fd))\n</code></pre> <p>Remarques</p> <p>Les fonctions <code>taille</code> et <code>hauteur</code> devraient \u00eatre des m\u00e9thodes de la classe <code>Arbre</code></p>"},{"location":"Annales/Corriges/2023-S29/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\nif indice &lt; len(liste): #(1)\nfor i in range(indice):\nL[i] = liste[i] #(2)\nL[indice] = element\nfor i in range(indice + 1, nbre_elts + 1):\nL[i] = liste[i-1] #(3)\nelse:\n        for i in range(nbre_elts): #(4)\nL[i] = liste[i]\nL[nbre_elts] = element\nreturn L\n</code></pre> <ol> <li>On teste si on doit ins\u00e9rer l'\u00e9l\u00e9ment tout en fin de liste ou entre le d\u00e9but et la fin</li> <li>On recopie le d\u00e9but de la liste (jusqu'\u00e0 la position d'insertion)</li> <li>On recopie le reste de la liste apr\u00e8s la position d'insertion, les \u00e9l\u00e9ment sont alors d\u00e9cal\u00e9s d'une position puisqu'on a ins\u00e9r\u00e9 un \u00e9l\u00e9ment avant</li> <li>Ici on traite le cas o\u00f9 on ins\u00e8re tout \u00e0 la fin, donc on recopie toute la liste.</li> </ol>"},{"location":"Annales/Corriges/2023-S30/","title":"Corrig\u00e9 sujet 30 - Ann\u00e9e : 2023","text":"<p>Sujet 30 - 2022 </p>"},{"location":"Annales/Corriges/2023-S30/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for valeur in tab:\n        somme = somme + valeur\n    return somme/len(tab)\n</code></pre> <p>Commentaires</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable. Un parcours par \u00e9l\u00e9ment suffit.</p>"},{"location":"Annales/Corriges/2023-S30/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2) #(1)\na = a//2\nwhile a != 0 : #(2)\nbin_a = str(a%2) + bin_a #(3)\na = a // 2\nreturn bin_a\n</code></pre> <ol> <li>C'est algorithme des divisions successives, on initialise avec le premier chiffre (donc le reste dans division euclidenne de <code>a</code> par 2)</li> <li>L'algorithme s'arr\u00eate lorsque <code>a</code> vaut 0</li> <li>L'algorithme donne l'ordre inverse (du dernier ou premier), on ajoute donc les chiffres successivement obtenu devant l'\u00e9criture binaire.</li> </ol>"},{"location":"Annales/Corriges/2023-S31/","title":"Corrig\u00e9 sujet 31 - Ann\u00e9e : 2023","text":"<p>Sujet 31 - 2022 </p>"},{"location":"Annales/Corriges/2023-S31/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt,tab):\n    nb_rep = 0\n    for x in tab:\n        if x==elt:\n            nb_rep += 1\n    return nb_rep\n</code></pre> <p>Commentaire</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable en comptant les occurrences d'apparition d'une valeur. Un parcours par \u00e9l\u00e9ment suffit, les indices des occurrences n'\u00e9tant pas utilis\u00e9es.</p>"},{"location":"Annales/Corriges/2023-S31/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2) #(1)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a #(2)\na = a//2 #(3)\nreturn bin_a\n</code></pre> <ol> <li>On rappelle que <code>a%2</code> est le reste dans la division euclidienne de <code>a</code> par <code>2</code> et donc le premier chiffre (\u00e0 droite) de son \u00e9criture binaire.</li> <li>Ajout du nouveau chiffre (en le convertissant en cha\u00eene de caract\u00e8res)</li> <li>On rappelle que <code>a//2</code> est le quotient dans la division euclidienne de a par 2.</li> </ol>"},{"location":"Annales/Corriges/2023-S32/","title":"Corrig\u00e9 sujet 32 - Ann\u00e9e : 2023","text":"<p>Sujet 32 - 2022 </p>"},{"location":"Annales/Corriges/2023-S32/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def min_et_max(tab):\n    mini,maxi = tab[0],tab[0]\n    for elt in tab:\n        if elt&lt;mini: mini=elt\n        if elt&gt;maxi: maxi=elt\n    return {'min' : mini, 'max' : maxi}\n</code></pre> <p>Commentaires</p> <p>Encore une recherche classique de minimum et de maximum, le r\u00e9sultat est renvoy\u00e9 sous la forme d'un dictionnaire.</p>"},{"location":"Annales/Corriges/2023-S32/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\nself.contenu = [Carte(couleur,valeur) for couleur in range(1,5) for valeur in range(1,14) ] #(1)\ndef get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\nassert 0 &lt;= pos &lt;= 51, \"Param\u00e8tre pos non valide\" #(2)\nreturn self.contenu[pos] #(3)\n</code></pre> <ol> <li>On utilise une d\u00e9finition de liste par compr\u00e9hension pour parcourir les couleurs et valeurs possibles. Attention les num\u00e9ros de couleurs vont de 1 \u00e0 4 (inclus) (donc <code>range(1,5)</code>) et les valeurs de 1 \u00e0 13 inclus (donc <code>range(1,14)</code>)</li> <li>C'est l'instruction <code>assert</code> demand\u00e9e : on v\u00e9rifie que le param\u00e8tre <code>pos</code> est correct.</li> <li>Un jeu de cartes contient 52 cartes, la position d'une carte est entre 0 et 51 inclus. </li> </ol> <p>Remarque</p> <ul> <li>Il serait pertinent d'utiliser un dictionnaire afin d'associer valeur et nom de d'une carte : <code>{1 : 'As', 2:'2', ...., 12: 'Dame',13 : 'Roi'}</code></li> </ul>"},{"location":"Annales/Corriges/2023-S33/","title":"Corrig\u00e9 sujet 33 - Ann\u00e9e : 2023","text":"<p>Sujet 33 - 2022 </p>"},{"location":"Annales/Corriges/2023-S33/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def taille(arbre,lettre):\n    if lettre == '':\n        return 0\n    return 1+taille(arbre,arbre[lettre][0])+taille(arbre,arbre[lettre][1])\n</code></pre> <p>Attention</p> <p>Ce sujet est sans doute difficile car il utilise une repr\u00e9sentation des arbres binaires inhabituelle, en plus de m\u00e9langer diverses notions du programme (r\u00e9cursivit\u00e9, arbre, dictionnaire, listes)</p>"},{"location":"Annales/Corriges/2023-S33/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\nN = len(tab)\nfor k in range(N): #(1)\nimin = k\nfor i in range(k , N): #(2)\nif tab[i] &lt; tab[imin] :\nimin = i\ntab[k] , tab[imin] = tab[imin] , tab[k] #(3)\n</code></pre> <ol> <li><code>k</code> est l'indice auquel on va placer le minimum</li> <li>Cette portion du programme est une recherche classique de minimum, ici on recherche le minimum depuis la position <code>k</code> jusqu'\u00e0 la fin de la liste.</li> <li>Ici on \u00e9change le minimum trouv\u00e9 avec l'\u00e9l\u00e9ment d'indice <code>k</code></li> </ol>"},{"location":"Annales/Corriges/2023-S34/","title":"Corrig\u00e9 sujet 34 - Ann\u00e9e : 2023","text":"<p>Sujet 34 - 2022 </p>"},{"location":"Annales/Corriges/2023-S34/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    assert tab!=[], \"erreur\"\n    somme = 0\n    for valeur in tab:\n        somme = somme + valeur\n    return somme/len(tab)\n</code></pre> <p>Commentaire</p> <p>On utilise un <code>assert</code> pour le g\u00e9n\u00e9rer une erreur si le tableau est vide.</p>"},{"location":"Annales/Corriges/2023-S34/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice. \n    #Au debut, la zone non triee est le tableau entier.\ni= 0\nj= len(tab)-1 #(1)\nwhile i != j :\n        if tab[i]== 0:\ni = i + 1 #(2) \nelse :\n            valeur = tab[j]\ntab[j] = tab[i] #(3)\ntab[i] = valeur\nj= j-1 #(4)\nreturn tab\n</code></pre> <ol> <li>Le dernier \u00e9l\u00e9ment d'un tableau <code>tab</code> a pour indice <code>len(tab)-1</code></li> <li>Si l'\u00e9l\u00e9ment est un 0, on incr\u00e9mente le debut de la zone non tri\u00e9e d'indice <code>i</code>. La zone non tri\u00e9e diminue \"par la gauche\".</li> <li>Sinon, on \u00e9change cette valeur avec la fin de zone non tri\u00e9e (situ\u00e9e en indice <code>j</code>).</li> <li>La zone non tri\u00e9e diminue \"par la droite\", on d\u00e9cr\u00e9mente donc sa fin d'indice <code>j</code></li> </ol> <p>Attention</p> <p>Les lignes 10 \u00e0 12 qui permettent d'\u00e9changer <code>tab[j]</code> et <code>tab[i]</code> en utilisant la variable temporaire <code>valeur</code> peuvent \u00eatre simplifi\u00e9es en remarquant que <code>tab[i]</code> vaut forc\u00e9ment 1 dans cette branche du <code>if</code>.</p>"},{"location":"Annales/Corriges/2023-S35/","title":"Corrig\u00e9 sujet 35 - Ann\u00e9e : 2023","text":"<p>Sujet 35 - 2022 </p>"},{"location":"Annales/Corriges/2023-S35/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def xor(a,b):\n    resultat = []\n    for i in range(len(a)):\n        if a[i]==b[i]:\n            resultat.append(0)\n        else:\n            resultat.append(1)\n    return resultat\n</code></pre> <p>Commentaire</p> <p>On peut aussi utiliser une d\u00e9finition de listes par compr\u00e9hension.</p>"},{"location":"Annales/Corriges/2023-S35/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n        #test de la somme de chaque ligne\nfor i in range(1,self.ordre): #(1)\nif self.somme_ligne(i) != s: #(2)\nreturn False\n#test de la somme de chaque colonne\nfor j in range(1,self.ordre): #(3)\nif self.somme_col(j) != s:\nreturn False\nreturn True\n</code></pre> <ol> <li>Par la peine de tester la ligne d'indice 0, elle a servi \u00e0 calculer la somme de r\u00e9f\u00e9rence <code>s</code> (ligne 21), on commence donc \u00e0 1.</li> <li>On renvoie <code>False</code> d\u00e8s que la somme de la ligne n'est pas \u00e9gale \u00e0 la somme de la premi\u00e8re ligne</li> <li>Traitement identique pour les colonnes</li> </ol>"},{"location":"Annales/Corriges/2023-S36/","title":"Corrig\u00e9 sujet 36 - Ann\u00e9e : 2023","text":"<p>Sujet 36 - 2022 </p>"},{"location":"Annales/Corriges/2023-S36/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def couples_consecutifs(tab):\n    consecutifs = []\n    for i in range(len(tab)-1):\n        if tab[i+1]==tab[i]+1:\n            consecutifs.append((tab[i],tab[i+1]))\n    return consecutifs\n</code></pre> <p>Commentaires</p> <ul> <li>La condition <code>tab[i+1]==tab[i]+1</code> permet de tester que deux \u00e9l\u00e9ments cons\u00e9cutifs de la liste sont deux entiers qui se suivent.</li> <li>On peut utiliser les d\u00e9finitions de liste par compr\u00e9hension : \ud83d\udc0d Script Python<pre><code>    def recherche(tab):\n        return [(tab[i],tab[i+1])  for i in range(len(tab)-1) if tab[i+1]==tab[i]+1]\n</code></pre></li> </ul>"},{"location":"Annales/Corriges/2023-S36/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\nif M[i][j] == 1: #(1)\nM[i][j] = val\n        # l'element en haut fait partie de la composante\nif i-1 &gt;= 0 and M[i-1][j] == 1: #(2)\npropager(M, i-1, j, val)\n        # l'element en bas fait partie de la composante\nif i+1 &lt; len(M) and M[i+1][j] == 1: #(3)\npropager(M, i+1, j, val)\n# l'element \u00e0 gauche fait partie de la composante\nif j-1 &gt;=0 and M[i][j-1] == 1:\npropager(M, i, j-1, val)\n# l'element \u00e0 droite fait partie de la composante\nif j+1 &lt; len(M[i]) and M[i][j+1]:\npropager(M, i, j+1, val)\n</code></pre> <ol> <li>La propagation n'a lieu que si le pixel vaut 1 (sinon elle s'arr\u00eate)</li> <li>On relance la propagation \u00e0 partir de la case voisine si celle-ci est  est dans la grille (premi\u00e8re partie de la condition) et aussi dans la m\u00eame composante (seconde partie de la condition)</li> </ol>"},{"location":"Annales/Corriges/2023-S37/","title":"Corrig\u00e9 sujet 37 - Ann\u00e9e : 2023","text":"<p>Sujet 37 - 2022 </p>"},{"location":"Annales/Corriges/2023-S37/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt,tab):\n    for i in range(len(tab)-1,-1,-1):\n        if elt==tab[i]:\n            return i\n    return -1\n</code></pre> <p>Commentaires</p> <p>Le sujet demande de rechercher la derni\u00e8re occurrence, la correction propos\u00e9e ici parcourt la liste \u00e0 l'envers et renvoie la premi\u00e8re occurrence rencontr\u00e9e. Il faut donc dans ce cas savoir \u00e0 \u00e9crire un parcours \u00e0 l'envers \u00e0 l'aide de <code>range</code>. On peut faire aussi parcourir dans le sens normal jusqu'\u00e0 la fin et mettre la jour l'indice \u00e0 chaque fois qu'on rencontre la valeur: \ud83d\udc0d Script Python<pre><code>    def recherche(elt,tab):\n        indice = -1\n        for i in range(len(tab)):\n            if tab[i] == elt:\n                indice = i\n        return indice\n</code></pre></p>"},{"location":"Annales/Corriges/2023-S37/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n\n    def __init__(self, adresse):\nself.adresse = adresse\ndef liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n           la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")] \n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n           r\u00e9serv\u00e9e, False sinon\"\"\"\nreturn self.liste_octet()[3]==0 or self.liste_octet()[3]==0 #(1)\ndef adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse \n           IP qui suit l\u2019adresse self\n           si elle existe et False sinon\"\"\"\nif self.liste_octet()[3] &lt; 254:\noctet_nouveau = self.liste_octet()[3] + 1\nreturn AdresseIP('192.168.0.' + str(octet_nouveau)) #(2)\nelse:\n            return False\n</code></pre> <ol> <li>Le dernier octet est le 4\u00e8me \u00e9l\u00e9ment (donc celui d'indice 3) de la liste renvoy\u00e9e par la m\u00e9thode <code>liste_octet</code>. L'adresse est r\u00e9serv\u00e9e lorsque ce dernier octect vaut 0 ou 255.</li> <li>Attention \u00e0 la conversion de type, pour concat\u00e9ner le d\u00e9but de l'adresse avec le dernier octet </li> </ol> <p>Attention</p> <p>La m\u00e9thode <code>split</code> des chaines de caract\u00e8res est utilis\u00e9e sans explications ni exemples dans la m\u00e9thode <code>liste_octet</code>. Bien comprendre que cette m\u00e9thode permet de convertir une adresse comme <code>\"192.168.0.0\"</code> (une chaine de caract\u00e8res) en <code>[192,168,0,0]</code> (liste d'entiers). </p>"},{"location":"Annales/Corriges/2023-S38/","title":"Corrig\u00e9 sujet 38 - Ann\u00e9e : 2023","text":"<p>Sujet 38 - 2022 </p>"},{"location":"Annales/Corriges/2023-S38/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def correspond(mot,mot_a_trous):\n    for indice in range(len(mot)):\n        if indice &gt;= len(mot_a_trous):\n            return False\n        if mot_a_trous[indice]!=\"*\" and mot[indice]!=mot_a_trous[indice]:\n            return False\n    return True\n</code></pre> <p>Commentaire</p> <ul> <li>On parcourt le mot et on v\u00e9rifie que le mot \u00e0 trous \u00e0 une longueur suffisante pour comparer les caract\u00e8res situ\u00e9s au m\u00eame emplacement.</li> <li>Si le caract\u00e8re du mot \u00e0 trous n'est pas <code>*</code>et qu'il est diff\u00e9rent du caract\u00e8re du mot, on renvoie <code>False</code>.</li> <li>Le sujet ne pr\u00e9cise pas si le caract\u00e8re \u00a0<code>*</code> peut correspondre \u00e0 un vide. Par exemple <code>correspond('STOP','ST***')</code> doit renvoyer <code>True</code> ou <code>False</code> ?</li> </ul>"},{"location":"Annales/Corriges/2023-S38/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un\n    plan d'envoi de messages (ici entre les personnes A, B, C, D,\n    E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et\n    False sinon.\n    '''\n    expediteur = 'A'\ndestinataire = plan[expediteur]\nnb_destinaires = 1\nwhile destinataire != expediteur: #(1)\ndestinataire = plan[destinataire] #(2)\nnb_destinaires += 1\nreturn nb_destinaires == len(plan) #(3)\n</code></pre> <ol> <li>On parcourt jusqu'\u00e0 retomber sur l'exp\u00e9diteur initial (<code>A</code>) </li> <li>Le nouveau destinataire est le destinataire de l'ancien destinataire)</li> <li>Si le nombre total de destinataire est \u00e9gal \u00e0 la longueur du dictionnaire alors c'est un cycle.</li> </ol>"},{"location":"Annales/Corriges/2023-S39/","title":"Corrig\u00e9 sujet 39 - Ann\u00e9e : 2023","text":"<p>Sujet 39 - 2022 </p>"},{"location":"Annales/Corriges/2023-S39/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    d = {1 : 1, 2 : 1}\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> <p>Commentaires</p> <ul> <li>On peut aussi utiliser une liste, mais les indices sont alors d\u00e9cal\u00e9s (le premier \u00e9l\u00e9ment d'une liste a pour indice 0 alors que  le premier \u00e9l\u00e9ment de la suite a pour indice 1. L'utilisation d'un dictionnaire simplifie le probl\u00e8me.</li> </ul>"},{"location":"Annales/Corriges/2023-S39/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\nmeilleurs_eleves = [] #(1)\nfor i in range(len(eleves)): #(2)\nif notes[i] == note_maxi:\nmeilleurs_eleves.append(eleves[i]) #(3)\nelif notes[i] &gt; note_maxi: \nnote_maxi = notes[i]\nmeilleurs_eleves = [eleves[i]] #(4)\nreturn (note_maxi, meilleurs_eleves)\n</code></pre> <ol> <li>Les notes sont positives, donc la maximum est initialis\u00e9 \u00e0 0 et la liste des \u00e9l\u00e8ves ayant cette note pour le moment a vide</li> <li>On parcourt la liste des \u00e9l\u00e8ves</li> <li>Si on en trouve un qui a la note maximum alors on l'ajoute \u00e0 la liste de ceux ayant cette note</li> <li>Si on en trouve un qui a une meilleur note que le maximum courant alors on met \u00e0 jour le maximum et la liste des \u00e9l\u00e8ves ayant eu cette note ne contient pour le moment qu'un \u00e9l\u00e8ve : celui qui a obtenu cette nouvelle note maximale.</li> </ol>"},{"location":"Annales/Corriges/2023-S4/","title":"Corrig\u00e9 sujet 4 - Ann\u00e9e : 2023","text":"<p>Sujet 4 - 2022 </p>"},{"location":"Annales/Corriges/2023-S4/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python \ud83d\udccb Texte<pre><code>```\n</code></pre>"},{"location":"Annales/Corriges/2023-S4/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python"},{"location":"Annales/Corriges/2023-S40/","title":"Corrig\u00e9 sujet 40 - Ann\u00e9e : 2023","text":"<p>Sujet 40 - 2022 </p>"},{"location":"Annales/Corriges/2023-S40/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nbr_espaces = 0\n    for caractere in phrase:\n        if caractere == \" \":\n            nbr_espaces += 1\n    if phrase[-1] == \"!\" or phrase[-1]==\"?\":\n        nbr_mots = nbr_espaces\n    else:\n        nbr_mots = nbr_espaces + 1\n    return nbr_mots\n</code></pre> <p>Commentaires</p> <p>Le nombre de mots est le nombre d'espace plus 1, sauf lorsque la phrase se termine par un point d'exclamation ou un point d'interrogation c'est alors le nombre d'espace.</p>"},{"location":"Annales/Corriges/2023-S40/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud. Param\u00e8tre d'entr\u00e9e : valeur (int)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si le sous-arbre droit est non  vide Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si le sous-arbre gauche est non vide Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche  Param\u00e8tre d'entr\u00e9e : cle (int)'''\nif cle &lt; self.getValeur() : #(1)\n# on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste(): #(2)\n                # on descend \u00e0 gauche et on recommence le test initial\nself.gauche.inserer(cle)\nelse:\n                # on cr\u00e9e un fils gauche \nself.gauche = Noeud(cle) #(3)\nelif cle &gt; self.getValeur() : #(4)\n# on ins\u00e8re \u00e0 droite\nif self.droitExiste() :\n# on descend \u00e0 droite et on recommence le test initial\nself.droit.inserer(cle)\nelse:\n            # on cr\u00e9e un fils droit\nself.droit = Noeud(cle)\n</code></pre> <ol> <li>Insertion \u00e0 gauche puisque la cl\u00e9 est inf\u00e9rieure \u00e0 la valeur du noeud.</li> <li>Le fils gauche n'est pas vide, on relance l'insertion sur ce fils</li> <li>Le fils gauche est vide, il devient donc un nouveau noeud avec la valeur \u00e0 ins\u00e9rer</li> <li>Traitement similaire pour une insertion \u00e0 droite</li> </ol>"},{"location":"Annales/Corriges/2023-S41/","title":"Corrig\u00e9 sujet 41 - Ann\u00e9e : 2023","text":"<p>Sujet 41 - 2022 </p>"},{"location":"Annales/Corriges/2023-S41/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(caractere,mot):\n    occurrence = 0\n    for c in mot:\n        if c == caractere:\n            occurrence += 1\n    return occurrence\n</code></pre> <p>Commentaires</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable en comptant les occurrences d'apparition d'une valeur. Un parcours par \u00e9l\u00e9ment suffit, les indices des occurrences n'\u00e9tant pas utilis\u00e9es.</p>"},{"location":"Annales/Corriges/2023-S41/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\nreturn [] #(1)\nv = valeurs[rang]\nif v &lt;= a_rendre : #(2)\nreturn [v] + rendu_glouton(a_rendre - v, rang) #(3)\nelse :\nreturn rendu_glouton(a_rendre, rang+1) #(4)\n</code></pre> <ol> <li>Il n'y a rien \u00e0 rendre, la liste des pi\u00e8ces est donc vide !</li> <li>On teste si la valeur est inf\u00e9rieure \u00e0 la somme \u00e0 rendre</li> <li>Si oui alors on l'ajoute \u00e0 la liste des pi\u00e8ces et la somme \u00e0 rendre diminue d'autant</li> <li>Sinon alors on passe \u00e0 la pi\u00e8ce suivante (en incr\u00e9mentant le rang)</li> </ol>"},{"location":"Annales/Corriges/2023-S42/","title":"Corrig\u00e9 sujet 42 - Ann\u00e9e : 2023","text":"<p>Sujet 42 - 2022 </p>"},{"location":"Annales/Corriges/2023-S42/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def minimum(tab, i):\n    ind_minimum = i\n    for j in range(i+1, len(tab)):\n        if tab[j] &lt; tab[ind_minimum]:\n            ind_minimum = j\n    return ind_minimum\n\ndef echange(tab, i, j):\n    tab[i], tab[j] = tab[j], tab[i]\n\ndef tri_selection(tab):\n    for i in range(len(tab)):\n        ind_minimum = minimum(tab, i)\n        echange(tab, i, ind_minimum)\n    return tab\n</code></pre> <p>Commentaires</p> <p>C'est l'algorithme classique du tri par s\u00e9lection, on rappelle que ce tri consiste pour <code>i</code> indice de parcours du tableau \u00e0 :</p> <ul> <li>rechercher le minimum \u00e0 partir de la position i </li> <li>\u00e9changer ce minimum avec l'\u00e9l\u00e9ment d'indice i</li> </ul>"},{"location":"Annales/Corriges/2023-S42/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\nnb_mystere = randint(1,99) #(1)\nnb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\ncompteur = 0 #(2)\nwhile nb_mystere != nb_test and compteur &lt; 10 : #(3)\ncompteur = compteur + 1\nif nb_mystere &gt; nb_test:\nnb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\nprint (\"Bravo ! Le nombre etait \",nb_mystere)\nprint(\"Nombre d'essais: \",compteur)\nelse:\nprint (\"Perdu ! Le nombre etait \",nb_mystere)\n</code></pre> <ol> <li>L'aide sur la fonction <code>randint</code> est donn\u00e9e dans l'\u00e9nonc\u00e9</li> <li><code>compteur</code> est la variable comptabilisant le nombre de tentatives du joueur</li> <li>Le jeu se poursuit tant que le nombres de tentatives est inf\u00e9rieur \u00e0 10 et que la bonne r\u00e9ponse n'a pas \u00e9t\u00e9 donn\u00e9e.</li> </ol>"},{"location":"Annales/Corriges/2023-S43/","title":"Corrig\u00e9 sujet 43 - Ann\u00e9e : 2023","text":"<p>Sujet 43 - 2022 </p>"},{"location":"Annales/Corriges/2023-S43/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def ecriture_binaire_entier_positif(n):\n    liste_bit=[n%2]\n    n=n//2\n    while n!=0:\n        liste_bit.append(n%2)\n        n=n//2\n    liste_bit.reverse()\n    return liste_bit,len(liste_bit)\n</code></pre> <p>Commentaires</p> <p>L'utilisation de <code>reverse</code> est sugg\u00e9r\u00e9 dans l'\u00e9nonc\u00e9 on pourrait s'en passer en utilisant <code>liste_bit = [n%2] + liste_bit</code> \u00e0 la ligne 5.</p>"},{"location":"Annales/Corriges/2023-S43/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T) \nfor i in range(len(T)-1,0,-1): #(1)\nfor j in range(i):\nif T[j] &gt; T[j+1]: #(2)\ntemp = T[j] #(3)\nT[j] = T[j+1] \nT[j+1] = temp\n    return T\n</code></pre> <ol> <li>On parcourt la liste \u00e0 l'envers \u00e0 l'aide de l'indice <code>i</code> (le dernier \u00e9l\u00e9ment de <code>T</code> a pour indice <code>len(T)-1</code>)</li> <li>On teste si deux \u00e9l\u00e9ments cons\u00e9cutifs ne sont pas dans le bon ordre</li> <li>Si oui, alors on les \u00e9change</li> </ol> <p>Attention</p> <ul> <li>Cet exercice demande de coder le tri \u00e0 bulles qui n'est pourtant pas au programme. Son principe est de faire remonter les plus petits \u00e9l\u00e9ments de la liste vers le d\u00e9but en les \u00e9changeant avec leur voisins.</li> <li>Les lignes 6,7 et 8 permettant d'\u00e9changer <code>T[j]</code> et <code>T[j+1]</code> en utilisant la variable temporaire <code>temp</code>, on pourrait \u00e9crire plus simplement : <code>T[j],T[j+1]=T[j+1],T[j]</code></li> <li>Le <code>return T</code> peut laisser penser qu'on veut r\u00e9cup\u00e9rer la liste tri\u00e9e, alors que <code>T</code> est modifi\u00e9e et tri\u00e9e par la fonction puisque mutable.</li> </ul>"},{"location":"Annales/Corriges/2023-S44/","title":"Corrig\u00e9 sujet 44 - Ann\u00e9e : 2023","text":"<p>Sujet 44 - 2022 </p>"},{"location":"Annales/Corriges/2023-S44/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def renverse(chaine):\n    chaine_inverse = \"\"\n    for caractere in chaine:\n        chaine_inverse = caractere + chaine_inverse\n    return chaine_inverse\n</code></pre> <p>Remarque</p> <p>On peut proposer une version utilisant la m\u00e9thode <code>join</code> des listes, en effet ajouter des \u00e9l\u00e9ments \u00e0 une liste est plus efficace que d'ajouter des caract\u00e8res \u00e0 une cha\u00eene de caract\u00e8res.</p>"},{"location":"Annales/Corriges/2023-S44/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def crible(n):\n\"\"\"renvoie un tableau contenant tous les nombres premiers plus petit que N\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\nfor i in range(2, n): \nif tab[i] == True: #(1)\npremiers.append(i)\nfor multiple in range(2*i, n, i): #(2)\ntab[multiple] = False #(3)\nreturn premiers\n</code></pre> <ol> <li>C'est le cas o\u00f9 le nombre est <code>i</code> premier</li> <li>Ce sont les multiples de <code>i</code>, on parcourt donc avec un pas de <code>i</code></li> <li>Les multiples ne sont pas des nombres premiers.</li> </ol> <p>Attention</p> <p>Le crible d'Eratosth\u00e8ne propos\u00e9 ici fait partie des algorithmes propos\u00e9s dans l'option math\u00e9matiques expertes. </p>"},{"location":"Annales/Corriges/2023-S45/","title":"Corrig\u00e9 sujet 45 - Ann\u00e9e : 2023","text":"<p>Sujet 45 - 2022 </p>"},{"location":"Annales/Corriges/2023-S45/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n\ndef rangement_valeurs(notes):\n    effectifs = [0]*11\n    for note in notes:\n        effectifs[note] += 1\n    return effectifs\n\ndef notes_triees(effectifs_notes):\n    note_triees = []\n    for note in range(11):\n        for i in range(effectifs_notes[note]):\n            note_triees.append(note)\n    return note_triees\n</code></pre>"},{"location":"Annales/Corriges/2023-S45/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>def dec_to_bin (nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\nif q == 0: #(1)\nreturn str(r)\n    else:\nreturn dec_to_bin(q) + str(r) #(2)\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\nelif nb_bin == '1': #(3)\nreturn 1\n    else:\n        if nb_bin[-1] == '0': \n            bit_droit = 0\n        else:\nbit_droit = 1\nreturn 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre> <ol> <li>Le quotient est nul, fin de l'algorithme</li> <li>Le quotient n'est pas nul, on continue en gardant le reste comme dernier chiffre</li> <li>Cas d'arr\u00eat de la r\u00e9cursion : il reste un unique chiffre</li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1AN1/","title":"21 NSIJ1AN1","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ1AN1/#21-nsij1an1-corrige","title":"21-NSIJ1AN1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : Am\u00e9rique du nord Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ1AN1/#exercice-1","title":"Exercice 1","text":"<p>bases de donn\u00e9es relationnelles et langage SQL </p> <ol> <li> <p>a.  Cette requ\u00eate affiche les champs et <code>salle</code> et <code>marque_ordi</code> de la table <code>Ordinateur</code>. </p> salle marque_ordi 012 HP 114 Lenovo 223 Dell 223 Dell 223 Dell <p>b.  Cette requ\u00eate affiche les champs <code>salle</code> et <code>marque_ordi</code> de la table <code>Ordinateur</code> pour les enregistrement dont le champ <code>video</code> est \u00e0 <code>true</code></p> nom_ordi salle Gen-24 012 Tech-62 114 Gen-132 223 ` </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>    SELECT * FROM Ordinateur WHERE annee&gt;=2017 ORDER BY annee ASC\n</code></pre> </li> </ol> <p>Note</p> <p>L'ordre croissant est l'ordre par d\u00e9faut, on peut donc se passer du <code>ASC</code> dans la requ\u00eate pr\u00e9c\u00e9dente. Pour m\u00e9moire l'ordre d\u00e9croissant s'obtient avec <code>DESC</code>.</p> <ol> <li> <p>a.  Une cl\u00e9 primaire est unique pour chaque enregistrement. Comme plusieurs ordinateurs peuvent \u00eatre dans la m\u00eame salle. Le champ salle n'est pas unique et ne peut donc pas servir de cl\u00e9 primaire.</p> <p>b. On souligne la cl\u00e9 primaire, on rep\u00e8re les cl\u00e9s \u00e9trag\u00e8res en les faisant pr\u00e9c\u00e9d\u00e9es du symbole <code>#</code>.</p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Videoprojecteur VALUES (\"315\", \"NEC\", \"ME402X\", false);\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT salle, nom_ordi, marque_video FROM Ordinateurs JOIN Videoprojecteur ON Ordinateurs.salle = Videoprojecteur.salle WHERE video = true AND tni = true;\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1AN1/#exercice-2","title":"Exercice 2","text":"<p>routage, processsus et syst\u00e8mes sur puces </p> <ol> <li> <p>L\u2019encombrement et la consommation sont plus faibles. </p> </li> <li> <ul> <li>D1 est mobilis\u00e9 par le traitement de texte qui attend D2; </li> </ul> </li> <li>D2 est mobilis\u00e9 par le SGBD qui attend D4; </li> <li>D4 est mobilis\u00e9 par la CAO qui attend D5; </li> <li> <p>D5 est mobilis\u00e9 par le tableur qui attend D1; </p> <p>Nous avons bien une boucle. C\u2019est ce qu\u2019on appelle l\u2019interblocage. </p> </li> <li> <p>A-B-E-F</p> </li> <li> <p></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1AN1/#exercice-3","title":"Exercice 3","text":"<p>tableaux et programmation de base en Python </p> <ol> <li> <p>a. \ud83d\udc0d Script Python<pre><code>def total_hors_reduction(tab):\n'''Calcul la somme des \u00e9l\u00e9ments de tab'''\n    assert type(tab)==list, \"L'argument doit \u00eatre une liste\"\n    thr = 0\n    for prix in tab:\n        assert type(prix)==int or type(prix)==float,\"Les prix doivent \u00eatre de types num\u00e9riques\"\n        thr += prix\n    return thr\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def offre_bienvenue(tab):\n\"\"\" tableau -&gt; float \"\"\"\n    somme =0\n    longueur = len(tab)\n    if longueur &gt; 0:\n        somme = tab[0]* 0,8\n    if longueur &gt; 1:\n        somme = somme + tab[1] * 0,7\n    if longueur &gt; 2:\n        for i in range(2,longueur):\n            somme = somme + tab[i]\n    return somme\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def prix_solde(tab):\n    if len(tab)&gt;=5:\n        return total_hors_reduction(tab)*0.5\n    elif len(tab)==4:\n        return total_hors_reduction(tab)*0.6\n    elif len(tab)==3:\n        return total_hors_reduction(tab)*0.7\n    elif len(tab)==2:\n        return total_hors_reduction(tab)*0.8\n    else:\n        return total_hors_reduction(tab)*0.9\n</code></pre> </li> <li> <p>a. \ud83d\udc0d Script Python<pre><code>def minimum(tab):\n    min_courant = tab[0]\n    for elt in tab:\n        if elt&lt;min_courant:\n            min_courant = elt\n    return min_courant\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def offre_bon_client(tab):\n    if len(tab)&gt;=2:\n        return total_hors_reduction(tab)-minimum(tab)\n    else:\n        return total_hors_reduction(tab)\n</code></pre></p> </li> <li> <p>a. \ud83d\udc0d Script Python<pre><code>tab = [35.0,30.5,20.0,15.0,10.5,5.0,6.0]\n</code></pre></p> <p>Le total des prix du panier est de \\(35 + 30,5 + 20 + 15 + 10.5 + 6 + 5=122\\). Compte tenu de l'ordre des articles les articles coutant 20 \u20ac et 5 \u20ac seront offerts. Et donc le prix \u00e0 payer sera 97 \u20ac.</p> <p>b. \ud83d\udc0d Script Python<pre><code>tab = [35.0,30.5,20.0,15.0,10.5,6.0,5.0]\n</code></pre> Le prix total a payer est de 96 euros.</p> <p>c. Il faut trier les objets par ordre d\u00e9croissant de prix.</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1AN1/#exercice-4","title":"Exercice 4","text":"<p>arbres binaires et algorithmes associ\u00e9s </p> <ol> <li> <p>a.La racine est \"L\u00e9a\". L\u2019ensemble des valeurs des feuilles est : \"Marc\", \"Lea\", \"Claire\", \"Theo\", \"Marie\", \"Louis\", \"Anne\" et \"Kevin\". </p> <p>b. Le vainqueur est celui qui est \u00e0 la racine. \ud83d\udc0d Script Python<pre><code>def vainqueur(arb): \n    return racine(arb)\n</code></pre> c.  \ud83d\udc0d Script Python<pre><code>def finale(arb): \n    return [racine(gauche(arb)), racine(droit(arb))] \n</code></pre></p> </li> <li> <p>a. On utilise une fonction r\u00e9cursive. \ud83d\udc0d Script Python<pre><code>def occurences(arb, nom): \n    if est_vide(arb): \n        return 0 \n    else: \n        if racine(arb) == nom: \n            return 1 + occurences(gauche(arb), nom) + occurences(droit(arb), nom) \n        else: \n            return occurences(gauche(arb), nom) + occurences(droit(arb), nom) \n</code></pre></p> <p>b. Un joueur \u00e0 gagn\u00e9 au moins un match si son nom appara\u00eet plus d\u2019une fois. \ud83d\udc0d Script Python<pre><code>def gagne(arb, nom): \n    return occurences(arb, nom) &gt; 1\n</code></pre></p> </li> <li> <p>a. Cela ne fonctionne pas par le vainqueur appara\u00eet \u00e0 la racine sans effectuer de match.     b.      \ud83d\udc0d Script Python<pre><code>def nombre_matchs(arb, nom): \n\"\"\"arbre_competition, str-&gt; int\"\"\" \n    if nom == vainqueur(arb): \n        return occurrences(arb, nom)- 1 \n    else: \n        return occurrences(arb, nom) \n</code></pre></p> </li> <li> <p><code>python    def liste_joueurs(arb):      \"\"\"arbre_competition-&gt; tableau\"\"\"      if est_vide(arb):          return []      elif est_vide(gauche(arb)) and est_vide(droit(arb)):          return [racine(arb)]      else:          return liste_joueurs(gauche(arb)) + liste_joueurs(droit(arb))</code></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1AN1/#exercice-5","title":"Exercice 5","text":"<p>notion de pile, de file et programmation de base en Python </p> <ol> <li> <p>a. La file F est vide et P contient les \u00e9l\u00e9ments suivants :     ||     |:---|     |\"rouge\"|     |\"vert\"|     |\"jaune\"|     |\"rouge\"|     |\"jaune\"|</p> <p>b. \ud83d\udc0d Script Python<pre><code>def taille_file(F): \n\"\"\"File-&gt; Int\"\"\" \n    FS = creer_file_vide() \n    k = 0 \n    while not(est_vide(F)): \n        k = k + 1 \n        enfiler(FS, defiler(F)) \n    while not(est_vide(FS)): \n        enfiler(F, defiler(FS))\n    return k \n</code></pre></p> </li> <li> <p>On utilise une pile interm\u00e9diaire pour retourner la pile.     <code>python    def former_pile(F):      \"\"\"File-&gt; Pile\"\"\"      Q = creer_pile_vide()      while not(est_vide(F)):          enpiler(Q, defiler(F))      P = creer_pile_vide()      while not(est_vide(Q)):          enpiler(P, depiler(Q))      return P</code></p> </li> <li> <p><code>python    def nb_elements(F, elt):      \"\"\"File-&gt; Int\"\"\"      FS = creer_file_vide()      k = 0      while not(est_vide(F)):          e = defiler(F)          if e == elt:              k = k + 1          enfiler(FS, e)      while not(est_vide(FS)):          enfiler(F, defiler(FS))      return k</code></p> </li> <li> <p><code>python    def verifier_contenu(F, nb_rouge, nb_vert, nb_jaune):      \"\"\"File-&gt; Bool\u00e9en\"\"\"      return nb_elements(F, \"rouge\") &lt;= nb_rouge and nb_elements(F, \"vert\") &lt;= nb_vert and nb_elements(F, \"jaune\") &lt;= nb_jaune</code></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1G11/","title":"21 NSIJ1G11","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ1G11/#21-nsij1g11-corrige","title":"21-NSIJ1G11 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : Etranger Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ1G11/#exercice-1","title":"Exercice 1","text":"<p>programmation objet (code de C\u00e9sar) </p>"},{"location":"Annales/Corriges/21-NSIJ1G11/#exercice-2","title":"Exercice 2","text":"<p>structures de donn\u00e9es (dictionnaires) </p> <ol> <li> <p>a.    \ud83d\udc0d Script Python<pre><code>{'type': 'classique', 'etat': 1, 'station': 'Coliseum'}\n</code></pre>     b. 0 </p> <p>c. renvoie une erreur, car la cl\u00e9 99 n\u2019existe pas dans le dictionnaire flotte </p> </li> <li> <p>a. le param\u00e8tre choix peut \u00eatre \u00e9gal \u00e0  \u201celectrique\" ou \"classique\u201d </p> </li> </ol> <p>b. Dans le cas o\u00f9 le param\u00e8tre choix est \u00e9gal \u00e0 \u201celectrique\u201d,  la fonction proposition renvoie \u201cPrefecture\u201d ou \u201cJacobins\u201d selon la version de Python utilis\u00e9e ! Dans le cas o\u00f9 le param\u00e8tre choix est \u00e9gal \u00e0 \u201cclassique\u201d,  la fonction proposition renvoie \u201cBaraban\u201d ou \u201cColiseum\u201d selon la version de Python utilis\u00e9e !</p> <ol> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>def affiche(): \n    tab = [] \n    for v in flotte: \n        if flotte[v][\"station\"] == \"Citadelle\" and flotte[v][\"etat\"] == 1 : \n            tab.append(v) \n    print(tab)\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def affiche(): \n    tab = [] \n    for v in flotte: \n        if flotte[v][\"etat\"] !=-1 and flotte[v][\"type\"] == \"electrique\": \n            tab.append((v,flotte[v][\"station\"])) \n    print(tab)\n</code></pre></p> </li> </ol> <p>4.     \ud83d\udc0d Script Python<pre><code>def station(coord): \nd = {} \nfor num,info in flotte.items() : \n    nom_station = info['station'] \n    distance_station = distance(stations[nom_station],coord) \n    if info['etat'] == 1 and distance_station &lt; 800: \n        if nom_station not in d : \n            d[nom_station] = [distance_station, [num]] \n        else : \n            d[nom_station][1].append(num) \nreturn d\n</code></pre></p>"},{"location":"Annales/Corriges/21-NSIJ1G11/#exercice-3","title":"Exercice 3","text":"<p>arbres binaires de recherche </p> <pre><code>        graph TD\n        N0[\"26.noeud00\"] --&gt; N1[\"3.noeud01\"]\n        N0 --&gt; N2[\"42.noeud02\"]\n        N1 --&gt; N7[\"1.noeud07\"]\n        N1 --&gt; N3[\"15.noeud03\"]\n        N2 --&gt; N4[\"29.noeud04\"]\n        N2 --&gt; V1[\" \"]\n        N3 --&gt; N6[\"13.noeud06\"]\n        N3 --&gt; N5[\"19.noeud05\"]\n        N4 --&gt; V2[\" \"]\n        N4 --&gt; N8[\"32.noeud08\"]\n        N8 --&gt; N10[\"30.noeud10\"]\n        N8 --&gt; N9[\"37.noeud09\"]\n        N5 --&gt; V3[\" \"]\n        N5 --&gt; N11[\"25.noeud11\"]\n        style V1 fill:#FFFFFF, stroke:#FFFFFF\n        style V2 fill:#FFFFFF, stroke:#FFFFFF\n        style V3 fill:#FFFFFF, stroke:#FFFFFF\n        style N11 fill:#AA2222,stroke:#333\n        linkStyle 0,3,7,13 stroke:#FF0000,stroke-width:2px\n</code></pre> <ol> <li> <p>Etapes de l'insertion du noeud 11 de valeur 25 :</p> <ul> <li> <p>A gauche du noeud00 car il a pour valeur 26 et \\(25&lt;26\\)</p> </li> <li> <p>A droite du noeud01 car il a pour valeur 3 et \\(25&gt;3\\)</p> </li> <li> <p>A droite du noeud03 car il a pour valeur 15  et \\(25&gt;15\\)</p> </li> <li> <p>A droite du noeud05 car il a pour valeur 19  et \\(25&gt;19\\)</p> </li> </ul> </li> <li> <p>A gauche du noeud04, on peut stocker les valeurs strictement inf\u00e9rieures \u00e0 29 et sup\u00e9rieures ou \u00e9gales \u00e0 26. C'est \u00e0 dire : 26,27, et 28.</p> <p>Note</p> <p>Le sujet pr\u00e9cise dans son introduction que : </p> <p>les valeurs du sous-arbre droit sont sup\u00e9rieures ou \u00e9gales \u00e0 valeur du noeud.</p> <p>Avec cette d\u00e9finition, la valeur 26 est donc possible m\u00eame si elle est d\u00e9j\u00e0 pr\u00e9sente dans l'arbre. Si on consid\u00e8re que les valeurs sont uniques seules 27 et 28 sont possibles.</p> </li> <li> <p> </p> <p>a. 26, 3, 1, 15, 13, 19, 25, 42, 29, 32, 30, 37</p> <p>b.  C'est un parcours pr\u00e9fix\u00e9 car la valeur du noeud est list\u00e9 avant celle des valeurs pr\u00e9sentes dans le sous arbre gauche et le sous arbre droit. La valeur du noeud serait list\u00e9 entre ces valeurs pour un parcours infixe et apr\u00e8s pour un parcours suffix\u00e9.</p> </li> <li> <p>Afin d'afficher les valeurs par ordre croissant, on doit effectuer un parcours infixe. C'est \u00e0 dire afficher la valeur du noeud entre les valeurs du sous arbre gauche et du sous arbre droit. \ud83d\udccb Texte<pre><code>Parcours2(A): \n    Parcours(A.fils_gauche)\n    Afficher(A.valeur)\n    Parcours(A.fils_droit)\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1G11/#exercice-4","title":"Exercice 4","text":"<p>r\u00e9seau </p> <ol> <li> <p>a. On utilise 4 octets dans une adresse IP V4</p> <p>2.b, 2.c et 2.d </p> </li> <li> <p>Adresses IP possibles : 192.168.20.30 et 192.168.20.230,</p> </li> </ol> <p>Partie B  </p> \ud83d\udc0d Script Python<pre><code>def IP_bin(adr): \n    conv=[] \n    for o in adr: \n        conv.append(dec_bin(o)) \n    return conv \n</code></pre>"},{"location":"Annales/Corriges/21-NSIJ1G11/#exercice-5","title":"Exercice 5","text":"<p>structure de donn\u00e9es (piles) </p> <ol> <li> <p></p> </li> <li> <p></p> </li> </ol> <p>3. \ud83d\udc0d Script Python<pre><code>def maximum(P): \n    m=depiler(P) \n    while not est_vide(P): \n        v = depiler(P) \n        if v &gt; m: \n            m = v \n    return m\n</code></pre></p> <ol> <li> <p>a. Il suffit de mettre place une boucle qui s'arr\u00eatera quand la pile P sera vide. \u00c0 chaque tour de boucle, on d\u00e9pile P, on empile les valeurs pr\u00e9c\u00e9demment d\u00e9pil\u00e9es dans une pile auxiliaire Q et on incr\u00e9mente un compteur  de 1. Une fois la boucle termin\u00e9e, on cr\u00e9e une nouvelle boucle o\u00f9  on d\u00e9pile Q et on empile P avec les valeurs d\u00e9pil\u00e9es (l\u2019id\u00e9e est de retrouver l\u2019\u00e9tat originel de pile. Il suffit ensuite de renvoyer la valeur du compteur. </p> <p>b.  \ud83d\udc0d Script Python<pre><code>def taille(P): \n    cmp = 0 \n    Q = creer_pile() \n    while not est_vide(P): \n        v = depiler(P) empiler(Q,v) \n        cmp = cmp + 1 \n    while not est_vide(Q): \n        v = depiler(Q) \n        empiler(P,v) \n    return cmp\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME1/","title":"21 NSIJ1ME1","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ1ME1/#21-nsij1me1-corrige","title":"21-NSIJ1ME1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : M\u00e9tropole Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ1ME1/#exercice-1","title":"Exercice 1","text":"<p>abres binaires de recherche </p> <ol> <li> <p>a. Il y a 4 feuilles, d'\u00e9tiquette 12, <code>val</code>, 21 et 32.  </p> <p>b. Le sous-arbre gauche du n\u0153ud 23 est 19-21.  </p> <p>c. La hauteur de l'arbre est 4. Sa taille est 9.  </p> <p>d. Les valeurs possibles de <code>val</code> sont 16 et 17.  </p> </li> <li> <p>a. Parcours infixe : 12-13-15-16-18-19-21-23-32  </p> <p>b. Parcours suffixe : 12-13-16-15-21-19-32-23-18  </p> </li> <li> <p>a.  </p> <pre><code>graph TD\n    A(18) --&gt; B(12) \n    B --&gt; D(\" \")\n    B --&gt; E(13)\n    A --&gt; C(19)\n    C --&gt; F(\" \")\n    C --&gt; G(21)\n    D --&gt; H(\" \")\n    D --&gt; D1(\" \" )\n    E --&gt; E1(\" \")\n    E --&gt; E2(15)\n    F --&gt; F1(\" \")\n    F --&gt; M(\" \")\n    M --&gt; G1(\" \")\n    M --&gt; G2(\" \")\n    E2 --&gt; I(\" \")\n    E2 --&gt; J(16)\n    G --&gt; K(\" \")\n    G --&gt; L(32)\n    L --&gt; N(23)\n    L --&gt; O(\" \")\n    linkStyle 1 stroke-width:0px;\n    style D opacity:0;    \n    linkStyle 4 stroke-width:0px;\n    style F opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style H opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style D1 opacity:0;\n    linkStyle 8 stroke-width:0px;\n    style E1 opacity:0;\n    linkStyle 10 stroke-width:0px;\n    style F1 opacity:0;\n    linkStyle 11 stroke-width:0px;\n    style M opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style G1 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style G2 opacity:0;\n    linkStyle 14 stroke-width:0px;\n    style I opacity:0;\n    linkStyle 16 stroke-width:0px;\n    style K opacity:0;\n    linkStyle 19 stroke-width:0px;\n    style O opacity:0;</code></pre> <p>b.  \ud83d\udc0d Script Python<pre><code>racine = Noeud(18)\nracine.insere([15, 13, 12, 16, 23, 32, 19, 21])\n</code></pre> (d'autres solutions sont possibles)</p> <p>c. Bloc 3 - Bloc 2 - Bloc 1  </p> </li> <li> \ud83d\udc0d Script Python<pre><code>class Noeud():\n    def __init__(self, v):\n        self.ag = None\n        self.ad = None\n        self.v = v\n\n    def insere(self, v):\n        n = self\n        est_insere = False\n        while not est_insere:\n            if v == n.v:\n                est_insere = True\n            elif v &lt; n.v:\n                if n.ag != None:\n                    n = n.ag\n                else:\n                    n.ag = Noeud(v)\n                    est_insere = True\n            else:\n                if n.ad != None:\n                    n = n.ad\n                else:\n                    n.ad = Noeud(v)\n                    est_insere = True\n\n    def insere_tout(self, vals):\n        for v in vals:\n            self.insere(v)\n\n    def recherche(self, v):\n        arbre = self\n        while not arbre is None:\n            if arbre.v == v:\n                return True\n            if v &lt; arbre.v:\n                arbre = arbre.ag\n            else:\n                arbre = arbre.ad\n        return False\n\n\n        # version r\u00e9cursive (non demand\u00e9e)\n\n    def recherche_rec(self, v):\n        if self is None:\n            return False\n        if self.v == v:\n            return True\n        if v &lt; self.v:\n            if self.ag is not None:\n                return self.ag.recherche_rec(v)\n            else:\n                return False\n        else:\n            if self.ad is not None:\n                return self.ad.recherche_rec(v)\n            else:\n                return False\n\n\nracine = Noeud(18)\nracine.insere_tout([12, 13, 15, 14, 19, 21, 32, 23])\nprint(racine.recherche(149))\nprint(racine.recherche(12))\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME1/#exercice-2","title":"Exercice 2","text":"<p>gestion des processus, op\u00e9rateurs bool\u00e9ens </p> <ol> <li>R\u00e9ponse b  </li> <li>R\u00e9ponse c  </li> <li>R\u00e9ponse b  </li> <li>R\u00e9ponse d  </li> </ol> <p>Partie B</p> <ol> <li> <p></p> </li> <li> <p>Il s\u2019agit du sc\u00e9nario 2 car nous nous retrouvons dans la situation o\u00f9 P1 poss\u00e8de R1 et attend R2 avant de pouvoir continuer et P3 poss\u00e8de R2 et attend R1 avant de pouvoir continuer.</p> </li> </ol> <p>Partie C </p> <ol> <li> <p>a. <code>0100 0110</code> =&gt; 46 en hexa =&gt; caract\u00e8re F  <code>0110 0011</code> =&gt; 63 en hexa =&gt; caract\u00e8re c      donc cF</p> <p>b. <code>0b 1000 1101 1011 0110</code></p> </li> <li> <p>a.  </p> a b (a XOR b) XOR b 0 0 0 0 1 0 1 0 1 1 1 1 <p>b. On peut remarquer que (a xor b) xor b permet de retrouver a, donc si a correspond au message non chiffr\u00e9 et a xor b correspond au message chiffr\u00e9, un (a xor b) xor b permet donc de retrouver le message non chiffr\u00e9. Si on appelle m le message non chiffr\u00e9, m\u2019 le message chiffr\u00e9 et k la cl\u00e9 de chiffrement, un m\u2019 xor k permettra de retrouver m.</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME1/#exercice-3","title":"Exercice 3","text":"<p>base de donn\u00e9es et langage SQL </p> <ol> <li> <p>Syst\u00e8mes de gestion de base de donn\u00e9es (SGBD). </p> </li> <li> <p>a. En supprimant la ligne du train 1241 de la table Train, on ferait perdre la r\u00e9f\u00e9rence de la cl\u00e9 \u00e9trang\u00e8re de la table Reservation. Cette op\u00e9ration est donc interdite.</p> <p>b. On ne peut pas enregistrer une ligne dans la table Reservation si la valeur de l\u2019attribut numT n\u2019appara\u00eet pas dans dans la table Train pour le champ numT. </p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT numT FROM Train WHERE destination = \"Lyon\";\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Reservation VALUES (1307, \"Turing\", \"Alan\", 33, 654);\n</code></pre></p> <p>c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Train SET horaireArrivee = \"08:11\" WHERE numT = 7869;\n</code></pre></p> </li> <li> <p>Elle permet de conna\u00eetre le nombre de r\u00e9servations de Grace Hopper. </p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT destination, prix FROM Train JOIN Reservation ON Train.numT = Reservation.numT WHERE nomClient = \"Hopper\" AND prenomClient = \"Grace\";\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME1/#exercice-4","title":"Exercice 4","text":"<p>algorithme de tri fusion et m\u00e9thode diviser pour r\u00e9gner </p> <ol> <li> <p>a. \\(O(n log(n))\\)</p> <p>b. Tri par insertion en \\(O(n^2)\\). Le co\u00fbt du tri fusion est plus int\u00e9ressant. </p> </li> <li> \ud83d\udc0d Script Python<pre><code>[7, 4, 2, 1, 8, 5, 6, 3] \n[7, 4, 2, 1] \n[7, 4] \n[2, 1] \n[8, 5, 6, 3] \n[8, 5] \n[6, 3] \n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def moitie_droite(L): \n    md = [] \n    n = len(L) \n    mil = n // 2 \n    for i in range(mil, n): \n        md.append(L[i]) \n    return md\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>if e1 &lt;= e2: \n    L.append(e1) \n    i1 = i1 + 1 \nelse: \n    L.append(e2) \n    i2 = i2 + 1\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME1/#exercice-5","title":"Exercice 5","text":"<p>r\u00e9seaux et protocoles de routage </p> <ol> <li> <p>a. Il l\u2019envoie vers R2 car la passerelle de la table de routage correspond \u00e0 une adresse du sous-r\u00e9seau entre R1 et R2. </p> <p>b. R1-R2-R6 </p> </li> <li> <p>a. R1-R3-R4-R6 </p> <p>b. La ligne de R1. </p> </li> <li> <p>a. C = \\(\\dfrac{10^9}{10^7}\\) =100 </p> <p>b. R1-R2-R4-R5-R6 </p> <p>c. Les lignes de R2 et R4.</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME2/","title":"21 NSIJ1ME2","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ1ME2/#21-nsij1me2-corrige","title":"21-NSIJ1ME2 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : M\u00e9tropole candidats libres Jour : 1 Enonc\u00e9 : </p> \ud83d\udccb Texte<pre><code>```\n</code></pre>"},{"location":"Annales/Corriges/21-NSIJ1ME2/#exercice-1","title":"Exercice 1","text":"<p>bases de donn\u00e9es </p> <ol> <li> <p>Car idPi\u00e8ce et idActeur sont des cl\u00e9s \u00e9trang\u00e8res et doivent donc faire r\u00e9f\u00e9rence \u00e0 des entr\u00e9es des tables Piece et Acteur </p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Role VALUES(46721,389761,\"Tartuffe\");\n</code></pre> </li> <li> <p>Elle remplace dans la table Piece les valeurs \u00abAm\u00e9ricain\u00bb et \u00abBritannique\u00bb du champ langue par \u00abAnglais\u00bb. </p> </li> <li> <p>a.     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Acteur\nWHERE anneeNaiss&gt;=1990;\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT MAX(anneeNaiss)\nFROM Acteur;\n</code></pre></p> <p>c. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nomRole FROM Role JOIN Acteur ON Role.idActeur = Acteur.idActeur WHERE prenom=\"Vincent\" AND nom=\"Macaigne\";\n</code></pre></p> <p>d. ```sql SELECT titre  FROM Piece  JOIN Role ON Piece.idPiece = Role.idPiece  JOIN Acteur ON Acteur.idActeur = Role.idActeur  WHERE langue = \"Russe\" AND nom = \"Balibar\" AND prenom = \"Jeanne\";</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME2/#exercice-2","title":"Exercice 2","text":"<p>notions de piles et programmation orient\u00e9e objet </p> <ol> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>pile1=Pile() \npile1.empiler(7) \npile1.empiler(5) \npile1.empiler(2)\n</code></pre></p> <p>b. 7,5,5,2 </p> </li> <li> <p>a.     1) 3,2     2) 3,2,5,7     3) 3     4) pile vide </p> <p>b. Elle extrait les \u00e9l\u00e9ments du sommet et les empile jusqu\u2019\u00e0 trouver l\u2019\u00e9l\u00e9ment pass\u00e9 enparam\u00e8tre. Elle renvoie ensuite une pile des \u00e9l\u00e9ments extraits. </p> </li> <li> \ud83d\udc0d Script Python<pre><code>def etendre(pile1, pile2): \n    nb_elements = pile2.nb_elements() \n    for i in range(nb_elements): \n        elem = pile2.depiler() \n        pile1.empiler(elem)\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def supprime_toutes_occurences(pile, element): \n    pile2 = Pile() \n    nb_elements = pile.nb_elements() \n    for i in range(nb_elements): \n        elem = pile.depiler() \n        if elem != element: \n            pile2.empiler(elem) \n    nb_elements2 = pile2.nb_elements() \n    for i in range(nb_elements2): \n        pile.empiler(pile2.depiler())\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME2/#exercice-3","title":"Exercice 3","text":"<p>gestion des processus et protocoles de routage </p> <ol> <li> <p><code>/sbin/init</code></p> </li> <li> <p>5440 et 5450 car ils ont \"R\" dans leur stat. </p> </li> <li> <p><code>Bash</code>. Les autres commandes sont Bash, Bash et \"python programme1.py\" </p> </li> <li> <p><code>python programme1.py</code> en premier car elle a un PID plus petit.</p> </li> <li> <p>Non. </p> </li> </ol> <p>Partie B</p> <ol> <li> <p></p> </li> <li> <p>On remplace les d\u00e9bits par les co\u00fbts sur le sch\u00e9ma :  </p> </li> <li> <p>100 Mbit/s -&gt; \\(\\dfrac{10^8}{10^8}\\) = 1  </p> </li> <li>10 Mbit/s -&gt; \\(\\dfrac{10^8}{10^7}\\) = 10  </li> </ol> <p></p> <p>On obtient ensuite la table de routage :  </p> <p></p> <ol> <li>Le d\u00e9bit global d\u2019une liaison est le plus faible d\u00e9bit de la route. Avec RIP le d\u00e9bit est donc 10Mbit/s et avec OSPF 100Mbit/s.Ainsi OSPF est plus performant de cepoint devue.</li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME2/#exercice-4","title":"Exercice 4","text":"<p>algorithme et programmation en Python </p> <p>Partie A</p> <ol> <li> <p><code>lab2[1][0] = 2</code> </p> </li> <li> \ud83d\udc0d Script Python<pre><code>def est_valide(i, j, n, m): \n    return i &gt;= 0 and i &lt; n and j &gt;= 0 and j &lt; m \n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def depart(lab): \n    n = len(lab) \n    m = len(lab[0]) \n    for i in range(n): \n        for j in range(m): \n            if lab[i][j] == 2: \n                return (i, j)\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def nb_cases_vides(lab): \n    n = len(lab) \n    m = len(lab[0]) \n    nb = 0 \n    for i in range(n): \n        for j in range(m): \n            if lab[i][j] != 1: \n                nb = nb + 1 \n    return nb\n</code></pre> </li> </ol> <p>Partie B</p> <ol> <li> <p>Nous avons le labyrinthe suivant : \ud83d\udc0d Script Python<pre><code>[[1, 1, 4], \n[0, 0, 0], \n[1, 1, 0]]\n</code></pre>     Le retour est donc : <code>[(1, 1), (2, 2)]</code></p> </li> <li> <p>a. \ud83d\udc0d Script Python<pre><code>chemin.append((3, 3)) \nchemin.append((3, 4)) \nchemin.pop() \nchemin.pop() \nchemin.pop() \nchemin.append((1, 4)) \nchemin.append((1, 5))\n</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>def solution(lab): \n    chemin = [depart(lab)] \n    case = chemin[0] \n    i = case[0] \n    j = case[1] \n    while lab[i][j] != 3: \n        lab[i][j] = 4 \n        if voisines(i, j, lab) != []: \n            case = voisines(i, j, lab)[0] \n            chemin.append(case) \n        else: \n            chemin.pop() \n            case = chemin[-1] \n        i = case[0] \n        j = case[1] \n    return chemin\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME2/#exercice-5","title":"Exercice 5","text":"<p>manipulation de tableaux, r\u00e9cursivit\u00e9, m\u00e9thode \"diviser pour r\u00e9gner\" </p> <ol> <li> <p>Car 8&gt;7.  </p> </li> <li> <p>Car3&lt;7. </p> </li> </ol> <p>Partie A</p> <ol> <li> <p>a.          1) 0          2) 1         3) 2</p> <p>b. Le nombre d\u2019inversion avec i \u00e0 gauche.</p> </li> <li> <p><code>python     def nombre_inversion(tab):      nb_elem=len(tab)      cpt=0      for i in range(0,nb_elem-1):          cpt=cpt+fonction1(tab,i)      return cpt</code></p> </li> <li> <p>\\(O(n^2)\\)</p> </li> </ol> <p>Partie B</p> <ol> <li> <p>Tri fusion.  </p> </li> <li> <p><code>python     def moitie_gauche(tab):      milieu=(len(tab)+1)//2      return tab[:milieu]</code></p> </li> <li> <p><code>python    def nb_inversions_rec(tab):      if len(tab) &lt;= 1: #Condition d'arr\u00eat         return 0      else:          tab_g=moitie_gauche(tab)          tab_d=moitie_droite(tab)          nb=nb_inversions_rec(tab_g)+nb_inversions_rec(tab_d)          tab_g_trie=tri(tab_g)          tab_d_trie=tri(tab_d)          nb=nb+nb_inv_tab(tab_g_trie,tab_d_trie)          return nb</code></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME3/","title":"21 NSIJ1ME3","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ1ME3/#21-nsij1me3-corrige","title":"21-NSIJ1ME3 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : M\u00e9tropole session de septembre Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ1ME3/#exercice-1","title":"Exercice 1","text":"<p>protocoles de communication, r\u00e9seau, protocoles de routage </p> <p>Partie A</p> <ol> <li> <p>Il est tr\u00e8s difficile de r\u00e9pondre \u00e0 cette question en restant dans le programme (le mod\u00e8le OSI n\u2019est pas au programme).    TCP correspond \u00e0 la couche transport, il d\u00e9coupe les donn\u00e9es en segments.    IP correspond \u00e0 la couche r\u00e9seau qui d\u00e9coupe les segments en paquets. C\u2019est \u00e0 ce niveau que s\u2019effectue le routage. </p> </li> <li> <p>a. 200.100.10.0 </p> <p>b. De 200.100.10.1 \u00e0 200.100.10.254. Il y a donc 254 machines h\u00f4te identifiables sur ce r\u00e9seau. </p> </li> </ol> <p>Partie B</p> <ol> <li> <ul> <li>A:172.16.0.0 </li> </ul> </li> <li> <p>F:10.0.0.0  </p> </li> <li> <p>Pour le r\u00e9seau 1, toutes les machines appartiennent au m\u00eame r\u00e9seau car leurs adresse commencenttoutes par 172.16.x.x.    Pour le r\u00e9seau 2, elles ne sont pas toutes sur le m\u00eame r\u00e9seau car une machine commence par 8.x.x.x et les autres par 10.x.x.x. </p> </li> <li> <p>R\u00e9ponse (d)  \\(256^2 - 2\\) (sur toutes les combinaisons, il faut enlever l\u2019adresse du r\u00e9seau et l\u2019adresse de broadcast). </p> </li> <li></li> </ol> <pre><code>graph TD\n    A(\" Routeur\") --&gt; B(\"Switch 1 \") \n    A --&gt; M(\"J\")\n    B --&gt; C(\"A\")\n    B --&gt; D(\"B\")\n    B --&gt; E(\"C\")\n    B --&gt; C(\"D\")\n    B --&gt; E(\"E\")\n    A --&gt; F(\"Switch 2\")\n    F --&gt; J(\"F\")\n    F --&gt; K(\"G\")\n    F --&gt; L(\"H\")\n    F --&gt; N(\"I\")</code></pre>"},{"location":"Annales/Corriges/21-NSIJ1ME3/#exercice-2","title":"Exercice 2","text":"<p>algorithmique (recherche dichotomique), langages et programmation (r\u00e9cursivit\u00e9) </p> <p>Partie A </p> <ol> <li> <p>R\u00e9ponse a) Vrai  </p> </li> <li> <p>R\u00e9ponse c) Logarithmique, \\(O(log(n))\\) </p> </li> <li> <p>\u00c0 chaque \u00e9tape, si on ne trouve pas l\u2019\u00e9l\u00e9ment :   </p> </li> <li>Si <code>liste[m] &gt; elem</code> alors   \\(fin_{k+1} = m - 1\\)  et \\(debut_{k+1} = debut_k\\) or \\(m \u2264 fin_k\\) donc \\(fin_{k+1} &lt; fin_k\\) et ainsi \\(fin_{k+1} - debut_{k+1}  &lt; fin_k - debut_k\\)</li> <li>Si <code>liste[m] &lt; elem</code> alors \\(fin_{k+1} = fin_k\\) et \\(debut_{k+1} = m+1\\) or \\(m \u2265 debut_k\\) donc \\(debut_{k+1} &lt; fin_k\\) et ainsi \\(fin_{k+1} - debut_{k+1} &lt; fin_k - debut_k\\)</li> </ol> <p>On a donc toujours \\(fin_{k+1} - debut_{k+1} &lt; fin_k - debut_k\\), c\u2019est bien un variant de boucle. Il existe donc un p tel que \\(fin_p &lt; debut_p\\) et l\u2019algorithme se termine.</p> <p>Partie B</p> <ol> <li> <p>Le programme s\u2019adapte \u00e0 la longueur de la liste. </p> </li> <li> <p>Si on cherche le quotient de a par b :     \ud83d\udc0d Script Python<pre><code>c = a - b \nq = 0 \nwhile c &gt; 0: \n q = q + 1 \n c = c- b\n</code></pre></p> </li> <li> <p> </p> </li> <li> <p>\u00c0 la ligne 6 : <code>return True, m</code>    \u00c0 la ligne 12 : <code>return False,-1</code></p> </li> </ol> <p>Partie C</p> <ol> <li> <p>Une fonction est r\u00e9curssive si elle s\u2019appelle elle-m\u00eame. </p> </li> <li> \ud83d\udccb Texte<pre><code>```python\ndef dichoRecu(elem, liste, deb = None, fin = None): \n    if deb is None: \n        deb = 0 \n    if fin is None: \n        fin = len(liste)- 1 \n    if deb &gt; fin: \n        return False \n    2m = (deb + fin) // 2 \n    if liste[m] &gt; elem: \n        return dichoRecu(elem, liste, deb, m-1) \n    else: \n        return dichoRecu(elem, liste, m+1, fin)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME3/#exercice-3","title":"Exercice 3","text":"<p>bases de donn\u00e9es et langage SQL </p> <p>Partie A</p> <ol> <li>a. Avion </li> </ol> <p>b. <code>numA</code> est un attribut de la table Avion. </p> <ol> <li>a. 1     b. 3</li> </ol> <p>Partie B</p> <ol> <li> <p>BCN ne correspond \u00e0 aucune valeur de l\u2019attribut codeIAITA de la table Aeroport. Une contrainte d\u2019int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle n\u2019est pas respect\u00e9e </p> </li> <li> <p>La valeur <code>F-KI452</code> existe d\u00e9j\u00e0 pour la cl\u00e9 primaire numA. Une contrainte d\u2019int\u00e9grit\u00e9 de cl\u00e9 n\u2019est pas respect\u00e9e. </p> </li> <li> <p>\u00abenviron 200\u00bb est une cha\u00eene de caract\u00e8res. Or le domaine de nbPlaces est un entier. Une contrainte d\u2019int\u00e9grit\u00e9 de domaine n\u2019est pas respect\u00e9e. </p> </li> </ol> <p>Partie C</p> <ol> <li> <p>Elle efface tous les vols dont la date est ant\u00e9rieure au 11/01/2021. Ainsi les vol 1044, 1233, 1248 et 1462 vont \u00eatre effac\u00e9s. </p> </li> <li> <p><code>sql INSERT INTO Type VALUES (\"A310\", 250, \"Airbus\");</code></p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Type FROM Avion JOIN Vol ON Avion.numA = Vol.numAvion WHERE dateVol = \"10/01/2021\";\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ1ME3/#exercice-4","title":"Exercice 4","text":"<p>Structure de donn\u00e9es (programmation objet), langages et programmation </p> <p>Partie A</p> <ol> <li> <p>nom : string, non modifiable     occupation : tableau de bool\u00e9ens, modifiable dans reserver() </p> </li> <li> <p><code>assert 0 &lt; date and date &lt; 366, \"La date n'est pas valide\"</code></p> </li> <li> \ud83d\udccb Texte<pre><code>```python\ndef AnnulerReserver(self, date : int): \n    self._occupation[date- 1] = False \n```\n</code></pre> </li> </ol> <p>Partie B </p> <ol> <li> <p><code>GiteBN.ajouter_chambres('Ch1')</code></p> </li> <li> <p><code>python    def ajouter_chambres(self, nom-ch : str):      if nom_ch in self._chambres:          print(\"La chambre existe d\u00e9j\u00e0\")      else:          self._chambres.append(Chambre(nom_ch))</code></p> </li> <li> <p>a. Tableau d\u2019objets Chambre </p> </li> </ol> <p>b. 'Ch2' </p> <p>c. <code>get_nchambres()</code> renvoie un tableau des noms des chambres alors que <code>get_chambres()</code> renvoie un tableau des objets chambre. </p> <ol> <li>a. ['Ch2', 'Ch4'] </li> </ol> <p>b.    - En entr\u00e9e : date : int    - En sortie : list    - Les attributs dont elle a besoin : <code>self._chambres</code>    - Les m\u00e9thodes dont elle a besoin : <code>Chambre.get_occupation()</code> et <code>Chambre.get_nom()</code></p>"},{"location":"Annales/Corriges/21-NSIJ1ME3/#exercice-5","title":"Exercice 5","text":"<p>structures de donn\u00e9es (arbre, arbre binaire, pile) </p> <ol> <li>a. C\u2019est un arbre binaire (chaque n\u0153ud a au maximum 2 fils) dont la valeur du fils gauche est inf\u00e9rieure \u00e0 la valeur du p\u00e8re et la valeur du fils droit est sup\u00e9rieure \u00e0 la valeur du p\u00e8re.</li> </ol> <p>b. 15 </p> <p>c. 4</p> <ol> <li> <pre><code>graph TD\n    A(\"15\") --&gt; B(\"6\") \n    A --&gt; M(\"18\")\n    B --&gt; C(\"3\")\n    B --&gt; D(\"7\")\n    C --&gt; E(\"2\")\n    C --&gt; F(\"4\")\n    D --&gt; E(\" \")\n    D --&gt; F(\"13\")\n    F --&gt; G(\"9\")\n    F --&gt; J(\" \")\n    G --&gt; K(\" \")\n    G --&gt; L(\"12\")\n    M --&gt; I(\"17\")\n    M --&gt; J(\"20\")\n    I --&gt; K(\"16\")\n    I --&gt; O(\" \")</code></pre> </li> <li> <p>2, 3, 4, 6, 7, 9, 13, 15, 17, 18, 20. On obtient les valeurs en ordre croissant. </p> </li> <li> \ud83d\udccb Texte<pre><code>Recherche(A, x): \n    Si EstVide(A) alors Faux \n    Si Racine(A) = x alors Vrai \n    Si x&lt;Racine(A) alors Recherche(Sag(A), x) \n    Sinon Recherche(Sad(A), x)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2G11/","title":"21 NSIJ2G11","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ2G11/#21-nsij2g11-corrige","title":"21-NSIJ2G11 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : Etranger Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ2G11/#exercice-1","title":"Exercice 1","text":"<p>structures de donn\u00e9es : piles </p> <ol> <li> <p>La pile de gauche va contenir <code>|'7','8','9','10'&gt;</code> et celle de droite <code>|'V','D','R','A'&gt;</code> (4 premiers \u00e9l\u00e9ments de la liste \u00e0 gauche et 4 derniers \u00e0 droite). La liste m\u00e9lange va donc contenir <code>['10','A','9','R','8','D','7','V']</code> (on d\u00e9pile un \u00e9l\u00e9ment alternativement entre les deux piles).</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def liste_vers_pile(L):\n'''prend en param\u00e8tre une liste et renvoie une pile'''\n    N = len(L)\n    p_temp = Pile()\n    for i in range(N):\np_temp.empiler(L[i]) #(1)\nreturn p_temp\n</code></pre> <ol> <li>On utilise la m\u00e9thode <code>empiler</code> de l'interface d'une pile pour ajouter chaque \u00e9l\u00e9ment de la liste</li> </ol> </li> <li> <p>On obtient pour la pile de gauche :     3       2       1       Et pour celle de droite :     6     5     4</p> <p>Bug</p> <p>L'\u00e9nonc\u00e9 pr\u00e9cise que la m\u00e9thode est <code>empiler</code>, la fonction <code>partage</code> donn\u00e9e utilise <code>empile</code>.</p> </li> <li> <p>a. On peut par exemple faire la liste de sch\u00e9mas ci-dessous, en pr\u00e9cisant que la fusion se termine lorsque les piles sont vides (l'\u00e9nonc\u00e9 garantit que les deux piles ont le m\u00eame nombre d'\u00e9l\u00e9ments)</p> <p> </p> <p>b.  \ud83d\udc0d Script Python<pre><code>    def fusion(p1,p2):\n        liste = []\n        while note p1.est_vide():\n            liste.append(p1.depiler())\n            liste.append(p2.depiler())\n        return liste\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def affichage(p):\np_temp = p_copier()\nif p_temp.est_vide():\n        print('----')\n    else:\n        elt = p_temp.depiler()\n        print('|',elt,'|')\naffichage(p_temp) #(1)\n</code></pre> <ol> <li>On relance r\u00e9cursivement l'affichage sur le reste de la pile.</li> </ol> <p>Bug</p> <p>Dans le sujet, le <code>print</code> de l'avant derni\u00e8re ligne contient une parenth\u00e8se fermante de trop.</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2G11/#exercice-2","title":"Exercice 2","text":"<p>programmation python, tuples et liste </p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def mur(laby,lig,col):\n    return laby[lig][col]==\"1\"\n</code></pre> <p>Note</p> <p>La version ci-dessous est \u00e9quivalente, mais on teste si un bool\u00e9en vaut <code>True</code> et dans ce cas on renvoie <code>True</code>, sinon on renvoie <code>False</code>. Renvoyer directement le bool\u00e9en (c'est \u00e0 dire le r\u00e9sultat du test <code>laby[lig][col]==\"1\"</code> est plus concis). \ud83d\udc0d Script Python<pre><code>    def mur(laby,lig,col):\n    if laby[lig][col]==\"1\":\n        return True\n    else:\n        return False\n</code></pre></p> </li> <li> <p>a. Deux cases du labyrinthe sont adjacentes lorsqu'elles sont situ\u00e9es sur la m\u00eame ligne et la diff\u00e9rence entre les colonnes est de 1 ou alors lorsqu'elles sont situ\u00e9es sur la m\u00eame colonne et la diff\u00e9rence entre les lignes est 1. On peut donc calculer <code>d = (l1-l2)**2 + (c1-c2)**2</code>, si les cases sont adjacentes l'un des deux termes de cette somme vaut 0 et l'autre 1 (si la diff\u00e9rence est \\(-1\\), <code>d</code> vaut 1 \u00e0 cause de du carr\u00e9). Le test <code>d==1</code> permet donc de savoir si deux cases sont adjacentes.</p> <p>b.  \ud83d\udc0d Script Python<pre><code>def adjacentes(liste_cases):\n    for i in range(len(liste_cases)-1):\n        if not voisine(liste_cases[i],liste_cases[i+1]):\n            return False\n    return True\n</code></pre></p> </li> <li> <p>On rentre dans la boucle lorsque <code>i &lt; len(cases)</code>, l'indice <code>i</code> est incr\u00e9ment\u00e9 dans la boucle et donc finira par \u00eatre plus grand que la longueur du tableau <code>cases</code>.</p> <p>Note</p> <p>On rappelle que la m\u00e9thode rigoureuse pour montrer la terminaison d'un boucle est d'exhiber un variant de boucle c'est \u00e0 dire une quantit\u00e9 \\(v\\) enti\u00e8re positive qui d\u00e9cro\u00eet \u00e0 chaque passage dans la boucle. La propri\u00e9t\u00e9 math\u00e9matique  :</p> <p>Il n'existe pas de suite d'entiers positif strictement d\u00e9croissante</p> <p>permet alors de conclure \u00e0 la terminaison de la boucle (sinon les valeurs successives prises par \\(v\\) formeraient une suite d'entiers positif d\u00e9croissante, ce qui est impossible). Pour plus de d\u00e9tails, on peut consulter le cours de premi\u00e8re ou ce site</p> </li> <li> <p>D'apr\u00e8s l'\u00e9nonc\u00e9, le labyrinthe est carr\u00e9, on r\u00e9cup\u00e8re sa taille <code>n</code> puis on teste que les trois conditions suivantes sont r\u00e9unies :</p> <ul> <li>On d\u00e9marre bien de l'entr\u00e9e du labyrinthe (case <code>(0,0)</code>)</li> <li>On finit bien sur la sortie du labyritnhe (case <code>(n-1,n-1)</code>)</li> <li>Les cases de la liste sont adjacentes et non mur\u00e9es. \ud83d\udc0d Script Python<pre><code>def echappe(cases,laby):\n    n = len(laby)\n    return cases[0]==0 and cases[-1]==(n-1,n-1) and teste(cases,laby):     \n</code></pre></li> </ul> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2G11/#exercice-3","title":"Exercice 3","text":"<p>Conversion d\u00e9cimal/binaire, table de v\u00e9rit\u00e9, codages des caract\u00e8res </p> <ol> <li> <p>On utilise l'algorithme des divisions successives : \\(89 = \\textcolor{blue}{44} \\times 2 + \\textcolor{red}{1}\\) \\(44 = \\textcolor{blue}{22} \\times 2 + \\textcolor{red}{0}\\) \\(22 = \\textcolor{blue}{11} \\times 2 + \\textcolor{red}{0}\\) \\(11 = \\textcolor{blue}{5} \\times 2 + \\textcolor{red}{1}\\) \\(5 = \\textcolor{blue}{2} \\times 2 + \\textcolor{red}{1}\\) \\(2 = \\textcolor{blue}{1} \\times 2 + \\textcolor{red}{0}\\) \\(1 = \\textcolor{blue}{0} \\times 2 + \\textcolor{red}{1}\\) La suite des restes prise dans l'ordre inverse donne l'\u00e9criture du nombre en base 2 : \\(89_{10}=1011001_2\\).</p> <p>Note</p> <p>L'\u00e9nonc\u00e9 pr\u00e9cise qu'il faut d\u00e9tailler la m\u00e9thode utilis\u00e9e, signe qu'un r\u00e9sultat brut sans justification ne rapporte sans doute pas tous les points.</p> </li> <li> <p></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def xor_crypt(message,cle):\n    liste = []\n    for i in range(len(message)):\n        code_caractere = ord(message[i])\n        code_cle = ord(cle[i])\n        code_caractere_crypte = xor(code_caractere,code_cle)\n        liste.append(code_caractere_crypte)\n    return liste\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def genere_cle(mot,n):\n    nb_fois = n//len(mot)\n    reste = n%len(mot)\n    cle = nb_fois * mot\n    for i in range(reste):\n        cle += mot[i]\n    return cle\n</code></pre> <p>Note</p> <p>L'id\u00e9e utilis\u00e9e ici de chercher combien de fois le mot peut se r\u00e9p\u00e9ter sans atteindre la longueur <code>n</code> puis de compl\u00e9ter avec les premi\u00e8res lettres du mot pour atteindre la longueur <code>n</code>. Par exemple pour <code>genere_cle(\"YAK\",8)</code> on peut r\u00e9p\u00e9ter <code>YAK</code> 2 fois et il reste 2 lettres \u00e0 ajouter (\\(8 = 2\\times 3 + 2\\))</p> </li> <li> <p>La table de v\u00e9rit\u00e9 est :</p> \\(E_1\\) \\(E_2\\) \\(E_1 \\bigoplus E_2\\) \\((E_1 \\bigoplus E_2) \\bigoplus E_2\\) 0 0 0 0 0 1 1 0 1 0 1 1 1 1 0 1 <p>On constate qu'on a toujours : \\((E_1 \\bigoplus E_2) \\bigoplus E_2 = E_1\\). Ici les bits du message initial sont les \\(E_1\\) crypt\u00e9s \u00e0 l'aide d'un xor avec les bits de la cl\u00e9 (les \\(E_2\\)). C'est \u00e0 dire que \\(E_1 \\bigoplus E_2\\) sont les bits du message crypt\u00e9s. On peut revenir au message initial en cryptant de nouveau avec la m\u00eame cl\u00e9 puisqu'on vient de remarquer que \\((E_1 \\bigoplus E_2) \\bigoplus E_2 = E_1\\).</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2G11/#exercice-4","title":"Exercice 4","text":"<p>Base de donn\u00e9es </p> <ol> <li> <p>a. Une cl\u00e9 primaire doit identifier un enregistrement de fa\u00e7on unique, plusieurs personnes peuvent porter le m\u00eame nom de famille donc l'attribut <code>nom</code> de la table <code>licencies</code> ne peut pas servir de cl\u00e9 primaire.     b. L'attribut <code>id_licencie</code> peut servir de cl\u00e9 primaire, lorsque c'est un entier unique pour chaque enregistrement.</p> </li> <li> <p>a. Cette requ\u00eate renvoie les pr\u00e9noms et noms des licenci\u00e9s qui jouent dans l'\u00e9quipe des moins de 12 ans.</p> <p>b. Dans le cas d'une <code>*</code> la requ\u00eate renvoie tous les attributs de la table licenci\u00e9s donc <code>id_licencie, prenom, nom, annee_naissance, equipe</code></p> <p>c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT date FROM matchs WHERE lieu='domicile' AND equipe='V\u00e9t\u00e9rans'\n</code></pre></p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO licencies VALUES (287,'Jean','Lavenu',2001,'Hommes 2')\n</code></pre> <p>Note</p> <ul> <li>On peut se passer du nom des attributs car on ins\u00e8re tous les champs</li> <li>Attention \u00e0 bien mettre des guillemets pour les valeurs lorsqu'il s'agit de chaines de caract\u00e8res.</li> </ul> </li> </ol> <p>4. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE licencies SET equipe='V\u00e9t\u00e9rans' WHERE prenom='Joseph' AND nom='Cuviller'\n</code></pre></p> <p>5. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom FROM licencies\nJOIN matchs ON licencies.equipe = matchs.equipe\nWHERE matchs.adversaire = 'LSC' and matchs.date = '2021-06-19'\n</code></pre></p>"},{"location":"Annales/Corriges/21-NSIJ2G11/#exercice-5","title":"Exercice 5","text":"<p>programmation Python : commande d'un bandeau de diodes \u00e0 l'aide d'un raspberry </p> <ol> <li> <p>a. L'instruction <code>Obj_bandeau.get_pixel_rgb(1)</code>renvoie un tuple de trois entiers correspondant \u00e0 la couleur rgb de la led n\u00b01, c'est \u00e0 dire (0,0,255) car la couleur actuelle de la led 1 est le bleu.</p> <p>b. Cette instruction renvoie un entier correspondant \u00e0 la couleur rgb <code>(0,0,255)</code>, d'apr\u00e8s le tableau donn\u00e9 en annexe cet entier est <code>16711680</code>.</p> <p>c. La premi\u00e8re instruction r\u00e9cup\u00e8re la couleur de la led 0, donc <code>(255,0,0)</code> car cette led est rouge. La seconde instruction affiche le num\u00e9ro de couleur correspond qui (tableau de l'annexe) est <code>255</code></p> </li> <li> <p>a. On obtient un bandeau avec les 5 premi\u00e8res led bleues (<code>num_color=16711680</code>), les 5 suivantes blanches (<code>num_color=1677215</code>) et les 5 suivantes rouges (<code>num_color=255</code>) </p> <p>b. Les led dont les num\u00e9ros sont multiples de 3 (0,3,6,9 et 12) sont vertes (<code>num_color=32768</code>), les autres sont jaunes (<code>num_color=65535</code>) </p> </li> <li> <p>a. La m\u00e9thode <code>__init__</code> prend en param\u00e8tre un nombre entier de led et renvoie un objet de la classe <code>Bandeau</code> ayant ce nombre de led.</p> <p>b. Fixe les couleurs des led 6 et 7 \u00e0 bleu.</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2ME1/","title":"21 NSIJ2ME1","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#21-nsij2me1-corrige","title":"21-NSIJ2ME1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : M\u00e9tropole Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#exercice-1","title":"Exercice 1","text":"<p>abres et programmation orient\u00e9e objet </p>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#exercice-2","title":"Exercice 2","text":"<p>base de donn\u00e9es relationnelles </p>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#exercice-3","title":"Exercice 3","text":"<p>r\u00e9seaux et protocoles de routage </p>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#exercice-4","title":"Exercice 4","text":"<p>gestion des processus et des ressources </p>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#partie-a","title":"Partie A","text":"<ol> <li> <p>Si chaque programme s'ex\u00e9cute \u00e0 tour de r\u00f4le, apr\u00e8s la premi\u00e8re instruction de chaque programme les 3 ressources sont prises. Un interblocage se produit donc car chaque programme a besoin d'une ressource d\u00e9tenu par un autre pour continuer son ex\u00e9cution.</p> </li> <li> <p>On inverse l'ordre des demandes dans le programme 3. Ainsi c'est la table tra\u00e7ante qui est demand\u00e9 en premier, comme elle est d\u00e9tenue par le programme 1. Le programme 3 est bloqu\u00e9. Mais le programme 2 peut continuer car il dispose de sa seconde ressource (l'imprimante). Donc il peut s'ex\u00e9cuter et lib\u00e9rer ses ressources ce qui permet au programme 3 et 1 de terminer aussi.</p> </li> <li> <p>Le processus p1 sera dans l'\u00e9tat bloqu\u00e9, c'est donc la r\u00e9ponse b)</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#partie-b","title":"Partie B","text":"<ol> <li> <p>C'est la commande <code>ps -ef</code> c'est donc la r\u00e9ponse b)</p> </li> <li> <p>C'est l'identifiant 831</p> </li> <li> <p>C'est l'identifiant 6211</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2ME1/#exercice-5","title":"Exercice 5","text":"<p>structure de donn\u00e9es lin\u00e9aires </p>"},{"location":"Annales/Corriges/21-NSIJ2ME2/","title":"21 NSIJ2ME2","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ2ME2/#21-nsij2me2-corrige","title":"21-NSIJ2ME2 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : M\u00e9tropole candidats libres Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ2ME2/#exercice-1","title":"Exercice 1","text":"<p>bases de donn\u00e9es relationnelles et langage SQL </p> <ol> <li> <p>On ins\u00e8re deux entr\u00e9es dans lesquelles l'attribut <code>idEleve</code> est \u00e9gal \u00e0 <code>128</code>. Or cet attribut est la cl\u00e9 primaire de la table, il ne peut pas exister en doublon.</p> </li> <li> <p>Il s'agit de la cl\u00e9 \u00e9trang\u00e8re <code>idEleve</code> qui doit respecter la contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle.</p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM Livres\nWHERE auteur = 'Moli\u00e8re'\n</code></pre> </li> <li> <p>On compte les \u00e9l\u00e8ves de la table <code>Eleves</code> dont la classe est la <code>'T2'</code>.</p> </li> </ol> <p>5. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Emprunts\nSET dateRetour = '2020-09-30'\nWHERE idEmprunt = 640\n</code></pre></p> <ol> <li> <p>On r\u00e9cup\u00e8re les noms et pr\u00e9noms des \u00e9l\u00e8ves de la classe <code>'T2'</code> qui ont d\u00e9j\u00e0 emprunt\u00e9 un livre.</p> </li> <li> <p>On propose (en utilisant l'ISBN cit\u00e9 dans la question 5):</p> </li> </ol> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Eleves\nJOIN Emprunts ON Eleves.idEleves = Emprunts.idEleves\nWHERE Emprunts.isbn = 192\n</code></pre> Sans l'ISBN :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Eleves\nJOIN Emprunts ON Eleves.idEleves = Emprunts.idEleves\nJOIN Livres ON Livres.isbn = Emprunts.isbn\nWHERE Livres.titre = 'Les Mis\u00e9rables'\n</code></pre>"},{"location":"Annales/Corriges/21-NSIJ2ME2/#exercice-2","title":"Exercice 2","text":"<p>gestion des processus et des ressources par un syst\u00e8me d'exploitation </p> <p>1.a Un processus \u00e9lu est en cours d'ex\u00e9cution par le processeur actuellement.</p> <p>1.b. </p> <pre><code>flowchart LR\n    A(pr\u00eat) --&gt; B(\u00e9lu)\n    B --&gt; A\n    B --&gt; C(bloqu\u00e9)\n    C --&gt; A\n    B ---&gt; D(termin\u00e9)</code></pre> <p>2.a La file correspond au paradigme \" Premier entr\u00e9, premier sorti \".</p> <p>2.b. </p> \ud83d\udccb Texte<pre><code>![Frise compl\u00e9t\u00e9e](data/images-21-ME2-ex2/ex2.svg)\n</code></pre> <p>3.a. Il s'agit d'un probl\u00e8me d'interblocage car les deux processus verrouillent simultan\u00e9ment les fichiers 1 et 2.</p> <p>3.b. On \u00e9change simplement les deux premi\u00e8res lignes du programme 2 :</p> \ud83d\udccb Texte<pre><code>| Programme 1             | Programme 2             |\n| :---------------------- | :---------------------- |\n| Verrouiller fichier_1   | Verrouiller fichier_1   |\n| Calculs sur fichier_1   | Verrouiller fichier_2   |\n| Verrouiller fichier_2   | Calculs sur fichier_1   |\n| Calculs sur fichier_1   | Calculs sur fichier_2   |\n| Calculs sur fichier_2   | D\u00e9verrouiller fichier_1 |\n| Calculs sur fichier_1   | D\u00e9verrouiller fichier_2 |\n| D\u00e9verrouiller fichier_2 |                         |\n| D\u00e9verrouiller fichier_1 |                         |\n</code></pre>"},{"location":"Annales/Corriges/21-NSIJ2ME2/#exercice-3","title":"Exercice 3","text":"<p>arbres binaires de recherche et programmation orient\u00e9e objet </p> <p>1.a. La taille de l'arbre est 7.  </p> <p>1.b. La hauteur de l'arbre est 4.  </p> <p>2 <pre><code>graph TD\n    A(10) --&gt; B(5) \n    B --&gt; D(4)\n    B --&gt; E(8)\n    A --&gt; C(15)\n    C --&gt; F(12)\n    C --&gt; G(20)</code></pre></p> <p>3 <pre><code>graph TD\n    A(10) --&gt; B(8) \n    B --&gt; D(4)\n    D --&gt; D1(\" \")\n    D --&gt; D2(5)\n    B --&gt; E(\" \" )\n    E --&gt; E1(\" \")\n    E --&gt; E2(\" \")\n    A --&gt; C(20)\n    C --&gt; F(15)\n    C --&gt; G(\" \")\n    F --&gt; H(12)\n    F --&gt; J(\" \")\n    G --&gt; G1(\" \")\n    G --&gt; G2(\" \")\n    linkStyle 2 stroke-width:0px;\n    style D1 opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style E1 opacity:0;\n    style E2 opacity:0;\n    linkStyle 9 stroke-width:0px;\n    style G opacity:0;\n    linkStyle 11 stroke-width:0px;\n    style J opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style G1 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style G2 opacity:0;</code></pre></p> <p>4. \ud83d\udc0d Script Python<pre><code>def hauteur(self):\n    return self.racine.hauteur()\n</code></pre></p> <p>5. M\u00e9thode <code>taille</code>    de la classe <code>Noeud</code> : \ud83d\udc0d Script Python<pre><code>def taille(self):\n    if self.gauche is None and self.droit is None:\n        return 1\n    elif self.gauche is None:\n        return 1 + self.droit.taille()\n    elif self.droit is None:\n        return 1 + self.gauche.taille()\n    else:\n        return 1 + self.gauche.taille() + self.droit.taille()\n</code></pre></p> <p>M\u00e9thode <code>taille</code>    de la classe <code>Arbre</code> : </p> \ud83d\udc0d Script Python<pre><code>def taille(self):\n    return self.racine.taille()\n</code></pre> <p>6.a. La configuration minimale d'un arbre bien construit de hauteur \\(h\\) peut \u00eatre :</p> \ud83d\udccb Texte<pre><code>![image](data/ex3-6a.png){: .center}\n\nLa taille minimale ```min``` est donc \u00e9gale \u00e0 $2^{h-1}$.\n</code></pre> <p>6.b.  Intuitivement, un arbre est mal construit si sa hauteur est trop grande par rapport \u00e0 sa taille (trop \u00e9tir\u00e9).</p> <p>Donc un arbre est mal construit si sa taille est trop petite par rapport \u00e0 sa hauteur.</p> <p>Donc un arbre de taille \\(t\\) et de hauteur \\(h\\) est mal construit si \\(t &lt; 2^{h-1}\\), puisqu'on a d\u00e9montr\u00e9 que \\(2^{h-1}\\) \u00e9tait la taille minimale.</p> <p>Pour tester si un arbre est bien construit, on va donc juste v\u00e9rifier que \\(t \\geqslant 2^{h-1}\\) :</p> \ud83d\udc0d Script Python<pre><code>def bien_construit(self):\n    h = self.taille()\n    return self.taille() &gt;= 2**(h-1)\n</code></pre>"},{"location":"Annales/Corriges/21-NSIJ2ME2/#exercice-4","title":"Exercice 4","text":"<p>programmation et r\u00e9cursivit\u00e9 </p>"},{"location":"Annales/Corriges/21-NSIJ2ME2/#exercice-5","title":"Exercice 5","text":"<p>programmation </p> <ol> <li> <p>a Si les \u00e9l\u00e9ments du tableau sont tous positifs, il suffit d\u2019additionner tous les \u00e9l\u00e9ments du tableau pour obtenir la somme maximale (la sous-s\u00e9quence correspond \u00e0 l\u2019ensemble du tableau).</p> <p>b. Si les \u00e9l\u00e9ments du tableau sont tous n\u00e9gatifs, il suffit de prendre l\u2019\u00e9l\u00e9ment le plus grand du tableau (la sous-s\u00e9quence est r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment)</p> </li> <li> <p>a      \ud83d\udc0d Script Python<pre><code>def somme_sous_sequence(lst, i, j):\n    somme = 0\n    for ind in range(i,j+1):\n        somme = somme + lst[ind]\n    return somme\n</code></pre></p> <p>b.  Pour un tableau de 10 \u00e9l\u00e9ments, nous avons 55 comparaisons \\((10+9+8+7+6+5+4+3+2+1=55)\\).</p> <p>c.  \ud83d\udc0d Script Python<pre><code>def pgsp(lst):\n    n = len(lst)\n    somme_max = lst[0]\n    i_max = 0\n    j_max = 0\n    for i in range(n):\n        for j in range(i,n):\n            s = somme_sous_sequence(lst,i,j)\n            if s &gt; somme_max:\n                somme_max = s\n                i_max = i\n                j_max = j\n    return (somme_max, i_max, j_max)\n</code></pre></p> </li> <li> <p>a. </p> <p>b. \ud83d\udc0d Script Python<pre><code>def pgsp2(lst):\n    somme_max = [lst[0]]\n    for i in range (1,len(lst)):\n        if somme_max[i-1] &lt;= 0:\n            somme_max.append(lst[i])\n        else :\n            somme_max.append(lst[i]+somme_max[i-1])\n    return max(somme_max)\n</code></pre></p> <p>c. Cette solution est plus avantageuse, car la complexit\u00e9 en temps de l\u2019algorithme est en \\(O(n)\\) alors que dans le cas pr\u00e9c\u00e9dent il \u00e9tait en \\(O(n^2)\\).</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2ME3/","title":"21 NSIJ2ME3","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ2ME3/#21-nsij2me3-corrige","title":"21-NSIJ2ME3 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : M\u00e9tropole session de septembre Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ2ME3/#exercice-1","title":"Exercice 1","text":"<p>r\u00e9seau, protocoles de communication et de routages </p> <p>Partie  A :</p> <ol> <li> <p>Protocole </p> </li> <li> <p>a) \u00e9l\u00e9ment A : Routeur     b) \u00e9l\u00e9ment B : Switch M</p> </li> <li> Mat\u00e9riel Adresse IP Masque Pasrelle ... ... Poste 3 192.168.11.22 255.255.255.0 192.168.11.1 </li> </ol> <p>Partie B :</p> <ol> <li> <p>Les adresses IP des r\u00e9seaux directement connect\u00e9s au routeur R1 (m\u00e9trique \u00e9gale \u00e0 0) sont : 10.0.0.0, 172.16.0.0 et 192.168.0.0 </p> </li> <li> Adresse IP  destination Interface Machine ou Port 192.168.1.55 192.168.0.1 172.18.10.10 172.15.0.13 </li> <li> Routeur destination M\u00e9trique Route R2 0 R1-R2 R3 0 R1-R3 R4 1 R1-R2-R4 R5 1 R1-R3-R5 R6 1 R1-R3-R6 R7 2 R1-R2-R4-R7 </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2ME3/#exercice-2","title":"Exercice 2","text":"<p>structure de donn\u00e9es, langages et programmation </p> <ol> <li> <p>La liste propos\u00e9e n\u2019est pas valide car la liaison <code>[\u201cLuchon\u201d, \u201cMuret\u201d]</code> n\u2019est pas directe.  </p> </li> <li> <p>a.    \ud83d\udc0d Script Python<pre><code>liaisonsJoueur2 = [[\"Toulouse\", \"Castres\"], \n[\"Toulouse\", \"Castelnaudary\"], \n[\"Castres\", \"Mazamet\"], \n[\"Castelnaudary\", \"Carcassonne\"], \n[\"Tarbes\", \"St Gaudens\"]]\n</code></pre></p> </li> </ol> <p>b.    \ud83d\udc0d Script Python<pre><code>DictJoueur2 = { \"Toulouse\" : [ \"Castres\",  \"Castelnaudary\"], \n\"Castres\" : [\"Toulouse\",  \"Mazamet\"], \n\"Castelnaudary\" : [\"Toulouse\",  \"Carcassonne\"], \n\"Mazamet\" : [\"Castres\"], \n\"Carcassonne\" : [\"Castelnaudary\"], \n\"Tarbes\" : [\"St Gaudens\"], \n\"St Gaudens\" : [\"Tarbes\"]\n}\n</code></pre></p> <ol> <li> <p>a. <code>assert len(listeLiaisons)!= 0, \"la liste est vide\"</code></p> <p>b. R\u00e9sultat de l\u2019ex\u00e9cution de la fonction <code>construireDict</code> :  \ud83d\udc0d Script Python<pre><code>{'Toulouse': ['Muret', 'Montauban'], \n'Gaillac': ['St Sulpice'], \n'Muret': ['Pamiers']}\n</code></pre> La  fonction g\u00e8re  la liaison A-B mais pas la  liaison B-A. Par exemple, pour la cl\u00e9 \u201cToulouse \u201c on retrouve bien \u201cMuret\u201d dans le tableau alors que pour la cl\u00e9 \u201cMuret\u201d, on ne retrouve pas \u201cToulouse \u201c dans le tableau. </p> <p>c. <code>python def construireDict(listeLiaisons):      assert len(listeLiaisons)!= 0, \"la liste est vide\"      Dict={}      for liaison in listeLiaisons :          villeA = liaison[0]          villeB = liaison[1]          if not villeA in Dict.keys() :              Dict[villeA]=[villeB]          else :              destinationsA = Dict[villeA]              if not villeB in destinationsA :                  destinationsA.append(villeB)          if not villeB in Dict.keys() :              Dict[villeB]=[villeA]          else :              destinationsB = Dict[villeB]              if not villeA in destinationsB :                  destinationsB.append(villeA)      return Dict</code></p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2ME3/#exercice-3","title":"Exercice 3","text":"<p>base de donn\u00e9es </p> <ol> <li> <p>Pour effectuer des requ\u00eates sur une base de donn\u00e9es relationnelle, on utilise le langage SQL</p> </li> <li> <p>a.     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>ATOME (Z : INT, nom : TEXT, Sym : TEXT, L : INT, C : INT, masse_atom : FLOAT) VALENCE (Col : INT, Couche : TEXT)\n</code></pre></p> </li> </ol> <p>b. l\u2019attribut Z peut jouer le r\u00f4le de cl\u00e9 primaire car il existe un Z unique  pour chaque \u00e9l\u00e9ment chimique.    l\u2019attribut C va jouer le r\u00f4le de cl\u00e9 \u00e9trang\u00e8re car cet attribut va  permettre d\u2019\u00e9tablir une \u201cliaison\u201d avec l\u2019attribut Col de la table VALENCE </p> <p>c.     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>ATOME (Z : INT, nom : TEXT, Sym : TEXT, L : INT, #C : INT, masse_atom : FLOAT) VALENCE (Col : INT, Couche : TEXT)\n</code></pre></p> <ol> <li>a. On  obtient la liste de nom d\u2019atomes suivante :    aluminium, argon, chlore, magnesium, sodium, phosphore,  soufre, silicium </li> </ol> <p>b. On obtient la liste des colonnes :    1, 2 ,3 ,4 ,5, 6, 7, 8, 9, 10, 11,  12, 13, 14, 15, 16, 17, 18 </p> <ol> <li>a.    \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, masse_atom FROM ATOMES\n</code></pre></li> </ol> <p>b.    \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Sym FROM ATOMES INNER JOIN VALENCE ON ATOMES.C = VALENCE.Col WHERE Couche = 's' </code></pre></p> <p>5. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE ATOMES SET mass_atom = 39.948 WHERE nom = 'argon'\n</code></pre></p>"},{"location":"Annales/Corriges/21-NSIJ2ME3/#exercice-4","title":"Exercice 4","text":"<p>programmation orient\u00e9e objet, langages et programmation </p> <ol> <li> <p>a voici les 2 assertions dans la  m\u00e9thode init :      \ud83d\udc0d Script Python<pre><code>class Yaourt: \n    def __init__(self,arome,duree): \n        assert arome in ['fraise', 'abricot', 'vanille', 'aucun'], \"Cet arome est inconnu\" \n        assert duree &gt; 0 and duree &lt; 366, \"la dur\u00e9e doit \u00eatre comprise entre 1 et  365\" \n        self.__arome = arome \n        self.__duree = duree \n        if arome == 'aucun': \n            self.__genre = 'nature' \n        else: \n            self.__genre = 'aromatise'\n</code></pre></p> <p>b. Le genre associ\u00e9 \u00e0 Mon_Yaourt sera aromatise </p> <p>c. Voici la m\u00e9thode GetArome :  \ud83d\udc0d Script Python<pre><code>def GetArome(self): \n    return self.__arome\n</code></pre></p> </li> </ol> <p>2. \ud83d\udc0d Script Python<pre><code>def SetArome(self, arome): \n    assert arome in ['fraise', 'abricot', 'vanille', 'aucun'], \"Cet arome est inconnu\" \n    self.__arome = arome \n    self.__SetGenre(arome)\n</code></pre></p> <ol> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>def empiler(p, Yaourt): \n    p.append(Yaourt) \n    return p\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def depiler(p): \n    return p.pop()\n</code></pre></p> <p>c. \ud83d\udc0d Script Python<pre><code>def estVide(p): \n    return len(p)==0\n</code></pre></p> <p>d. 24 False</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2ME3/#exercice-5","title":"Exercice 5","text":"<p>traitement de donn\u00e9es en table (CSV), langages et programmation\" </p> <ol> <li>a. Un fichier CSV est un fichier au format \u201ctexte\u201d permettant de \u201cstocker\u201d des donn\u00e9es tabul\u00e9es.  Les donn\u00e9es sont s\u00e9par\u00e9es par des virgules,  d\u2019o\u00f9 l\u2019acronyme CSV : Comma Separated Values </li> </ol> <p>b.     - prenom est de type string     - la r\u00e9ponse renvoy\u00e9e par la fonction est aussi de type string</p> <ol> <li>a. <code>import csv</code></li> </ol> <p>b. <code>assert isinstance(prenom, str)</code></p> <p>c.    <code>python    def genre(prenom):      liste_M = ['f', 'd', 'c', 'b', 'o', 'n', 'm', 'l', 'k','j', '\u00e9', 'h', 'w', 'v', 'u', 't', 's', 'r','q', 'p', 'i', '\u00fe', 'z', 'x', '\u00e7', '\u00f6', '\u00e3','\u00e2', '\u00ef', 'g']      liste_F = ['e', 'a', '\u00e4', '\u00fc', 'y', '\u00eb']      if not isinstance(prenom, str):          return \"erreur, le pr\u00e9nom doit \u00eatre une cha\u00eene de caract\u00e8res\"      if prenom[len(prenom)-1].lower() in liste_M :          return \"M\"      elif prenom[len(prenom)-1].lower() in liste_F :          return \"F\"      else :          return \"I\"</code></p> <ol> <li>modification de la fonction genre (de la ligne 7 \u00e0 la ligne 13)  :      \ud83d\udc0d Script Python<pre><code>term = prenom[len(prenom)-2]+prenom[len(prenom)-1] \nif term.lower() in liste_M2 : \n    return \"M\" \nelif term.lower() in liste_F2 : \n    return \"F\" \nelse : \n    return \"I\"\n</code></pre></li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/","title":"21 NSIJ2PO1","text":"<p> Index des sujets 2021 </p>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#21-nsij2po1-corrige","title":"21-NSIJ2PO1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2021 Centre : Polyn\u00e9sie Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#exercice-1","title":"Exercice 1","text":"<p>algorithmique et programmation (algorithmes de tri) </p>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#partie-a","title":"Partie A","text":"<ol> <li> <p>Les affichages obtenues seront :</p> <ul> <li><code>8</code> car <code>len(notes)</code> est le nombre d'\u00e9l\u00e9ments de la liste <code>notes</code></li> <li><code>[8,7,18,16,12,9,17,3]</code> car on affiche la liste de d\u00e9part en ayant remplac\u00e9 la valeur situ\u00e9e \u00e0 l'indice 3 par 16.</li> </ul> </li> <li> <p>Pour afficher les \u00e9l\u00e9ments d'indice 2 \u00e0 4 de la liste on peut \u00e9crire : \ud83d\udc0d Script Python<pre><code>for i in range(2,5):\n    print(note[i])\n</code></pre></p> <p>Note</p> <p>L'utilisation d'une boucle ne s'impose pas, on aurait pu \u00e9crire <code>print(note[2],note[3],note[4])</code> ou encore utiliser les slices : <code>print(note[2:5])</code> (bien qui cette solution affiche une liste compos\u00e9e des trois \u00e9l\u00e9ments demand\u00e9s)</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#partie-b","title":"Partie B","text":"<ol> <li> <p>Code compl\u00e9t\u00e9 : \ud83d\udc0d Script Python<pre><code>def tri_insertion(liste):\n\"\"\" trie par insertion la liste en param\u00e8tre \"\"\"\n    for indice_courant in range(1,len(liste)):\n        element_a_inserer = liste[indice_courant]\n        i = indice_courant - 1\nwhile i &gt;= 0 and liste[i] &gt; element_a_inserer :\nliste[i+1] = liste[i]\ni = i - 1\n        liste[i + 1] = element_a_inserer\n</code></pre></p> </li> <li> <p>Apr\u00e8s le premier passage : <code>[7, 8, 18, 14, 12, 9, 17, 3]</code></p> </li> <li> <p>Apr\u00e8s le troisi\u00e8me passage : <code>[7, 8, 14, 18, 12, 9, 17, 3]</code></p> <p>Note</p> <p>On rappelle que le principe de l'algorithme est d'ins\u00e9rer au passage \\(n\\) le n-i\u00e8me \u00e9l\u00e9ment de la liste dans le d\u00e9but de la liste (d\u00e9j\u00e0 tri\u00e9e).</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#partie-c","title":"Partie C","text":"<ol> <li>Cet algorithme est it\u00e9ratif car un tri fusion fait appel lui-m\u00eame </li> <li>Si les deux tas sont d\u00e9j\u00e0 tri\u00e9s, il suffit de comparer les cartes situ\u00e9s  sur le dessus de chaque tas et de prendre la plus petite.</li> <li> <p>Code compl\u00e9t\u00e9 : \ud83d\udc0d Script Python<pre><code>from math import floor\n\ndef tri_fusion (liste, i_debut, i_fin):\n\"\"\" trie par fusion la liste en param\u00e8tre depuis 4 i_debut jusqu\u2019\u00e0 i_fin \"\"\"\n    if i_debut &lt; i_fin:\n        i_partage = floor((i_debut + i_fin) / 2)\ntri_fusion(liste, i_debut, i_partage )\ntri_fusion(liste, i_partage+1 , i_fin)\nfusionner(liste, i_debut , i_partage , i_fin)\n</code></pre></p> <p>Note</p> <p>L'utilisation de la fonction <code>floor</code> ne s'impose pas, puisque'on travaille sur des entiers  <code>i_partage</code> se d\u00e9finit sans recours \u00e0 la biblioth\u00e8que <code>math</code> avec <code>i_partage = (i_debut+i_fin)//2</code>.</p> </li> <li> <p>Cette ligne permet d'importer la m\u00e9thode <code>floor</code> \u00e0 partir du module <code>math</code>.</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#partie-d","title":"Partie D","text":"<ol> <li> <p>C'est l'algorithme du tri fusion qui a \u00e9t\u00e9 utilis\u00e9e. Chaque \u00e9tape repr\u00e9sente la fusion de  listes d\u00e9j\u00e0 tri\u00e9es.</p> </li> <li> <p>Le tri par insertion a une complexit\u00e9 en \\(\\mathcal{O}(n)\\) dans le pire des cas et le tri fusion une complexit\u00e9 en \\(\\mathcal{O}(n\\,\\log_2(n))\\).</p> </li> <li> <p>Dans un tri par insertion, on effectue un maximum de <code>n</code> insertions demandant chacune au plus <code>n</code> op\u00e9rations. Cette algorithme a donc une complexit\u00e9 quadratique. Pour le tri fusion, on note \\(C(n)\\) le co\u00fbt en nombre d'op\u00e9rations pour trier une liste de taille \\(n\\). Pour trier une liste de taille \\(n\\), s\u00e9parer les deux listes (co\u00fbt de \\(n\\) op\u00e9rations), trier deux listes de taille \\(\\dfrac{n}{2}\\) et les fusionner (co\u00fbt de \\(n\\) op\u00e9rations). Donc \\(C(n) = 2\\,C(\\dfrac{n}{2}) + 2n\\), on montre que cela implique un co\u00fbt en \\(\\mathcal{O}(n\\,\\log_2(n))\\).</p> <p>Attention</p> <p>Question difficile et \u00e0 la limite du programme de nsi qui par ailleurs parle de co\u00fbt plut\u00f4t que de complexit\u00e9.</p> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#exercice-2","title":"Exercice 2","text":"<p>donn\u00e9es en table, bases de donn\u00e9es </p>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#exercice-3","title":"Exercice 3","text":"<p>arbres binaires de recherche et programmation orient\u00e9e objet </p>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#partie-a-etude-dun-exemple","title":"Partie A : Etude d'un exemple","text":"<ol> <li>Le noeud racine a pour valeur 5, et ses fils sont 2 et 7.</li> <li>Ce sont les noeuds 5,2 et 3.</li> <li>Arbre obtenu apr\u00e8s l'ajout de la valeur 6 : <pre><code>        graph TD\n        N5[\"5\"] --&gt; N2[\"2\"]\n        N5 --&gt; N7[\"7\"]\n        N2 --&gt; V1[\" \"]\n        N2 --&gt; N3[\"3\"]\n        N7 --&gt; N6[\"6\"]\n        N7 --&gt; N8[\"8\"]\n        style V1 fill:#FFFFFF, stroke:#FFFFFF\n        style N6 fill:#DD4444\n        linkStyle 2 stroke:#FFFFFF,stroke-width:0px\n        linkStyle 4 stroke:#FF0000</code></pre></li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#partie-b-implementation-en-python","title":"Partie B : Impl\u00e9mentation en Python","text":"<ol> <li> <p>La fonction <code>__init__</code>  permet  de  cr\u00e9er un objet de type abr, par d\u00e9faut c'est l'arbre binaire vide (<code>valeur=None</code>) mais on peut pr\u00e9ciser une valeur pour le noeud racine en modifiant ce param\u00e8tre.</p> </li> <li> <p>Si on ajoute un \u00e9l\u00e9ment d\u00e9j\u00e0 pr\u00e9sent dans l'arbre, alors il ne se passe rien. En effet, dans la m\u00e9thode <code>insereElement</code> le cas <code>e==self.valeur</code> n'est pas trait\u00e9.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>arbre = ABR(5)\narbre.insereElement(2)\narbre.insereElement(3)\narbre.insereElement(7)\narbre.insereElement(8)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#partie-c-tri-par-arbre-binaire-de-recherche","title":"Partie C : Tri par arbre binaire de recherche","text":"<ol> <li> <p>C'est le parcours infixe dans lequel on liste la valeur d'un noeud entre les valeurs de sons sous arbre gauche et les valeurs de son sous arbre droit.</p> </li> <li> <p>On sait que les tri par insertion et par s\u00e9lection ont tous les deux une complexit\u00e9 quadratique. Dans ce nouvel algorithme :</p> <ul> <li>l'insertion d'une valeur dans l'arbre a une complexit\u00e9 logarithme (semblable \u00e0 celle d'une recherche dichotomique)</li> <li>donc l'insertion des \\(n\\) valeurs a une complexit\u00e9  en \\(\\mathcal{O}(n\\log(n))\\)</li> <li>Une fois les insertions effectu\u00e9es le parcours a une complexit\u00e9 lin\u00e9aire La complexit\u00e9 de ce nouvel algorithme est donc en \\(\\mathcal{O}(n\\log(n))\\) (parfois appel\u00e9 complexit\u00e9 pseudo lin\u00e9aire) et est donc meilleur que la complexit\u00e9 quadratique des tris par selection ou par insertion.</li> </ul> </li> </ol>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#exercice-4","title":"Exercice 4","text":"<p>routage, architecture mat\u00e9rielle </p>"},{"location":"Annales/Corriges/21-NSIJ2PO1/#exercice-5","title":"Exercice 5","text":"<p>donn\u00e9es en table, bases de donn\u00e9es </p>"},{"location":"Annales/Corriges/22-NSIJ1AN1%20copy/","title":"Macro Rendering Error","text":"<p>File: <code>Annales/Corriges/22-NSIJ1AN1 copy.md</code></p> <p>UndefinedError: 'repere_sujet' is undefined</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 1, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 904, in corrige_exobac\n    annee = 2000 + int(repere[0:2])\njinja2.exceptions.UndefinedError: 'repere_sujet' is undefined\n</code></pre>"},{"location":"Annales/Corriges/22-NSIJ1AN1/","title":"22 NSIJ1AN1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1AN1/#22-nsij1an1-corrige","title":"22-NSIJ1AN1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Am\u00e9rique du nord Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1AN1/#exercice-1","title":"Exercice 1","text":"<p>bases de donn\u00e9es relationnelles et langage SQL </p> <ol> <li>a. La relation Sport a pour cl\u00e9 primaire le couple d\u2019attribut (nomSport, nomSation) et pour cl\u00e9 \u00e9trang\u00e8re l\u2019attribut nomStation.      b.  <ul> <li>contrainte d\u2019int\u00e9grit\u00e9 de domaine : l\u2019attribut prix est de type nombre entier  </li> <li>contrainte d\u2019int\u00e9grit\u00e9 de relation : chaque couple d\u2019attributs (nomSport, nomSation) doit \u00eatre unique.  </li> <li>contrainte d\u2019int\u00e9grit\u00e9 de r\u00e9f\u00e9rence : chaque valeur de l\u2019attribut nomStation doit correspondre aux valeurs de l\u2019attribut nomStation de la relation Station   </li> </ul> </li> <li> <p>a. Une requ\u00eate d\u2019insertion a \u00e9t\u00e9 utilis\u00e9e \u00e0 la place d\u2019une requ\u00eate de mise \u00e0 jour. L\u2019entr\u00e9e avec le couple (\u201cplanche \u00e0 voile\u201d, \u201cLa tramontane catalane\u201d) existe d\u00e9j\u00e0 dans la relation Sport, d\u2019o\u00f9 l\u2019erreur (rappel :  chaque couple d\u2019attributs (nomSport, nomSation) doit \u00eatre unique).           Requ\u00eate correcte : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Sport SET prix = 1350 WHERE nomSport = \"planche \u00e0 voile\" AND nomSation = \"La tramontane catalane\"\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Station VALUES (\"Soleil Rouge\", \"Bastia\", \"Corse\")\n</code></pre> et  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Sport VALUES (\"plong\u00e9e\", \"Soleil Rouge\", 900)\n</code></pre></p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT mail FROM Client\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nomStation FROM Sport WHERE nomSport = \"plong\u00e9e\"\n</code></pre></p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Station.ville, Station.nomStation FROM Station JOIN Sport ON Station.nomStation = Sport.nomStation WHERE Sport.nomSport = \"plong\u00e9e\"\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*) FROM Sejour JOIN Station ON Sejour.nomStation = Station.nomStation WHERE Station.region = \"Corse\" AND Sejour.annee = 2020\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AN1/#exercice-2","title":"Exercice 2","text":"<p>r\u00e9seaux et protocoles de routage </p> <ol> <li>paquet de donn\u00e9es : R2 \u2192 R1 \u2192 R4 \u2192 R7  </li> <li> <p>accus\u00e9 de r\u00e9ception : R7 \u2192 R4 \u2192 R3 \u2192 R2 </p> </li> <li> <p>a. Dans le cas d\u2019une panne du routeur R4 le groupe de routeur (R1, R2, R3) n\u2019est plus capable d\u2019atteindre le groupe de routeur (R5, R6, R7)     b.On pourrait, entre autre, \u00e9tablir une liaison entre le routeur R1 et R6.  </p> </li> <li> <p>a.Table de routage R8  </p> Destination Lien Distance R1 R2 2 R2 R2 1 R3 R2 2 R4 R6 2 R5 R6 2 R6 R6 1 R7 R6 2 <p>b.Table de routage R2  </p> Destination Lien Distance R1 R1 1 R3 R3 1 R4 R1 2 R5 R3 3 R6 R8 2 R7 R1 3 R8 R8 1 </li> <li> <p>a.  </p> <ul> <li>Bande passante Fast Ethernet = 108b/s soit 100 Mb/s  </li> <li>Bande passante Ethernet = 108/ 107= 10  </li> </ul> <p>b. R2 \u2192 R3 \u2192 R4 \u2192 R7 \u2192 R6 \u2192 R5 avec un co\u00fbt \u00e9gale \u00e0 87 (65+10+1+1+10). Tous les autres trajets entre R2 et R5 ont un co\u00fbt sup\u00e9rieur (\u00e0 faire)</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AN1/#exercice-3","title":"Exercice 3","text":"<p>abres binaires de recherche et algorithmes associ\u00e9s </p> <ol> <li> <p>a. La hauteur de l\u2019arbre est de 3     b. La valeur bool\u00e9enne de l\u2019expression est True     c. <pre><code>    graph TD\n    A[\"Italie\"] --&gt; B[\"France\"]\n    A --&gt; C[\"Suede\"]\n    B --&gt; D[\"Autriche\"]\n    B --&gt; E[\"Hongrie\"]\n    E --&gt; V3[\" \"]\n    E --&gt; V4[\" \"]\n    C --&gt; F[\"Norvege\"]\n    C --&gt; V1[\" \"]\n    D --&gt; H[\"Allemagne\"]\n    D --&gt; V2[\" \"]\n    F --&gt; G[\"Luxembourg\"]\n    F --&gt; K[\"Portugal\"]\n    style V1 fill:#FFFFFF, stroke:#FFFFFF\n    style V2 fill:#FFFFFF, stroke:#FFFFFF\n    style V3 fill:#FFFFFF, stroke:#FFFFFF\n    style V4 fill:#FFFFFF, stroke:#FFFFFF\n    linkStyle 4 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 5 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 7 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 9 stroke:#FFFFFF,stroke-width:0px</code></pre></p> </li> <li> <p>parcours en largeur :  \u201cItalie\u201d - \u201cFrance\u201d - \u201cSuede\u201d - \u201cAutriche\u201d - \u201cHongrie\u201d - \u201cNorvege\u201d  </p> </li> <li> \ud83d\udc0d Script Python<pre><code>def recherche(arb, val): \n\"\"\"la fonction renvoie True si val est dans l'arbre et False dans le cas contraire\"\"\" \n    if est_vide(arb): \n        return False \n    if val == racine(arb): \n        return True \n    if val &lt; racine(arb): \n        return recherche(gauche(arb), val) \n    else : \n        return recherche(droit(arb), val)\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def taille(arb): \n    if est_vide(arb): \n        return 0 \n    else : \n        return 1 + taille(gauche(arb)) + taille(droit(arb))\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AN1/#exercice-4","title":"Exercice 4","text":"<p>cha\u00eenes de caract\u00e8res, tableau et programmation de base en Python </p> <ol> <li>a. Proposition 3     b.      \ud83d\udc0d Script Python<pre><code>txt[0] : b \ntxt[taille-1] : r \ninterieur : onjou\n</code></pre></li> <li>On peut tester un cas o\u00f9 la fonction doit renvoyer <code>True</code> (exemple : <code>palindrome(\u201cBOB\u201d)</code> et un cas o\u00f9 la fonction doit renvoyer <code>False</code> (exemple : <code>palindrome(\u201cBONJOUR\u201d)</code>)  </li> <li> \ud83d\udc0d Script Python<pre><code>def palindrome(txt): \n    taille = len(txt) \n    if taille &lt; 2: \n        return True \n    i = 0 \n    j = taille - 1 \n    while i &lt; j : \n        if txt[i] != txt[j]: \n            return False \n        i = i + 1 \n        j = j - 1 \n    return True\n</code></pre> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>def complementaire(txt): \n    c = \"\" \n    for l in txt : \n        if l == \"A\": \n            c = c + \"T\" \n        if l == \"T\": \n            c = c + \"A\" \n        if l == \"G\": \n            c = c + \"C\" \n        if l == \"C\": \n            c = c + \"G\" \n    return c\n</code></pre></p> <p>b. La chaine \u201cGATCGT\u201d n\u2019est pas palindromique, car la concat\u00e9nation donne GATCGTCTGCA qui n\u2019est pas un palindrome. c.  \ud83d\udc0d Script Python<pre><code>def est_palindromique(txt): \n    comp = complementaire(txt) \n    conc = txt+comp \n    return palindrome(conc)\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AN1/#exercice-5","title":"Exercice 5","text":"<p>files, tableaux et algorithmes associ\u00e9s </p> <ol> <li> <p>a. Proposition 2     b.      \ud83d\udc0d Script Python<pre><code>f = creer_file_vide() \nenfiler(f, 15) \nenfiler(f, 17) \nenfiler(f, 14)\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def longueur_file(F): \n    G = creer_file_vide() \n    n = 0 \n    while not(est_vide(F)): \n        v = defiler(F) \n        n = n + 1 \n        enfiler(G, v) \n    while not(est_vide(G)): \n        v = defiler(G) \n        enfiler(F, v) \n    return n\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def variations(F): \n    taille = longueur_file(F) \n    if taille == 1 : \n        return [] \n    else: \n        tab = [0 for k in range(taille - 1)]\n        element1 = defiler(F) \n        for i in range(taille - 1): \n            element2 = defiler(F) \n            tab[i]=element2 - element1 \n            element1 = element2 \n    return tab\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def nombre_baisses(tab): \n    mini = tab[0] \n    nbr = 0 \n    for v in tab: \n        if v &lt; 0: \n            nbr = nbr + 1 \n        if v &lt; mini: \n            mini = v \n    if nbr == 0: \n        return (0,0) \n    else: \n        return (nbr, mini)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AS1/","title":"22 NSIJ1AS1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1AS1/#22-nsij1as1-corrige","title":"22-NSIJ1AS1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Am\u00e9rique du sud Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1AS1/#exercice-1","title":"Exercice 1","text":"<p>bases de donn\u00e9es </p> <ol> <li> <p>Une cl\u00e9 primaire doit \u00eatre unique pour chaque enregistrement, donc :</p> <ul> <li><code>id_mere</code> ne peut pas servir de cl\u00e9 primaire pusiqu'une m\u00eame femme peut avoir plusieurs enfants, par exemple dans l'extrait de table fourni, la m\u00e8re d'<code>idMere</code> 13861 appara\u00eet deux fois.</li> <li><code>(date, rang)</code> peut servir de cl\u00e9 primaire, en effet pour un jour donn\u00e9, le rang de naissance est unique.</li> <li><code>(poids,taille)</code> ne peut pas servir de cl\u00e9 primaire puisque deux b\u00e9b\u00e9s diff\u00e9rents peuvent \u00eatre n\u00e9s avec le m\u00eame poids et la m\u00eame taille.</li> </ul> </li> <li> <p>Une cl\u00e9 \u00e9trang\u00e8re doit \u00eatre toujours pr\u00e9sente en tant que cl\u00e9 primaire dans la table qu'elle r\u00e9f\u00e9rence. Ici, la cl\u00e9 \u00e9trang\u00e8re <code>idMere</code> doit donc \u00eatre pr\u00e9sente en tant que cl\u00e9 primaire dans la table <code>Patientes</code>. La requ\u00eate \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELETE FROM Patientes WHERE numPatiente = 13858;\n</code></pre> produit donc une erreur, car dans la table <code>Naissances</code>, un enregistrement ayant pour <code>idMere</code> la valeur <code>13858</code> existe.</p> <p>Note</p> <p>De mani\u00e8re moins formelle, dans ce sch\u00e9ma de base de donn\u00e9es, un b\u00e9b\u00e9 (enregistrement de <code>Naissances</code>) \u00e0 n\u00e9cessairement une m\u00e8re (enregistrement de <code>Patientes</code>). On ne peut donc pas supprimer un enregistrement de <code>Patientes</code> qui correspond \u00e0 une naissance.</p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Patientes VALUES(13862,\"B\u00e9langer\",\"Ninette\",\"La Rochelle\");\n</code></pre> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Naissances SET prenom = \"Laurette\" WHERE date = \"01/03/2022\" and rang = 1;\n</code></pre> <p>Note</p> <p>On modifie le pr\u00e9nom en s\u00e9lectionnant le b\u00e9b\u00e9 par sa date et son rang de naissance (qui peut servir de cl\u00e9 primaire d'apr\u00e8s la question 1).</p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom,prenoms FROM Patientes\nWHERE commune = \"Aigrefeuille d'Aunis\"\n</code></pre> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT AVG(poids) FROM Naissances\nJOIN TypesAccouchement ON TypesAccouchement.idAcc = Naissances.acc\nWHERE TypesAccouchement.libelleAcc = \"c\u00e9sarienne\"\n</code></pre> </li> <li> <p>Cette requ\u00eate renvoie :</p> </li> </ol> nom prenom Berthelot Michelle Samson Marine Baug\u00e9 Ga\u00eblle <p>C'est \u00e0 dire les noms et pr\u00e9noms des patientes ayant eu un accouchement de type 1.</p>"},{"location":"Annales/Corriges/22-NSIJ1AS1/#exercice-2","title":"Exercice 2","text":"<p>programmation et algorithmes de tri </p> <p>Note</p> <p>Un patient <code>p</code> est repr\u00e9sent\u00e9 par un tuple contenant son identifiant et son ordre de priorit\u00e9. Donc <code>p[0]</code> est l'identifiant et <code>p[1]</code> la priorit\u00e9.</p> <ol> <li> \ud83d\udc0d Script Python<pre><code>attente.append((50,4))\n</code></pre> </li> <li> <p>a. C'est le tri par s\u00e9lection (\u00e0 chaque passage dans la boucle <code>for i in range(len(attente)</code> on recherche le patient le plus prioritaire \u00e0 partir du i\u00e8me et on le place en position <code>i</code>)</p> <p>Bug</p> <p>la fonction <code>tri</code> modifie en place la liste <code>attente</code> mais ne renvoie rien contrairement \u00e0 ce qui est indiqu\u00e9 dans l'\u00e9nonc\u00e9</p> <p>b. La complexit\u00e9 en temps des tris par insertion et par s\u00e9lection est quadratique : \\(\\mathcal{O}(n^2)\\).</p> </li> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>def quitte(attente):\n    return [patient from attente if patient[1]!=1]\n</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>def maj(attente):\n    return [(patient[0],patient[1]-1) for patient in attente]\n</code></pre></p> </li> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>def priorite(attente,p):\n    for patient in attente:\n        if patient[0]==p:\n            return patient[1]\n</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>def revise(attente,p):\n    nouvelle = []\n    n = priorite(attente,p)\n    for (patient,prio) in attente:\n        if patient == p :\nnouvelle.append((patient,1))\nelif prio &lt; n:\nnouvelle.append((patient,prio+1))\n        else:\n            nouvelle.append((patient,prio))\n    return nouvelle\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AS1/#exercice-3","title":"Exercice 3","text":"<p>arbres binaires </p> <p>Attention</p> <ul> <li>L'impl\u00e9mentation des arbres binaires sous forme de dictionnaire telle que donn\u00e9 dans l'\u00e9nonc\u00e9 est inhabituelle. </li> <li>La fonction de parcours produit un affichage \u00e0 l'aide d'instructions <code>print</code> mais ne renvoie rien.</li> </ul> <ol> <li> <p>On rappelle que la taille est le nombre de noeuds et la hauteur le nombre maximal de noeuds d'une branche. Dans le cas de l'arbre donn\u00e9 en introduction, la taille est donc 11 et la hauteur 5.</p> </li> <li> <p>a. Cette structure correspond \u00e0 l'arbre 2. En effet, le noeud <code>d</code> est le sous arbre droit de <code>b</code> et le noeud <code>g</code> est le sous arbre gauche de <code>f</code>.</p> <p>b. <pre><code>    graph TD\n    H[\"H\"] --&gt; G[\"G\"]\n    H --&gt; F[\"F\"]\n    G --&gt; E[\"E\"]\n    G --&gt; D[\"D\"]\n    D --&gt; V1[\" \"]\n    D --&gt; B[\"B\"]\n    F --&gt; C[\"C\"]\n    F --&gt; V2[\" \"]\n    C --&gt; V3[\" \"]\n    C --&gt; A[\"A\"]\n    style V1 fill:#FFFFFF, stroke:#FFFFFF\n    style V2 fill:#FFFFFF, stroke:#FFFFFF\n    style V3 fill:#FFFFFF, stroke:#FFFFFF\n    linkStyle 4 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 7 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 8 stroke:#FFFFFF,stroke-width:0px</code></pre></p> </li> <li> <p>a. L'affichage obtenu sera : <code>d, b, g, f, a</code> (on reconna\u00eet un parcours en profondeur suffix\u00e9 c'est \u00e0 dire qu'on liste les noeuds du sous arbre gauche et du sous arbre droit avant la racine)</p> <p>b. On reprend la fonction <code>parcours</code> donn\u00e9e dans l'\u00e9nonc\u00e9, et on n'affiche l'\u00e9tiquette seulement si le noeud est une feuille c'est \u00e0 dire lorsque <code>arb['sag']</code> et <code>arb['sad']</code> sont l'arbre vide. \ud83d\udc0d Script Python<pre><code>def parcours(arb):\n    if arb == {}:\n        return None\n    parcours(arb['sag'])\n    parcours(arb['sad'])\n    if arb['sag'] == {} and abr['sad'] == {}:\n        print(arb['etiquette'])\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>    def symptomes(arb,mal):\n        if arb['sag'] != {}:\n            symptomes(arb['sag'],mal)\n\n        if arb['sag'] != {}:\nsymptomes(arb['sad'],mal)\nif arb['etiquette']==mal:\narb['surChemin'] = True\n            print('sympt\u00f4mes de', abr['etiquette'], ':')\n\n        else:\n            if abr['sad'] != {} and abr['sad']['surChemin'] :\nprint(abr['sad']['etiquette'])\narb['surChemin'] = True\n\n            if abr['sag'] != {} and abr['sag']['surChemin'] :\nprint('pas de', abr['sad']['etiquette'] )\narb['surChemin'] = True\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AS1/#exercice-4","title":"Exercice 4","text":"<p>gestion des processus et des ressources par un syst\u00e8me d'exploitation </p> <p>Partie A : Ordonnancement des processus</p> <ol> <li> <p></p> </li> <li> <p></p> Processus Temps d'ex\u00e9cution Instant d'arriv\u00e9e Temps de s\u00e9jour Temps d'attente P1 \\(3\\) \\(0\\) \\(14-0=14\\) \\(14 - 3 = 11\\) P2 \\(4\\) \\(2\\) \\(9-2=7\\) \\(7 - 4 = 3\\) P3 \\(3\\) \\(3\\) \\(6-3=3\\) \\(3 - 3 = 0\\) P4 \\(4\\) \\(5\\) \\(13-5=8\\) \\(8 - 4 = 4\\) </li> <li> <p>Le temps d'attente d'un processus est nul lorsque le temps de s\u00e9jour est \u00e9gal au temps d'ex\u00e9cution. C'est \u00e0 dire lorsque le processus \u00e9tait le plus prioritaire durant la totalit\u00e9 de son temps d'ex\u00e9cution.</p> </li> </ol> <p>Partie B : Processus et ressources</p> <ol> <li> <p>D'apr\u00e8s le tableau on constate que :</p> <ul> <li>l'analyseur d'\u00e9chantillon attend la donn\u00e9e D4 qu'il ne peut obtenir car elle est mobilis\u00e9e par le sgbd.</li> <li>le sgbd attend la donn\u00e9e D5 qu'il ne peut obtenir car elle est mobilis\u00e9e par la tableur.</li> <li>le tableur attend la donn\u00e9e D1 qu'il ne peut obtenir car elle est mobilis\u00e9e par l'analyseur d'\u00e9chantillon.</li> </ul> </li> <li> <p>C'est une situation d'interblocage ou deadlock en anglais.</p> </li> <li> <p>Si D1 est lib\u00e9r\u00e9e, alors le tableur peut s'ex\u00e9cuter, il lib\u00e9rera alors D3 ce qui permet l\u2019ex\u00e9cution du sgbd et D5 qui permet l'ex\u00e9cution du traitement de texte. Un ordre possible d'ex\u00e9cution des processus est donc : tableur &gt; sgbd &gt; traitement de texte &gt; analyseur d'\u00e9chantillon.</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1AS1/#exercice-5","title":"Exercice 5","text":"<p>r\u00e9seaux et protocoles de routage </p> <p>Partie A : Adressage</p> <ol> <li> <p>L'adresse du service de radiologie est <code>192.168.1.0/24</code> c'est \u00e0 dire que l'adresse du r\u00e9seau est <code>192.168.1.0</code> et le masque <code>255.255.255.0</code></p> </li> <li> <p>Les adresses des trois interfaces du routeur R5 sont :</p> <ul> <li><code>172.89.50.0/24</code></li> <li><code>44.197.5.0/24</code></li> <li><code>192.168.5.0/24</code></li> </ul> </li> <li> <p>a. La premi\u00e8re adresse pouvant \u00eatre attribu\u00e9e \u00e0 une machine sur le r\u00e9seau RL R est <code>192.168.1.1</code> et la derni\u00e8re <code>192.168.1.254</code>.     b. Un maximum de 254 machines peuvent donc \u00eatre connect\u00e9es sur ce r\u00e9seau.</p> </li> </ol> <p>Partie B : Etude du protocole RIP</p> <ol> <li>Les routeurs parcourus seront <code>R5</code> <code>R1</code> <code>R0</code></li> <li>En cas de panne du routeur <code>R1</code>, une nouvelle route sera : <code>R5</code> <code>R4</code> <code>R2</code> <code>R0</code></li> </ol> <p>Partie B : Etude du protocole OSPF</p> <p>Bug</p> <p>L'exemple de calcul du co\u00fbt donn\u00e9 dans l'\u00e9nonc\u00e9 ne correspond pas aux valeurs des tableaux. Entre <code>R0</code> et <code>R3</code>, le co\u00fbt devrait \u00eatre calcul\u00e9 avec \\(\\dfrac{10^9}{300\\times10^6} \\simeq 3,33\\) et l'entier imm\u00e9diatement sup\u00e9rieur est 4. L'exemple donn\u00e9 semble correspondre au calcul du co\u00fbt entre R1 et R2.</p> <ol> <li> <p>Le co\u00fbt de la liaison entre <code>R2</code> et <code>R3</code> est :  \\(\\dfrac{10^9}{400\\times10^6}=2,5\\). Le co\u00fbt est l'entier imm\u00e9diatement sup\u00e9rieur donc 3.</p> </li> <li> <p>Une bande passante possible de la connexion entre <code>R3</code> et <code>R4</code> est \\(200\\) MB/s, en effet le co\u00fbt sera alors \\(\\dfrac{10^9}{200\\times10^6}=5\\).</p> </li> <li> <p>On a reproduit le graphe du r\u00e9seau ci-dessous en faisant figurer les co\u00fbts des liaisons :  Le chemin parcouru sera donc <code>R0</code> <code>R1</code> <code>R2</code> <code>R4</code> <code>R5</code> et le co\u00fbt total de ce chemin est \\(2+1+4+1=8\\).</p> </li> <li> <p>En cas de panne du routeur <code>R1</code>, la nouvelle route sera : <code>R0</code> <code>R3</code> <code>R4</code> <code>R5</code> et le co\u00fbt total sera : \\(4+5+1=10\\)</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1G11/","title":"22 NSIJ1G11","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1G11/#22-nsij1g11-corrige","title":"22-NSIJ1G11 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Etranger Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1G11/#exercice-1","title":"Exercice 1","text":"<p>structures de donn\u00e9es (listes, p-uplets et dictionnaires) </p> <ol> <li> <p>a. Pour obtenir <code>\"lundi\"</code> on acc\u00e8de au second \u00e9l\u00e9ment de la liste <code>jours</code> avec <code>jours[1]</code></p> <p>Rappel</p> <p>La num\u00e9rotation des \u00e9l\u00e9ments d'une liste commence \u00e0 0. Ici <code>\"dimanche\"</code> correspond donc \u00e0 <code>jour[0]</code>.</p> <p>b. <code>18%7=4</code> car il reste 4 dans la division de 18 par 7, donc <code>jours[18%7]</code> renvoie <code>jours[4]</code> c'est \u00e0 dire <code>\"jeudi\"</code>.</p> </li> <li> <p>Bug<p>La syntaxe correct est <code>jours.index(element)</code> avec des parenth\u00e8ses et non des crochets comme cela est indiqu\u00e9 dans l'\u00e9nonc\u00e9</p> </p> \ud83d\udc0d Script Python<pre><code>    numero_jour = (jours.index(j)+n)%7\n</code></pre> </li> <li> <p>a. <code>mois[3]</code> permet d'acc\u00e9der au tuple <code>(\"mars\",31)</code> reste \u00e0 r\u00e9cup\u00e9rer son second \u00e9l\u00e9ment avec <code>mois[3][1]</code> pour acc\u00e9der au nombre de jours.</p> <p>b.  \ud83d\udc0d Script Python<pre><code>    def mois_apres(numero_mois,x):\n        nouveau_num = (numero_mois+x)%12\n        if nouveau_num == 0:\n            nouveau_num = 12\n        return mois[nouveau_num][0]\n</code></pre></p> <p>Note</p> <ul> <li>On traite s\u00e9parement la cas ou le nouveau num\u00e9ro de mois est 0 qui correspond \u00e0 d\u00e9cembre donc au mois de num\u00e9ro 12.</li> <li>On a pr\u00e9f\u00e9r\u00e9 \u00e9crire une fonction, l'\u00e9nonc\u00e9 demandait \"d'\u00e9crire le code\".</li> </ul> </li> <li> <p>a. <code>mois[date[2]][1]</code> correspond \u00e0 <code>mois[10][1]</code> c'est \u00e0 dire \u00e0 31 (nombre de jours du mois d'octobre)</p> <p>b.  \ud83d\udc0d Script Python<pre><code>def jour_suivant(date):\n    # On recup\u00e8re les \u00e9l\u00e9ments de la date : (nom_jour,j,m,a)\n    nom_jour, j, m, a = date[0], date[1], date[2], date[3]\n    nom_jour_suivant =  jours[(jours.index(nom_jour) + 1)%7]\n    # si c'est le dernier jour de l'ann\u00e9e on change de mois et d'ann\u00e9e !\n    if m == 12 and j==31:\n        j_suivant, m_suivant, a_suivant = 1, 1, a+1\n    # si c'est le dernier jour d'un mois (pas d\u00e9cembre) on change de mois\n    elif j == mois[m][1]:\n        j_suivant, m_suivant, a_suivant = 1, m+1, a\n    else :\n    # sinon on change juste de jour\n        j_suivant, m_suivant, a_suivant = j+1, m, a\n    return (nom_jour_suivant, j_suivant, m_suivant, a_suivant)\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1G11/#exercice-2","title":"Exercice 2","text":"<p>structures de donn\u00e9es (files et la programmation objet en langage python) </p> <ol> <li> <p><code>panier1.enfiler((31002,\"caf\u00e9 noir\",1.50,50525))</code></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def remplir(self,panier_temp):\n    while note panier_temp.est_vide():\n        article = panier_temp.defiler()\n        self.enfiler(article)\n</code></pre> </li> <li> <p>On sauvegarde les \u00e9l\u00e9ments du panier dans un panier temporaire de fa\u00e7on \u00e0 les remettre ensuite dans le panier.</p> \ud83d\udc0d Script Python<pre><code>def prix_total(self):\n    panier_temp = Panier()\n    total = 0\n    while not self.est_vide():\n        article = self.defiler()\n        total = total + article[2]\n        panier_temp.enfiler(article)\n    while not panier_temp.est_vide():\n        self.enfiler(panier_temp.defiler())\n</code></pre> </li> <li> <p>Note<ul> <li>On suppose ici que l'ordre des articles dans le panier ne correspond pas forc\u00e9ment \u00e0 l'ordre dans lequel ils ont \u00e9t\u00e9 scann\u00e9s. On recherche donc les horaires de scan minimales et maximales en parcourant le panier.</li> <li>Cette m\u00e9thode renvoie la dur\u00e9e entre le premier scan d'article et le dernier. Si un seul article a \u00e9t\u00e9 achet\u00e9 c'est donc 0, cela ne correspond donc pas \u00e0 la dur\u00e9e des achats indiqu\u00e9e dans l'\u00e9nonc\u00e9</li> </ul> </p> \ud83d\udc0d Script Python<pre><code>def duree_courses(self):\n    if self.est_vide():\n        return 0\n    # initialisation avec l'horaire du scan du premier article\n    debut, fin = self.defiler()[3], self.defiler()[3]\n    while not self.est_vide():\n        article = self.defiler()\n        if article[3] &lt; debut:\n            debut = article[3]\n        if article[3] &gt; fin:\n            fin = article[3]\n    return fin-debut\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1G11/#exercice-3","title":"Exercice 3","text":"<p>structures de donn\u00e9es (dictionnaires) </p> <ol> <li> <pre><code>graph TB\n    DO[Documents] --&gt; AD[Administratif]\n    AD --&gt; C(certificat_JDC.pdf)\n    AD --&gt; AR(attestation_recensement.pdf)\n\n    DO --&gt; CO[Cours]\n    CO --&gt; NSI[NSI]\n    NSI --&gt; TP(TP.html)\n    NSI --&gt; DM(dm.odt)\n\n    CO --&gt; PH[Philo]\n    PH --&gt; TL(Tractatus_logico-philosophicus.epub)\n\n    DO --&gt; LC(liste_de_courses.txt)\n</code></pre> </li> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>def Parcourir(racine,adr):\n    dossier =  racine\n    for nom_dossier in  adr:\ndossier = dossier[nom_dossier]\nreturn dossier\n</code></pre></p> <p>b. L'instruction <code>Afficher(Documents, [\"Cours\", \"NSI\"],\"TP.html\")</code> affichera 60. En effet cela affiche la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>\"TP.html\"</code>.</p> </li> <li> <p>a.  L'erreur se situe \u00e0 la ligne 3, pour la corriger on remplace par <code>dossier[nom_fichier] = taille</code> :</p> \ud83d\udc0d Script Python<pre><code>def ajoute_fichier(racine, adr, nom_fichier, taille):\n    dossier = parcourt(racine, adr)\ndossier[nom_fichier] = taille\n</code></pre> <p>b. Pour ajouter un dossier, on parcourt jusqu'\u00e0 l'adresse demand\u00e9e et on ajoute le dossier sous la forme d'un dictionnaire vide <code>{}</code></p> \ud83d\udc0d Script Python<pre><code>def Ajouter_dossier(racine,adr,nom_dossier):\n    dossier = Parcourir(racine,adr)\n    dossier[nom_dossier] = {}\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>    def taille(dossier):\n        total_ko = 0\n        for k in dossier:\n            total_ko += dossier[k]\n        return total_ko\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1G11/#exercice-4","title":"Exercice 4","text":"<p>les bases de donn\u00e9es </p> <ol> <li> <p>a. <code>id_mesure</code> peut servir de cl\u00e9 primaire car c'est un num\u00e9ro unique. Par contre, deux mesures peuvent \u00eatre issues du m\u00eame centre (et donc avoir le m\u00eame <code>id_centre</code>) ou avoir les m\u00eames valeurs de pluviom\u00e9trie, temp\u00e9rature ou pression. </p> <p>b. Une jointure s'effectue avec une cl\u00e9 \u00e9trang\u00e8re, ici <code>id_centre</code> de la table <code>Mesures</code> permet donc d'effectuer une jointure avec la table <code>Centres</code></p> </li> <li> <p>a.Cette requ\u00eate affiche les enregistrements de la table <code>Centres</code> dont l'altitude est sup\u00e9rieure \u00e0 500. Cela correspond donc \u00e0 :</p> <code>id_centre</code> <code>nom_ville</code> <code>latitude</code> <code>longitude</code> <code>altitude</code> 138 Grenoble 45.185 5.723 550 185 Tignes 45.469 6.909 2594 126 Le Puy-en-Velay 45.042 3.888 744 317 G\u00e9rardmer 48.073 6.879 855 <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom_ville FROM Centres WHERE altitude &gt;= 700 AND altitude &lt;= 1200;\n</code></pre></p> <p>c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT longitude, nom_ville\nFROM Centres\nWHERE longitude &gt; 5\nORDER BY nom_ville ASC;\n</code></pre></p> </li> <li> <p>a. Cette requ\u00eate affiche les enregistrements de la table <code>Mesures</code> pour la date du 30 octobre 2021.</p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Mesures VALUES (3650, 138, 2021-11-08, 11, 1013, 0);\n</code></pre></p> </li> <li> <p>a. Cette requ\u00eate l'enregistrement de la table <code>Centres</code> ayant la latitude minimale.</p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT nom_ville\nFROM Centres\nJOIN Mesures\nON Centres.id_centre = Mesures.id_centre\nWHERE Mesures.temperature &lt; 10.0\nAND Mesures.date_mesure &gt;= 2021-10-01\nAND Mesures.date &lt; 2021-11-01;\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1G11/#exercice-5","title":"Exercice 5","text":"<p>architecture mat\u00e9rielle des ordinateurs, les r\u00e9seaux et sur les protocoles de routage </p> <p>Bug</p> <p>Le sujet comporte une faute d'orthographe on parle de System on Chip et pas de System on a cheap.</p> <ol> <li> <p>a. Contrairement \u00e0 un ordinateur classique o\u00f9 les divers        composants sont s\u00e9par\u00e9s, un Soc int\u00e8gre sur la m\u00eame puce la cpu, la ram, et d'autres p\u00e9riph\u00e9riques (ex : Bluetooth, Wifi, ...). L'avantage est un gain de performance et une plus faible consommation d'\u00e9nergie. Par contre, on ne peut r\u00e9parer ni faire \u00e9voluer le SoC.</p> <p>b. En consultant le tableau comparatif des deux SoC on constate \u00e0 la ligne interface r\u00e9seau que seul le BCM71 en poss\u00e8de une et permet donc une connexion \u00e0 un r\u00e9seau filaire.</p> <p>c. On peut comparer le nombre de coeurs, la fr\u00e9quence de base du processeur et aussi la m\u00e9moire cache pour constater que le BCM271 est plus puissant. Ce dernier SoC poss\u00e8de aussi un processeur graphique gpu.</p> </li> <li> <p>a. Une adresse mac identifie de fa\u00e7on unique une carte r\u00e9seau, elle y est stock\u00e9e et ne peut pas \u00eatre modifi\u00e9e.</p> <p>b. <code>10.0.2.15</code> est une adresse ip permettant d'identifier une machine sur le r\u00e9seau (cette adresse peut changer)</p> <p>c. L'adresse <code>10.0.2.2</code> correspond \u00e0 une passerelle reli\u00e9e au routeur qui achemine les donn\u00e9es aux machines ext\u00e9rieures.</p> </li> <li> <p>a. On examine les tables de routages pour constater que R1 est reli\u00e9 \u00e0 R2, R3 et R5 de m\u00eame R2 est reli\u00e9 \u00e0 R3 et R4, etc ... Ce qui permet de construire le trac\u00e9 suivant :     </p> <p>b. Puisqu'on utilise le protocole rip, on doit minimiser le nombre de sauts pour se rendre de R4 \u00e0 R5, la route sera R4 - R2 - R1 - R5.</p> <p>c. D'apr\u00e8s la formule de l'\u00e9nonc\u00e9 les d\u00e9bits de  100 Mbits/s correspondent \u00e0 un co\u00fbt de 1 et les d\u00e9bits de 10 Mbits/s \u00e0 un co\u00fbt de 10. C'est \u00e0 dire :</p> <p></p> <p>Cette fois c'est donc le chemin R4 - R2 - R3 - R1 - R5 qui sera emprunt\u00e9 pour un co\u00fbt total de 22.</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1JA1/","title":"22 NSIJ1JA1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1JA1/#22-nsij1ja1-corrige","title":"22-NSIJ1JA1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Asie-Pacifique Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1JA1/#exercice-1","title":"Exercice 1","text":"<p>algorithmique, cha\u00eenes de caract\u00e8res, complexit\u00e9 </p> <ol> <li> Initialisation Etape 1 Etape 2 Etape 3 Etape 4 \\(i\\leq j\\) Vrai Vrai Vrai Faux \\(mot[i] \\neq mot[j]\\) Faux Faux Faux i 0 1 2 3 3 j 4 3 2 1 1 p vrai vrai vrai vrai vrai </li> <li> <p>3 comparaisons   </p> </li> </ol> <p>2.b - si n est pair on a n/2 comparaisons, - si n est impair on a n//2 + 1$ comparaisons.</p> <ol> <li> <p>Avant la premi\u00e8re it\u00e9ration (j - i) est \u00e9gale \u00e0 longueur(mot)-1. (i-j) est donc strictement positif pour tout mot constitu\u00e9 de plus d\u2019une lettre . \u00c0 chaque tour de boucle j diminue d\u2019une unit\u00e9 (j = j - 1) et i augmente d\u2019une unit\u00e9 (i = i +1), nous avons donc (j-i) qui diminue de deux unit\u00e9s \u00e0 chaque tour de boucle, (j-i) est donc d\u00e9croissante. Apr\u00e8s un certains nombres de tours de boucle (j-i) va donc \u00eatre \u00e9gale \u00e0 z\u00e9ro (nous aurons alors i = j). Pour le tour de boucle suivant, (apr\u00e8s que j ait \u00e9t\u00e9 d\u00e9cr\u00e9ment\u00e9 d\u2019une unit\u00e9 et i ait \u00e9t\u00e9 incr\u00e9ment\u00e9 d\u2019une unit\u00e9), nous aurons i &gt; j ce qui provoquera l\u2019arr\u00eat de la boucle. Nous pouvons donc affirmer que la boucle se termine.  </p> </li> <li> <p>La boucle est ex\u00e9cut\u00e9e 4 fois. Il est possible de modifier l\u2019algorithme comme suit :  </p> </li> </ol> \ud83d\udccb Texte<pre><code>Fonction palindrome2(mot): \n    Variables : i,j : ENTIER ; p : BOOLEEN \n    i \u2190 0 \n    j \u2190  longueur(mot)-1 \n    tant que i\u2264j \n        Si mot[i] \u2260 mot[j] \n            Renvoie  Faux \n        FinSi \n        i \u2190 i+1 \n        j \u2190 j-1 \n    Fin tant que \n    Renvoie Vrai\n</code></pre> <p>Avec cette modification, la 1\u02b3\u1d49 fois o\u00f9 mot[i] \u2260 mot[j] la fonction renvoie FAUX et l\u2019algorithme s\u2019arr\u00eate (il est inutile d\u2019examiner les autres lettres). Avec l\u2019exemple du mot \u201crouteur\u201d, nous aurions effectu\u00e9 1 tour de boucle complet et nous serions sortis de la fonction d\u00e8s le d\u00e9but du 2e tour de boucle.</p>"},{"location":"Annales/Corriges/22-NSIJ1JA1/#exercice-2","title":"Exercice 2","text":"<p>base de donn\u00e9es </p> <p>1.a. |attribut|type| |:---:|:---:| | id_plat|INT| | nom_plat|VARCHAR(100)| | prix_plat| VARCHAR(100)|</p> <p>1.b | relation | cl\u00e9 primaire | |:---:|:---:| | plat | id_plat | | tablea_salle | num_table | | client | num_client | | reservation | num_reservation |</p> <p>1.c On trouve 2 cl\u00e9s \u00e9trang\u00e8res dans la relation reservation : num_table et num_client. Une cl\u00e9 \u00e9trang\u00e8re permet de cr\u00e9er une jointure entre 2 relations.  </p> <p>2.a.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom_plat, type_plat, prix_plat FROM plat </code></pre></p> <p>2.b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom_plat FROM plat WHERE type_plat = 'Dessert\"\n</code></pre></p> <p>2.c. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE plat SET tel_client = \"0602030405\" WHERE num_client = 42\n</code></pre></p> <p>2.d. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom_client FROM client JOIN reservation ON reservation.num_client = client.num_client WHERE reservation.num_table = 13\n</code></pre></p>"},{"location":"Annales/Corriges/22-NSIJ1JA1/#exercice-3","title":"Exercice 3","text":"<p>syst\u00e8mes d'exploitation </p> <p>1.a cd ../projet  </p> <p>1.b cd /home/sam/projet  </p> <p>2.a ls ./projet  </p> <p>2.b chmod u+w ./projet/config.txt  </p> <p>3.a l\u2019option r permet de supprimer le r\u00e9pertoire cibl\u00e9 par cette commande, mais aussi les r\u00e9pertoires et fichiers contenus dans ce r\u00e9pertoire cible.  </p> <p>3.b le syst\u00e8me d\u2019exploitation a r\u00e9alis\u00e9, pour effacer ces dossiers et fichiers,  un parcours en profondeur de l\u2019arbre.  </p> <ol> <li> <p>L\u2019appel de cette fonction renvoie 1 (renvoie le nombre de fichiers dont le nom commence par la lettre b minuscule) :  </p> </li> <li> <p>1er appel (i = 0) on consid\u00e8re le fichier \u2018nsi.bmp\u2019, le nom ne commence pas par \u2018b\u2019, on appelle nb_fichiers(list_fich, i+1).  </p> </li> <li>2e appel (i=1) on consid\u00e8re le fichier \u2018banana.mp3\u2019, le nom commence par \u2018b\u2019, on appelle 1 + nb_fichiers(list_fich, i+1).  </li> <li>3e appel (i = 2) on consid\u00e8re le fichier \u2018job.txt\u2019, le nom ne commence pas par \u2018b\u2019, on appelle nb_fichiers(list_fich, i+1).  </li> <li>4e appel (i = 3) on consid\u00e8re le fichier \u2018BoyerMoore.py\u2019, le nom ne commence pas par \u2018b\u2019, on appelle nb_fichiers(list_fich, i+1).  </li> <li>5e appel (i = 4), on a i == len(list_fich) qui est vraie, on arr\u00eate les appels r\u00e9cursifs.  </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1JA1/#exercice-4","title":"Exercice 4","text":"<p>programmation objet en langage Python </p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def ajouter_beurre(self, qt):\n    self.qt_beurre = self.qt_beurre + qt  \n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def afficher(self): \n    print(\"farine : \"+str(self.qt_farine)) \n    print(\"beurre : \"+str(self.qt_beurre)) \n    print(\"oeufs : \"+str(self.nb_oeufs)) \n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def stock_suffisant_brioche(self): \n    return self.qt_beurre &gt;= 175 and self.qt_farine &gt;= 350 and self.nb_oeufs &gt;= 4\n</code></pre> </li> </ol> <p>4.a. La valeur affich\u00e9e dans la console est 2. Il est possible  de fabriquer 2 brioches avec le stock actuel.  </p> <p>4.b farine : 300 beurre : 650 oeufs : 2 </p> <ol> <li>\ud83d\udc0d Script Python<pre><code>def nb_brioches(liste_stocks): \n    nb = 0 \n    for s in liste_stocks: \n        nb = nb  +  s.produire()\n    return nb\n</code></pre></li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1JA1/#exercice-5","title":"Exercice 5","text":"<p>programmation Python </p> <p>1.a. La fonction renvoie [2, 6].  </p> <p>1.b. La fonction mystere renvoie les coordonn\u00e9es du personnage apr\u00e8s avoir parcouru le chemin pass\u00e9 en param\u00e8tre de la fonction (et en partant de l\u2019origine du rep\u00e8re).  </p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def accessible(dep, arrivee): \n    arr = mystere(dep) \n    return arr[0]==arrivee[0] and arr[1]==arrivee[1]\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>from random import randint \n\ndef chemin(arrivee): \n    deplacement = '00000000' \n    while not accessible(deplacement, arrivee) : \n        deplacement='' \n        for k in range(8): \n            pas = str(randint(0,1)) \n            deplacement = deplacement + pas \n    return deplacement\n</code></pre> </li> <li> <p>La plus grande valeur en binaire qui permet d\u2019atteindre le point [5, 3] est 11100000 (il faut que les bits de poids fort soit \u00e0 1, on commence donc par monter avant de commencer \u00e0 se d\u00e9placer vers la droite). En base 10 cela donne 224.</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1LR1/","title":"22 NSIJ1LR1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1LR1/#22-nsij1lr1-corrige","title":"22-NSIJ1LR1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Mayotte et r\u00e9seau AEFE Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1LR1/#exercice-1","title":"Exercice 1","text":"<p>structures de donn\u00e9es (listes, piles et files) </p> <ol> <li> <p>a. Le <code>1</code> est d\u00e9fil\u00e9 et enfil\u00e9      14382      b. Le <code>5</code> est d\u00e9pil\u00e9 et empiler (la pile reste donc dans l'\u00e9tat o\u00f9 elle se trouvait)     5862      c. Le <code>5</code> est d\u00e9pil\u00e9 de <code>p</code> et enfil\u00e9 dans <code>f</code> puis le <code>8</code> est d\u00e9pil\u00e9 de <code>p</code> et enfil\u00e9 dans <code>f</code>.     8543821 62      d. Le <code>1</code> est d\u00e9filer de <code>f</code> et empiler dans <code>p</code> puis le <code>2</code> est d\u00e9pil\u00e9 de <code>f</code>empil\u00e9 dans <code>p</code>.     438 215862</p> <p>Bug</p> <p>A la question suivante, l'\u00e9nonc\u00e9 indique que la fonction <code>mystere</code> modifie la file mais ne renvoie rien. Cependant, on trouve  \u00e0 la fin du code de <code>mystere</code> un return <code>p</code>. Cette fonction renvoie donc une pile (qui comme nous le verrons est vide)</p> </li> <li> <p>Avant le premier passage <code>f</code> contient 1234 Puis,les \u00e9tats  de la file <code>f</code> lors des passages successifs dans la premi\u00e8re boucle <code>while</code> seront :</p> <ul> <li>Tour 1 : <code>f</code> contient 123</li> <li>Tour 2 : <code>f</code> contient 12</li> <li>Tour 3 : <code>f</code> contient 1 A la fin de cette premi\u00e8re boucle, les \u00e9l\u00e9ments de <code>f</code> sont empil\u00e9s dans <code>p</code> qui contient alors : 1234 Dans la deuxi\u00e8me boucle <code>while</code> on d\u00e9pile les \u00e9l\u00e9ments de <code>p</code> et on les enfile dans <code>f</code> :</li> <li>Tour 1 <code>f</code> contient 1</li> <li>Tour 2 <code>f</code> contient 21</li> <li>Tour 3 <code>f</code> contient 321</li> <li>Tour 4 <code>f</code> contient 4321 A la fin de la seconde boucle <code>while</code> la pile <code>p</code> est vide, cette fonction renvoie donc une pile vide.</li> </ul> </li> <li> <p>a.      <pre>f</pre> 213 21 32 3 3 23 123 <pre>p</pre> 3 1 1 21 1 </p> <p>b.</p> <p>Bug</p> <p>Cette algorithme semble con\u00e7u pour trier les \u00e9l\u00e9ments de la file mais ne fonctionne pas en l'\u00e9tat. En effet, la fonction <code>knuth</code> semble vouloir \u00e0 chaque tour de la boucle <code>for</code>, avoir une pile <code>p</code> tri\u00e9e. Pour cela, les \u00e9l\u00e9ments de <code>p</code> sup\u00e9rieurs au nouvel \u00e9l\u00e9ment \u00e0 empiler <code>e</code> devraient \u00eatre stock\u00e9es dans une pile temporaire <code>p_temp</code>, ici ces \u00e9l\u00e9ments sont  enfil\u00e9s dans la file \u00e0 trier <code>f</code>.</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1LR1/#exercice-2","title":"Exercice 2","text":"<p>structures de donn\u00e9es (programmation objet) </p> <ol> <li> <p>a. On augmente l'indice <code>i</code> sans d\u00e9passer la longueur de la liste <code>Mousse</code> tant qu'on ne trouve pas <code>None</code> :     \ud83d\udc0d Script Python<pre><code>def donnePremierIndiceLibre(Mousse):\n\"\"\"\n    Mousse est une liste.\n    La fonction doit renvoyer l\u2019indice du premier\n    emplacement libre (contenant None) dans la liste Mousse\n    ou renvoyer 6 en l\u2019absence d\u2019un emplacement libre dans\n    Mousse.\n    \"\"\"\n    i = 0\nwhile i &lt; len(Mousse) and Mousse[i] != None :\ni = i + 1\nreturn i\n</code></pre></p> <p>b.  Si un indice libre existe alors on place <code>B</code> \u00e0 cet indice dans <code>Mousse</code> : \ud83d\udc0d Script Python<pre><code>def placeBulle(B):\n    libre = donnePremierIndiceLibre(Mousse)\n    if libre &lt; len(Mousse):\n        Mousse[libre] = B\n</code></pre></p> </li> <li> <p>Les deux bulles sont en contacts si la distance les s\u00e9parant est inf\u00e9rieur \u00e0 la somme de leurs rayons. \ud83d\udc0d Script Python<pre><code>def bullesEnContact(B1,B2):\n    return distanceEntreBulles(B1,B2) &lt;= B1.rayon + B2. rayon\n</code></pre></p> <p>Aide</p> <p>Le code ci-dessus est \u00e9quivalent \u00e0 : \ud83d\udc0d Script Python<pre><code>    def bullesEnContact(B1,B2):\n    if distanceEntreBulles(B1,B2) &lt;= B1.rayon + B2:\n        return True\n    else:\n        return False\n</code></pre></p> </li> <li> <p>A la ligne 10, on indique que la surface de la nouvelle bulle est la somme des surfaces des deux bulles entrant en collision. Les lignes 13 et 14 divisent par 2 les deux composantes de la vitesse. Et enfin ligne 16, la petite bulle disparait donc la valeur de l'indice qu'elle occupait devient <code>None</code> \ud83d\udc0d Script Python<pre><code>def collision(indPetite, indGrosse, Mousse) :\n\"\"\"\n    Absorption de la plus petite bulle d\u2019indice indPetite\n    par la plus grosse bulle d\u2019indice indGrosse. Aucun test\n    n\u2019est r\u00e9alis\u00e9 sur les positions.\n    \"\"\"\n    # calcul du nouveau rayon de la grosse bulle\n    surfPetite = pi*Mousse[indPetite].rayon**2\n    surfGrosse = pi*Mousse[indGrosse].rayon**2\nsurfGrosseApresCollision = surfPetite + surfGrosse\nrayonGrosseApresCollision = sqrt(surfGrosseApresCollision/pi)\n    #r\u00e9duction de 50% de la vitesse de la grosse bulle\nMousse[indGrosse].dirx = Mousse[indGrosse].dirx/2\nMousse[indGrosse].diry = Mousse[indGrosse].diry/2\n#suppression de la petite bulle dans Mousse\nMousse[indPetite] = None\n</code></pre></p> <p>Aide</p> <p>On rappelle que la surface d'un disque de rayon \\(r\\) est \\(\\pi\\,r^2\\)</p> <p>Bug</p> <ul> <li>Le rayon de la grosse bulle est modifi\u00e9 lors d'une collision, on devrait donc trouver dans le code de la fonction <code>collision</code> la ligne <code>Mousse[indGrosse].rayon = rayonGrosseApresCollision</code>.</li> <li>Dans les param\u00e8tres d'appel <code>mousse</code> est en minuscule dans l'\u00e9nonc\u00e9.</li> <li>Des espaces superflus figurent dans l'\u00e9nonc\u00e9 (par exemple entre <code>Mousse</code> et <code>[indPetite]</code>), on les a supprim\u00e9 dans la correction pour respecter la notation usuelle de Python.</li> </ul> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1LR1/#exercice-3","title":"Exercice 3","text":"<p>bases de donn\u00e9es relationnelles et langage SQL </p> <ol> <li> <p>a. Cette requ\u00eate retourne les <code>titre</code> de la table <code>qcm</code> dont la date est apr\u00e8s le 10/01/2022. C'est \u00e0 dire :</p> titre poo Arbre Parcours <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT note FROM lien_eleve_qcm WHERE ideleve = 4;\n</code></pre></p> </li> <li> <p>a. Le couple <code>(ideleve,idqcm)</code> est la cl\u00e9 primaire de la table <code>lien_eleve_qcm</code>, or une cl\u00e9 primaire est unique et donc deux enregistrements dans cette table ne peuvent avoir les m\u00eames valeurs pour le couple <code>(ideleve,idqcm)</code> c'est \u00e0 dire qu'un m\u00eame \u00e9l\u00e8ve ne peut pas avoir fait deux fois le m\u00eame qcm.</p> <p>b. La table <code>lien_eleve_qcm</code> est modifi\u00e9e, on doit y ajouter l'enregistremen <code>(4,2,18)</code> car l'<code>ideleve</code> de Marty Mael est 4, qu'il a fait le <code>qcm</code> d'<code>idqcm</code> 2 et qu'il a eu la note de 18.</p> <p>c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO eleves VALUES (6,\"Lef\u00e8vre\",\"Kevin\")\n</code></pre></p> <p>d.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELETE FROM lien_eleve_qcm WHERE ideleve=2\n</code></pre></p> </li> <li> <p>a.     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom FROM eleves\nJOIN lien_eleve_qcm ON eleves.ideleve = lien_eleve_qcm.ideleve\nWHERE idqcm = 4\n</code></pre></p> <p>b. Le r\u00e9sultat de cette requ\u00eate sera :</p> nom prenom Marty Mael Bikila Abebe <p>Note</p> <p>On a suppos\u00e9 l'\u00e9l\u00e8ve Dubois Thomas ne figure plus dans la base suite \u00e0 la requ\u00eate de la question 2.d. Dans le cas contraire, il faudrait le rajouter au r\u00e9sultat pr\u00e9c\u00e9dent.</p> </li> </ol> <p>4. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT eleves.nom, eleves.prenom, lien_eleve_qcm.note FROM eleves\nJOIN lien_eleve_qcm ON eleves.ideleve = lien_eleve_qcm.ideleve\nJOIN qcm ON qcm.idqcm = lien_eleve_qcm.idqcm\nWHERE qcm.titre = \"Arbre Binaire\"\n</code></pre></p>"},{"location":"Annales/Corriges/22-NSIJ1LR1/#exercice-4","title":"Exercice 4","text":"<p>algorithmique (arbres binaires en profondeurs pr\u00e9fixe et infixe) </p> <ol> <li> <p>a. Un arbre binaire est un arbre d'arit\u00e9 2, c'est \u00e0 dire un arbre dans lequel chaque noeud poss\u00e8de au plus deux fils. C'est bien le cas ici, une personne   ayant au maximum deux parents connus.</p> <p>b. Dans un arbre binaire de recherche, on dispose d'une relation d'ordre entre les cl\u00e9s associ\u00e9es \u00e0 chaque noeud et pour tout noeud, sa cl\u00e9 est sup\u00e9rieure aux  cl\u00e9s du sous arbre gauche et inf\u00e9rieure aux cl\u00e9s du sous arbre droit. Ici les cl\u00e9s sont des personnes sur lesquelles on n'a pas de relation d'ordre.</p> </li> <li> <p>a. On rappelle que dans un parcours en profondeur pr\u00e9fixe, on liste en premier la racine puis r\u00e9cursivement les cl\u00e9s du sous arbre gauche et du sous arbre droit. Ce qui donne ici :     Albert Normand  Jules Normand  Michel Normand  Jules Normand  Odile Picard  H\u00e9l\u00e8ne Breton   Evariste Breton</p> <p>b. Dans le parcours en profondeur infixe, on liste r\u00e9cursivement les cl\u00e9s du sag puis la racine puis les cl\u00e9s du sad. Ce qui donne ici : Jules Normand  Michel Normand  Odile Picard  Jules Normand  Evariste Breton  H\u00e9l\u00e8ne Breton  Cam\u00e9lia Charentais</p> <p>c. En parcours prefixe on ins\u00e8re l'affichage du tuple <code>(prenom,nom)</code> avant de relancer les parcours r\u00e9cursifs sur les deux sous arbres. \ud83d\udc0d Script Python<pre><code>def parcours(racine_de_l_arbre) :\n    if racine_de_l_arbre != None :\n    noeud_actuel = racine_de_l_arbre\n    print(noeud_actuel.identite)\n    parcours(noeud_actuel.gauche)\n    parcours(noeud_actuel.droite)\n</code></pre></p> <p>d. En parcours infixe on ins\u00e8re l'affichage du tuple <code>(prenom,nom)</code> entre  les parcours r\u00e9cursifs sur les deux sous arbres. \ud83d\udc0d Script Python<pre><code>def parcours(racine_de_l_arbre) :\n    if racine_de_l_arbre != None :\n    noeud_actuel = racine_de_l_arbre\n    parcours(noeud_actuel.gauche)\n    print(noeud_actuel.identite)\n    parcours(noeud_actuel.droite)\n</code></pre></p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>class Noeud() :\n    def __init__(self, prenom, nom) :\n        self.identite = (prenom, nom)\n        self.gauche = None\n        self.droite = None\n        self.generation = 0\n</code></pre></p> <p>Bug</p> <p>Dans l'\u00e9nonc\u00e9, <code>self</code>  ne figure pas dans les param\u00e8tres de <code>__init__</code> (ajout\u00e9 dans cette correction)</p> <p>b.  \ud83d\udc0d Script Python<pre><code>def numerotation(racine_de_l_arbre, num_gen=0) :\n    if racine_de_l_arbre != None:\n        racine_de_l_arbre.generation = num_gen\n        numerotation(racine_de_l_arbre.gauche,num_gen+1)\n        numerotation(racine_de_l_arbre.droit,num_gen+1)\n</code></pre></p> </li> <li> <p>Cette fonction parcourt l'arbre en pr\u00e9fixe mais affiche seulement les noeuds droit, ce qui donne : Odile Picard  H\u00e9l\u00e8ne Breton  Cam\u00e9lia Charentais  Marie Comtois  Eulalie Lorrain  Gabrielle Savoyard  Janet Chesterfield </p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1LR1/#exercice-5","title":"Exercice 5","text":"<p>r\u00e9seau, protocoles de routage, langage et programmation </p> <ol> <li> <p>a. Un adresse IPv4 se compose de 4 octects.</p> <p>b. Le PC3 a pour adresse  IPv4 : 172.150.4.30/24 le masque de sous r\u00e9seau est donc 11111111.11111111.11111111.00000000 c'est \u00e0 dire 255.255.255.0</p> </li> <li> <p>Tableau compl\u00e9t\u00e9 : </p> <p>Aide</p> <ul> <li>Exemple de la conversion binaire d\u00e9cimal : \\(150=\\)\\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\)</li> <li>On rappelle qu'un &amp; logique vaut 1 uniquement lorsque les deux entr\u00e9es valent 1.</li> </ul> </li> <li> <p>a. L'adresse <code>172.150.10.257</code> n'est pas valide (le dernier chiffre n'est pas entre <code>0</code> et <code>255</code>). L'adresse <code>172.154.4.30</code> ne fait pas partie du r\u00e9seau (ne commence pas par <code>172.150.4</code>) L'adresse <code>172.150.4.0</code> est celle du r\u00e9seau. Et enfin, * <code>172.150.4.10</code>  est d\u00e9j\u00e0 utilis\u00e9e. Pour un nouvelle ordinateur on peut donc utiliser :</p> <ul> <li><code>172.150.4.11</code></li> <li><code>172.150.4.200</code></li> </ul> <p>b. Pour conna\u00eetre l'adresse IP, on peut utiliser la commande <code>ifconfig</code> (syst\u00e8me Linux) ou <code>ipconfig</code> (Windows).</p> </li> <li> <p>Les machines sont sur des r\u00e9seaux diff\u00e9rents (<code>172.16.1.10\\16</code> d'un c\u00f4t\u00e9 et <code>192.168.5.10\\16</code> de l'autre) un switch ne permet donc pas de les relier. Pour que cela fonctionne, il faudrait changer la configuration de toutes les machines d'un des sous r\u00e9seau. L'alternative est d'utiliser un routeur qui permet d'interconnecter les deux sous r\u00e9seau en conservant leur configuration.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def adresse(adresse,liste_ip):\n    if adresse not in liste_ip:\n        liste_ip.append(adresse)\n        print(\"pas trouv\u00e9e, ajout\u00e9e\")\n    else:\n        print(\"trouv\u00e9e\")\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME1/","title":"22 NSIJ1ME1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1ME1/#22-nsij1me1-corrige","title":"22-NSIJ1ME1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : M\u00e9tropole Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1ME1/#exercice-1","title":"Exercice 1","text":"<p>structures de donn\u00e9es </p> <p>Partie A</p> <ol> <li> <p>Cette phrase d\u00e9crit le comportement d'une file. En effet, dans une file, le premier \u00e9l\u00e9ment entr\u00e9 est aussi le premier sorti. Dans une pile par contre le premier entr\u00e9 sera le dernier \u00e0 sortir.</p> </li> <li> <p>La variable <code>controleur</code> augmente de 1 lorsqu'on rencontre une parenth\u00e8se ouvrante et diminue de 1 lorsqu'on rencontre une parenth\u00e8se fermante par cons\u00e9quent :</p> <ul> <li>pour <code>B=((()()</code> les valeurs successives seront : \\(1, 2, 3, 2, 3, 2\\)</li> <li>pour <code>C=(()))(</code> les valeurs successives seront : \\(1, 2, 1, 0, -1, 0\\)</li> </ul> </li> <li> <p>Le test 1 :  \ud83d\udc0d Script Python<pre><code>if controleur &lt; 0\n</code></pre> L'exemple de l'expression <code>C</code> illustre ce cas de figure, l'expression est mal parenth\u00e9s\u00e9e car le controleur devient n\u00e9gatif</p> <p>Le test 2 : \ud83d\udc0d Script Python<pre><code>if controleur == 0\n</code></pre> L'exemple de l'expression <code>B</code> illustre ce cas de figure, l'expression est mal parenth\u00e9s\u00e9e car le controleur est non nul apr\u00e8s avoir parcouru toute l'expression</p> <p>Attention</p> <p>Dans les 4 derni\u00e8res lignes du code propos\u00e9 dans l'exercice, on teste si un bool\u00e9en est vrai et dans ce cas on renvoie vrai et faux sinon : \ud83d\udc0d Script Python<pre><code>if controleur == 0 : # \n    return True #le parenth\u00e9sage est correct\nelse:\n    return False #parenth\u00e8se(s) fermante(s) manquante(s)\n</code></pre> Ce qui revient \u00e0 renvoyer ce bool\u00e9en, ces quatre lignes se r\u00e9sument donc : \ud83d\udc0d Script Python<pre><code>return controleur == 0\n</code></pre></p> <p>Partie B 4. a. </p> </li> </ol> <p></p> <p></p> <p></p> <p></p> <p></p> <p>b. Si la pile est vide en fin de parcours alors le balisage est correct.</p> <p>c. Puisque l'expression est correctement balis\u00e9e, il y autant de balises ouvrantes que de balises fermantes (6 de chaque). Puisqu'on empile les balises ouvrantes, la pile contiendra au maximum 6 \u00e9l\u00e9ments.</p>"},{"location":"Annales/Corriges/22-NSIJ1ME1/#exercice-2","title":"Exercice 2","text":"<p>bases de donn\u00e9es </p> <ol> <li> <p>a. Cette requ\u00eate renvoie les champs <code>nom</code>, <code>prenom</code> et <code>naissance</code> de la relation <code>individu</code> lorsque le nom est <code>'Crog'</code>. Sur l'extrait de la table, on obtient donc : <code>'Crog', 'Daniel', '07-07-1968'</code>.</p> <p>Attention</p> <p>Le sujet pr\u00e9sente des extraits des relations <code>individu</code> et <code>realisation</code>, on ne sait pas s'il faut fournir le r\u00e9sultat des requ\u00eates sur ces extraits uniquement ou de fa\u00e7on g\u00e9n\u00e9rale. Dans la r\u00e9ponse pr\u00e9c\u00e9dente, on donne les deux.</p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, id_rea FROM realisation WHERE annee &gt; 2020;\n</code></pre></p> </li> <li> <p>a. C'est la requ\u00eate 1 qu'il faut utiliser, elle met \u00e0 jour la table. La requ\u00eate 2 ne fonctionne pas car elle ins\u00e8re un nouvel enregistrement, or <code>id_ind</code> est une cl\u00e9 primaire donc unique.  On ne peut donc pas ins\u00e9rer un nouvel enregistrement ayant pour <code>id_int</code> la valeur <code>688</code>.</p> <p>b. Pour la relation <code>individu</code> la cl\u00e9 primaire est <code>id_ind</code> les autres valeurs acceptent donc des doublons (pas de contrainte <code>UNIQUE</code>) et on peut donc avoir deux individus ayant m\u00eame nom, pr\u00e9nom et date de naissance.</p> </li> <li> <p>a.     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO emploi\nVALUES (5400, 'Acteur(James Bond)', 688, 105); -- (1)\n</code></pre></p> <ol> <li><code>688</code> est l'<code>id_ind</code> de Daniel Crog et 105 l'<code>id_rea</code> de \"Casino Imperial\".</li> </ol> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO emploi\nVALUES (5401, 'Acteur(James Bond)', 688, 325); -- (1)\n</code></pre> <ol> <li><code>688</code> est l'<code>id_ind</code> de Daniel Crog et 325 l'<code>id_rea</code> de \"Ciel tombant\".</li> </ol> <p>b. On doit d'abord cr\u00e9er l'enregistrement du film dans la relation <code>realisation</code>, car <code>id_rea</code> \u00e9tant une cl\u00e9 \u00e9trang\u00e8re de la relation <code>emploi</code>, on ne peut pas cr\u00e9er un enregistrement dans <code>emploi</code> si son <code>id_rea</code> ne figure pas dans <code>realisation</code>.</p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT individu.nom, realisation.titre, realisation.annee\nFROM emploi\nJOIN individu ON individu.id_ind = emploi.id_ind\nJOIN realisation ON realisation.id_rea = emploi.id_rea\nWHERE emploi.description = 'Acteur(James Bond)';\n</code></pre></p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT emploi.description\nFROM emploi\nJOIN individu ON individu.id_ind = emploi.id_ind\nWHERE individu.prenom = \"Denis\" and individu.nom = \"Johnson\"\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME1/#exercice-3","title":"Exercice 3","text":"<p>repr\u00e9sentations binaires et protocoles de routage </p> <ol> <li> <p>a.  \\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\) \\(= 128 + 64 = 192\\) \\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\) \\(= 128 + 32 + 8 = 168\\) \\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\) \\(= 128\\) \\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut1}}\\) \\(= 128 + 2 + 1 = 131\\)     L'\u00e9criture d\u00e9cimale de cette adresse ipv4 est donc  \\(192.168.128.131\\)     b. Le dernier octet a 256 valeurs possibles (de 0 \u00e0 255), le nombre d'adresses diff\u00e9rentes possibles du r\u00e9seau A est donc 256.</p> <p>Attention</p> <p>Deux adresses sont r\u00e9serv\u00e9es dans un r\u00e9seau : une pour le r\u00e9seau lui-m\u00eame  et l'autre pour la diffusion  (broadcast). Donc parmi les 256 possibilit\u00e9s,  254 peuvent \u00eatre attribu\u00e9es \u00e0 un h\u00f4te du r\u00e9seau.</p> </li> <li> <p>a. Le routeur A est directement reli\u00e9 \u00e0 B, C et D (m\u00e9trique 1)</p> <p>b.      <pre><code>graph LR\nA((\"A\"))\nB((\"B\"))\nC((\"C\"))\nD((\"D\"))\nE((\"E\"))\nA --- B &amp; C &amp; D\nB --- D\nC --- D\nD --- E</code></pre></p> </li> <li> <p></p> </li> <li> <p>a. Le chemin emprunt\u00e9 sera F - H - J - K - I pour un co\u00fbt de 13. Les autres chemins ont un co\u00fbt sup\u00e9rieur et dans le protocole ospf on minimise le co\u00fbt (et pas le nombre de routeurs travers\u00e9s comme dans le protocole rip)</p> <p>b.</p> Destination M\u00e9trique F 0 G 8 H 5 I 13 J 6 K 8 L 11 <p>c. Une panne du routeur H, en effet dans ce cas :</p> <ul> <li>pour transmettre de I \u00e0 F le chemin serait I - K - J - G - F (co\u00fbt minimal de 19),</li> <li>pour transmettre de K \u00e0 F le chemin serait K - J - G - F (co\u00fbt minimal de 14),</li> <li>pour transmettre de J \u00e0 F le chemin serait J - G - F (co\u00fbt minimal de 12)</li> <li>pour transmettre de L \u00e0 F le chemin serait L - G - F (co\u00fbt minimal de 20)</li> </ul> <p>Dans tous les cas, on transite bien par G.</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME1/#exercice-4","title":"Exercice 4","text":"<p>parcours des arbres binaires, diviser pour r\u00e9gner, r\u00e9cursivit\u00e9 </p> <p>Partie A : Parcours d'un arbre</p> <ol> <li> <p>La somme de l'arbre pr\u00e9c\u00e9dent est \\(32\\) : \\(3+6+2+7+4+9+1\\)</p> </li> <li> <p>Les r\u00e9ponses sont regroup\u00e9es dans le tableau ci-dessous :</p> Lettre Noms A Racine B Noeud C Feuille D sag E sad </li> <li> <p>Le parcours en largeur correspond au parcours de haut en bas et de gauche en droite c'est \u00e0 dire \u00e0 la proposition C : 3-6-2-7-4-9-1</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def somme(nombres):\n    s = 0\n    for n in nombres:\n        s += n\n    return s\n</code></pre> <p>Remarques</p> <p>On peut aussi penser \u00e0 utiliser <code>sum</code></p> </li> <li> <p>C'est un parcours en largeur, en effet les noeuds sont plac\u00e9s dans une file, ils sont donc trait\u00e9s dans leur ordre d'arriv\u00e9e.</p> </li> </ol> <p>Partie B : M\u00e9thode 'diviser pour r\u00e9gner'</p> <ol> <li> <p>C'est la proposition D : diviser un probl\u00e8me en deux probl\u00e8mes plus petits et ind\u00e9pendants.</p> <p>Attention</p> <ul> <li>on peut diviser en plus de deux sous probl\u00e8mes</li> <li>la m\u00e9thode inclus normalement une phase o\u00f9 on combine les solutions des sous probl\u00e8mes afin d'obtenir celle du probl\u00e8me initial.</li> </ul> </li> <li> <p>somme(Arbre) = valeur de la racine + somme(SAG) + somme(SAD)</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def calcul_somme(arbre):\n    if est_vide(arbre):\n        return 0\n    else:\n        return valeur_racine(arbre) + somme(arbre_gauche(arbre)) + somme(arbre_droit(arbre))\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME1/#exercice-5","title":"Exercice 5","text":"<p>programmation orient\u00e9e objet </p> <ol> <li> <p>C'est l'instruction 3 : <code>joueur1 = Joueur(\"Sniper\",319,\"A\")</code></p> </li> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>def redevenir_actif(self):\n    if not self.est_actif:\n        self.est_actif = True\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def nb_de_tirs_recus(self):\n    return len(liste_id_tirs_recus)\n</code></pre></p> </li> <li> <p>a. C'est le test 1 qui v\u00e9rifie que l'\u00e9quipe du participant est bien celle de la base.</p> <p>b. A la ligne 5, on constate que lorsqu'un joueur a \u00e9t\u00e9 touch\u00e9 par le tir d'un co\u00e9quipier, le score de l'\u00e9quipe diminue de 20.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>if participant.est_determine(): # (1)\n    self.incremente_score(40) \n</code></pre> <ol> <li>Dans la classe <code>Joueur</code> donn\u00e9e en d\u00e9but d'exercice on trouve la m\u00e9thode <code>est_determine</code></li> </ol> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME3/","title":"22 NSIJ1ME3","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1ME3/#22-nsij1me3-corrige","title":"22-NSIJ1ME3 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : M\u00e9tropole session de septembre Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1ME3/#exercice-1","title":"Exercice 1","text":"<p>algorithmique, arbres binaires de recherche et leurs parcours </p> <p>Partie A : Pr\u00e9ambule</p> <ol> <li>Seul l'arbre 1 est un arbre binaire de recherche. En effet, dans l'arbre 2 la cl\u00e9 4 appara\u00eet dans le sous arbre droit de la racine de cl\u00e9 4, or les cl\u00e9 du sous arbre droit doivent \u00eatre strictement sup\u00e9rieurs \u00e0 la racine. Pour la m\u00eame raison, l'arbre 3 n'est pas non plus un arbre binaire de recherche, la valeur 1 figure dans le sous arbre droit du noeud d'\u00e9tiquette 2.</li> </ol> <p>Partie B : Analyse</p> <ol> <li> <p>a. Le plus petit \u00e9l\u00e9ment se trouve sur la feuille la plus \u00e0 gauche de l'arbre. En effet en descendant r\u00e9cursivement \u00e0 gauche, on trouve \u00e0 chaque \u00e9tape une valeur inf\u00e9rieure \u00e0 toutes celles se trouvant \u00e0 droite.</p> <p>Attention</p> <p>La question demande le plus petit \u00e9l\u00e9ment, or les valeurs pr\u00e9sentes dans un arbre binaire de recherche ne sont pas forc\u00e9ment uniques. A titre d'exemple, dans l'arbre binaire de recherche suivant, la plus petite valeur appara\u00eet 2 fois : <pre><code>graph TD\nS5(5) --&gt; S6(5)\nS5 --&gt; S8(8)</code></pre></p> <p>b. Si l'arbre est vide alors il ne contient pas la cle cherch\u00e9e. Sinon trois cas se pr\u00e9sente : la cl\u00e9 cherch\u00e9e est la racine et on renvoie <code>True</code>, la cl\u00e9 cherch\u00e9e est inf\u00e9rieure \u00e0 la racine et on relance la recherche dans le sous arbre gauche (l\u00e0 ou se trouve les valeurs inf\u00e9rieures \u00e0 la racine), la cl\u00e9 cherch\u00e9e est sup\u00e9rieure \u00e0 la racine et on relance la recherche dans le sous arbre droit. \ud83d\udc0d Script Python<pre><code>def RechercheValeur(cle,abr):\n    if est_vide(abr):\n        return False\n    if racine(abr)==cle:\n        return True\n    elif racine(abr)&gt;cle:\n        return RechercheValeur(cle,sous_arbre_gauche(a))\n    else:\n        return RechercheValeur(cle,sous_arbre_droit(a))\n</code></pre></p> </li> <li> <p>a. C'est un parcours en profondeur infixe c'est \u00e0 dire qu'on liste de fa\u00e7on r\u00e9cursive les cl\u00e9 du sous arbre gauche, puis la racine, puis les cl\u00e9 du sous arbre droit.</p> <p>b. En parcours pr\u00e9fixe, on liste r\u00e9cursivement la racine puis les noeuds du sous arbre gauche puis ceux du sous arbre droit. On obtient donc : \\(7 - 2 - 1 - 5 - 3 - 6 - 10 - 8 - 9\\).  </p> <p>c. En parcours suffixe, on liste r\u00e9cursivement les noeuds du sous arbre gauche, ceux du sous arbre droit et enfin la racine. Ici, on obtient : \\(1 - 3 - 6 - 5 - 2 - 9 - 8 - 10 - 7\\).</p> <p>d. Le parcours en largeur corresponda \u00e0 l'ordre de la lecture (de gauche \u00e0 droite et de haut en bas). Ici on obtient : \\(7 - 2 - 10 - 1 - 5 - 8 - 3 - 5 - 9\\).</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME3/#exercice-2","title":"Exercice 2","text":"<p>programmation orient\u00e9e objet, it\u00e9rations et r\u00e9cursivit\u00e9 </p> <p>Bug</p> <ul> <li>Le code propos\u00e9 d\u00e9finit pour un objet de la classe <code>Villa</code> un attribut <code>nom</code> ainsi qu'une m\u00e9thode <code>nom</code>, ce qui n'est pas possible. La m\u00e9thode est un getter qu'on pourrait renommer par exemple en get_nom.</li> <li>L'attribut \u00a0<code>eqCuis</code> ne prend que deux valeurs <code>\"eq\"</code> ou <code>\"noneq\"</code>, il serait donc plus judicieux d'en faire un bool\u00e9en.</li> </ul> <ol> <li> <p>a. La liste <code>v</code> contient 5 \u00e9l\u00e9ments (elle \u00e9tait initialement vide et on y ajout\u00e9 5 \u00e9l\u00e9ments \u00e0 l'aide de 5 <code>append</code>)</p> <p>b. <code>v[1]</code> est le deuxi\u00e8me \u00e9l\u00e9ment de la liste <code>v</code> c'est \u00e0 dire un objet de la classe <code>Villa</code> sa m\u00e9thode <code>self.nom</code> renvoie l'attribut <code>nom</code> c'est \u00e0 dire <code>\"Les go\u00e9lands\"</code>.</p> <p>c.  Le calcul de la surface s'effectue naturellement en sommant la surface de chacune des pi\u00e8ces de la villa : \ud83d\udc0d Script Python<pre><code>def surface(self):\n    return self.sejour.sup() + self.ch1.sup() + self.ch2.sup()\n</code></pre></p> </li> <li> <p>On parcours la liste <code>v</code> des villas et on affiche les noms de celles ayant une cuisine \u00e9quip\u00e9e (la m\u00e9thode <code>equip</code> renvoie <code>\"eq\"</code> lorsque la cuisine est \u00e9quip\u00e9e). \ud83d\udc0d Script Python<pre><code>for villa in v:\n    if villa.equip()==\"eq\":\n        print(villa.nom())\n</code></pre></p> </li> <li> <p>Un appel r\u00e9cursif est caract\u00e9ris\u00e9 par appel d'une fonction par elle-m\u00eame</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def max_surface(v):\n    if len(v)==1:\n        return v.nom()\n    if v[0].surface() &gt; v[1].surface():\n        v.pop(1)\n    else:\n        v.pop(0)\n    return max_surface(v)\n</code></pre> </li> </ol> <p>Remarque</p> <p>Le type <code>list</code> \u00e9tant mutable, la fonction ci-dessous vide en m\u00eame temps la liste <code>v</code> qui contiendra \u00e0 la fin un unique \u00e9l\u00e9ment (celui ayant la surface maximale)</p>"},{"location":"Annales/Corriges/22-NSIJ1ME3/#exercice-3","title":"Exercice 3","text":"<p>bases de donn\u00e9es relationnelles et langage SQL </p> <ol> <li> <p>L'attribut <code>Num_objet</code> peut \u00eatre choisi comme cl\u00e9 primaire car il est unique pour chacun des enregistrements pr\u00e9sent dans la table.</p> </li> <li> <p>Le sch\u00e9ma relationnel de la table <code>Type</code> s'\u00e9crit : Type(Type_objet : TEXT, Libelle_Objet : TEXT)  </p> </li> <li> <p>Seule l'instruction b) ne provoque pas d'erreur dans les autres cas une erreur se produit sur le type des donn\u00e9es :</p> <ul> <li><code>\"8\"</code> au lieu de <code>8</code> pour l'instruction a)</li> <li><code>WISEA JO85510</code> au lieu de <code>\"WISEA JO85510\"</code> pour l'instruction c)</li> <li><code>\"133.781\"</code> au lieu de <code>133.781</code> pour l'instruction d)</li> </ul> </li> <li> <p>Cette instruction ne fonctionne par car <code>Type_Objet</code> est une cl\u00e9 primaire or un enregistrement ayant la valeur <code>\"BD\"</code> existe d\u00e9j\u00e0 dans la table.</p> </li> <li> <p>Cette requ\u00eate renvoie les champs <code>\"Nom_Objet\"</code> et <code>Parallaxe</code> pour les objets de type <code>\"Planet\"</code> ce qui donne sur l'extrait pr\u00e9sent\u00e9 :</p> Nom_objet Parallaxe \u00a0 Proxima Cen b 768,067 HF 95735 392,753 </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Gaia.Nom_systeme, Gaia.Nom_objet, Type.Libelle_Objet FROM Gaia\nJOIN Type ON Gaia.Type_Objet = Type.Type_Objet\nWHERE Gaia.Parallaxe &gt; 400 and Gaia.Type_Objet = \"*\";\n</code></pre> </li> <li> <p>a)      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Type VALUES ('ST','Etoile')\n</code></pre></p> <p>b) \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Gaia SET Type_Objet = \"ST\" WHERE Type_Objet = \"*\";\n</code></pre> Une fois la requ\u00eate pr\u00e9c\u00e9dente effectu\u00e9e, on peut supprimer le type objet <code>\"*\"</code> de la table type : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELETE FROM Type WHERE Type_Objet = \"*\";\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME3/#exercice-4","title":"Exercice 4","text":"<p>architecture mat\u00e9rielle, gestion de processus et r\u00e9seaux </p> <ol> <li> <p>C'est le sch\u00e9ma a) dans lequel aussi bien l'unit\u00e9 de contr\u00f4le (uc) que l'unit\u00e9 arithm\u00e9tique et logique (ual) peuvent \u00e9changer des informations avec la m\u00e9moire. Et aussi dans lequel c'est l'ual qui re\u00e7oit les entr\u00e9es et renvoie les sorties.</p> </li> <li> <p>On peut proposer n'importe quelle adresse du type <code>192.168.10.x</code> avec <code>x</code> entre 1 et 254. En effet la partie r\u00e9seau contient 24 bits et <code>192.168.10.0</code>  est r\u00e9serv\u00e9 au r\u00e9seau et <code>192.168.10.255</code> au broadcast</p> </li> <li> <p>On peut connecter 254 machines au r\u00e9seau LAN01 (voir remarque pr\u00e9c\u00e9dente)</p> </li> <li> <p>Le r\u00f4le d'un switch est de connecter plusieurs ordinateurs d'un m\u00eame sous r\u00e9seau. Dans l'exemple du r\u00e9seau ci-dessus, le switch permet de connecter entre eux les ordinateurs du sous r\u00e9seau LAN01.</p> </li> <li> <p>Le r\u00f4le d'un routeur est de connecter plusieurs sous r\u00e9seaux entre eux. Dans l'exemple du r\u00e9seau ci-dessus, le routeur R1 permet de connecter les ordinateurs du r\u00e9seau LAN01 \u00e0 Internet</p> </li> <li> <p>Le tableau compl\u00e9t\u00e9 :</p> Destination Passerelle M\u00e9trique 192.168.10.0/24 0.0.0.0 0 2.100.40.0/24 2.100.40.1 1 3.100.30.0/24 3.100.30.2 1 4.10.10.0/24 4.10.10.2 1 4.20.10.0/24 3.100.30.2 2 7.30.40.0/24 3.100.30.2 3 6.10.30.0/24 2.100.40.1 2 90.10.20.0/24 2.100.40.1 2 </li> <li> <p>La derni\u00e8re ligne du tableau pr\u00e9c\u00e9dent serait modifi\u00e9 en</p> Destination Passerelle M\u00e9trique 90.10.20.0/24 4.10.10.2 4 </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1ME3/#exercice-5","title":"Exercice 5","text":"<p>notion de file et programmation en Python </p> <ol> <li> <p>C'est la situation 2 qui est associ\u00e9 \u00e0 une structure de file puisque le premier travail envoy\u00e9 sera aussi le premier a \u00eatre imprim\u00e9.</p> </li> <li> <p>a. <code>Val</code> contiendra <code>Prioritaire</code>, <code>V</code> contiendra <code>Client3, Clien2, Client1</code> et <code>F</code> contiendra <code>Client4</code>.</p> <p>b.  \ud83d\udc0d Script Python<pre><code>def longueur_file(F):\n    V = creer_file()\n    n = 0\n    while not est_vide(F):\n        n = n + 1\n        val = defiler(F)\n        enfiler(V,val)\n    while not est_vide(F):\n        val = defiler(V)\n        enfiler(F,val)\n    return n\n</code></pre></p> <p>c. On reprend la fonction pr\u00e9c\u00e9dente en ajoutant une condition de fa\u00e7on \u00e0 ne compter que les personnes prioritaires \ud83d\udc0d Script Python<pre><code>def longueur_file(F):\n    V = creer_file()\n    prio = 0\n    while not est_vide(F):\n        val = defiler(F)\n        if val == \"Prioritaire\":\n            prio = prio + 1\n        enfiler(V,val)\n    while not est_vide(F):\n        val = defiler(V)\n        enfiler(F,val)\n    return prio\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1PO1/","title":"22 NSIJ1PO1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ1PO1/#22-nsij1po1-corrige","title":"22-NSIJ1PO1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Polyn\u00e9sie Jour : 1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ1PO1/#exercice-1","title":"Exercice 1","text":"<p>programmation et r\u00e9cursivit\u00e9 </p> <ol> <li> <p>a. Cette fonction fait appel \u00e0 elle-m\u00eame, elle est donc bien r\u00e9cursive.</p> <p>b. Si la fonction <code>choice</code> renvoie un tr\u00e8s grand nombre de fois <code>False</code> on obtiendrait une erreur lorsque le nombre d'appel r\u00e9cursif maximum est d\u00e9pass\u00e9.</p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>def A(n):\nif n&lt;=0 or choice([True,False]):\nreturn \"a\"\n    else:\nreturn \"a\" + A(n-1) + \"a\"\n</code></pre></p> <p>b. Le param\u00e8tre <code>n</code> d\u00e9cro\u00eet \u00e0 chaque appel r\u00e9cursif de la fonction <code>A</code> or les appels r\u00e9cursifs s'interrompt lorsque <code>n</code> devient n\u00e9gatif. Donc,  un appel de la forme <code>A(n)</code> avec \\(n \\leq 50\\) s'arr\u00eate toujours.</p> </li> <li> <ul> <li>L'appel <code>B(0)</code>  renvoie <code>\"b\"+A(-1)+\"b\"</code> c'est \u00e0 dire <code>\"bab\"</code> car <code>A(-1)</code> renvoie <code>\"a\"</code>.</li> <li>L'appel <code>B(1)</code> peut renvoyer :<ul> <li><code>\"b\"+A(0)+\"b\"</code> c'est \u00e0 dire <code>\"bab\"</code> </li> <li><code>\"b\"+B(0)+\"b\"</code> c'est \u00e0 dire <code>\"bbabb\"</code>.</li> </ul> </li> <li>L'appel <code>B(2)</code> peut renvoyer : <ul> <li><code>\"b\"+A(1)+\"b\"</code> c'est \u00e0 dire <code>\"bab\"</code> ou <code>\"baaab\"</code> </li> <li><code>\"b\"+B(1)+\"b\"</code> c'est \u00e0 dire <code>bbabb</code> ou <code>\"bbbabbb\"</code></li> </ul> </li> </ul> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>def regleA(chaine):\n    n = len(chaine)\n    if n &gt;= 2:\nreturn chaine[0]==\"a\" and chaine[n-1]==\"a\" and regleA(raccourcir(chaine))\nelse:\nreturn chaine == \"a\"\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def regleB(chaine):\n    n = len(chaine)\n    if n &gt;= 2:\n        return chaine[0] == \"b\" and chaine[-1] == \"b\" and \n            (regleA(raccourcir(chaine)) or regleB(raccourcir(chaine))\n    else:\n        return False\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1PO1/#exercice-2","title":"Exercice 2","text":"<p>architecture mat\u00e9rielle, ordonnancement et expressions bool\u00e9ennes </p> <ol> <li> <p>Au deuxi\u00e8me tour : 0 peut lire 12 (adresse non utilis\u00e9e jusque l\u00e0), 1 et 2 peuvent lire 10 (adresse non utilis\u00e9e en \u00e9criture jusque l\u00e0) et 3 ne peut pas \u00e9crire 10 puisque cette adresse a \u00e9t\u00e9 lue auparavant.</p> N\u00b0 p\u00e9riph\u00e9rique Adresse Op\u00e9ration R\u00e9ponse de l'ordonnanceur 0 <code>10</code> \u00e9criture <code>\"OK\"</code> 1 <code>11</code> lecture <code>\"OK\"</code> 2 <code>10</code> lecture <code>\"ATT\"</code> 3 <code>10</code> \u00e9criture <code>\"ATT\"</code> 0 <code>12</code> lecture <code>\"OK\"</code> 1 <code>10</code> lecture <code>\"OK\"</code> 2 <code>10</code> lecture <code>\"OK\"</code> 3 <code>10</code> \u00e9criture <code>\"ATT\"</code> </li> <li> <p>Le p\u00e9riph\u00e9rique 1 ne pourra jamais lire l'adresse 10 puisque le p\u00e9riph\u00e9rique 0 y acc\u00e8de en \u00e9criture avant.</p> </li> <li> <p>a.  </p> <ul> <li>Tour 1 : 0 peut \u00e9crire, 1 ne peut pas lire</li> <li>Tour 2 : 1 peut lire, 0 ne peut pas \u00e9crire</li> <li>Tour 3 : 0 peut \u00e9crire, 1 ne peut pas lire</li> <li>Tour 4 : 0 peut \u00e9crire, 1 ne peut pas lire</li> </ul> <p>b. Durant un cycle de 4 tours, 0 \u00e9crit 3 valeurs et une seule de ces valeurs est lue par 1 la proportion est donc de \\(\\dfrac{1}{3}\\).</p> </li> <li> <p>Tableau compl\u00e9t\u00e9 :</p> Tour P\u00e9riph\u00e9rique Adresse Op\u00e9ration R\u00e9ponse ordonnanceur <code>ATT_L</code> <code>ATT_E</code> 1 0 <code>10</code> \u00e9criture <code>\"OK\"</code> vide vide 1 1 <code>10</code> lecture <code>\"ATT\"</code> <code>(1, 10)</code> vide 1 2 <code>11</code> \u00e9criture <code>\"OK\"</code> <code>(1, 10)</code> vide 1 3 <code>11</code> lecture <code>\"ATT\"</code> <code>(1, 10), (3, 11)</code> vide 2 1 <code>10</code> lecture <code>\"OK\"</code> <code>(3, 11)</code> vide 2 3 <code>11</code> lecture <code>\"OK\"</code> vide vide 2 0 <code>10</code> \u00e9criture <code>\"ATT\"</code> vide <code>(0, 10)</code> 2 2 <code>12</code> \u00e9criture <code>\"OK\"</code> vide <code>(0, 10)</code> 3 0 <code>10</code> \u00e9criture <code>\"OK\"</code> vide vide 3 1 <code>10</code> lecture <code>\"ATT\"</code> <code>(1, 10)</code> vide 3 2 <code>11</code> \u00e9criture <code>\"OK\"</code> <code>(1, 10)</code> vide 3 3 <code>12</code> lecture <code>\"OK\"</code> <code>(1, 10)</code> vide </li> <li> <p>a. Pour le p\u00e9riph\u00e9rique 1 : la sortie <code>s</code> est \u00e0 1 uniquement lorsque <code>e0</code> vaut 1 et <code>e1</code> vaut 0 (l'\u00e9criture binaire de 1 est 01). </p> <p>b. Pour le p\u00e9riph\u00e9rique 2 : la sortie <code>s</code> est \u00e0 1 uniquement lorsque <code>e0</code> vaut 0 et <code>e1</code> vaut 1 (l'\u00e9criture binaire de 2 est 10). </p> <p>c. Pour le p\u00e9riph\u00e9rique 0 : la sortie <code>s</code> est \u00e0 1 uniquement lorsque <code>e0</code> vaut 0 et <code>e1</code> vaut 0 (l'\u00e9criture binaire de 0 est 00). </p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1PO1/#exercice-3","title":"Exercice 3","text":"<p>base de donn\u00e9es, mod\u00e8le relationnel, langage SQL </p> <ol> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT ip,nompage FROM Visites;\n</code></pre></p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT ip FROM Visites;\n</code></pre></p> <p>c. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nompage FROM Visites WHERE ip=\"192.168.1.91\";\n</code></pre></p> </li> <li> <p>a. <code>identifiant</code> est la cl\u00e9 primaire de la table <code>Visites</code></p> <p>b. <code>identifiant</code> est une cl\u00e9 \u00e9trang\u00e8re de la table <code>Pings</code></p> <p>c. Le syst\u00e8me de gestion de base de donn\u00e9es va v\u00e9rifier :</p> <ul> <li>la contrainte d'unicit\u00e9 : deux enregistrements de la table <code>Visites</code> ne peuvent avoir le m\u00eame attribut <code>identifiant</code>.</li> <li>l'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle : l'attribut <code>identifiant</code> dans <code>Pings</code> correspond \u00e0 une valeur pr\u00e9sente dans la table <code>Visites</code></li> </ul> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Pings VALUES (1534,105);\n</code></pre> </li> <li> <p>a.     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE PINGS SET duree = 120 WHERE identifiant = 1534;\n</code></pre>     b.  Dans le protocole tcp/ip les donn\u00e9es sont scind\u00e9s en paquets et chaque paquet est envoy\u00e9 s\u00e9par\u00e9ment. Les routes emprunt\u00e9es par les diff\u00e9rents paquets peuvent \u00eatre diff\u00e9rents et donc l'ordre d'arriv\u00e9e n'est pas forc\u00e9ment celui de d\u00e9part. De plus, certains paquets peuvent m\u00eame \u00eatre perdus et donc \u00eatre r\u00e9exp\u00e9di\u00e9s. </p> <p>c.  En utilisant une requ\u00eate de mise \u00e0 jour, on risque de mettre \u00e0 jour la table avec une valeur obsol\u00e8te mais arriv\u00e9e plus tard qu'une valeur plus r\u00e9cente.</p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT Visites.nompage FROM Visites JOIN Pings ON Visites.identifiant = Pings.identifiant WHERE Pings.duree &gt; 60;\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1PO1/#exercice-4","title":"Exercice 4","text":"<p>structures de donn\u00e9es, piles </p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def est_triee(self):\n    if not self.est_vide() :\n        e1 = self.depiler()\n        while not self.est_vide():\n            e2 = self.depiler()\nif e1 &gt; e2 :\nreturn False\ne1 = e2\nreturn True\n</code></pre> </li> <li> <p>a. L'appel <code>A.est_triee()</code> renvoie <code>False</code> (le sommet de la pile 4 est sup\u00e9rieur \u00e0 l'\u00e9l\u00e9ment situ\u00e9 en dessous le test ci-dessus ligne 6 est donc valid\u00e9 et <code>est_triee</code> renvoie <code>False</code>)</p> <p>b. Apr\u00e8s cet appel la pile <code>A</code> contient <code>[1,2]</code>, en effet seuls les deux premiers \u00e9l\u00e9ments ont \u00e9t\u00e9 d\u00e9pil\u00e9s.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def depile_max(self):\n    assert not self.est_vide(), \"Pile vide\"\n    q = Pile()\n    maxi = self.depiler()\n    while not self.est_vide():\n        elt = self.depiler()\n        if maxi &lt; elt:\n            q.empiler(maxi)\nmaxi = elt\nelse :\nq.empiler(elt)\nwhile not q.est_vide():\n        self.empiler(q.depiler())\n    return maxi\n</code></pre> </li> <li> <p>a.  </p> <ul> <li>It\u00e9ration n\u00b0 1 : <code>B = [9, -7, 8]</code> et <code>q = [4]</code> (on a trouv\u00e9 un nouveau maximum : 12, on empile l'ancien dans la sauvegarde)</li> <li>It\u00e9ration n\u00b0 2: <code>B = [9, -7]</code> et <code>q = [4, 8]</code> (8 n'est pas un nouveau maximum, on l'empile donc dans la sauvegarde)</li> <li>It\u00e9ration n\u00b0 3: <code>B = [9]</code> et <code>q = [4, 8, -7]</code> </li> <li>It\u00e9ration n\u00b0 3: <code>B = []</code> et <code>q = [4, 8, -7, 9]</code> </li> </ul> <p>b. La contenu de la pile de sauvegarde <code>q</code> est empil\u00e9 dans la pile de d\u00e9part donc \u00e0 la ligne 14, <code>B = [9, -7, 8, 4]</code> et <code>q = []</code></p> <p>c. On peut prendre l'exemple de la pile <code>[5, 2, 3]</code> : * It\u00e9ration n\u00b01 : <code>B = [5]</code> et <code>q = [2]</code> (2 n'\u00e9tant pas un nouveau maximum on l'a empil\u00e9 et conserv\u00e9 3 comme maximum courant) * It\u00e9ration n\u00b02 : <code>B = []</code> et <code>q = [2,3]</code> (3 est empil\u00e9 un nouveau maximum a \u00e9t\u00e9 trouv\u00e9) * Dans la seconde boucle while on obtient alors <code>B = [3,2]</code> l'ordre n'est pas conserv\u00e9.</p> </li> <li> <p>a.  Contenu des piles <code>B</code> et <code>q</code> :</p> <ul> <li>avant la ligne 3 : <code>B = [1, 6, 4, 3, 7, 2]</code> et <code>q = []</code></li> <li>avant la ligne 5 : <code>B = []</code> et <code>q = [7, 6, 4, 3, 2, 1]</code></li> <li>\u00e0 la fin de l'ex\u00e9cution de <code>traiter()</code> : <code>B = [1, 2, 3, 4, 6, 7]</code> et <code>q = []</code></li> </ul> <p>b. Cette m\u00e9thode permet de ranger par ordre croissant les \u00e9l\u00e9ments de la pile (la plus grande valeur se situe au sommet de la pile)</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ1PO1/#exercice-5","title":"Exercice 5","text":"<p>algorithmique, algorithme sur les abres binaires </p> <ol> <li> <p>a. La hauteur de cet arbre est 2.</p> <p>b. Un exemple d'arbre binaire de hauteur 4 : <pre><code>graph TD\nA[\"A\"] --&gt; B[\"B\"]\nA --&gt; C[\"C\"]\nB --&gt; D[\"D\"]\nB --&gt; E[\"E\"]\nC --&gt; V1[\" \"]\nC --&gt; F[\"F\"]\nD --&gt; G[\"G\"]\nD --&gt; H[\"H\"]\nH --&gt; I[\"I\"]\nH --&gt; J[\"J\"]\nstyle V1 fill:#FFFFFF, stroke:#FFFFFF\nlinkStyle 4 stroke:#FFFFFF,stroke-width:0px</code></pre></p> </li> <li> \ud83d\udccb Texte<pre><code>Algorithme hauteur(A):\n    test d'assertion : A est suppos\u00e9 non vide\n    si sous_arbre_gauche(A) vide et sous_arbre_droit(A) vide:\n        renvoyer 0\n    sinon, si sous_arbre_gauche(A) vide:\n        renvoyer 1 + hauteur(sous_arbre_droit(A))\n    sinon, si sous_arbre_droit(A) vide :\n        renvoyer renvoyer 1 + hauteur(sous_arbre_gauche(A))\n    sinon:\n        renvoyer 1 + max(hauteur(sous_arbre_gauche(A)),hauteur(sous_arbre_droit(A)))\n</code></pre> </li> <li> <p>a. Si D \u00e9tait vide, la hauteur de R serait de 3 (1 + celle de son sous arbre gauche). Donc D n'est pas vide et sa hauteur est 3.</p> <p>b. Illustration par un exemple : <pre><code>graph TD\nR[\"R\"] --&gt; G1[\"G1\"]\nR[\"R\"] --&gt; D1[\"D1\"]\nsubgraph Sous arbre droit de hauteur 3\nD1 --&gt; D2[\"D2\"]\nD1 --&gt; D3[\"D3\"]\nD2 --&gt; D4[\"D4\"]\nD2 --&gt; V1[\" \"]\nD4 --&gt; D5[\"D5\"]\nD4 --&gt; V2[\" \"]\nend\nsubgraph Sous arbre gauche de hauteur 2\nG1[\"G1\"] --&gt; G2[\"G2\"]\nG1 --&gt; G3[\"G3\"]\nG2 --&gt; G4[\"G4\"]\nG2 --&gt; G5[\"G5\"]\nend\nstyle V1 fill:#FFFFFF, stroke:#FFFFFF\nstyle V2 fill:#FFFFFF, stroke:#FFFFFF\nlinkStyle 5 stroke:#FFFFFF,stroke-width:0px\nlinkStyle 7 stroke:#FFFFFF,stroke-width:0px</code></pre></p> </li> <li> <p>a. Sur l'abre binaire de la question 1.a, \\(h=2\\) et \\(n=4\\), et on a bien \\(3 \\leq 4 \\leq 2^3-1\\). Les in\u00e9galit\u00e9s sont donc v\u00e9rifi\u00e9es</p> <p>b. Il suffit que chaque noeud (sauf la feuille) ait un seul et unique fils . Par exemple pour \\(h=3\\) : <pre><code>graph TD\nS1[\"S1\"] --&gt; S2[\"S2\"]\nS1 --&gt; V1[\" \"]\nS2[\"S2\"] --&gt; S3[\"S3\"]\nS2 --&gt; V2[\" \"]\nS3[\"S3\"] --&gt; S4[\"S4\"]\nS3 --&gt; V3[\" \"]\nstyle V1 fill:#FFFFFF, stroke:#FFFFFF\nstyle V2 fill:#FFFFFF, stroke:#FFFFFF\nstyle V3 fill:#FFFFFF, stroke:#FFFFFF\nlinkStyle 1 stroke:#FFFFFF,stroke-width:0px\nlinkStyle 3 stroke:#FFFFFF,stroke-width:0px\nlinkStyle 5 stroke:#FFFFFF,stroke-width:0px</code></pre></p> <p>c. Il suffit que chaque noeud (sauf les feuilles) ait deux fils. Par exemple pour \\(h=2\\) : <pre><code>graph TD\nS1[\"S1\"] --&gt; S2[\"S2\"]\nS1 --&gt; S3[\"S3\"]\nS2 --&gt; S4[\"S4\"]\nS2 --&gt; S5[\"S5\"]\nS3 --&gt; S6[\"S6\"]\nS3 --&gt; S7[\"S7\"]</code></pre> 5.  <pre><code>graph TD\nS1[\"S1\"] --&gt; S2[\"S2\"]\nS2 --&gt; S3[\"S3\"]\nS3 --&gt; S4[\"S4\"]\nS3 --&gt; S5[\"S5\"]\nS2 --&gt; S6[\"S6\"]\nS6 --&gt; S7[\"S7\"]\nS6 --&gt; S8[\"S8\"]\nS1 --&gt; S9[\"S9\"]\nS9 --&gt; S10[\"S10\"]\nS9 --&gt; V1[\" \"]\nstyle V1 fill:#FFFFFF, stroke:#FFFFFF\nlinkStyle 9 stroke:#FFFFFF,stroke-width:0px</code></pre> 6. \ud83d\udc0d Script Python<pre><code>def fabrique(h, n):\n    def annexe(hauteur_max):\n        if n == 0 :\n            return arbre_vide()\n        elif hauteur_max == 0:\n            n = n - 1\nreturn arbre(arbre(vide),arbre(vide))\nelse:\n            n = n - 1\n            gauche = annexe(hauteur_max - 1)\ndroite = annexe(hauteur_max - 1)\nreturn arbre(gauche, droite)\n    return annexe(h)\n</code></pre></p> <p>Bug</p> <p>Le code donn\u00e9 ne fonctionne pas en l'\u00e9tat, en effet la variable <code>n</code> n'est pas accessible depuis le corps de la fonction <code>annexe</code>. Pour cela, il faut ajouter <code>non local n</code></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AN1/","title":"22 NSIJ2AN1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ2AN1/#22-nsij2an1-corrige","title":"22-NSIJ2AN1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Am\u00e9rique du nord Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ2AN1/#exercice-1","title":"Exercice 1","text":"<p>listes, arbres binaires de recherche et programmation orient\u00e9e objet </p> <ol> <li> <p>a. \ud83d\udc0d Script Python<pre><code>class Concurrent: \n    def __init__(self, pseudo, temps, penalite): \n        self.nom = pseudo \n        self.temps = temps \n        self.penalite = penalite \n        self.temps_tot = temps + penalite \n</code></pre></p> <p>b. Pour c1, <code>temps_tot</code> est \u00e9gal \u00e0 99,67 (87,67 + 12)</p> <p>c <code>c1.temps_tot</code></p> </li> <li> <p>a      \ud83d\udc0d Script Python<pre><code>L1 = resultats.queue() \nL2 = L1.queue() \nc1 = L2.tete()\n</code></pre></p> <p>ou bien directement :  </p> \ud83d\udc0d Script Python<pre><code>c1 = resultats.queue().queue().tete()\n</code></pre> <p>b  \ud83d\udc0d Script Python<pre><code>temps_total = resultats.tete().temps_tot\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def meilleur_conccurent(L): \n    conc_mini = L.tete() \n    mini = conc_mini.temps_tot \n    Q = L.queue() \n    while not(Q.est_vide()): \n        elt = Q.tete() \n        if elt.temps_tot &lt; mini : \n            conc_mini = elt \n            mini = elt.temps_tot \n        Q = Q.queue() \n    return conc_mini\n</code></pre> </li> <li> <pre><code>    graph TD\n    H[\"C6\"] --&gt; G[\"C3\"]\n    H --&gt; F[\"C5\"]\n    F --&gt; B[\"C2\"]\n    F --&gt; C[\"C4\"]\n    C --&gt; D[\"C1\"]\n    C --&gt; V1[\" \"]\n    style V1 fill:#FFFFFF, stroke:#FFFFFF\n    linkStyle 5 stroke:#FFFFFF,stroke-width:0px</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AN1/#exercice-2","title":"Exercice 2","text":"<p>syst\u00e8mes d'exploitation, gestion des processus par un syst\u00e8me d'exploitation </p> <ol> <li>a. Proposition 2     b. cd lycee     c. mkdir algorithmique     d. rm image1.jpg  </li> <li>a. PID du parent du processus d\u00e9marr\u00e9 par la commande vi : 927     b. PID d\u2019un processus enfant du processus d\u00e9marr\u00e9 par la commande xfce4-terminal : 1058     c. PID de deux processus qui ont le m\u00eame parent : 1153 et 1154 (parent PID 927)     d. PID des deux processus qui ont consomm\u00e9 le plus de temps processeur : 923 et 1036  </li> <li>a. P1 -  P2 - P3 - P1 - P3 - P1 - P3 - P3     b. P2 -  P1 - P1 - P1 - P3 - P3 - P3 - P3    </li> <li> <p>a. Un processus peut \u00eatre dans un \u00e9tat : \u00c9LU, PR\u00caT ou BLOQU\u00c9     Voici une situation qui peut provoquer un interblocage :  </p> <ul> <li>P1 est \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R1, il l\u2019obtient (car R1 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P2 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R2, il l\u2019obtient (car R2 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P3 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R3, il l\u2019obtient (car R3 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P1 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R2, il ne l\u2019obtient pas (car R2 est d\u00e9j\u00e0 utilis\u00e9 par P2). P1 passe \u00e0 l\u2019\u00e9tat BLOQU\u00c9   </li> <li>P2 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R3, il ne l\u2019obtient pas (car R3 est d\u00e9j\u00e0 utilis\u00e9 par P3). P2 passe \u00e0 l\u2019\u00e9tat BLOQU\u00c9  </li> <li>P3 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R1, il ne l\u2019obtient pas (car R1 est d\u00e9j\u00e0 utilis\u00e9 par P1). P3 passe \u00e0 l\u2019\u00e9tat BLOQU\u00c9. Les 3 processus se retrouvent \u00e0 l\u2019\u00e9tat BLOQU\u00c9, nous avons ici un ph\u00e9nom\u00e8ne d\u2019interblocage. </li> </ul> <p>b. Pour \u00e9viter le ph\u00e9nom\u00e8ne d\u2019interblocage, il suffit d\u2019inverser les 2 lignes Demande R3 et Demande R2 pour le processus P3. On obtient alors :  </p> <ul> <li>P1 est \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R1, il l\u2019obtient (car R1 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P2 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R2, il l\u2019obtient (car R2 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P3 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R1, il ne l\u2019obtient pas (car R1 est d\u00e9j\u00e0 utilis\u00e9 par P1). P3 passe \u00e0 l\u2019\u00e9tat BLOQU\u00c9  </li> <li>P1 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R2, il ne l\u2019obtient pas (car R2 est d\u00e9j\u00e0 utilis\u00e9 par P2). P1 passe \u00e0 l\u2019\u00e9tat BLOQU\u00c9  </li> <li>P2 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R3, il l\u2019obtient (car R3 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P2 lib\u00e8re R2   </li> <li>P2 lib\u00e8re R3  </li> <li>P1 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R2, il l\u2019obtient (car R2 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P1 Lib\u00e8re R1  </li> <li>P1 lib\u00e8re R2  </li> <li>P3 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R1, il l\u2019obtient (car R1 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P3 passe \u00e0 l\u2019\u00e9tat \u00c9LU, il demande R3, il l\u2019obtient (car R3 est libre) puis passe \u00e0 l\u2019\u00e9tat PR\u00caT  </li> <li>P3 Lib\u00e8re R3  </li> <li>P3 lib\u00e8re R1  </li> </ul> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AN1/#exercice-3","title":"Exercice 3","text":"<p>bases de donn\u00e9es relationnelles et le langage SQL </p> <ol> <li> <p>a. Une cl\u00e9 primaire d\u2019une relation est un attribut (ou plusieurs attributs) dont la valeur permet d'identifier de mani\u00e8re unique un p-uplet de la relation.     b. Une cl\u00e9 \u00e9trang\u00e8re est un attribut qui permet d\u2019\u00e9tablir un lien entre 2 relations     c. Un abonn\u00e9 ne peut pas r\u00e9server plusieurs fois la m\u00eame s\u00e9ance, car le couple idAbonn\u00e9 et idS\u00e9ance est une cl\u00e9 primaire pour la relation R\u00e9servation. Il est donc impossible d\u2019avoir 2 fois la m\u00eame s\u00e9ance pour le m\u00eame abonn\u00e9.     d.      |idAbonn\u00e9 |idS\u00e9ance| nbPlaces_plein |nbPlaces_r\u00e9duit |     |:---:|:----:|:---:|:---:|     |13 | 737|3|2|</p> </li> <li> <p>a.     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, r\u00e9alisateur FROM Film WHERE dur\u00e9e &lt; 120 ;\n</code></pre></p> <p>b. Cette requ\u00eate permet de d\u00e9terminer le nombre de s\u00e9ances propos\u00e9es les 22 et 23 octobre 2021. 3.  a. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, pr\u00e9nom FROM Abonn\u00e9\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, dur\u00e9e FROM Film JOIN S\u00e9ance ON Film.idFilm = S\u00e9ance.idFilm WHERE date = 2021-10-12 AND heure = 21:00\n</code></pre></p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Film SET dur\u00e9e = 127 WHERE titre = \"Jungle Cruise\"\n</code></pre></p> <p>b. idS\u00e9ance est une cl\u00e9 \u00e9trang\u00e8re pour la relation R\u00e9servation. La suppression d\u2019une s\u00e9ance risque donc de provoquer des probl\u00e8mes dans la relation R\u00e9servation (avec un R\u00e9servation.idS\u00e9ance ne correspondant \u00e0 aucun S\u00e9ance.idR\u00e9servation). c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELETE FROM S\u00e9ance WHERE idS\u00e9ance = 135\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AN1/#exercice-4","title":"Exercice 4","text":"<p>arbres binaires et algorithmes associ\u00e9s </p> <ol> <li>a. La racine de l\u2019arbre B est Milka     b. feuilles de l\u2019arbre B : Nemo, Moka, Maya, Museau et Noisette     c. Nuage est une femelle puisque c\u2019est la m\u00e8re de Nougat     d. p\u00e8re : Ulk ; m\u00e8re : Maya   </li> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>def present(arb, nom): \n    if est_vide(arb): \n        return False \n    elif racine(arb) == nom: \n        return True \n    else : \n        return present(droit(arb), nom) or present(gauche(arb), nom) \n</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>def parents(arb): \n    if est_vide(gauche(arb)): \n        pere=\"\" \n    else : \n        pere = racine(gauche(arb)) \n    if est_vide(droit(arb)): \n        mere=\"\" \n    else : \n        mere = racine(droit(arb)) \n    return (pere, mere)\n</code></pre></p> </li> <li> <p>a. Mango et Cacao ont le m\u00eame p\u00e8re (Domino). Milka et Cacao ont la m\u00eame m\u00e8re (Nougat)     b.      \ud83d\udc0d Script Python<pre><code>def frere_soeur(arbre1, arbre2): \n    parents1 = parents(arbre1) \n    parents2 = parents(arbre2) \n    return parents1[0]==parents2[0] or parents1[1]==parents2[1]\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def nombre_chiens(arb, n): \n    if est_vide(arb): \n        return 0 \n    elif n == 0: \n        return 1 \n    else: \n        return nombre_chiens(gauche(arb), n-1) + nombre_chiens(droit(arb), n-1)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AN1/#exercice-5","title":"Exercice 5","text":"<p>tableaux \u00e0 deux dimensions et la programmation Python en g\u00e9n\u00e9ral </p> <p>Partie A  </p> <ol> <li>a     b. ligne = 3 ; colonne = 0     c. pixel situ\u00e9 en haut et \u00e0 gauche : ligne = li - 1 ; colonne = co - 1     pixel situ\u00e9 en haut et \u00e0 droite : ligne = li - 1 ; colonne = co + 1   </li> <li> <p>a. si image[li - 1][co - 1] est \u00e9gal \u00e0 image[li - 1][co + 1] alors image[li][co] est \u00e9gal \u00e0 1.     b.      \ud83d\udc0d Script Python<pre><code>def remplir_ligne(image, li): \n    image[li][0] = 0 \n    image[li][7] = 0 \n    for co in range(1,7): \n        if image[li-1][co-1] != image[li-1][co+1]: \n            image[li][co] = 1\n</code></pre></p> <p>c.  \ud83d\udc0d Script Python<pre><code>def remplir(image): \n    for li in range(1,5): \n        remplir_ligne(image, li)\n</code></pre></p> </li> </ol> <p>PARTIE B  </p> <ol> <li> <p>a. Repr\u00e9sentation en base 10 de l\u2019entier correspondant : 44     b.      \ud83d\udc0d Script Python<pre><code>def conversion2_10(tab): \n    nb_bit = len(tab) \n    s = 0 \n    for i in range(nb_bit): \n        s = s + tab[i]*2**(nb_bit-1-i) \n    return s\n</code></pre></p> <p>c. tableau associ\u00e9 \u00e0 78 : <code>[0,1,0,0,1,1,1,0]</code> 2.  a. pr\u00e9conditions : Le bit de poids fort est \u00e0 z\u00e9ro :  l\u2019entier ne doit pas d\u00e9passer 127. Le bit de poids faible est \u00e0 z\u00e9ro : l\u2019entier doit \u00eatre pair. On peut donc utiliser tous les nombres paires entre 0 et 126.  b.  \ud83d\udc0d Script Python<pre><code>def generer(n,k): \n    tab = [None for i in range(k)] \n    image = [[0 for j in range(8)]  for i in range(k+1)] \n    t = conversion10_2(n) \n    for i in range(8): \n        image[0][i] = t[i] \n    tab[0]=n \n    for li in range(1,k): \n        remplir_ligne(image, li) \n        tab[li] = conversion2_10(image[li]) \n    return tab\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AS1/","title":"22 NSIJ2AS1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ2AS1/#22-nsij2as1-corrige","title":"22-NSIJ2AS1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Am\u00e9rique du sud Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ2AS1/#exercice-1","title":"Exercice 1","text":"<p>programmation, algorithmique et complexit\u00e9 </p> <ol> <li> <p>Le bloc d'instructions a \u00e9crire est surlign\u00e9     \ud83d\udc0d Script Python<pre><code>def plus_proche_voisin(t, cible):\n    dmin = distance(t[0],cible)\n    idx_ppv = 0\n    n = len(t)\n    for idx in range(1,n):\nif distance(t[idx],cible) &lt; dmin:\ndmin = distance(t[idx],cible)\nidx_ppv = idx\nreturn idx_ppv\n</code></pre></p> <p>Note</p> <p>On parcourt le tableau <code>t</code>, si un \u00e9l\u00e9ment plus proche de la cible est trouv\u00e9 alors on met \u00e0 jour l'indice et la valeur du minimum.</p> </li> <li> <p>Le bloc est r\u00e9p\u00e9t\u00e9 <code>n-1</code> fois o\u00f9 <code>n</code> est la taille du tableau <code>t</code>, comme le co\u00fbt du bloc est constant, la complexit\u00e9 de la fonction <code>plus_proche_voisin</code> est lin\u00e9aire (c'est \u00e0 dire en \\(\\mathcal{O}(n)\\)).</p> </li> <li> <p>Note<p>Bien comprendre l'algorithme propos\u00e9 :</p> </p> <ul> <li>la liste <code>kppv</code> est initialement vide, on y rangera au fil du parcours les <code>k</code> plus proches voisins dans l'ordre d\u00e9croissant de leur distance (l'\u00e9l\u00e9ment d'indice 0 est donc le plus \u00e9loign\u00e9)</li> <li>si la liste <code>kppv</code> contient moins de <code>k</code> \u00e9l\u00e9ments, alors on y range l'\u00e9l\u00e9ment parcouru</li> <li>sinon si un \u00e9l\u00e9ment plus proche est trouv\u00e9 alors on supprime le premier de la liste et on ins\u00e8re ce nouvel \u00e9l\u00e9ment dans <code>kppv</code>.</li> </ul> <p>a. Pour faire un seul appel \u00e0 la fonction <code>distance</code>, il suffit de stocker le r\u00e9sultat de l'appel dans une variable : <code>d_idx = distance(obj,cible)</code></p> <p>b. Maintenir la liste <code>kppv</code> tri\u00e9e permet de comparer uniquement avec son premier \u00e9l\u00e9ment pour savoir si on ins\u00e8re.</p> <p>c.  \ud83d\udc0d Script Python<pre><code>def insertion(kppv,idx,d):\n    position_insertion = 0\n    while d &lt; kppv[position_insertion][1] and position_insertion&lt;len(kppv)-1:\n        position_insertion += 1\n    kppv.insert(position_insertion,(idx,d))\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AS1/#exercice-2","title":"Exercice 2","text":"<p>r\u00e9seaux et routage </p> <p>Partie A</p> <ol> <li> <p>C'est la commande <code>ifconfig</code></p> <p>Note</p> <p>Pour m\u00e9moire :</p> <ul> <li><code>ping</code> permet de tester l'acc\u00e8s \u00e0 une machine \u00e0 travers un r\u00e9seau ip</li> <li><code>ps</code> liste les processus</li> <li><code>ls</code> liste les fichiers et dossiers</li> </ul> </li> <li> <p>C'est le protocole dhcp</p> <p>Note</p> <p>Pour m\u00e9moire :</p> <ul> <li>Un serveur dns permet d'associer des noms de domaines \u00e0 des adresses</li> <li>Le protocole tcp est le protocole de la couche transport du mod\u00e8le tcp/ip charg\u00e9 d'acheminer les informations (par paquets)</li> <li>Le protocole http est le protocole de la couche application</li> </ul> </li> <li> <p>La seule adresse ip possible est <code>192.168.1.1</code></p> <p>Note</p> <ul> <li>Le masque de sous r\u00e9seau est <code>255.255.255.0</code>, donc pour faire partie du m\u00eame r\u00e9seau, les trois premiers octets doivent \u00eatre identiques. Les adresses <code>192.168.0.14</code> et <code>192.168.0.1</code> ne sont donc pas possibles (car elles ne commencent pas par <code>192.168.1</code>)</li> <li>L'adresse <code>192.168.1.255</code> est une adresse r\u00e9serv\u00e9e (adresse de diffusion ou broadcast en anglais)</li> </ul> </li> <li> <p>C'est possible et cette adresse serait celle de la box vers Internet.</p> <p>Note</p> <p>La box sert de routeur pour acc\u00e9der \u00e0 Internet</p> </li> <li> <p>Oui, car les adresses <code>192.168.x.x</code> ne sont pas rout\u00e9es sur internet</p> </li> </ol> <p>Partie B</p> <ol> <li> <p>La bande passante d'une liaison VDSL est 50 Mb/s, son co\u00fbt est donc : \\(\\dfrac{10^9}{50 \\times 10^6}\\) ce qui fait bien 20.</p> </li> <li> <p></p> </li> <li> <p>La route utilis\u00e9e sera : <code>R1</code> <code>R3</code> <code>R6</code> <code>R7</code> <code>R4</code> <code>R5</code> <code>R8</code> pour un co\u00fbt total de \\(10+10+10+10+20+20=80\\)</p> </li> <li> <p>Le co\u00fbt maximal de cette liaison devra \u00eatre de 40, en effet le co\u00fbt maximal de la route <code>R1</code> <code>R4</code> <code>R5</code> <code>R8</code> sera alors de 80. On doit r\u00e9soudre \\(\\dfrac{10^9}{BP} &lt; 40\\) ce qui donne : \\(BP &gt; \\dfrac{10^9}{40}\\) c'est \u00e0 dire \\(BP &gt; 25\\) Mb/s.</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AS1/#exercice-3","title":"Exercice 3","text":"<p>base de donn\u00e9es </p> <ol> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE ModeleVelo\nSET Stock = 0 WHERE nomModele = 'Bovelo';\n</code></pre> <p>Attention</p> <p>La cl\u00e9 primaire de la table ModeleVelo est <code>idModele</code>, en toute logique les op\u00e9rations de mises \u00e0 jour devraient s'effectuer via cette cl\u00e9. Par exemple si plusieurs v\u00e9los diff\u00e9rents ont comme <code>nomModele</code> <code>Bovelo</code> les stocks de ces v\u00e9los seront tous mis \u00e0 z\u00e9ro.</p> </li> <li> <p>On doit commencer par ex\u00e9cuter la requ\u00eate 4 (<code>Ravel</code> est un nouveau fabricant) puis la requ\u00eate 2.</p> </li> <li> <p>a. Pour avoir les mod\u00e8les en rupture de stock et l'identifiant de leur fabricant :     \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nomModele, idFabricant\nFROM ModeleVelo\nWHERE Stock = 0;\n</code></pre></p> <p>b. Pour avoir le nombre de commandes pass\u00e9es depuis le <code>2022-01-01</code> inclus : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*)\nFROM Commande\nWHERE date &gt;= '2022-01-01';\n</code></pre></p> <p>c. Pour avoir les noms des fabricants dont le stock de v\u00e9los est strictement positif. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT Fabricant.nom FROM Fabricant\nJOIN ModeleVelo ON ModeleVelo.idFabricant = Fabricant.idFabricant\nWHERE ModeleVelo.Stock &gt; 0;\n</code></pre></p> </li> <li> <p>Cette requ\u00eate permet d'obtenir les noms des clients ayant command\u00e9 un v\u00e9lo dont le mod\u00e8le est <code>Bovelo</code>.</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AS1/#exercice-4","title":"Exercice 4","text":"<p>programmation en Python, r\u00e9cursivit\u00e9 et m\u00e9thode diviser pour r\u00e9gner </p> <ol> <li> <p>a.  Pour importer la fonction <code>sqrt</code> du module <code>math</code>, on peut \u00e9crire :     \ud83d\udc0d Script Python<pre><code>from math import sqrt\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def distance(a,b):\n    xa,ya = a\n    xb,yb = b\n    return sqrt((xb-xa)**2+(yb-ya)**2)\n</code></pre></p> <p>Note</p> <p>On rappelle que <code>a</code> est un tuple repr\u00e9sentant les coordonn\u00e9es du point <code>xa,ya = a</code> permet de r\u00e9cup\u00e9rer ces deux coordonn\u00e9es. Par exemple si <code>a = (5,7)</code> alors <code>xa = 5</code> et <code>ya = 7</code>. On pourrait de fa\u00e7on \u00e9quivalent \u00e9crire : <code>xa = a[0]</code> et <code>ya = a[1]</code>.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def distance(p,a,b):\n    if a == b:\n        return distance(p,a)\n    else:\n        return distance_point_droite(p, a, b)\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def le_plus_loin(ligne):\n    n = len(ligne)\n    deb = ligne[0]\n    fin = ligne[n-1]\n    dmax = 0\n    indice_max = 0\n    for idx in range(1,n-1):\np = ligne[idx]\nd = distance(p, deb, fin)\nif d &gt; dmax:\ndmax = d\nindice_max = idx\nreturn indice_max, dmax\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def extrait(tab, i, j):\n    return [tab[k] for k in range(i,j+1)]\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def simplifie(ligne,seuil):\n    n = len(ligne)\n    if n &lt;=2:\nreturn ligne\nelse:\n        indice_max, dmax = le_plus_loin(ligne)\n        if dmax &lt;= seuil:\nreturn [ligne[0],ligne[n-1]]\nelse:\nreturn simplifie(extrait(ligne,0,indice_max)) + simplifie(extrait(ligne,indice_max,n))\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2AS1/#exercice-5","title":"Exercice 5","text":"<p>arbres binaires, programmation orient\u00e9e objet et r\u00e9cursivit\u00e9 </p> <ol> <li> <p>La plus grand somme racine-feuille de cette arbre est 16, elle est obtenu pour la branche en rouge dans le sch\u00e9ma suivant :     <pre><code>    graph TD\n    A[\"2\"] --&gt; B[\"7\"]\n    A --&gt; C[\"5\"]\n    B --&gt; D[\"4\"]\n    B --&gt; E[\"1\"]\n    C --&gt; F[\"3\"]\n    C --&gt; G[\"8\"]\n    D --&gt; H[\"2\"]\n    D --&gt; I[\"3\"]\n    E --&gt; V1[\" \"]\n    E --&gt; J[\"5\"]\n    F --&gt; V2[\" \"]\n    F --&gt; K[\"1\"]\n    style V1 fill:#FFFFFF, stroke:#FFFFFF\n    style V2 fill:#FFFFFF, stroke:#FFFFFF\n    linkStyle 8 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 10 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 0 stroke:#FF0000,stroke-width:2px\n    linkStyle 2 stroke:#FF0000,stroke-width:2px\n    linkStyle 7 stroke:#FF0000,stroke-width:2px</code></pre></p> </li> <li> <p>a. On peut \u00e9crire la suite d'instructions suivante :     \ud83d\udc0d Script Python<pre><code>s2 = Noeud(2)\ns7 = Noeud(7)\ns5 = Noeud(5)\ns2.modifier_sag(s7)\ns2.modifier_sad(s5)\ns4 = Noeud(4)\ns1 = Noeud(1)\ns7.modifier_sag(s4)\ns7.modifier_sad(s1)\ns8 = Noeud(8)\ns5.modifier_sad(s8)\n</code></pre></p> <p>b. L'appel \u00e0 niveau sur cet arbre renvoie 3.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def pgde_somme(self):\n    if self.sag != None and self.sad!=None:\n        pgde_gauche = self.sag.pgde_somme()\n        pgde_droite = self.sad.pgde_somme()\n        return self.etiquette + max(pgde_gauche,pgde_droite)\n    if self.sag != None:\n        return self.etiquette + self.sag.pgde_somme()\n    if self.sad != None:\n        return self.etiquette + self.sad.pgde_somme()\n    return self.etiquette\n</code></pre> </li> <li> <p>a. Arbre compl\u00e9t\u00e9 :     <pre><code>    graph TD\n    A[\"5\"] --&gt; B[\"3\"]\n    A --&gt; C[\"5\"]\n    B --&gt; D[\"4\"]\n    B --&gt; E[\"3\"]\n    C --&gt; F[\"3\"]\n    C --&gt; G[\"4\"]\n    D --&gt; H[\"2\"]\n    D --&gt; I[\"2\"]\n    E --&gt; V1[\" \"]\n    E --&gt; J[\"3\"]\n    F --&gt; V2[\" \"]\n    F --&gt; K[\"1\"]\n    style V1 fill:#FFFFFF, stroke:#FFFFFF\n    style V2 fill:#FFFFFF, stroke:#FFFFFF\n    style B fill:#CCCCCC, stroke:#0000FF\n    style E fill:#CCCCCC, stroke:#0000FF\n    style G fill:#CCCCCC, stroke:#0000FF\n    style I fill:#CCCCCC, stroke:#0000FF\n    linkStyle 8 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 10 stroke:#FFFFFF,stroke-width:0px</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>def est_magique(self):\n    if self.sad is not None and self.sag is not None:\n        return self.sad.est_magique() and self.sag.est_magique() and self.sag.pgde_somme() == self.sad.pgde_somme()\n    elif self.sad is not None:\n        return self.sad.est_magique()\n    elif self.sag is not None:\n        return self.sag.est_magique()\n    else:\n        return True\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2G11/","title":"22 NSIJ2G11","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ2G11/#22-nsij2g11-corrige","title":"22-NSIJ2G11 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Etranger Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ2G11/#exercice-1","title":"Exercice 1","text":"<p>langages et programmation (r\u00e9cursivit\u00e9) </p> <p>1.a La \u201ccommande\u201d f(5) affiche : 5 4 3 2 1 Partez!  </p> <p>1.b Parce que la fonction s\u2019appelle elle-m\u00eame.  </p> <p>2.a \ud83d\udc0d Script Python<pre><code>def ajouter(s, liste):\n    res = [] \n    for m in liste:\n        res.append(s+m)\n    return res\n</code></pre></p> <p>2.b <code>['ba','bb','bc']</code> </p> <p>2.c  <code>['a']</code> </p> <p>3.a  <code>['']</code> il ne s\u2019agit pas d\u2019une liste vide, mais d\u2019une liste contenant une chaine de caract\u00e8re vide.  </p> <p>3.b <code>['a','b']</code> </p> <p>2.c <code>['aa','ab','ba','bb']</code></p>"},{"location":"Annales/Corriges/22-NSIJ2G11/#exercice-2","title":"Exercice 2","text":"<p>structure de donn\u00e9es (dictionnaires) </p> <p>1.a. La valeur associ\u00e9e \u00e0 la cl\u00e9 \u201cD\u201d est \u201cC\u201d. Pour l\u2019obtenir en Python, on \u00e9crit <code>alpha[\"D\"]</code> </p> <p>1.b. DBEBEF  </p> <ol> <li>\ud83d\udc0d Script Python<pre><code>def chiffrer(mot, alpha): \n    mc = \"\" \n    for l in mot: \n        mc = mc + alpha[l] \n    return mc\n</code></pre></li> </ol> <p>3.a. <code>alpha_d ={\"B\":\"A\", \"D\":\"B\", \"A\":\"C\", \"C\":\"D\", \"F\":\"E\", \"G\":\"F\", \"E\":\"G\"}</code></p> <p>3.b. \ud83d\udc0d Script Python<pre><code>def dico_dechiffrement(dico): \n    nouveau = {} \n    for lettre in dico : \n        code = dico[lettre] \n        nouveau[code] = lettre \n    return nouveau\n</code></pre></p> <p>3.c. \ud83d\udc0d Script Python<pre><code>def dechiffre(mot, dico): \n    dico_d = dico_dechiffrement(dico) \n    md = chiffrer(mot, dico_d) \n    return md\n</code></pre></p> <ol> <li>\ud83d\udc0d Script Python<pre><code>def dico_chiffrement(alphabet): \n    n = len(alphabet) \n    alphabet_m = random.sample(alphabet, n) \n    d = {} \n    for i in range(n): \n        d[alphabet[i]] = alphabet_m[i] \n    return d\n</code></pre></li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2G11/#exercice-3","title":"Exercice 3","text":"<p>base de donn\u00e9es </p> <p>1.a. La cl\u00e9 primaire doit \u00eatre unique, le seul attribut que peut \u00eatre unique pour chaque entr\u00e9e, est l\u2019attribut Code_evaluation. Par cons\u00e9quence, le seul attribut qui peut jouer le r\u00f4le de cl\u00e9 primaire est Code_evaluation.  </p> <p>1.b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Evaluations VALUES ('EXKVLX886', 'Term7', 'Peltier', '13/10/2021', 1453) </code></pre></p> <p>2.a. 11  </p> <p>2.b. Term7,  13/10/2021  Term5, 07/10/2021   </p> <p>2.c. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Nom_evaluation FROM Evaluations WHERE Code_competences = 452\n</code></pre></p> <p>3.a. Il faut que le couple (Code_evaluation, Num_eleve) soit unique. Un \u00e9l\u00e8ve donn\u00e9 ne peut donc pas faire plusieurs fois la m\u00eame \u00e9valuation. </p> <p>3.b \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Num_eleve\nFROM resultats JOIN Evaluations ON resultats.Code_evaluation = Evaluations.Code_evaluation WHERE Code_competences = 532\n</code></pre></p> <p>4.a. |attribut| type| |:---:|:---:| | Num_eleve| INT | | Nom | CHAR | | prenom | CHAR | | classe | CHAR |  </p> <p>4.b Num_eleve peut jouer le r\u00f4le de cl\u00e9 primaire</p>"},{"location":"Annales/Corriges/22-NSIJ2G11/#exercice-4","title":"Exercice 4","text":"<p>structures de donn\u00e9es, programmation objet </p> <p>1.a. \ud83d\udc0d Script Python<pre><code>class Carte: \n    def __init__(self, val, coul): \n        self.valeur = val \n        self.couleur = coul \n</code></pre></p> <p>1.b. \ud83d\udc0d Script Python<pre><code>c7 = Carte(7, \"coeur\")\n</code></pre></p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def initialiser() : \n    jeu = [] \n    for c in [\"coeur\", \"carreau\", \"trefle\", \"pique\"] : \n        for v in range(2,15) : \n            carte_cree = Carte(v,c)\n            jeu.append(carte_cree) \n    return jeu\n</code></pre> </li> <li> <p>La structure des donn\u00e9es la plus adapt\u00e9e est la file, puisque l\u2019on a affaire \u00e0 une structure de type FIFO (First IN First OUT). Le classement des cartes doit suivre la \u201cr\u00e8gle FIFO\u201d, car la carte remport\u00e9e (la derni\u00e8re arriv\u00e9e) doit \u00eatre plac\u00e9e en dessous du tas.  </p> </li> <li> \ud83d\udc0d Script Python<pre><code>def comparer(carte1, carte2): \n    if carte1.valeur &gt; carte2.valeur : \n        return 1 \n    elif carte1.valeur &lt; carte2.valeur :\n        return-1 \n    else : \n        return 0\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2G11/#exercice-5","title":"Exercice 5","text":"<p>architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux (protocoles de routage) </p> <p>1.a. O4 = 00011111  </p> <p>1.b. 11111111.11111111.11111111.00000000 255.255.255.0  </p> <p>1.c. Il est possible d\u2019adresser 254 machines : \\(2^8-1= 256 - 2 = 254\\) (2 adresses ne sont pas disponibles : adresse du r\u00e9seau et adresse de broadcast)  </p> <p>2.a. L\u2019adresse IP 70.37.150.6 (renseign\u00e9e dans la table de routage de R4) correspond au routeur R6, le routeur R4 envoie donc le paquet de donn\u00e9es vers le routeur R6.  </p> <p>2.b  R4 \u2192 R6 \u2192 R5 </p> <p>3.a. R4 \u2192 R1 \u2192 R2 \u2192 R5  </p> <p>3.b. Il faut modifier la ligne du routeur R4   </p> R4 192.168.10.0 144.50.65.1 144.50.65.4 <p>4.a.  </p> <p>R4 \u2192 R1 \u2192 R2 \u2192 R3 \u2192 R5 (co\u00fbt = 100 + 1 + 1 + 1 = 103)  </p> <p>4.b. lignes tables de routage modifi\u00e9es :   </p> R2 192.168.10.0 85.40.65.3 85.40.65.2 R4 192.168.10.0 144.50.65.1 144.50.65.4 R6 192.168.10.0 32.18.145.3 32.18.145.6"},{"location":"Annales/Corriges/22-NSIJ2JA1/","title":"22 NSIJ2JA1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ2JA1/#22-nsij2ja1-corrige","title":"22-NSIJ2JA1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : Asie-Pacifique Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ2JA1/#exercice-1","title":"Exercice 1","text":"<p>syst\u00e8mes d'exploitation Linux </p> <ol> <li> <p>a. La premi\u00e8re ligne du terminale <code>gestion@capNSI-ordinateur_central</code> affiche le nom de l'utilisateur et le nom du terminal s\u00e9par\u00e9s par le caract\u00e8re <code>@</code>. Ici, le nom d'utilisateur est donc <code>gestion</code> et le nom d'ordinateur <code>capNSI-ordinateur_central</code></p> <p>b. On utilise la commande <code>ls</code> en donnant le r\u00e9pertoire concern\u00e9 <code>ls Contrats</code></p> </li> <li> <p>a. <code>mkdir Contrats/TURING_Alan</code>     b. <code>chmod ug=rwx, o=r Contrats/TURING_Alan</code> </p> </li> <li> \ud83d\udc0d Script Python<pre><code>    def formatage(tab):\n        liste_noms = []\n        for (nom,prenom) in tab:\n            liste_noms.append(nom + \"_\" + prenom)\n        return liste_noms\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>    def creation_dossiers(tab):\n        for nom in tab:\n            rep = \"Contrats/\" + nom\n            os.mkdir(repertoire)\n            os.chmod(rep,774)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2JA1/#exercice-2","title":"Exercice 2","text":"<p>arbres binaires de recherche </p> <p>1.a</p> <pre><code>    %%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%\n    flowchart TB\n        n0(ELUARD) --&gt; n1(ARAGON)\n        n1 --&gt; n3(APOLLINAIRE)\n        n1 --&gt; n4(DUMAS)\n        n0 --&gt; n2(VOLTAIRE)\n        n2 --&gt; n5(HUGO)\n        n2 --&gt; n6(ZWEIG)\n        n6 --&gt; n7(ZOLA)\n        n6 --&gt; n8[Null]</code></pre> <p>1.b</p> <ul> <li>Taille : 8</li> <li>Hauteur : 4</li> </ul> <p>1.c</p> <p>Si l'arbre est de hauteur \\(h\\) alors il y a \\(2^h - 1\\) auteurs au maximun. </p> <p>Preuve</p> <p>On montre d'abord que le nombre d'auteurs max au niveau \\(n\\) est \\(2^{n-1}\\). Imm\u00e9diat par r\u00e9currence : au niveau 1, il n'y a qu'un auteur. La propri\u00e9t\u00e9 est donc vraie. Si au niveau \\(n\\) on a \\(2^{n-1}\\) auteurs, alors, au niveau \\(n+1\\) on peut ajouter 2 auteurs pour chacun d'eux soit au total \\(2\\times 2^{n-1}\\).</p> <p>Un arbre complet de hauteur \\(h\\) a tous ses niveaux pleins et donc au total :</p> \\[1 + 2 + ... + 2^{h-1}\\] <p>Et cette somme vaut \\(2^h - 1\\)</p> <p>2.</p> <pre><code>    %%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%\n    flowchart TB\n    n147(KAFKA) --&gt; n148(DURAS)\n    n147(KAFKA) --&gt; n149(SAGAN)\n    n148(DURAS) --&gt; n150(BALZAC)\n    n148(DURAS) --&gt; n151(FLAUBERT)\n    n150(BALZAC) --&gt; n158(AUDIARD)\n    n150(BALZAC) --&gt; n159(COLETTE)\n\n    n159(COLETTE) --&gt; n166(CHRISTIE)\n\n    n149(SAGAN) --&gt; n152(PROUST)\n    n149(SAGAN) --&gt; n153(SIMENON)\n\n    n153(SIMENON) --&gt; n154(SAND)\n    n153(SIMENON) --&gt; n155(WOOLF)</code></pre> <p>3.</p> \ud83d\udc0d Script Python<pre><code>def recherche_auteur(abr, nom):\n    if est_vide(abr):\n        return False\n    elif valeur(abr) == nom:\n        return True\n    else:\n        return recherche_auteur(fils_gauche(abr), nom) or\\\n                recherche_auteur(fils_droit(abr), nom)\n</code></pre> <p>L'appel renvoie <code>True</code>. En effet, au premier appel, l'arbre n'est pas vide et la valeur de l'arbre ('KAFKA') n'est pas \u00e9gale \u00e0 la valeur recherch\u00e9e. Il y a donc le premier appel r\u00e9cursif sur le sous-arbre gauche et la valeur 'SIMENON'. Cet appel va finir par renvoyer <code>False</code> (puisque 'SIMENON' n'est pas dans ce sous-arbre). Puisqu'on est sur l'\u00e9valuation d'un OU, le deuxi\u00e8me appel r\u00e9cursif est lanc\u00e9, et finira par renvoyer <code>True</code>.</p> <p>4.</p> \ud83d\udc0d Script Python<pre><code>def hauteur(abr):\n    if est_vide(abr):\n        return 0\n    else:\n        return 1 + max(hauteur(fils_gauche(abr)), hauteur(fils_droit(abr)))\n</code></pre>"},{"location":"Annales/Corriges/22-NSIJ2JA1/#exercice-3","title":"Exercice 3","text":"<p>structures de donn\u00e9es, programmation </p> <p>1.a.  Le choix 2 est le plus adapt\u00e9 car dans le choix 1 c\u2019est la m\u00eame ligne qui est ajout\u00e9e \u00e0 jeu. Ainsi lorsqu\u2019on modifiera une ligne, toutes les lignes seront modifi\u00e9es.  </p> <p>1.b. \ud83d\udc0d Script Python<pre><code>jeu[5][2] = 1\n</code></pre></p> <p>2.a. \ud83d\udc0d Script Python<pre><code>import random \ndef remplissage(n, jeu):\n    for i in range(n): \n        x = random.randrange(8) \n        y = random.randrange(8) # On cherche une cellule qui n'est pas d\u00e9j\u00e0 vivante\n        while jeu[x][y] == 1: \n            x = random.randrange(8) \n            y = random.randrange(8) \n        jeu[x][y] = 1\n</code></pre></p> <p>2.b.  On doit avoir 0 &lt;= n &lt;= 64  </p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def nombre_de_vivants(i, j, jeu): \n    nb = 0 \n    voisins = [(i-1,j-1), (i-1,j), (i-1,j+1), (i,j+1), (i+1,j+1), (i+1,j), (i+1,j-1), (i,j-1)] \n    for e in voisins : \n        if 0 &lt;= e[0] &lt; 8 and 0 &lt;= e[1] &lt; 8 : \n            nb = nb + jeu[e[0]][e[1]] \n    return nb \n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def transfo_cellule(i, j, jeu): \n    nb_vivants = nombre_de_vivants(i, j, jeu) # r\u00e8gle 1 \n    if jeu[i][j] == 0: \n        if nb_vivants == 3: \n            return 1 \n        else: \n            return 0 # r\u00e8gle 2 \n    if jeu[i][j] == 1: \n        if nb_vivants == 2 or nb_vivants == 3: \n            return 1 \n        else: \n            return 0\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2JA1/#exercice-4","title":"Exercice 4","text":"<p>bases de donn\u00e9es et langage SQL </p> <p>1.a. <code>id_match</code> est la cl\u00e9 primaire de la relation match.  </p> <p>1.b. Oui elle en a quatre : id_creneau, id_terrain, id_joueur1, id_joueur2  </p> <p>2.a. C\u2019est le premier ao\u00fbt 2020 entre 10h et 11h.  </p> <p>2.b. Ce sont Dupont Alice et Durand Belina.  </p> <p>3.a. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT prenom_joueur FROM joueurs WHERE nom_joueur = 'Dupont';\n</code></pre></p> <p>3.b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE joueurs SET mdp = 1976 WHERE id_joueur = 4;\n</code></pre></p> <ol> <li>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO joueurs (id_joueur, nom_joueur, prenom_joueur, login, mdp) VALUES (5, 'MAGID', 'Zora', 'zora', 2021);\n</code></pre></li> </ol> <p>On peut \u00e9galement ne pas nommer les champs : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO joueurs VALUES (5, 'MAGID', 'Zora', 'zora', 2021);\n</code></pre> 5. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT date FROM matchs JOIN joueurs ON matchs.id_joueur1 = joueurs.id_joueur OR matchs.id_joueur2 = joueurs.id_joueur WHERE prenom_joueur = 'Alice';\n</code></pre></p>"},{"location":"Annales/Corriges/22-NSIJ2JA1/#exercice-5","title":"Exercice 5","text":"<p>Ex\u00e9cution de programmes, recherche et corrections de bugs </p> <ol> <li> <p>Les valeurs successives prises par la variable <code>i</code> seront <code>0,1, ...,n-1</code>. La premi\u00e8re valeur provoque donc une erreur de division par 0. La derni\u00e8re valeur n'est pas non plus correcte puisqu'on doit calculer la somme des inverses jusqu'\u00e0 <code>n</code>. On peut corriger des deux fa\u00e7ons suivantes :</p> <ul> <li>A la ligne 3 : <code>for i range(1,n+1)</code> afin de d\u00e9marrer \u00e0 1 et d'aller jusqu'\u00e0 n</li> <li>ou alors \u00e0 la ligne 4 : <code>total = total + 1\\(i+1)</code> </li> </ul> </li> <li> <p>a. La variable <code>indice</code> atteint la valeur <code>len(L)</code> or les indices  des \u00e9l\u00e9ments d'une liste vont jusqu'\u00e0 <code>len(L)-1</code>. Pour corriger ce probl\u00e8me on remplace la ligne 3 par <code>while indice &lt;len(L)</code></p> <p>b. L'appel <code>maxi([-2,-7,-3])</code> renvoie <code>0</code> puisque le maximum est initialis\u00e9 \u00e0 0 et aucun \u00e9l\u00e9ment plus grand que 0 n'est trouv\u00e9 lorsqu'on parcourt la liste. Pour corriger ce probl\u00e8me, on peut initialiser le maximum avec le premier \u00e9l\u00e9ment de la liste et donc \u00e9crire \u00e0 la ligne 3 : <code>maximum = L[0]</code></p> </li> <li> <p>On peut pas ajouter une variable de type <code>str</code> avec une variable de type <code>int</code>. La ligne 4 provoque donc une erreur car <code>Joueur</code> est du type <code>str</code> et <code>i</code> est du type <code>int</code>. Pour corriger ce probl\u00e8me, il faut convertir <code>i</code> en <code>str</code> et donc \u00e9crire ligne 4 : <code>L.append('Joueur ' + str(i))</code></p> </li> <li> <p>a. Pour calculer <code>suite(6)</code>, on fait les appels successifs \u00e0 <code>suite(4)</code> puis <code>suite(2)</code> puis <code>suite(0)</code>. La condition d'arr\u00eat renvoie <code>0</code> comme valeur de <code>suite(0)</code> on remonte alors et on calcule :</p> <ul> <li><code>suite(2) = 3+2*suite(0) = 3</code></li> <li><code>suite(4) = 3+2*suite(2) = 9</code></li> <li><code>suite(6) = 3+2*suite(4) = 21</code></li> </ul> </li> </ol> <p>L'appel de <code>suite(6)</code> renvoie donc 21.</p> \ud83d\udccb Texte<pre><code>b. On obtient une erreur de profondeur de r\u00e9cursion, en effet la condition d'arr\u00eat n'est jamais atteinte puisque les appels successifs se feront avec les valeurs suivants de `n` : `7, 5, 3, 1, -1, -3, -5, ....`.\n</code></pre> <ol> <li>La variable <code>x</code> est de type <code>int</code> donc non mutable alors que <code>L</code> est de type liste donc mutable. Par cons\u00e9quent, <code>L</code> est modifi\u00e9e lorsque pass\u00e9 en param\u00e8tre \u00e0 une fonction mais pas <code>x</code>. Le premier print affichera donc <code>(5, [10])</code> et le second <code>4 [10]</code>. En effet le premier print affiche le tuple renvoy\u00e9 par la fonction <code>modif</code> et le second print la valeur non modifi\u00e9e de <code>x</code> suivie de celle de <code>L</code>.</li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2LR1/","title":"Macro Rendering Error","text":"<p>File: <code>Annales/Corriges/22-NSIJ2LR1.md</code></p> <p>UndefinedError: 'get_bin' is undefined</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 80, in top-level template code\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/utils.py\", line 83, in from_obj\n    if hasattr(obj, \"jinja_pass_arg\"):\njinja2.exceptions.UndefinedError: 'get_bin' is undefined\n</code></pre>"},{"location":"Annales/Corriges/22-NSIJ2ME1/","title":"22 NSIJ2ME1","text":"<p> Index des sujets 2022 </p>"},{"location":"Annales/Corriges/22-NSIJ2ME1/#22-nsij2me1-corrige","title":"22-NSIJ2ME1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2022 Centre : M\u00e9tropole Jour : 2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/22-NSIJ2ME1/#exercice-1","title":"Exercice 1","text":"<p>arbres binaires de recherche, la programmation orient\u00e9e objet et la r\u00e9cursivit\u00e9 </p> <ol> <li> <p>a. La taille de cet arbre est 8 (on utilise la d\u00e9finition donn\u00e9e dans l'\u00e9nonc\u00e9 : \"la taille d\u2019un arbre est le nombre de n\u0153uds qu\u2019il contient)</p> <p>b.  La hauteur de cet arbre est 4 (on utilise la d\u00e9finition  donn\u00e9e dans l'\u00e9nonc\u00e9 : Sa hauteur est le nombre de n\u0153uds du plus long chemin qui joint le n\u0153ud racine \u00e0 l\u2019une des feuilles)</p> <p>Attention</p> <p>D'autres auteurs donnent une d\u00e9finition diff\u00e9rente de la hauteur dans laquelle la hauteur de l'arbre vide est \\(-1\\).</p> <p>c. <pre><code>graph TD\nN21((\"21\")) --&gt; N18((\"18\"))\nN21 --&gt; N27((\"27\"))\nN18 --&gt; V1[\" \"]\nN18 --&gt; N20((\"20\"))\nstyle V1 fill:#FFFFFF, stroke:#FFFFFF\nlinkStyle 2 stroke:#FFFFFF,stroke-width:0px</code></pre></p> <p>d. Pour tout noeud de cet arbre, les valeurs figurant dans le sous arbre gauche sont inf\u00e9rieures \u00e0 la valeur du noeud et celles du sous arbre droit son sup\u00e9rieures. C'est donc bien un arbre binaire de recherche.</p> <p>c. On a indiqu\u00e9 en rouge le chemin suivi pour ins\u00e9rer 17 <pre><code>graph TD\nN15((\"15\")) --&gt; N13((\"13\"))\nN15 --&gt; N21((\"21\"))\nN13 --&gt; N11((\"11\"))\nN13 --&gt; N14((\"14\"))\nN21 --&gt; N18((\"18\"))\nN21 --&gt; N27((\"27\"))\nN18 --&gt; N17((\"17\"))\nN18 --&gt; N20((\"20\"))\nstyle N17 fill:#AA2222,stroke:#333\nlinkStyle 1,4,6 stroke:#FF0000,stroke-width:2px</code></pre></p> </li> <li> <p>a. C'est l'instruction (C) </p> <p>b. \ud83d\udc0d Script Python<pre><code>    return Noeud(ins(v,abr.gauche),abr.valeur,abr.droit)\n</code></pre></p> <p>c. Chaque noeud (m\u00eame lorsque ses fils sont <code>None</code>) g\u00e9n\u00e8re deux appels r\u00e9cursif (un pour le fils droit et un pour le fils gauche). Chaque ar\u00eate de l'arbre suivant repr\u00e9sente donc un appel r\u00e9cursif : <pre><code>graph TD\nN15((\"15\")) --&gt; N13((\"13\"))\nN15 --&gt; N21((\"21\"))\nN13 --&gt; N11((\"11\"))\nN13 --&gt; N14((\"14\"))\nN21 --&gt; N18((\"18\"))\nN18 --&gt; V5[\"None\"]\nN21 --&gt; N27((\"27\"))\nN18 --&gt; N20((\"20\"))\nN11 --&gt; V1[\"None\"]\nN11 --&gt; V2[\"None\"]\nN14 --&gt; V3[\"None\"]\nN14 --&gt; V4[\"None\"]\nN27 --&gt; V6[\"None\"]\nN27 --&gt; V7[\"None\"]\nN20 --&gt; V8[\"None\"]\nN20 --&gt; V9[\"None\"]\nstyle V5 V6 fill:#DDDDDD,stroke:#000000</code></pre> L'instruction <code>nb_sup(16,abr)</code> va donc g\u00e9n\u00e9rer un total de 17 appels \u00e0 <code>nb_sup</code> (l'appel initial plus 16 appels r\u00e9cursifs).</p> <p>d. En utilisant la propri\u00e9t\u00e9 des arbres binaires de recherche (rappel\u00e9e \u00e0 la question 1.d), on sait qu'il suffit de chercher dans le sous arbre droit lorsque <code>abr.valeur&lt;v</code>  puisque le sous arbre gauche contient des valeurs inf\u00e9rieures \u00e0 <code>abr.valeur</code>.</p> \ud83d\udc0d Script Python<pre><code>def nb_sup(v, abr):\n    if abr is None:\n        return 0\n    else:\n        if abr.valeur &gt;= v:\n            return 1+nb_sup(v, abr.gauche)+nb_sup(v, abr.droit)\n        return nb_sup(v, abr.droit)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2ME1/#exercice-2","title":"Exercice 2","text":"<p>structures de donn\u00e9es </p> <ol> <li> <p>a.     Premiers parcours : 498742 48742 4842</p> <p>Second parcours : 4842 442</p> <p>Troisi\u00e8me parcours : 442 42 Cette pile est donc gagnante.</p> <p>b. La pile B est gagnante, en effet : Premier parcours : 454920 44920 4420 </p> <p>Second parcours : 4420 420 </p> <p>Troisi\u00e8me parcours : 420 40 </p> </li> <li> <p>Code compl\u00e9t\u00e9 : \ud83d\udc0d Script Python<pre><code>def reduire_triplet_au_sommet(p):\n    a = depiler(p)\n    b = depiler(p)\n    c = sommet(p)\n    if a % 2 != c%2 :\n        empiler(p, b)\n    empiler(p, a)\n</code></pre></p> <p>Attention</p> <p>La m\u00e9thode <code>sommet</code> renvoie le sommet sans le d\u00e9piler, suivant le r\u00e9sultat du test de parit\u00e9 on rempile ou non l'\u00e9l\u00e9ment central du triplet.</p> </li> <li> <p>a. La taille minimal d'une pile r\u00e9ductible est 3.</p> <p>b.  \ud83d\udc0d Script Python<pre><code>    def parcourir_pile_en_reduisant(p):\n        q = creer_pile_vide()\n        while taille(p) &gt;= 3:\n            reduire_triplet_au_sommet(p)\n            e = depiler(p)\n            empiler(q, e)\n        while not est_vide(q):\n            e = depiler(q)\n            empiler(p,e)\n        return p\n</code></pre></p> </li> <li> <p>Code compl\u00e9t\u00e9 :</p> </li> </ol> \ud83d\udc0d Script Python<pre><code>def jouer(p):\n    q = parcourir_pile_en_reduisant(p)\n    if taille(q)==taille(p) :\n        return p\n    else:\n        return jouer(q)\n</code></pre> <p>Bug</p> <p>La structure de donn\u00e9es pile de l'\u00e9nonc\u00e9 est mutable. En effet, par exemple <code>depiler(p)</code> retire le sommet de <code>p</code> et donc modifie <code>p</code>. Par cons\u00e9quent, <code>parcourir_pile_en_reduisant</code> modifie la pile pass\u00e9e en param\u00e8tre (en d\u00e9pit du <code>return</code> qui figure dans cette fonction et laisse penser qu'on renvoie une nouvelle pile). Bien que la correction propos\u00e9e ci-dessus est probablement la r\u00e9ponse attendue, elle ne fonctionne pas car <code>p</code> et <code>q</code> sont le m\u00eame objet et le test ligne 3 est v\u00e9rifi\u00e9.  Le site \u00e9crit nsi propose une correction de Nicolas Reveret avec modification de l'\u00e9nonc\u00e9 afin d'\u00e9viter ce bug.</p>"},{"location":"Annales/Corriges/22-NSIJ2ME1/#exercice-3","title":"Exercice 3","text":"<p>r\u00e9seaux et protocoles de routage </p> <ol> <li> <p>a. L'adresse du r\u00e9seau est <code>192.168.1.0</code>, en effet le masque de sous r\u00e9seau est ici <code>255.255.255.0</code>, soit <code>\\24</code> en notation cidr) les 24 premiers bits repr\u00e9sentent donc l'adresse du r\u00e9seau. On peut aussi obtenir cette adresse en faisant un et logique bit \u00e0 bit entre l'adresse de la machine et le masque de sous r\u00e9seau. </p> <p>b. L'adresse de diffusion est <code>192.168.1.255</code>, les 8 derniers bits sont \u00e0 1. On peut aussi obtenir cette adresse en faisant un ou logique bit \u00e0 bit entre l'adresse de la machine et l'inverse du masque de sous r\u00e9seau.</p> <p>c. Le nombre maximal de machines connect\u00e9es \u00e0 ce r\u00e9seau est 254. En effet 256 adresses sont possibles mais deux sont r\u00e9serv\u00e9es (l'adresse du r\u00e9seau et l'adresse de diffusion).</p> <p>d. On peut utiliser n'importe quelle adresse de la forme <code>192.168.1.x</code> avec <code>x</code> entre 1 et 254 non encore utilis\u00e9e donc par exemple <code>192.168.1.7</code>.</p> </li> <li> <p>a. Les routes possibles sont :</p> <ul> <li>A  E  D</li> <li>A  E  C  F  D</li> <li>A  B  C  E  D</li> <li>A  B  C  F  D</li> <li>A  C  E  D</li> <li>A  C  F  D</li> </ul> <p>b. En cas de panne de l'un des routeurs, les paquets peuvent emprunter une autre route.</p> </li> <li> <p>a. Table de routage de A:</p> Destination Passe par B B C C D E E E F C <p>b. Le paquet suit le trajet suivant B  C  E  D, en effet en consultant les tables de routage on voit qu'un paquet \u00e0 destination de D :</p> <ul> <li>passe par C lorsqu'il est en B</li> <li>passe par E lorsqu'il est en C</li> <li>passe par D lorsqu'il est en E</li> </ul> <p>c. Nouvelles tables de routage :</p> <ul> <li>Routeur A</li> </ul> Destination Passe par B B C C D C E C F C <ul> <li>Routeur B  </li> </ul> Destination Passe par A A C A D A E A F A <ul> <li>Routeur C</li> </ul> Destination Passe par A A B A D E E E F F <p>d. La nouvelle route est B  A  C  E  D</p> </li> <li> <p>a. On calcule les co\u00fbts \u00e0 l'aide de la formule de l'\u00e9nonc\u00e9, \u00e0 savoir : \\(c = \\dfrac{10^8}{d}\\). Ce qui donne :</p> <ul> <li>Ethernet : \\(\\dfrac{10^8}{10^7}=10\\)</li> <li>Fast Ethernet : \\(\\dfrac{10^8}{10^8}=1\\)</li> <li>Fibre : \\(\\dfrac{10^8}{10^9}=0,1\\)</li> </ul> <p>Attention</p> <p>On rappelle que l'usage de la calculatrice n'\u00e9tait pas autoris\u00e9e</p> <p>b. </p> <p>c. </p> Route Co\u00fbt B  C  A  E  D \\(11,2\\) B  A  E  D \\(2,1\\) B  A  C  F  E  D \\(2,2\\) B  A  C  E  D \\(1,3\\) B  A  E  C  F  D \\(3,2\\) B  C  F  D \\(11,1\\) B  C  E  D \\(10,2\\) <p>d. Le chemin choisi est celui de co\u00fbt minimal c'est \u00e0 dire B  A  C  E  D (pour un co\u00fbt de \\(1,3\\))</p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2ME1/#exercice-4","title":"Exercice 4","text":"<p>base de donn\u00e9es relationnelles et langage SQL </p> <ol> <li> <p>a. Les titres des morceaux des Beatles (interpr\u00e8te n\u00b0 4) c'est \u00e0 dire (sur l'extrait de table donn\u00e9) : <code>'Hey Jude'</code> et <code>'I Want To hold Your Hand'</code>.</p> <p>Attention</p> <p>Pour tout le sujet, on ne sait pas si les tables donn\u00e9es au d\u00e9but du sujet repr\u00e9sentent seulement un extrait ou alors la totalit\u00e9 des donn\u00e9es.</p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom FROM interpretes\nWHERE pays=\"Angleterre;\"\n</code></pre></p> <p>c. Les titres et ann\u00e9e des morceaux class\u00e9s par ordre croissant de l'ann\u00e9e c'est \u00e0 dire :</p> <code>titre</code> <code>annee</code> I Want To hold Your Hand 1963 Like a Rolling Stone 1965 Respect 1967 Hey Jude 1968 Imagine 1970 Smells Like Teen Spirit 1991 <p>d. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*)\nFROM morceaux;\n</code></pre></p> <p>e. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM morceaux\nORDER BY titre ASC;\n</code></pre></p> </li> <li> <p>a. La cl\u00e9 \u00e9trang\u00e8re est <code>id_interprete</code> qui fait r\u00e9f\u00e9rence la cl\u00e9 primaire <code>id_interprete</code> de la table <code>interpretes</code>.</p> <p>b. Le sch\u00e9ma relationnel s'\u00e9crit : interpretes(id_interprete,nom,pays) morceaux(id_morceaux,titre,annee,#id_interprete)     On rappelle que les cl\u00e9s primaires sont soulign\u00e9s et qu'on fait pr\u00e9c\u00e9d\u00e9 les cl\u00e9s \u00e9trang\u00e8res du caract\u00e8re #.     On peut aussi donner un sch\u00e9ma sous forme de tableaux :     </p> <p>c. Cette requ\u00eate produit une erreur \u00e0 cause de la contrainte d'unicit\u00e9. En effet, la cl\u00e9 primaire <code>id_morceau</code> est unique or un enregistrement avant la valeur 1 existe d\u00e9j\u00e0 dans la table.</p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE morceaux\nSET annee = 1971\nWHERE id_morceau = 3;\n</code></pre></p> <p>Note</p> <p>On a utilis\u00e9 la cl\u00e9 primaire du morceau (<code>3</code>) pour faire la mise \u00e0 jour, on aurait pu utiliser le titre (<code>Imagine</code>) si un seul morceau porte ce titre.</p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO interpretes\nVALUES (6, 'The Who', 'Angleterre');\n</code></pre></p> <p>c. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO morceaux\nVALUES (7, 'My Generation', 1965, 6);\n</code></pre></p> </li> <li> <p>On utilise une jointure : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre from morceaux\nJOIN interpretes ON morceaux.id_interpretes = interpretes.id_interpretes WHERE interpretes.pays = \"Etats-Unis\";\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/22-NSIJ2ME1/#exercice-5","title":"Exercice 5","text":"<p>programmation objet et m\u00e9thode diviser pour r\u00e9gner </p> <ol> <li>L'ordre des murs dans le constructeur est nord, est, sud, ouest, <code>True</code> et <code>False</code> indiquent respectivement la pr\u00e9sence et l'absence. Donc une cellule ayant tous les murs sauf le mur est :  \ud83d\udc0d Script Python<pre><code>    cellule = Cellule(True,False,True,True)\n</code></pre></li> </ol> <p>2. \ud83d\udc0d Script Python<pre><code>class Labyrinthe:\n    def __init__(self, hauteur, longueur):\n        self.grille=self.construire_grille(hauteur, longueur)\n    def construire_grille(self, hauteur, longueur):\n        grille = []\nfor i in range(hauteur):\nligne = []\nfor j in range(longueur):\ncellule = Cellule(True, True, True, True)\nligne.append(cellule)\ngrille.append(ligne)\n        return grille\n</code></pre></p> <ol> <li> <p>On se trouve dans la situation o\u00f9 <code>cellule2</code> se trouve au dessus de <code>cellule1</code>, pour ouvrir un passage, on doit donc supprimer le mur nord de la cellule 1 et aussi le mur sud de la cellule 2. L'instruction python manquante ligne 19 est donc : \ud83d\udc0d Script Python<pre><code>cellule2.murs['S'] = False\n</code></pre></p> </li> <li> <p>Dans ce cas, on doit supprimer le mur est de la cellule 2 et le mur ouest de la cellule 1. \ud83d\udc0d Script Python<pre><code>def creer_passage(self, c1_lig, c1_col, c2_lig, c2_col):\n    cellule1 = self.grille[c1_lig][c1_col]\n    cellule2 = self.grille[c2_lig][c2_col]\n    # cellule2 au Nord de cellule1\n    if c1_lig - c2_lig == 1 and c1_col == c2_col:\n        cellule1.murs['N'] = False\n        cellule2.murs['S'] = False\n    # cellule2 \u00e0 l\u2019Ouest de cellule1\nelif c1_col - c2_col ==1 and c1_lig == c2_lig:\ncellule1.murs['O'] = False\ncellule2.murs['E'] = False\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def creer_labyrinthe(self, ligne, colonne, haut, long):\n    if haut == 1 : # Cas de base\n        for k in range(colonne,colonne+long-1):\n            self.creer_passage(ligne, k, ligne, k+1)\n    elif long == 1: # Cas de base\n            for k in range(ligne,ligne+haut-1):\n            self.creer_passage(k,colonne,k+1,colonne)\n    else: # Appels r\u00e9cursifs\n    # Code non \u00e9tudi\u00e9 (Ne pas compl\u00e9ter)\n</code></pre> </li> <li> <p>Le labyrinthe de d\u00e9part est de dimension 4x8, donc :</p> <ul> <li>on le d\u00e9coupe verticalement en deux labyrinthes 4x4</li> <li>on d\u00e9coupe horizontalement en deux labyrinthes 2x4</li> <li>on d\u00e9coupe verticalement en deux labyrinthes 2x2</li> <li>on d\u00e9coupe horizontalement en deux labyrinthes 1x2</li> <li>on atteint la condition d'arr\u00eat en cr\u00e9ant donc des couloirs de 1x2 On remonte en assemblant ces labyrinthes et en cr\u00e9ant des ouvertures entre eux comme indiqu\u00e9 dans l'\u00e9nonc\u00e9 \u00e0 savoir le plus au nord pour une coupe verticale et le plus au nord pour une coupe verticale</li> <li>Les deux labyrinthes \"couloir\" de 1x2 s'assemblent pour donner (ouverture ouest) :     </li> <li>On assemble  deux labyrinthes tels que ci-dessus en cr\u00e9ant un passage au nord      </li> <li>On assemble deux labyrinthes tels que ci-dessus en cr\u00e9ant un passage \u00e0 l'ouest     </li> <li>La derni\u00e8re \u00e9tape est d'assembler deux labyrinthes tels que ci-dessus en cr\u00e9ant un passage au nord :     </li> </ul> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1G11/","title":"23 NSIJ1G11","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIJ1G11/#23-nsij1g11-corrige","title":"23-NSIJ1G11 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : Centres-Etrangers Jour : J1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIJ1G11/#exercice-1-3-points","title":"Exercice 1 (3 points)","text":"<p>SQL </p> <ol> <li> <p>a. </p> theme annee Le syst\u00e8me d'enseignement sup\u00e9rieur fran\u00e7ais est-il juste et efficace ? 2022 Trois innovations pour la croissance futurez (1/3) : la r\u00e9volution blockchain 2021 <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT theme\nFROM podcast\nWHERE annee=2019\n</code></pre></p> <p>c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT theme, annee\nFROM podcast\nORDER BY annee ASC\n</code></pre></p> </li> <li> <p>a. La requ\u00eate affiche les divers th\u00e8mes pr\u00e9sent dans la table podcast sans doublon.</p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELETE\nFROM podcast\nWHERE id_podcast=40\n</code></pre></p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE emission\nSET animateur='Emmanuel L.'\nWHERE nom='Le Temps du d\u00e9bat\"\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO emission (id_emission, nom, radio, animateur) VALUES (12850,'Hastag','France Inter','Mathieu V.')\n</code></pre></p> </li> </ol> <p>5. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT podcast.theme, emission.nom, description.resume\nFROM description\nJOIN emission ON emission.id_emission = podcast.id_emission\nJOIN podcast ON description.id_emission=podcast.id_emission\nWHERE description.duree &lt; 5\n</code></pre></p>"},{"location":"Annales/Corriges/23-NSIJ1G11/#exercice-2-3-points","title":"Exercice 2 (3 points)","text":"<p>R\u00e9s\u00e9aux et protocoles de routages </p> <ol> <li> <p>a. On a :  </p> <ul> <li>164 = 10100100  </li> <li>178 = 10110010  </li> <li>2   = 00000010  </li> <li>13  = 00001101 On obtient donc 10100100.10110010.00000010.00001101  </li> </ul> <p>b. L'adresse en notation CIDR 164.172.2.13/24 signifie que les 24 premiers bits sont reserv\u00e9s pour l'adresse r\u00e9seau, on a alors : - 164.178.2.0 comme adresse r\u00e9seau.</p> </li> <li> <p>Protocole RIP :  </p> <ul> <li>A - D - F - G  </li> <li>A - D - E - G  </li> <li>A - B - E - G  </li> </ul> </li> <li> <p>a.       </p> <p>b. Le protocole OSPF optimise le co\u00fbt, donc ici on obtient : - A - D - F -G soit un co\u00fbt de 1 + 10 + 1 = 12.  </p> <p>c. Avec le routeur F en panne, on obtient : - A - B - C - H - G pour un co\u00fbt de 1 + 10 + 0.1 + 1 = 12.1.  </p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1G11/#exercice-3-6-points","title":"Exercice 3 (6 points)","text":"<p>Structures de Files </p> <ol> <li> \ud83d\udc0d Script Python<pre><code>def ajout(f):\n    couleurs = (\"bleu\", \"rouge\", \"jaune\", \"vert\")\nindice = randint(0, 3)\nenfiler(f, couleur[indice])\nreturn f\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def vider(f):\n    while not est_vide(f):\n        defiler(f)\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def affich_seq(sequence):\n    stock = creer_file_vide()\n    ajout(sequence)\n    while not est_vide(sequence):\nc = defiler(sequence)\naffichage(c)\ntime.sleep(0.5)\nenfiler(stock, c)\nwhile not est_vide(stock):\nenfiler(sequence, defiler(stock))        \n</code></pre> </li> <li> <p>a.  \ud83d\udc0d Script Python<pre><code>def tour_de_jeu(sequence):\naffich_seq(sequence)\nstock = creer_file_vide()\n    while not est_vide(sequence):\n        c_joueur = saisie_joueur()\nc_seq = defiler(sequence)\nif c_joueur == c_seq:\nenfiler(stock, c_seq)\nelse:\nvider(sequence)\nwhile not est_vide(stock):\nenfiler(sequence, defiler(stock))\n</code></pre></p> </li> <li> <p>b.      Question bizarre...</p> \ud83d\udc0d Script Python<pre><code>def tour_de_jeu_modifie(sequence):\n    while True:\n        affich_seq(sequence)\n        stock = creer_file_vide()\n        while not est_vide(sequence):\n            c_joueur = saisie_joueur()\n            c_seq = defiler(sequence)\n            if c_joueur == c_seq:\n                enfiler(stock, c_seq)\n            else:\n                vider(sequence)\n                vider(stock)\n        while not est_vide(stock):\n            enfiler(sequence, defiler(stock))\n</code></pre> <p>ou bien</p> \ud83d\udc0d Script Python<pre><code>def tour_de_jeu_modifie(sequence):\n    affich_seq(sequence)\n    stock = creer_file_vide()\n    while not est_vide(sequence):\n        c_joueur = saisie_joueur()\n        c_seq = defiler(sequence)\n        if c_joueur == c_seq:\n            enfiler(stock, c_seq)\n        else:\n            vider(sequence)\n            print(\"Perdu ! On rejoue !\")\n            tour_de_jeu_modifie(sequence)\n    while not est_vide(stock):\n        enfiler(sequence, defiler(stock))\n    tour_de_jeu_modifie(sequence)\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1ME1/","title":"23 NSIJ1ME1","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIJ1ME1/#23-nsij1me1-corrige","title":"23-NSIJ1ME1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : M\u00e9tropole Jour : J1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIJ1ME1/#exercice-1-3-points","title":"Exercice 1 (3 points)","text":"<p>SQL </p> <ol> <li> <p>a. Pour qu'un attribut soit choisi comme cl\u00e9 primaire, il doit \u00eatre unique.</p> <p>b. Les deux cl\u00e9s \u00e9trang\u00e8res de la relation <code>Commandes</code> font r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire d\u2019une autre table. Elles permettent de mettre en relation un enregistrement de cette table avec un enregistrement d\u2019une autre table. ici : - la cl\u00e9 \u00e9trang\u00e8re <code>idClient</code> met en relation avec la table <code>Clients</code> et sa cl\u00e9 primaire <code>id</code> - la cl\u00e9 \u00e9trang\u00e8re <code>idMeuble</code> met en relation avec la table <code>Meuble</code> et sa cl\u00e9 primaire <code>id</code> </p> <p>c. <code>Meubles (id : INT, intitule : VARCHAR, prix : FLOAT, stock : INT, description : VARCHAR)</code></p> </li> <li> <p>La requ\u00eate renvoie :  </p> <p>62 - 2 - Armoire blanche 3 portes 63 - 3 - Armoire noire 3 portes   </p> </li> <li></li> </ol> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Clients\nWHERE ville = \"Paris\"\n</code></pre> <ol> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Meubles\nSET stock = 50\nWHERE intitule = \"hylla\"\n</code></pre> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Meubles\n(id, intitule, prix, stock, description)\nVALUES\n(65, \"matta\", 95.99, 25, \"Tapis vert \u00e0 pois rouges\")\n</code></pre> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Clients.nom, Clients.prenom\nFROM Clients\nJOIN Commandes ON Commandes.idclient = Clients.id\nWHERE Commandes.date =\"30/04/2021\"\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1ME1/#exercice-2-3-points","title":"Exercice 2 (3 points)","text":"<p>Routage </p> <ol> <li> <p>Le r\u00e9seau est construit avec de multiples liaisons et de telle sorte qu\u2019un chemin sera toujours possible entre 2 sites m\u00eame si une liaison est coup\u00e9e.     Si on coupe une liaison, chaque site pourra encore communiquer avec les 3 autres. </p> </li> <li> <p>Site B - R2 - R3 - R4 - R5 - Site C</p> </li> <li></li> </ol> <p>Table Routeur R1 </p> DESTINATION SUIVANT Nombre de SAUTS site A Local 0 site B R2 1 site C R2 2 site D R3 2 <ol> <li> <p>Dans le protocole RIP de nombreux chemins passent par la liaison 2, donc si elle a un d\u00e9bit tr\u00e8s inf\u00e9rieur aux autres il n est pas judicieux de l\u2019utiliser.  Le choix du protocole RIP n est donc pas judicieux ici.</p> </li> <li> <p>a. On cherche la liaison dont le d\u00e9bit est le plus faible ce qui revient \u00e0 chercher le co\u00fbt est le plus \u00e9lev\u00e9 : </p> </li> <li> <p>La liaison 2 a le co\u00fbt le plus \u00e9lev\u00e9 donc le d\u00e9bit le plus faible : D\\(=\\dfrac{10^{10}}{10^4}=10\\) kbit/s.</p> <p>b.  - Site A \u2192 R1 \u2192 R2 \u2192 R5 \u2192 Site C co\u00fbt : 1 100 000 - Site 1 \u2192 R1 \u2192 R3 \u2192 R4 \u2192 R5 \u2192 Site C co\u00fbt : 50 015 - Site A \u2192 R1 \u2192 R3 \u2192 R2 \u2192 R5 \u2192 Site C co\u00fbt : 1 100 005 - Site A \u2192 R1 \u2192 R2 \u2192 R3 \u2192 R4 \u2192 R5 \u2192 Site Co\u00fbt : 100 020  </p> <p>c.  Table Routeur R1  </p> DESTINATION SUIVANT COUT site A Local 0 site B R3 50005 site C R3 50015 site D R3 50005 </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1ME1/#exercice-3-6-points","title":"Exercice 3 (6 points)","text":"<p>Programmation et POO </p> <p>Partie 1 </p> <ol> <li><code>nom</code> : attribut  </li> <li><code>tab_voisines</code> : attribut  </li> <li> <p><code>tab_couleurs_disponibles</code> : attribut</p> </li> <li> <p><code>nom_region</code> est de type <code>str</code> : cha\u00eene de caract\u00e8re.</p> </li> <li> <p><code>ge = Region (\"Grand Est\")</code></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def renvoie_premiere_couleur_disponible(self): \n    return self.tab_couleurs_disponibles[0]\n</code></pre> </li> <li></li> </ol> \ud83d\udc0d Script Python<pre><code>def renvoie_nb_voisines(self) :\n    return len(self.tab_voisines)\n</code></pre> <ol> <li> \ud83d\udc0d Script Python<pre><code>def est_coloriee(self): \n    if self.couleur_attribuee == None :\n        return False\n    else :\n        return True\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def retire_couleur(self, couleur):\n    if couleur in self.tab_couleurs_disponibles:\n        self.tab_couleurs_disponibles.remove(couleur)\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def est_voisine(self, region):\n    for i in range(len(self.tab_voisines)) :\n        if region == self.tab_voisines[i] :\n            return True\n    return False\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def renvoie_tab_regions_non_coloriees(self): \n    L=[]\n    for region in self.tab_regions :\n        if est_coloriee(region) == False :\n            L.append(region)\n    return L\n</code></pre> </li> <li> <p>a. La m\u00e9thode renvoie <code>None</code> dans le cas ou tout est colori\u00e9.</p> <p>b. La r\u00e9gion renvoy\u00e9e est la r\u00e9gion qui a le plus de voisines parmi celles qui ne sont pas colori\u00e9es.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def colorie(self):\n    region_m = self.renvoie_max()\n    while region_m:\n        region_m.couleur_attribuee = region_m.renvoie_premiere_couleur_disponible()\n        for voisine in region_m.tab_voisines:\n            voisine.retire_couleur(region_m.couleur_attribuee)\n        region_m = self.renvoie_max()\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1PO1/","title":"23 NSIJ1PO1","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIJ1PO1/#23-nsij1po1-corrige","title":"23-NSIJ1PO1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : Polyn\u00e9sie  Jour : J1 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIJ1PO1/#exercice-1-4-points","title":"Exercice 1 (4 points)","text":"<p>SQL </p> <ol> <li> <p>a. La table contient d\u00e9j\u00e0 une entr\u00e9e dont l'attribut id_equipe vaut 11. Comme il s'agit de la cl\u00e9 primaire cela provoque une erreur. C\u2019est la contrainte d\u2019unicit\u00e9</p> <p>b. L'attribut telephone est une chaine de caract\u00e8re limit\u00e9 \u00e0 20. On ne pouvait pas choisir des entiers car les numeros de t\u00e9l\u00e9phone commen\u00e7ant par 0 il disparaitrait ainsi les espaces entre chaque paire de chi\ufb00res.</p> <p>c.  |Lyon | 451 cours d'Emile Zola,69100 Villeurbanne |04 05 06 07 08|</p> <p>d. La requ\u00eate le nombre d'entr\u00e9e dans la table <code>equipe</code>  Cette requ\u00eate renvoie 12. Elle renvoie le nombre d\u2019entit\u00e9s dans la relation Equipe.</p> <p>e.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom\nFROM Equipe\nORDER BY noms;\n</code></pre></p> <p>f.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Equipe\nSET nom='Tarbes'\nWHERE id_equipe=4;\n</code></pre></p> </li> <li> <p>a. L'attribut <code>id_equipe</code> a \u00e9t\u00e9 d\u00e9clar\u00e9 cl\u00e9 \u00e9trang\u00e8re de la relation <code>Joueuse</code> pour r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>id_equipe</code> de la table <code>Equipe</code>.  </p> <p>b. On ne peut pas supprimer directement l\u2019\u00e9quipe dans la relation Equipe car certaines entit\u00e9s de la relation Joueuse font r\u00e9f\u00e9rence \u00e0 cette \u00e9quipe : c\u2019est la contrainte de r\u00e9f\u00e9rence.</p> <p>c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Joueuse.nom, Joueuse.prenom\nFROM Joueuse\nJOIN Equipe ON Equipe.id_equipe=Joueuse.id_equipe\nWHERE Equipe.nom='Angers'\nORDER BY Joueuse.nom;\n</code></pre></p> </li> <li> <p>a. On peut proposer le sch\u00e9ma relationnel suivant :      <code>Match (id_match : INT, date : DATE, #id_equipe_domicile : INT, #id_equipe_deplacement : INT, score_domicile : INT, score_deplacement : INT)</code></p> <p>#id_equipe_domicile et #id_equipe_deplacement sont des cl\u00e9s \u00e9trang\u00e8res qui font r\u00e9f\u00e9rence \u00e0 la relation Equipe. </p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Match VALUES (10, \"23/10/2021\", 3, 6, 73, 78) ;\n</code></pre></p> </li> <li> <p>a. On peut proposer le sch\u00e9ma relationnel suivant :     <code>Statistiques (id_stats : INT, #id_joueuse : INT, #id_match : INT, points : INT, passes_decisives : INT)</code></p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Equipe.nom, Joueuse.nom, Joueuse.prenom, Statistiques.points, Statistiques.rebonds, Statistiques.passes_decisives\nFROM Statistiques\nJOIN Joueuse ON Joueuse.id_joueuse = Statistiques.id_joueuse\nJOIN Equipe ON Joueuse.id_equipe = Equipe.id_equipe\nWHERE Statistiques.id_match = 53 ;\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1PO1/#exercice-2-4-points","title":"Exercice 2 (4 points)","text":"<p>Processus et POO </p> <ol> <li> <p>a. 11 - 20 - 32 - 11 - 20 - 32 - 11 - 32 - 11  </p> <p>b. 11 - 11 - 20 - 20 - 32 - 32 - 11 - 11 - 32 </p> </li> <li> <p>a.     \ud83d\udc0d Script Python<pre><code>liste_attente=[Processus(11,4),Processus(20,2),Processus(32,3)]\n</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>def execute_un_cycle(self):\n    self.reste_a_faire-=1\n\ndef change_etat(self,nouvel_etat):\n    self.etat=nouvel_etat\n\ndef est_termine(self):\n    if self.reste_a_faire&lt;=0:\n        return True\n    else:\n        return False\n</code></pre></p> <p>c.  \ud83d\udc0d Script Python<pre><code>def tourniquet(liste_attente, quantum):\n    ordre_execution = []\n    while liste_attente != []:\n        # On extrait le premier processus\n        processus = liste_attente.pop(0)\n        processus.change_etat(\"En cours d'ex\u00e9cution\")\n        compteur_tourniquet = 0\n        while processus.reste_a_faire &gt; 0 and compteur_tourniquet &lt; quantum :\n            ordre_execution.append(processus.pid)\n            processus.execute_un_cycle()\n            compteur_tourniquet = compteur_tourniquet + 1\n        if processus.reste_a_faire != 0:\n            processus.change_etat(\"Suspendu\")\n            liste_attente.append(processus)\n        else:\n            processus.change_etat(\"Termin\u00e9\")\n    return ordre_execution\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ1PO1/#exercice-3-4-points","title":"Exercice 3 (4 points)","text":"<p>POO et diviser pour r\u00e9gner </p> <ol> <li> <p>a. <code>from math import sqrt</code> permet d'import la fonction racine carr\u00e9e de la biblioth\u00e8que math      b. Cette instruction renvoie une False \u00e0 cause des erreurs d\u2019arrondis sur les nombres \u00e0 virgule \ufb02ottante. En e\ufb00et, les nombres \u00e0 virgule \ufb02ottante sont repr\u00e9sent\u00e9s par une somme de puissance de 2. Comme 0,1, 0,2 et 0,3 ne peuvent pas s\u2019exprimer comme une somme \ufb01nie de puissance de 2, l\u2019op\u00e9ration bool\u00e9enne pr\u00e9c\u00e9dente renvoie False     c. <code>point_A</code> est un tuple qui n'est pas mutable d'o\u00f9 l'erreur.</p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>from math import sqrt\nclass Segment:\n    def __init__(self,point1,point2):\n        self.p1=point1\n        self.p2=point2\nself.longueur= sqrt((point1[0]-point2[0])**2+(point1[1]-point2[1])**2)\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def liste_segments(liste_points):\n    n = len(liste_points)\n    segments = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # On construit le segment \u00e0 partir des points i et j.\n            seq = Segment(liste_points[i],liste_points[j])\n            segments.append(seg) # On l'ajoute \u00e0 la liste\n    return segments    \n</code></pre></p> <p>c. Pour liste de points de longueur n, on aura \\((n-1) + (n-2) + ... + 1=(n-1) \\times \\dfrac{n-1+1}{2}= \\dfrac{n \\times (n-1)}{2}\\) segments </p> <p>d. La complexit\u00e9 est donc de l'ordre de \\(O(n^2)\\).</p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>def plus_court_segment(liste_segments):\n    if len(liste_segments)==1:\n        return liste_segments[0]\n    else:\n        seg_gauche=plus_court_segment(moitie_gauche(liste_segments))\n        seg_droite=plus_court_segment(moitie_droite(liste_segments))\n    if seg_gauche.longueur&gt;seg_droite.longueur:\n        return seg_droite\n    else:\n        return seg_gauche\n</code></pre></p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>point_A=(3,4)\npoint_B=(2,3)\npoint_C=(-3,-1)\n\nnuage_points=[point_A,point_B,point_C]\n</code></pre></p> <p>b.  \ud83d\udc0d Script Python<pre><code>segment=plus_court_segment(liste_segments(nuage_points))\n\nprint((segment.p1[0],segment.p1[1]),(segment.p2[0],segment.p2[1]))\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2G11/","title":"23 NSIJ2G11","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIJ2G11/#23-nsij2g11-corrige","title":"23-NSIJ2G11 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : Centres-Etrangers Jour : J2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIJ2G11/#exercice-1-4-points","title":"Exercice 1 (4 points)","text":"<p>Adressage IP et routages </p> <p>Partie A </p> <ol> <li> <p>a. IP routeur 192.168.5.1     b. On pourra connecter maximum \\(256 - 2 - 1  = 253\\) machines</p> </li> <li> <p>a. Masque de sous-r\u00e9seaux : 255.255.240.0     b. On effectue le ET logique entre l'adresse d'une machine et le masque de sous-r\u00e9seau :  </p> <ul> <li>2 -&gt; 00000010  </li> <li>240  -&gt; 11110000    11110000  ET 00000010</li> </ul> <p>00000000</p> <p>Donc le r\u00e9seau a pour adresse 192.168.0.0</p> <p>c. L'int\u00e9r\u00eat d'avoir une telle interconnexion entre les 4 routeurs A, B, E et F est en cas de panne d'un routeur, les donn\u00e9es peuvent continuer \u00e0 circuler.  </p> </li> </ol> <p>Partie B </p> <ol> <li> <p>a. Chemin possible entre routeur A et routeur E : A - B - E      Chemin possible entre F et B  :  </p> <ul> <li>F - H - G - B  </li> <li>F - D - A - B  </li> <li>F - H - E - B</li> </ul> <p>b. Table de routage du routeur E  </p> Destination Routeur suivant Distance A B 2 B B 1 C H 2 D G 2 F H 2 G G 1 H H 1 <p>Table de routage du routeur G  </p> Destination Routeur suivant Distance A D 2 B B 1 C H 2 D D 1 E E 1 F D 2 H H 1 </li> <li> <p>a.       Table de routage du routeur F  </p> Destination Routeur suivant Co\u00fbt total A D 1.1 B B 10.11 C D 1.1 D D 0.1 E H 10.1 G D 1 H H 0.1 <p>b. E - H - F - D soit un co\u00fbt de 10,2.</p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2G11/#exercice-2-4-points","title":"Exercice 2 (4 points)","text":"<p>SQL </p> <ol> <li> <p>a. La requ\u00eate va renvoyer :      | age | taille | poids |     |:---:|:---:|:---:|     |6|1.70|100|</p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom,age\nFROM animal\nWHERE nom_espece='bonodo'\n</code></pre></p> </li> <li> <p>a. La cl\u00e9 primaire est nom_espece car elle est unique.     num_enclos est une cl\u00e9 \u00e9trang\u00e8re pour faire le lien avec la table enclos.</p> <p>b.  </p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE espece\nSET classe'mammif\u00e8re'\nWHERE nom_espece='ornithorynque'\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO animal VALUES (179,'Serge',1,0.80,30,'lama')\n</code></pre></p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT animal.nom,animal.nom_espece\nFROM animal\nJOIN espece ON espece.nom_espece = animal.nom_espece\nJOIN enclos ON enclos.num_enclos = espece.num_enclos\nWHERE enclos.struct = 'vivarium' and espece.alimentation='carnivore'\n</code></pre></p> <p>b. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*)\nFROM animal\nJOIN espece ON espece.nom_espece = animal.nom_espece\nWHERE espece.classe='oiseaux'\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2G11/#exercice-3-4-points","title":"Exercice 3 (4 points)","text":"<p>Architecture mat\u00e9rille - Gestion processus et programmation </p> <ol> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>Bonjour Alan !\n</code></pre></p> <p>b. <code>x</code> et <code>y</code> sont des bool\u00e9ens et <code>x</code> vaut <code>False</code> et <code>y</code> vaut <code>True</code> </p> <p>c.  \ud83d\udc0d Script Python<pre><code>def occurrences_lettre(une_chaine,une_lettre):\n    compt=0\n    for lettre in une_chaine:\n        if lettre == une_lettre:\n            compt += 1 \n    return compt\n</code></pre></p> </li> <li> <p>a. </p> <p>b. </p> </li> <li> <p>a. La fonction <code>myst\u00e8re</code> compte le nombre de noeud dans l'arbre ce qui correspond \u00e0 la taille de l'arbre.     donc <code>mystere(abr_mots_francais)</code>  renvoie 336531.     b.      \ud83d\udc0d Script Python<pre><code>def hauteur(un_abr):\n    if un_arb.est_vide():\n        return 0\n    else:\n        1+max(hauteur(un_abr.sous_arbre_gauche),hauteur(un_abr.sous_arbre_droit))\n</code></pre></p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>def chercher_mots(liste_mots,longueur,lettre,position):\n    res=[]\n    for i in range(len(liste_mots)):\n        if liste_mots[i][position]==lettre and len(liste_mots[i])==longueur:\n            res.append(liste_mots[i])\n    return res\n</code></pre></p> <p>b. Cette instruction permet de cherche les mots de longueur 3 ayant x en position 2  et a en position  1 c'est-\u00e0-dire les mots de la forme <code>_ax</code></p> <p>c. <code>chercher_mots(chercher_mots(chercher_mots(liste_mots_francais,5,'r',4),4,'e',3),5,'t',2)</code></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2ME1/","title":"23 NSIJ2ME1","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIJ2ME1/#23-nsij2me1-corrige","title":"23-NSIJ2ME1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : M\u00e9tropole Jour : J2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIJ2ME1/#exercice-1-3-points","title":"Exercice 1 (3 points)","text":"<p>R\u00e9seaux et routage </p> <p>table Noeud B</p> Destination Cout A 1 C 3 D 2 E 2 F 2 G 1 H 2 <p>table Noeud B</p> Destination Cout A 1 C 3 D 2 E 2 F 2 G 1 H 2 <ol> <li> <p>F - E - G - H  </p> </li> <li> <p>F - A - G - H   </p> </li> <li></li> <li> <p>B - G - E - F - A - D - C - H  co\u00fbt = 34  il s\u2019agit du chemin au co\u00fbt le plus faible .</p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2ME1/#exercice-2-3-points","title":"Exercice 2 (3 points)","text":"<p>SQL </p> <ol> <li> <p>a. Une cl\u00e9 primaire est un attribut dont la valeur permet d'identifier de mani\u00e8re unique un enregistrement d\u2019une relation.</p> <p>b. La requ\u00eate insert into tente d\u2019ajouter un enregistrement \u00e0 la table Astronaute. Hors la cl\u00e9 primaire 3 est d\u00e9j\u00e0 utilis\u00e9e. Il est donc impossible d\u2019ajouter un \u00e9l\u00e9ment avec la cl\u00e9 primaire 3. </p> <p>c. <code>Fusee (id_fusee: INT, modele : TEXT, constructeur : TEXT, nb_places : INT)</code></p> </li> <li> <p>a. La requete compte le nombre de fusee ayant pour constructeur \u2018SpaceX\u2019. La requ\u00eate renvoie donc la valeur 2.</p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT modele, constructeur\nFROM Fusee\nWHERE nb_places &gt;= 4;\n</code></pre></p> <p>c. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Astronaute\nORDER BY nom ASC;\n</code></pre></p> </li> <li> <p>a. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Vol VALUES(5,3,\u201912/04/2023\u2019);\nINSERT INTO Equipe VALUES(5,1);\nINSERT INTO Equipe VALUES(5,4);\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT nom, prenom\nFROM Astronaute\nJOIN Equipe ON Astronaute.id_astronaute = Equipe.id_astronaute\nJOIN Vol ON Equipe.id_vol = Vol.id_vol\nWHERE Vol.Date = \u201825/10/2022\u2019\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2ME1/#exercice-3-6-points","title":"Exercice 3 (6 points)","text":"<p>Arbres binaires et POO </p> <p>Partie 1 </p> <ol> <li> <p>taille = 5 hauteur = 3 </p> </li> <li></li> </ol> <pre><code>graph TD\n    A(\"dfifi\") --&gt; B(\"annieji\") \n    B --&gt; D(\"aalice\")\n    B --&gt; E(\"celine\")\n    A --&gt; H(\"helene\")\n    E --&gt; F(\" \")\n    E --&gt;G(\"davaidbg\")\n    H --&gt; I(\" \")\n    H --&gt; J(\"papicoeur\")\n    linkStyle 4 stroke-width:0px;\n    style F opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style I opacity:0;</code></pre> <ol> <li> <p>C - Parcours en profondeur dans l\u2019ordre infixe</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def present(self, identifiant):\n  if self.est_vide():\n     return False\n  elif self.racine() == identifiant:\n     return True\n  elif self.racine() &lt; identifiant:\n     return self.sd().present(identifiant)\n  else:\n     return self.sg().present(identifiant)\n</code></pre> </li> </ol> <p>Partie 2 : </p> <ol> <li> <p>a. <code>est_vide(f1)</code> renvoie <code>False</code></p> <p>b. <code>bac</code> - <code>nsi</code> <code>2023</code> </p> <p>c. <code>poule</code> - <code>python</code> - <code>castor</code></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def longueur(f):\n  resultat = 0\n  g = creer_file()\n  while not est_vide(f):\n     elt = defiler(f)\n     resultat = resultat + 1\n     enfiler(g , elt)\n  while not(est_vide(g)):\n     enfiler(f, defiler(g))\n  return resultat\n</code></pre> </li> <li> <p>C - '2!@59fgds'</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def ajouter_mot(f,mdp) : \n  if longueur(f) == 3 : \n     defiler(f)\n  enfiler(f,mdp)\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def mot_file(f, mdp):\n  g = creer_file()\n  present = False\n  while not(est_vide(f)):\n     elt = defiler(f)\n     enfiler(g, elt)\n     if elt == mdp:\n        present = True\n  while not(est_vide(g)):\n     enfiler(f, defiler(g))\n  return present\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def modification (f, nv_mdp) : \n    if est_valide(nv_mdp) and not mot_file(f,nv_mdp) : \n        ajouter_mot(f,nv_mdp)\n        return True\n    return False\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2PO1/","title":"23 NSIJ2PO1","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIJ2PO1/#23-nsij2po1-corrige","title":"23-NSIJ2PO1 : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : Polyn\u00e9sie Jour : J2 Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIJ2PO1/#exercice-1-4-points","title":"Exercice 1 (4 points)","text":"<p>Arbres binaires, ABR, POO et r\u00e9cursivit\u00e9 </p> <ol> <li> <p>a. Cet arbre est un arbre binaire car chaque n\u0153ud poss\u00e8de au plus deux \ufb01ls.</p> <p>b. L\u2019arbre ci-dessus n\u2019est pas un arbre binaire de recherche car par exemple la valeur du n\u0153ud 4 est le \ufb01ls droit de la racine dont la valeur est 13.  Dans un arbre binaire de recherche chaque n\u0153ud du sous-arbre gauche a une valeur inf\u00e9rieure ou \u00e9gale \u00e0 celle du n\u0153ud consid\u00e9r\u00e9 et chaque n\u0153ud du sous-arbre droit \u00e0 une valeur sup\u00e9rieure ou \u00e9gale \u00e0 celle du n\u0153ud consid\u00e9r\u00e9.</p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>assert isinstance(mini, int) and isinstance(maxi, int) and mini &lt;= maxi\n</code></pre></p> <p>b.  <pre><code>graph TD\n    A(\"construire(0,8)\") --&gt; B(\"construire(0,4)\") \n    B --&gt; D(\"construire(0,2)\")\n    B --&gt; E(\"construire(2,4)\")\n    A --&gt; H(\"construire(4,8)\")\n    H --&gt; I(\"construire(4,6)\")  \n    H --&gt; J(\"construire(6,8)\")</code></pre> c.  <pre><code>graph TD\n    A(3) --&gt; B(2) \n    B --&gt; D(1)\n    B --&gt; E(1)\n    A --&gt; C(4)\n    C --&gt; F(3)\n    C --&gt; G(7)</code></pre></p> <p>d.  <pre><code>graph TD\n    A(1) --&gt; B(0) \n    A --&gt; D(2)</code></pre></p> <p>e. Le parcours in\ufb01xe de l\u2019arbre binaire obtenu dans la question 2.c est : 1, 2, 3, 4, 5, 6, 7 C\u2019est un arbre binaire de recherche car le parcours in\ufb01xe parcours les valeurs des n\u0153uds dans l\u2019ordre croissant  </p> <p>f. \ud83d\udc0d Script Python<pre><code>def maximum(abr):\n    if abr is None:\n        return None\n    elif abr.droit is None:\nreturn abr.valeur\nelse:\nreturn maximun(abr.droit)\n</code></pre> 2.  a.  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mystere(abr_7_noeuds, 5, [])\n[6, 4, 5]\n&gt;&gt;&gt; mystere(abr_7_noeuds, 6, [])\n[6]\n&gt;&gt;&gt; mystere(abr_7_noeuds, 2, [])\n[]\n</code></pre></p> <p>b. La fonction <code>mystere</code> permet de d\u00e9terminer le chemin vers la valeur x entr\u00e9e en param\u00e8tre en partant de la racine de l\u2019arbre si elle existe. Si la valeur x n\u2019est pas dans l\u2019arbre binaire de recherche, cette fonction renvoie une liste vide.</p> <p>```</p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2PO1/#exercice-2-4-points","title":"Exercice 2 (4 points)","text":"<p>SQL </p> <ol> <li> <p>a. L\u2019appareil \u00e0 raclette a pour id 4. Dans la table Possede, les membres d\u2019id 1 et 2, c\u2019est-\u00e0-dire Ali Mohamed et Alonso Fernando, proposent \u00e0 la location un  appareil \u00e0 raclette.</p> <p>b. Dans la table Possede, le membre d\u2019id 5 n\u2019est pas pr\u00e9sent. Cela signi\ufb01e qu\u2019il ne propose pas d\u2019objet \u00e0 la location. Ce membre est Kane Harry.</p> </li> <li> <p>a. Cette requ\u00eate renvoie :     Dupont Antoine     Kane Harry  </p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT tarif FROM Objet WHERE description = \"Scie circulaire\" ;\n</code></pre></p> <p>c.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Objet\nSET tarif = 15\nWHERE description =\"Nettoyeur haute pression\" ;\n</code></pre></p> <p>d.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Membre VALUES (6, \"Renard\", \"Wendie\", \"69100\");\n</code></pre></p> </li> <li> <p>a. Si ce couple \u00e9tait utilis\u00e9 comme cl\u00e9 primaire, un membre ne pourrait r\u00e9server qu\u2019une seul fois un m\u00eame objet</p> <p>b. Ce membre est \u00e9galement pr\u00e9sent dans les tables Possede et Reservation. Son attribut id_membre est cl\u00e9 \u00e9trang\u00e8re de ces tables. Il faut donc d\u2019abord supprimer ces entit\u00e9s des tables Possede et Reservation avant de pouvoir le supprimer de la table Membre.</p> <p>c. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELETE FROM Possede WHERE id_membre = 1;\nDELETE FROM Reservation WHERE id_membre = 1;\n</code></pre></p> </li> <li> <p>a.      \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*) FROM Reservation\nJOIN Membre ON Membre.id_membre = Reservation.id_membre\nWHERE Membre.nom = \"Alfonso\" AND Membre.prenom = \"Fernando\";\n</code></pre></p> <p>b.  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom FROM Membre\nJOIN Possede ON Possede.id_membre = Objet.id_membre\nJOIN Objet ON Objet.id_objet = Possede.id_objet\nWHERE Objet.description = \"Appareil \u00e0 raclette\";\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIJ2PO1/#exercice-3-4-points","title":"Exercice 3 (4 points)","text":"<p>Programmation python </p> <ol> <li> <p>a.      <pre><code>graph TD\n    A(\"9617\") --&gt; B(\"9794\") \n    A --&gt; D(\"9750\")\n    A --&gt; E(\"9697\")\n    A --&gt; H(\"9657\")\n    B --&gt; I(\"9795\")</code></pre>     b. La commande qui a lanc\u00e9 le premier processus de firefox est bash.</p> <p>c. La commande permettant de supprimer tous les processus li\u00e9s \u00e0 firefox est kill 9617.</p> </li> <li> <p>a.      </p> <p>b. Les temps d\u2019ex\u00e9cution des quatre processus sont :</p> Processus Instant d\u2019arriv\u00e9e Instant de terminaison Temps d\u2019ex\u00e9cution 1 0 12 \\(12-0=12\\) 2 2 18 \\(18-2=16\\) 3 3 5 \\(5-3=2\\) 4 7 9 \\(9-7=2\\) <p>On obtient le temps d\u2019ex\u00e9cution moyen : \\(\\dfrac{12+16+2+2}{4}=8\\)</p> <p>c. P1-P1-P1-P1-P3-P3-P1-P1-P1-P1-P4-P4-P2-P2-P2-P2-P2-P2</p> <p>d. Les temps d\u2019ex\u00e9cution des quatre processus sont :</p> Processus Instant d\u2019arriv\u00e9e Instant de terminaison Temps d\u2019ex\u00e9cution 1 0 10 \\(10-0=10\\) 2 2 18 \\(18-2=16\\) 3 3 6 \\(6-3=3\\) 4 7 12 \\(10-7=5\\) <p>On obtient le temps d\u2019ex\u00e9cution moyen : \\(\\dfrac{10+16+3+5}{4}=8.5\\) Cet ordonnancement est moins performant que le pr\u00e9c\u00e9dent.</p> </li> <li> <p>a.      \ud83d\udc0d Script Python<pre><code>def choix_processus(liste_attente):\n\"\"\"Renvoie l'indice du processus le plus court parmi \nceux pr\u00e9sents en liste d'attente liste_attente\"\"\"\n    if liste_attente != []:\n        mini = len(liste_attente[0])\n        indice = 0\n# On parcourt les processus dans la liste d'attente\nfor i in range(1, len(liste_attente)):\n# Si on trouve un processus plus court\nif len(liste_attente[i]) &lt; mini:\nindice = i # On retient son indice\nmini = len(liste_attente[i])\n        return indice\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def ordonnancement(liste_proc):\n\"\"\"Ex\u00e9cute l'algorithme d'ordonnancement\n    liste_proc -- liste des processus\n    Renvoie la liste d'ex\u00e9cution des processus\"\"\"\n    execution = []\n    attente = scrutation(liste_proc, [])\nwhile attente != []:\nindice = choix_processus(attente)\n# Retrait de la liste d'attente du dernier \u00e9l\u00e9ment du\n# processus le plus court\nprocess_execute = attente[indice].pop()\n# Le processus est enti\u00e8rement fini, il est enlev\u00e9 de la\n        # liste d'attente\n        if attente[indice] == []:\n            attente.pop(indice)\n            # On ajoute l'\u00e9l\u00e9ment du processus choisi \u00e0 la liste\n            # d'ex\u00e9cution\n        execution.append(process_execute)\n        attente = scrutation(liste_proc, attente)\n    return execution\n</code></pre></p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIZERO-A/","title":"23 NSIZERO A","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIZERO-A/#23-nsizero-a-corrige","title":"23-NSIZERO-A : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : Sujet Z\u00e9ro-A Jour : x Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIZERO-A/#exercice-1-3-points","title":"Exercice 1 (3 points)","text":"<p>Bases de donn\u00e9es et types construits de donn\u00e9es </p> <ol> <li> <p>Les attributs de la table <code>groupes</code> sont <code>idgrp</code>, <code>nom</code>, <code>style</code> et <code>nb_pers</code>.</p> </li> <li> <p>L'attribut <code>nom</code> de la table <code>musiciens</code> ne peut pas \u00eatre une cl\u00e9 primaire car plusieurs musiciens peuvent porter le m\u00eame nom, or une cl\u00e9 primaire doit identifier de fa\u00e7on unique un enregistrement.</p> </li> <li> <p>Cette requ\u00eate renvoie la colonne <code>nom</code> de la table <code>groupes</code> lorsque le style du groupe est <code>'Latin Jazz'</code>. Sur l'extrait fourni, on obtient donc :</p> </li> </ol> nom <code>'Weather Report'</code> <code>'Return to Forever'</code> <ol> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE concerts\nSET heure_fin = '22h30'\nWHERE idconc = 36;\n</code></pre> </li> <li> <p>Pour r\u00e9cup\u00e9rer le nom de tous les groupes qui jouent sur la sc\u00e8ne 1 : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT groupes.nom\nFROM groupes JOIN concerts ON groupes.idgrp = concerts.idgrp\nWHERE concerts.scene = 1\n</code></pre></p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO groupes\nVALUES 15,'Smooth Jazz Fourplay','Free Jazz',4\n</code></pre> </li> <li> \ud83d\udc0d Script Python<pre><code>def recherche_nom(musiciens):\n    au_moins_4_concerts = []\n    for musicien in musiciens:\n        if musicien['nb_concerts']&gt;=4:\n            au_moins_4_concerts.append(musicien['nom'])\n    return au_moins_4_concerts\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/23-NSIZERO-A/#exercice-2-3-points","title":"Exercice 2 (3 points)","text":"<p>Architecture mat\u00e9rielle, R\u00e9seaux et syst\u00e8mes d'exploitation </p> <ol> <li> <p>L'adresse r\u00e9seau  de la configuration d'Alice est <code>172.16.2.0/24</code>, donc tous les ordinateurs de cette configuration ont une adresse IP qui commence par les 24 m\u00eame premiers bits (i.e. les 3 premiers octets) : <code>172.16.2</code>. Cette configuration appartient donc \u00e0 l'ordinateur d'Alice.</p> </li> <li> <p>On applique la formule donn\u00e9e dans l'\u00e9nonc\u00e9 avec un d\u00e9bit du r\u00e9seau de \\(1\\,000\\) Mbits/s : \\(\\textnormal{cout} = \\dfrac{10\\,000}{1\\,000} = 10\\) Le cout du r\u00e9seau WAN8 est donc 10.</p> </li> <li> <p>Voici la table du routeur R6 :</p> </li> </ol> Destination Pass. Cout LAN 1 R5 21 LAN 2 - - WAN 1 R5 11 WAN 2 R5 20 WAN 3 R5 11 WAN 4 R5 12 WAN 5 R5 10 WAN 6 - - WAN 7 - - WAN 8 R5 10 <ol> <li> <p>Les routeurs travers\u00e9s seront : R6  R5  R2  R1</p> </li> <li> <p>Le routeur en panne est le routeur <code>R5</code> (car la nouvelle route est alors R6  R4  R2  R1 dont le co\u00fbt est bien 111.)</p> </li> </ol>"},{"location":"Annales/Corriges/23-NSIZERO-A/#exercice-3-6-points","title":"Exercice 3 (6 points)","text":"<p>ABR et programmation objet </p> <ol> <li> <p>Ce fonctionnement traduit le comportement d'une file c'est \u00e0 dire que le premier \u00e9l\u00e9ment qui entre dans la structure de donn\u00e9es est aussi le premier \u00e0 en sortir (FIFO pour First In, First Out). Dans une pile, la dernier \u00e9l\u00e9ment entr\u00e9 est le premier \u00e0 sortir (LIFO pour Last In, First Out)</p> </li> <li> <p>a. C'est la taille de l'arbre (c'est \u00e0 dire le nombre total de noeuds de l'arbre)</p> <p>b. C'est la racine de l'arbre puisqu'il s'agit de la t\u00e2che ajout\u00e9e \u00e0 l'arbre en premier</p> <p>c. C'est une feuille de l'arbre aucune t\u00e2che n'ayant \u00e9t\u00e9 ajout\u00e9 apr\u00e8s celle-ci, le noeud repr\u00e9sentant cette t\u00e2che n'a pas de fils, c'est donc une feuille.</p> </li> <li> <p>a. Les attributs de la classe <code>Noeud</code> sont <code>tache</code>, <code>indice</code>, <code>gauche</code> et <code>droite</code>.</p> <p>b. La m\u00e9thode <code>insere</code> est r\u00e9cursive car elle s'appelle elle-m\u00eame. Elle se termine car \u00e0 chaque appel on descend d'un niveau dans l'arbre.</p> <p>c. On ins\u00e8re \u00e0 gauche lorsque la valeur \u00e0 ins\u00e9rer est inf\u00e9rieure \u00e0 celle du noeud courant donc on compl\u00e8te la ligne 26 par : \ud83d\udc0d Script Python<pre><code>elif self.racine.indice &gt; nouveau_noeud.indice\n</code></pre></p> <p>d. </p> <p>\u00c9tat initial</p> <pre><code>    graph TD\n    N(\"12\") --&gt; Ng(\"6\")\n    N       --&gt; Nd(\"14\")\n    Ng --&gt; Ngg(\" \")\n    Ng --&gt; Ngd(\"10\")\n    Ngd --&gt; Ngdg(\"8\")\n    Ngd --&gt; Ngdd(\" \")\n    Nd --&gt; Ndg(\"13\")\n    Nd --&gt; Ndd(\" \")\n    style Ngg fill:none, stroke-width:0px\n    style Ngdd fill:none, stroke-width:0px\n    style Ndd fill:none, stroke-width:0px\n\n    linkStyle 2 stroke-width:0px\n    linkStyle 5 stroke-width:0px\n    linkStyle 7 stroke-width:0px</code></pre> <p>Apr\u00e8s l'insertion de 11</p> <pre><code>    graph TD\n    N(\"12\") --&gt; Ng(\"6\")\n    N       --&gt; Nd(\"14\")\n    Ng --&gt; Ngg(\" \")\n    Ng --&gt; Ngd(\"10\")\n    Ngd --&gt; Ngdg(\"8\")\n    Ngd --&gt; Ngdd(\"11\")\n    Nd --&gt; Ndg(\"13\")\n    Nd --&gt; Ndd(\" \")\n    style Ngg fill:none, stroke-width:0px\n    style Ndd fill:none, stroke-width:0px\n\n    linkStyle 2 stroke-width:0px\n    linkStyle 7 stroke-width:0px</code></pre> <p>Apr\u00e8s l'insertion de 5</p> <pre><code>    graph TD\n    N(\"12\") --&gt; Ng(\"6\")\n    N       --&gt; Nd(\"14\")\n    Ng --&gt; Ngg(\"5\")\n    Ng --&gt; Ngd(\"10\")\n    Ngd --&gt; Ngdg(\"8\")\n    Ngd --&gt; Ngdd(\"11\")\n    Nd --&gt; Ndg(\"13\")\n    Nd --&gt; Ndd(\" \")\n\n    style Ndd fill:none, stroke-width:0px\n    linkStyle 7 stroke-width:0px</code></pre> <p>Apr\u00e8s l'insertion de 16</p> <pre><code>    graph TD\n    N(\"12\") --&gt; Ng(\"6\")\n    N       --&gt; Nd(\"14\")\n    Ng --&gt; Ngg(\"5\")\n    Ng --&gt; Ngd(\"10\")\n    Ngd --&gt; Ngdg(\"8\")\n    Ngd --&gt; Ngdd(\"11\")\n    Nd --&gt; Ndg(\"13\")\n    Nd --&gt; Ndd(\"16\")</code></pre> <p>Apr\u00e8s l'insertion de 7</p> <pre><code>    graph TD\n    N(\"12\") --&gt; Ng(\"6\")\n    N       --&gt; Nd(\"14\")\n    Ng --&gt; Ngg(\"5\")\n    Ng --&gt; Ngd(\"10\")\n    Ngd --&gt; Ngdg(\"8\")\n    Ngdg --&gt; Ngdgg(\"7\")\n    Ngdg --&gt; Ngdgd(\" \")\n    Ngd --&gt; Ngdd(\"11\")\n    Nd --&gt; Ndg(\"13\")\n    Nd --&gt; Ndd(\"16\")\n\n    style Ngdgd fill:none, stroke-width:0px\n    linkStyle 6 stroke-width:0px</code></pre> <ol> <li>\ud83d\udc0d Script Python<pre><code>def est_present(self,indice_recherche):\n\"\"\"renvoie True si l'indice de priorit\u00e9 indice_recherche (int) pass\u00e9 en param\u00e8tre est d\u00e9j\u00e0 l'indice d'un noeud de l'abre, False sinon\"\"\"\n    if self.racine == None:\n        return False\n    else:\n        if self.racine.indice == indice_recherche:\n            return True\n        elif self.racine.indice &gt; indice_recherche:\n            return self.racine.gauche.est_present()\n        else:\n            return self.racine.droite.est_present()\n</code></pre></li> </ol> </li> <li> <p>a. On rappelle que dans un parcours infixe, on parcourt le sous arbre gauche, puis la racine, puis le sous arbre droit. Dans le cas de l'arbre de la figure 1, on obtient : 6  8  10  12  13  14</p> <p>b. La t\u00e2che la plus prioritaire sera le premier \u00e9l\u00e9ment rencontr\u00e9 lors de ce parcours.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def tache_prioritaire(self):\n\"\"\"renvoie la tache du noeud situ\u00e9 le plus \u00e0 gauche de l'ABR suppos\u00e9 non vide\"\"\"\n    if self.racine.gauche.est_vide():\n        return self.racine.tache\n    else:\n        return self.racine.gauche.tache_prioritaire()\n</code></pre> </li> <li></li> </ol> <p>\u00c9tape 1 : ajout de 14</p> <pre><code>    graph TD\n    N(\"14\")</code></pre> <p>\u00c9tape 2 : ajout de 11</p> <pre><code>    graph TD\n    N(\"14\")\n    N --&gt; Ng(\"11\")\n    N --&gt; Nd(\" \")\n    style Nd fill:none, stroke-width:0px\n    linkStyle 1 stroke-width:0px</code></pre> <p>\u00c9tape 3 : ajout de 8</p> <pre><code>    graph TD\n    N(\"14\")\n    N --&gt; Ng(\"11\")\n    N --&gt; Nd(\" \")\n    Ng --&gt; Ngg(\"8\")\n    Ng --&gt; Ngd(\" \")\n    style Nd fill:none, stroke-width:0px\n    linkStyle 1 stroke-width:0px\n    style Ngd fill:none, stroke-width:0px\n    linkStyle 3 stroke-width:0px</code></pre> <p>\u00c9tape 4 : traiter 8 qui est prioritaire</p> <pre><code>    graph TD\n    N(\"14\")\n    N --&gt; Ng(\"11\")\n    N --&gt; Nd(\" \")\n    style Nd fill:none, stroke-width:0px\n    linkStyle 1 stroke-width:0px</code></pre> <p>\u00c9tape 5 : ajout de 12</p> <pre><code>    graph TD\n    N(\"14\")\n    N --&gt; Ng(\"11\")\n    N --&gt; Nd(\" \")\n    Ng --&gt; Ngg(\" \")\n    Ng --&gt; Ngd(\"12\")\n    style Nd fill:none, stroke-width:0px\n    linkStyle 1 stroke-width:0px\n    style Ngg fill:none, stroke-width:0px\n    linkStyle 2 stroke-width:0px</code></pre> <p>\u00c9tape 6 : traiter 11 qui est prioritaire</p> <pre><code>    graph TD\n    N(\"14\")\n    N --&gt; Ng(\"12\")\n    N --&gt; Nd(\" \")\n    style Nd fill:none, stroke-width:0px\n    linkStyle 1 stroke-width:0px</code></pre> <p>\u00c9tape 7 : traiter 12 qui est prioritaire</p> <pre><code>    graph TD\n    N(\"14\")</code></pre> <p>\u00c9tape 8 : ajout de 15</p> <pre><code>    graph TD\n    N(\"14\")\n    N --&gt; Ng(\" \")\n    N --&gt; Nd(\"15\")\n    style Ng fill:none, stroke-width:0px\n    linkStyle 0 stroke-width:0px</code></pre> <p>\u00c9tape 9 : ajout de 19</p> <pre><code>    graph TD\n    N(\"14\")\n    N --&gt; Ng(\" \")\n    N --&gt; Nd(\"15\")\n    Nd --&gt; Ndg(\" \")\n    Nd --&gt; Ndd(\"19\")\n    style Ng fill:none, stroke-width:0px\n    linkStyle 0 stroke-width:0px\n    style Ndg fill:none, stroke-width:0px\n    linkStyle 2 stroke-width:0px</code></pre> <p>\u00c9tape 10 : traiter 14 qui est prioritaire</p> <pre><code>    graph TD\n    N(\"15\")\n    N --&gt; Ng(\" \")\n    N --&gt; Nd(\"19\")\n    style Ng fill:none, stroke-width:0px\n    linkStyle 0 stroke-width:0px</code></pre>"},{"location":"Annales/Corriges/23-NSIZERO-B/","title":"23 NSIZERO B","text":"<p> Index des sujets 2023 </p>"},{"location":"Annales/Corriges/23-NSIZERO-B/#23-nsizero-b-corrige","title":"23-NSIZERO-B : Corrig\u00e9","text":"<p>Ann\u00e9e : 2023 Centre : Sujet Z\u00e9ro-B Jour : x Enonc\u00e9 : </p>"},{"location":"Annales/Corriges/23-NSIZERO-B/#exercice-1-4-points","title":"Exercice 1 (4 points)","text":"<p>Ligne de commande sous Linux, traitement de donn\u00e9es en tables et bases de donn\u00e9es </p> <ol> <li> <p>a. Les commandes permettant de se positionner dans <code>timbres</code> depuis <code>fiches</code> sont : commande 1 et commande 5</p> <p>b. Pour acc\u00e9der au r\u00e9pertoire <code>timbres</code> depuis la racine, on peut \u00e9crire : <code>cd /home/document/collections/timbres</code></p> </li> <li> <p>a. On applique la formule \\(C = \\dfrac{10^8}{d}\\) avec \\(d = 100\\)Mbit/s c'est \u00e0 dire le co\u00fbt d'une liaison FastEthernet : \\(C = \\dfrac{10^8}{100\\times 10^6} = 1\\). Donc le co\u00fbt d'une liaison FastEthernet est 1. </p> <p>b. On a reproduit ci-dessous le sch\u00e9ma du r\u00e9seau, en faisant figurer le co\u00fbt des liaisons (le co\u00fbt d'une liaison FFTH est \\(\\dfrac{10^8}{10 \\times 10^9}=0,01\\)) :  Selon le protocole OSPF (minimisation des co\u00fbts), le chemin suivi sera donc : A  B  C  E  F  G pour un co\u00fbt total de 1,04.</p> </li> <li> <p>Les descripteurs de ce fichier sont :  </p> <ul> <li><code>nom_timbre</code> avec pour valeurs <code>Gustave Eiffel</code>, <code>Marianne</code> et <code>Alan Turing</code>,</li> <li><code>annee_fabrication</code> avec pour valeurs <code>1950</code>, <code>1989</code> et <code>2021</code>,</li> <li><code>nom_collectionneur</code> avec pour valeurs <code>Dupont</code>, <code>Durand</code> et \u0300<code>Dupont</code>.</li> </ul> </li> <li> <p>a. La cl\u00e9 primaire d'une relation est un attribut (ou ensemble d'attributs) permettant d'identifier de fa\u00e7on unique chaque enregistrement.</p> <p>b. L'attribut  <code>nom</code> ne peut pas servir de cl\u00e9 primaire car il n'est pas unique pour chaque enregistrement. Dans l'exemple propos\u00e9 plusieurs timbres ont pour nom <code>Gustave Eiffel</code>.</p> <p>c. Pour la m\u00eame raison, l'attribut <code>annee_fabrication</code> ne peut pas servir de cl\u00e9 primaire non plus. Dans l'exemple propos\u00e9 plusieurs timbres ont pour ann\u00e9e de fabrication 1989.</p> <p>d. On peut ajouter un attribut <code>id_timbre</code> qui est diff\u00e9rent pour chaque enregistrement (par exemple en l'incr\u00e9mentant de 1 \u00e0 chaque ajout d'un timbre)</p> </li> <li> <p>a. Cette requ\u00eate modifie l'attribut <code>ref_licence</code> en <code>Ythpswz</code> pour les enregistrements dont l'attribut <code>nom</code> est <code>Dupond</code>. Apr\u00e8s cette requ\u00eate la relation devient (en italique, les valeurs modifi\u00e9es):</p> ref_licence nom prenom annee_naissance nbre_timbres Hqdfapo Dupuis Daniel 1953 53 Ythpswz Dupond Jean-Pierre 1961 157 Qdfqnay Zaou\u00ef Jamel 1973 200 Aerazri Pierre Jean 1967 130 Ythpswz Dupond Alexandra 1960 61 <p>b. L'attribut <code>ref_licence</code> ne peut plus \u00eatre une cl\u00e9 primaire puisqu'il est n'est plus unique (la valeur <code>Ythpswz</code>  appara\u00eet pour deux enregistrement)</p> </li> <li> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom, nbre_timbres FROM collectionneurs\nWHERE annee_naissance &gt;= 1963;\n</code></pre> </li> </ol>"},{"location":"Annales/Corriges/23-NSIZERO-B/#exercice-2-4-points","title":"Exercice 2 (4 points)","text":"<p>Analyse et \u00e9criture de programmes r\u00e9cursifs </p> <ol> <li> <p>a. Une fonction r\u00e9cursive qui est une fonction qui s'appelle elle-m\u00eame.</p> <p>b. La fonction <code>compte_rebours</code> ne fait rien si l'argument <code>n</code> pass\u00e9 en param\u00e8tre est n\u00e9gatif. Apr\u00e8s l'affichage de <code>0</code>, <code>compte_rebours</code> est appel\u00e9 avec la valeur <code>-1</code> et donc le programme s'arr\u00eate.</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def fact(n):\n\"\"\" Renvoie le produit des nombres entiers strictement positifs inf\u00e9rieurs \u00e0 n \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)\n</code></pre> </li> <li> <p>a. Dans la console l'affichage produit sera : \ud83d\udc0d Console Python<pre><code>3\n2\n1\n</code></pre> En effet, <code>somme_entiers_rec(3)</code> va afficher 3 et appeler <code>somme_entiers(2)</code> qui va afficher 2 et appeler <code>somme_entiers(1)</code> qui va afficher 1.</p> <p>b. La valeur 6 sera affect\u00e9 \u00e0 la variable <code>res</code> (\\(3 + 2 + 1\\))</p> </li> </ol> <p>4. \ud83d\udc0d Script Python<pre><code>def somme_entiers(n):\n    somme = 0\n    for k in range(1,n+1):\n        somme = somme + k\n    return somme\n</code></pre></p>"},{"location":"Annales/Corriges/23-NSIZERO-B/#exercice-3-4-points","title":"Exercice 3 (4 points)","text":"<p>ABR et POO </p> <ol> <li> <p>a. Un exemple d'attribut de la classe <code>ArbreBinaire</code> est <code>valeur</code>. Un exemple de m\u00e9thode est <code>insert_gauche</code>.</p> <p>b. <code>a</code> aura le valeur 15 et <code>c</code> la valeur 6.</p> </li> <li> <pre><code>        graph TD\n        S15[\"15\"] --&gt; S6[\"6\"]\n        S15 --&gt; S18[\"18\"]\n        S6 --&gt; S3[\"3\"]\n        S6 --&gt; S7[\"7\"]\n        S18 --&gt; S17[\"17\"]\n        S18 --&gt; S20[\"20\"]\n        S3 --&gt; S2[\"2\"]\n        S3 --&gt; V1[\" \"]\n        style V1 opacity:0;\n        linkStyle 7 stroke:#FFFFFF,stroke-width:0px</code></pre> </li> <li> <p>La valeur <code>13</code> figure dans le sous arbre gauche du noeud <code>12</code> qui ne doit contenir que des valeurs plus petites que 12 si l'arbre \u00e9tait binaire. On obtient un arbre binaire de recherche en inversant les positions du <code>13</code> et du <code>11</code>.</p> </li> </ol> <pre><code>        graph TD\n        S10[\"10\"] --&gt; S3[\"3\"]\n        S10 --&gt; S12[\"12\"]\n        S3 --&gt; S2[\"2\"]\n        S3 --&gt; S5[\"5\"]\n        S12 --&gt; S11[\"11\"]\n        S12 --&gt; S13[\"13\"]</code></pre> <p>4. La liste renvoy\u00e9e sera : <code>[1,6,10,15,16,18,25]</code>. On rappelle que dans un parcours infixe, on parcourt d'abord le sous arbre gauche, puis la racine puis le sous arbre droit. Et que dans le cas d'un arbre binaire de recherche ce parcours permet d'obtenir les valeurs dans l'ordre croissant.</p>"},{"location":"Annales/Corriges/annexe/","title":"Annexe","text":"In\u00a0[\u00a0]: Copied! <pre>def fabrique(h, n):\n    def annexe(hauteur_max):\n        nonlocal n\n        if n == 0 :\n            return []\n        elif hauteur_max == 0:\n            n=n-1\n            return [[],[]]\n        else:\n            n=n-1\n            gauche = annexe(hauteur_max - 1)\n            droite = annexe(hauteur_max - 1)\n            return [[gauche],[droite]]\n    return annexe(h)\n</pre> def fabrique(h, n):     def annexe(hauteur_max):         nonlocal n         if n == 0 :             return []         elif hauteur_max == 0:             n=n-1             return [[],[]]         else:             n=n-1             gauche = annexe(hauteur_max - 1)             droite = annexe(hauteur_max - 1)             return [[gauche],[droite]]     return annexe(h) In\u00a0[\u00a0]: Copied! <pre>print(fabrique(5,7))\n</pre> print(fabrique(5,7))"},{"location":"Annales/Corriges/gen_cle/","title":"Gen cle","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>def genere_cle(mot,n):\n    nb_fois = n//len(mot)\n    reste = n%len(mot)\n    cle = nb_fois * mot\n    for i in range(reste):\n        cle += mot[i]\n    return cle\n</pre> def genere_cle(mot,n):     nb_fois = n//len(mot)     reste = n%len(mot)     cle = nb_fois * mot     for i in range(reste):         cle += mot[i]     return cle In\u00a0[\u00a0]: Copied! <pre>print(genere_cle(\"YAK\",8))\n</pre> print(genere_cle(\"YAK\",8))"},{"location":"Annales/Corriges/knuth/","title":"Knuth","text":"In\u00a0[\u00a0]: Copied! <pre>def knuth(f):\n    p=[]\n    N=len(f)\n    for i in range(N):\n        if p==[]:\n            p.append(f.pop())\n            print(f\"f : {f}, p : {p}\")\n        else:\n            e = f.pop()\n            print(f\"f : {f}, p : {p}\")\n            if e &gt;= p[-1]:\n                p.append(e)\n                print(f\"f : {f}, p : {p}\")\n            else:\n                while not p==[] and e &lt; p[-1]:\n                    f.insert(0,p.pop())\n                    print(f\"f : {f}, p : {p}\")\n                p.append(e)\n                print(f\"f : {f}, p : {p}\")\n    print(f\"f : {f}, p : {p}\")\n    while not p==[]:\n        f.append(p.pop())\n        print(f\"f : {f}, p : {p}\")\n</pre> def knuth(f):     p=[]     N=len(f)     for i in range(N):         if p==[]:             p.append(f.pop())             print(f\"f : {f}, p : {p}\")         else:             e = f.pop()             print(f\"f : {f}, p : {p}\")             if e &gt;= p[-1]:                 p.append(e)                 print(f\"f : {f}, p : {p}\")             else:                 while not p==[] and e &lt; p[-1]:                     f.insert(0,p.pop())                     print(f\"f : {f}, p : {p}\")                 p.append(e)                 print(f\"f : {f}, p : {p}\")     print(f\"f : {f}, p : {p}\")     while not p==[]:         f.append(p.pop())         print(f\"f : {f}, p : {p}\") In\u00a0[\u00a0]: Copied! <pre>knuth([2,1,3])\n</pre> knuth([2,1,3])"},{"location":"Annales/Corriges/villa/","title":"Villa","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>class Villa:\n\n    def __init__(self,nom):\n        self.nom = nom\n    \n    def nom(self):\n        return self.nom\n</pre> class Villa:      def __init__(self,nom):         self.nom = nom          def nom(self):         return self.nom In\u00a0[\u00a0]: Copied! <pre>t = Villa(\"Toto\")\nprint(t.nom)\n</pre> t = Villa(\"Toto\") print(t.nom)"},{"location":"Annales/Corriges/Sources/test_pile/","title":"Test pile","text":"In\u00a0[\u00a0]: Copied! <pre>def creer_pile_vide():\n    return []\n</pre> def creer_pile_vide():     return [] In\u00a0[\u00a0]: Copied! <pre>def est_vide(p):\n    return p==[]\n</pre> def est_vide(p):     return p==[] In\u00a0[\u00a0]: Copied! <pre>def empiler(p,element):\n    p.append(element)\n</pre> def empiler(p,element):     p.append(element) In\u00a0[\u00a0]: Copied! <pre>def depiler(p):\n    return p.pop()\n</pre> def depiler(p):     return p.pop() In\u00a0[\u00a0]: Copied! <pre>def sommet(p):\n    return p[-1]\n</pre> def sommet(p):     return p[-1] In\u00a0[\u00a0]: Copied! <pre>def taille(p):\n    return len(p)\n</pre> def taille(p):     return len(p) In\u00a0[\u00a0]: Copied! <pre>def reduire_triplet_au_sommet(p):\n    a = depiler(p)\n    b = depiler(p)\n    c = sommet(p)\n    if a % 2 != c%2 :\n        empiler(p, b)\n    empiler(p, a)\n</pre> def reduire_triplet_au_sommet(p):     a = depiler(p)     b = depiler(p)     c = sommet(p)     if a % 2 != c%2 :         empiler(p, b)     empiler(p, a) In\u00a0[\u00a0]: Copied! <pre>def parcourir_pile_en_reduisant(p):\n    q = creer_pile_vide()\n    np = p.copy()\n    while taille(np) &gt;= 3:\n        reduire_triplet_au_sommet(np)\n        e = depiler(np)\n        empiler(q, e)\n    while not est_vide(q):\n        e = depiler(q)\n        empiler(np,e)\n    return np\n</pre> def parcourir_pile_en_reduisant(p):     q = creer_pile_vide()     np = p.copy()     while taille(np) &gt;= 3:         reduire_triplet_au_sommet(np)         e = depiler(np)         empiler(q, e)     while not est_vide(q):         e = depiler(q)         empiler(np,e)     return np In\u00a0[\u00a0]: Copied! <pre>def jouer(p):\n    q = parcourir_pile_en_reduisant(p)\n    if taille(q)==taille(p) :\n        return p\n    else:\n        return jouer(q)\n</pre> def jouer(p):     q = parcourir_pile_en_reduisant(p)     if taille(q)==taille(p) :         return p     else:         return jouer(q) In\u00a0[\u00a0]: Copied! <pre>tp = [2,4,7,8,9,4]\ntp1 = parcourir_pile_en_reduisant(tp)\nprint(tp1)\ntp2 = parcourir_pile_en_reduisant(tp1)\nprint(tp2)\ntp3 = parcourir_pile_en_reduisant(tp2)\nprint(tp3)\n</pre> tp = [2,4,7,8,9,4] tp1 = parcourir_pile_en_reduisant(tp) print(tp1) tp2 = parcourir_pile_en_reduisant(tp1) print(tp2) tp3 = parcourir_pile_en_reduisant(tp2) print(tp3) In\u00a0[\u00a0]: Copied! <pre>print(jouer(tp))\n</pre> print(jouer(tp))"},{"location":"Archi_Materielle/T3_1_Routage/","title":"Macro Rendering Error","text":"<p>File: <code>Archi_Materielle/T3_1_Routage.md</code></p> <p>KeyError: 6</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 6, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 6\n</code></pre>"},{"location":"Archi_Materielle/T3_1_Routage_BAC/","title":"Th\u00e8me 3 - Architecture mat\u00e9rielle","text":"BAC              Protocole de Routage"},{"location":"Archi_Materielle/T3_1_Routage_BAC/#exercices-bac","title":"Exercices BAC","text":""},{"location":"Archi_Materielle/T3_1_Routage_BAC/#sujet-n1-sujet-zero","title":"Sujet n\u00b01 : sujet z\u00e9ro","text":"<p>Sujet z\u00e9ro</p> <p>On consid\u00e8re un r\u00e9seau compos\u00e9 de plusieurs routeurs reli\u00e9s de la fa\u00e7on suivante :</p> <p></p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC/#le-protocole-rip","title":"\u27a1 Le protocole RIP","text":"<p>Le protocole RIP permet de construire les tables de routage des diff\u00e9rents routeurs, en indiquant pour chaque routeur la distance, en nombre de sauts, qui le s\u00e9pare d\u2019un autre routeur. Pour le r\u00e9seau ci-dessus, on dispose des tables de routage suivantes :</p> <p></p> <p></p> <p></p> <p>Question 1</p> <ol> <li>Le routeur A doit transmettre un message au routeur G, en effectuant un nombre minimal de sauts. D\u00e9terminer le trajet parcouru.  </li> <li>D\u00e9terminer une table de routage possible pour le routeur G obtenu \u00e0 l\u2019aide du protocole RIP.</li> </ol> <p>Question 2</p> <p>Le routeur C tombe en panne. Reconstruire la table de routage du routeur A en suivant le protocole RIP.</p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC/#le-protocole-ospf","title":"\u27a1 Le protocole OSPF","text":"<p>Contrairement au protocole RIP, l\u2019objectif n\u2019est plus de minimiser le nombre de routeurs travers\u00e9s par un paquet. La notion de distance utilis\u00e9e dans le protocole OSPF est uniquement li\u00e9e aux co\u00fbts des liaisons. L\u2019objectif est alors de minimiser la somme des co\u00fbts des liaisons travers\u00e9es. Le co\u00fbt d\u2019une liaison est donn\u00e9 par la formule suivante :  </p> <p>\\(co\u00fbt = \\dfrac{10^8}{d}\\)</p> <p>o\u00f9 \\(d\\) est la bande passante en bits/s entre les deux routeurs.  </p> <p>On a rajout\u00e9 sur le graphe repr\u00e9sentant le r\u00e9seau pr\u00e9c\u00e9dent les diff\u00e9rents d\u00e9bits des liaisons. On rappelle que 1 Gb/s = 1 000 Mb/s = \\(10^9\\) bits/s.</p> <p></p> <p>Question 3</p> <ol> <li>V\u00e9rifier que le co\u00fbt de la liaison entre les routeurs A et B est 0,01.</li> <li>La liaison entre le routeur B et D a un co\u00fbt de 5. Quel est le d\u00e9bit de cette liaison ?</li> </ol> <p>Question 4</p> <p>Le routeur A doit transmettre un message au routeur G, en empruntant le chemin dont la somme des co\u00fbts sera la plus petite possible. D\u00e9terminer le chemin parcouru. On indiquera le raisonnement utilis\u00e9.</p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC/#sujet-n2","title":"Sujet n\u00b02","text":"<p>Exo</p> <p>Cet exercice porte sur les r\u00e9seaux et les protocoles de routage. </p> <p>On repr\u00e9sente ci-dessous un r\u00e9seau dans lequel R1, R2, R3, R4, R5 et R6 sont des routeurs. Le r\u00e9seau local L1 est reli\u00e9 au routeur R1 et le r\u00e9seau local L2 au routeur R6.</p> <p></p> <p>Rappels et notations Dans cet exercice, les adresses IP sont compos\u00e9es de 4 octets, soit 32 bits. Elles sont not\u00e9es X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets, convertis en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants repr\u00e9sentent la partie \u00ab h\u00f4te \u00bb. Toutes les adresses des h\u00f4tes connect\u00e9s \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau et peuvent donc communiquer directement. L\u2019adresse IP dont tous les bits de la partie \u00ab h\u00f4te \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb.  </p> <p>On donne \u00e9galement des extraits de la table de routage des routeurs R1 \u00e0 R5 dans le tableau suivant :</p> Routeur R\u00e9seau destinataire Passerelle Interface R1 54.37.122.0/24 86.154.10.1 86.154.10.56 R2 54.37.122.0/24 37.49.236.22 37.49.236.23 R3 54.37.122.0/24 62.34.2.8 62.34.2.9 R4 54.37.122.0/24 94.23.122.10 94.23.122.11 R5 54.37.122.0/24 218.32.15.1 218.32.15.2 <p>Question 1</p> <p>Un paquet part du r\u00e9seau local L1 \u00e0 destination du r\u00e9seau local L2.  </p> <p>a. En utilisant l\u2019extrait de la table de routage de R1, vers quel routeur R1 envoie-t-il ce paquet : R2 ou R3 ? Justifier. b. A l\u2019aide des extraits de tables de routage ci-dessus, nommer les routeurs travers\u00e9s par ce paquet, lorsqu\u2019il va du r\u00e9seau L1 au r\u00e9seau L2.</p> <p>Question 2</p> <p>La liaison entre R1 et R2 est rompue.  </p> <p>a. Sachant que ce r\u00e9seau utilise le protocole RIP (distance en nombre de sauts), donner l\u2019un des deux chemins possibles que pourra suivre un paquet allant de L1 vers L2. b. Dans les extraits de tables de routage ci-dessus, pour le chemin de la question 2.a, quelle(s) ligne(s) sera (seront) modifi\u00e9e(s) ?</p> <p>Question 3</p> <p>On a r\u00e9tabli la liaison entre R1 et R2. Par ailleurs, pour tenir compte du d\u00e9bit des liaisons, on d\u00e9cide d\u2019utiliser le protocole OSPF (distance li\u00e9e au co\u00fbt minimal des liaisons) pour effectuer le routage. Le co\u00fbt des liaisons entre les routeurs est donn\u00e9 par le tableau suivant : </p> Liaison R1-R2 R1-R3 R2-R3 R2-R4 R2-R5 R2-R6 R3-R4 R4-R5 R4-R6 R5-R6 Co\u00fbt 100 100 ? 1 10 10 10 1 10 1 <p>a. Le co\u00fbt \\(C\\) d'une liaison est donn\u00e9 ici par la formule \u0b3d  </p> <p>\\(C=\\dfrac{10^9}{BP}\\)</p> <p>o\u00f9 \\(BP\\) est la bande passante de la connexion en bps (bit par seconde). Sachant que la bande passante de la liaison R2-R3 est de 10 Mbps, calculer le co\u00fbt correspondant. b. D\u00e9terminer le chemin parcouru par un paquet partant du r\u00e9seau L1 et arrivant au r\u00e9seau L2, en utilisant le protocole OSPF. c. Indiquer pour quel(s) routeur(s) l\u2019extrait de la table de routage sera modifi\u00e9 pour un paquet \u00e0 destination de L2, avec la m\u00e9trique OSPF.</p> <p>Annexe</p> <p></p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC/#sujet-n3-2022-metropole-j2","title":"Sujet n\u00b03 : 2022, M\u00e9tropole, J2","text":"<p> D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 3</p> <p>Rappels :</p> <p>Une adresse IPv4 est compos\u00e9e de 4 octets, soit 32 bits. Elle est not\u00e9e <code>a.b.c.d</code>, o\u00f9 <code>a</code>, <code>b</code>, <code>c</code> et <code>d</code> sont les valeurs des 4 octets.</p> <p>La notation <code>a.b.c.d/n</code> signifie que les <code>n</code> premiers bits de l'adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits qui suivent repr\u00e9sentent la partie \u00ab machine \u00bb.</p> <p>L'adresse IPv4 dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb.</p> <p>L'adresse IPv4 dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 1 est appel\u00e9e \u00ab adresse de diffusion \u00bb.</p> <p>On consid\u00e8re le r\u00e9seau repr\u00e9sent\u00e9 sur la ci-dessous :</p> <p> </p> <p>Question 1</p> <p>On consid\u00e8re la machine d'adresse IPv4 <code>192.168.1.1</code>.</p> <p>1.a. Donner l'adresse du r\u00e9seau sur lequel se trouve cette machine.</p> <p>1.b. Donner l'adresse de diffusion (broadcast) de ce r\u00e9seau.</p> <p>1.c. Donner le nombre maximal de machines que l'on peut connecter sur ce r\u00e9seau.</p> <p>1.d. On souhaite ajouter une machine sur ce r\u00e9seau, proposer une adresse IPv4 possible pour cette machine.</p> <p>Question 2</p> <p>La machine d'adresse IPv4 <code>192.168.1.1</code> transmet un paquet IPv4 \u00e0 la machine d'adresse IPv4 <code>192.168.4.2</code>.</p> <p>2.a.  Donner toutes les routes pouvant \u00eatre emprunt\u00e9es par ce paquet IPv4, chaque routeur ne pouvant \u00eatre travers\u00e9 qu'une seule fois.</p> <p>2.b. Expliquer l'utilit\u00e9 d'avoir plusieurs routes possibles reliant les r\u00e9seaux <code>192.168.1.0/24</code> et <code>192.168.4.0/24</code>.</p> <p>Question 3</p> <p>Dans cette question, on suppose que le protocole de routage mis en place dans le r\u00e9seau est RIP. Ce protocole consiste \u00e0 minimiser le nombre de sauts.</p> <p>Le sch\u00e9ma du r\u00e9seau est celui de la figure ci-dessus.</p> <p>Les tables de routage utilis\u00e9es sont donn\u00e9es ci-dessous :</p> Routeur ARouteur BRouteur CRouteur DRouteur ERouteur F Destination passe par B ... C ... D E E ... F C Destination passe par A A C C D C E C F C Destination passe par A A B B D E E E F F Destination passe par A E B F C F E E F F Destination passe par A A B C C C D D F C Destination passe par A C B C C C D D E C <p>3.a. Recopier et compl\u00e9ter sur la copie la table de routage du routeur A.</p> <p>3.b. Un paquet IP doit aller du routeur B au routeur D. En utilisant les tables de routage, donner le parcours emprunt\u00e9 par celui-ci.</p> <p>3.c. Les connexions entre les routeurs B-C et A-E \u00e9tant coup\u00e9es, sur la copie, r\u00e9\u00e9crire les tables de routage des routeurs A, B et C.</p> <p>3.d. D\u00e9terminer le nouveau parcours emprunt\u00e9 par le paquet IP pour aller du routeur B au routeur D.</p> <p>Question 4</p> <p>Dans cette question, on suppose que le protocole de routage mis en place dans le r\u00e9seau est OSPF. Ce protocole consiste \u00e0 minimiser la somme des co\u00fbts des liaisons emprunt\u00e9es.</p> <p>Le co\u00fbt d'une liaison est d\u00e9fini par la relation \\(\\mathrm{co\u00fbt} = \\frac{10^8}{d}\\) o\u00f9 \\(d\\) repr\u00e9sente le d\u00e9bit en \\(\\mathrm{bit}/\\mathrm{s}\\) et \\(\\mathrm{co\u00fbt}\\) est sans unit\u00e9. Le sch\u00e9ma du r\u00e9seau reste celui du d\u00e9but de l'exercice.</p> <p>4.a. D\u00e9terminer le co\u00fbt des liaisons Ethernet (\\(d = 10^7\\,\\mathrm{bit}/\\mathrm{s}\\)), Fast-Ethernet (\\(d = 10^8\\,\\mathrm{bit}/\\mathrm{s}\\)) et Fibre (\\(d = 10^9\\,\\mathrm{bit}/\\mathrm{s}\\)).</p> <p>4.b. On veut repr\u00e9senter sch\u00e9matiquement le r\u00e9seau de routeurs \u00e0 partir du sch\u00e9ma du r\u00e9seau.</p> <p>Recopier sur la copie le sch\u00e9ma ci-dessous et tracer les liaisons entre les routeurs en y indiquant leur co\u00fbt.</p> <pre><code>graph LR\n    A[(A)] ---  B[(B)]\n    A ---  C[(C)]\n    A ---  E[(E)]\n    B ---  C\n    C ---  E\n    E ---  D[(D)]\n    D ---  F[(F)]\n    C --- F\n    linkStyle 0 stroke-width:0;\n    linkStyle 1 stroke-width:0;\n    linkStyle 2 stroke-width:0;\n    linkStyle 3 stroke-width:0;\n    linkStyle 4 stroke-width:0;\n    linkStyle 5 stroke-width:0;\n    linkStyle 6 stroke-width:0;\n    linkStyle 7 stroke-width:0;</code></pre> <p>4.c. Un paquet IPv4 doit \u00eatre achemin\u00e9 d'une machine ayant pour adresse IPv4 <code>192.168.2.1</code> \u00e0 une machine ayant pour adresse IPv4 <code>192.168.4.1</code>.</p> <p>\u00c9crire les routes possibles, c'est \u00e0 dire la liste des routeurs travers\u00e9s, et le co\u00fbt de chacune de ces routes, chaque routeur ne pouvant \u00eatre travers\u00e9 qu'une seule fois.</p> <p>4.d. Donner, en la justifiant, la route qui sera emprunt\u00e9e par un paquet IPv4 pour aller d'une machine ayant pour adresse IPv4 <code>192.168.2.1</code> \u00e0 une machine ayant pour adresse IPv4 <code>192.168.4.1</code>.</p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC/#sujet-n4-2022-metropole-j1","title":"Sujet n\u00b04 : 2022, M\u00e9tropole, J1","text":"<p>: D'apr\u00e8s 2022, M\u00e9tropole J1</p> <p>Question 1</p> <p>Une adresse IPv4 est repr\u00e9sent\u00e9e sous la forme de 4 nombres entiers positifs s\u00e9par\u00e9s par des points. Chacun de ces 4 entiers peut \u00eatre repr\u00e9sent\u00e9 sur un octet.</p> <p>1.a. Donner en \u00e9criture d\u00e9cimale l'adresse IPv4 correspondant \u00e0 l'\u00e9criture binaire : <code>11000000.10101000.10000000.10000011</code></p> <p>1.b Tous les ordinateurs du r\u00e9seau A ont une adresse IPv4 de la forme : <code>192.168.128.___</code>, o\u00f9 seul le dernier octet (repr\u00e9sent\u00e9 par <code>___</code> ) diff\u00e8re.</p> <p>Donner le nombre d'adresses diff\u00e9rentes possibles du r\u00e9seau A.</p> <p>Question 2</p> <p>On rappelle que le protocole RIP cherche \u00e0 minimiser le nombre de routeurs travers\u00e9s (qui correspond \u00e0 la m\u00e9trique). On donne les tables de routage d'un r\u00e9seau informatique compos\u00e9 de 5 routeurs (appel\u00e9s A, B, C, D et E), chacun associ\u00e9 directement \u00e0 un r\u00e9seau du m\u00eame nom, obtenues avec le protocole RIP :</p> Routeur ARouteur BRouteur CRouteur DRouteur E Destination M\u00e9trique A 0 B 1 C 1 D 1 E 2 Destination M\u00e9trique A 1 B 0 C 2 D 1 E 2 Destination M\u00e9trique A 1 B 2 C 0 D 1 E 2 Destination M\u00e9trique A 1 B 1 C 1 D 0 E 1 Destination M\u00e9trique A 2 B 2 C 2 D 1 E 0 <p>2.a. Donner la liste des routeurs avec lesquels le routeur A est directement reli\u00e9.</p> <p>2.b. Repr\u00e9senter graphiquement et de mani\u00e8re sommaire les 5 routeurs ainsi que les liaisons existantes entre ceux-ci.</p> <p>Question 3</p> <p>Le protocole OSPF est un protocole de routage qui cherche \u00e0 minimiser la somme des m\u00e9triques des liaisons entre routeurs. Dans le protocole de routage OSPF le d\u00e9bit des liaisons entre routeurs agit sur la m\u00e9trique via la relation : \\(\\text{m\u00e9trique} = \\dfrac{10^8}{\\text{d\u00e9bit}}\\) dans laquelle le d\u00e9bit est exprim\u00e9 en bit par seconde (\\(\\text{bps}\\)).</p> <p>On rappelle qu'un \\(\\text{kbps}\\) est \u00e9gal \u00e0 \\(10^3~\\text{bps}\\) et qu'un \\(\\text{Mbps}\\) est \u00e9gal \u00e0 \\(10^6~\\text{bps}\\).</p> <p>Recopier sur votre copie et compl\u00e9ter le tableau suivant :</p> D\u00e9bit \\(100~\\text{kbps}\\) \\(500~\\text{kbps}\\) ... \\(100~\\text{Mbps}\\) M\u00e9trique associ\u00e9e \\(1000\\) ... \\(10\\) \\(1\\) <p>Question 4</p> <p>Voici la repr\u00e9sentation d'un r\u00e9seau et la table de routage incompl\u00e8te du routeur F obtenue avec le protocole OSPF :</p> <p></p> <p>Routeur F</p> Destination M\u00e9trique F 0 G 8 H 5 I J K L <p>Les nombres pr\u00e9sents sur les liaisons repr\u00e9sentent les co\u00fbts des routes avec le protocole OSPF.</p> <p>4.a. Indiquer le chemin emprunt\u00e9 par un message d'un ordinateur du r\u00e9seau F \u00e0 destination d'un ordinateur du r\u00e9seau I. Justifier votre r\u00e9ponse.</p> <p>4.b. Recopier et compl\u00e9ter la table de routage du routeur F.</p> <p>4.c. Citer une unique panne qui suffirait \u00e0 ce que toutes les donn\u00e9es des \u00e9changes de tout autre r\u00e9seau \u00e0 destination du r\u00e9seau F transitent par le routeur G. Expliquer en d\u00e9tail votre r\u00e9ponse.</p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC_Correction/","title":"Sujet BAC 6 :  \u00a0 Protocole de routage","text":""},{"location":"Archi_Materielle/T3_1_Routage_BAC_Correction/#sujet-n1-sujet-zero","title":"Sujet n\u00b01 : sujet z\u00e9ro","text":"<p>Sujet z\u00e9ro</p> <p>On consid\u00e8re un r\u00e9seau compos\u00e9 de plusieurs routeurs reli\u00e9s de la fa\u00e7on suivante :</p> <p></p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC_Correction/#le-protocole-rip","title":"\u27a1 Le protocole RIP","text":"<p>Le protocole RIP permet de construire les tables de routage des diff\u00e9rents routeurs, en indiquant pour chaque routeur la distance, en nombre de sauts, qui le s\u00e9pare d\u2019un autre routeur. Pour le r\u00e9seau ci-dessus, on dispose des tables de routage suivantes :</p> <p></p> <p></p> <p></p> <p>Question 1</p> <ol> <li>Le routeur A doit transmettre un message au routeur G, en effectuant un nombre minimal de sauts. D\u00e9terminer le trajet parcouru.  </li> <li>D\u00e9terminer une table de routage possible pour le routeur G obtenu \u00e0 l\u2019aide du protocole RIP.</li> </ol> R\u00e9ponse <ol> <li>trajet possible ACFG 'Lecture des table de routage. La distance est de 3.  </li> <li></li> </ol> <p>Question 2</p> <p>Le routeur C tombe en panne. Reconstruire la table de routage du routeur A en suivant le protocole RIP.</p> R\u00e9ponse <p></p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC_Correction/#le-protocole-ospf","title":"\u27a1 Le protocole OSPF","text":"<p>Contrairement au protocole RIP, l\u2019objectif n\u2019est plus de minimiser le nombre de routeurs travers\u00e9s par un paquet. La notion de distance utilis\u00e9e dans le protocole OSPF est uniquement li\u00e9e aux co\u00fbts des liaisons. L\u2019objectif est alors de minimiser la somme des co\u00fbts des liaisons travers\u00e9es. Le co\u00fbt d\u2019une liaison est donn\u00e9 par la formule suivante :  </p> <p>\\(co\u00fbt = \\dfrac{10^8}{d}\\)</p> <p>o\u00f9 \\(d\\) est la bande passante en bits/s entre les deux routeurs.  </p> <p>On a rajout\u00e9 sur le graphe repr\u00e9sentant le r\u00e9seau pr\u00e9c\u00e9dent les diff\u00e9rents d\u00e9bits des liaisons. On rappelle que 1 Gb/s = 1 000 Mb/s = \\(10^9\\) bits/s.</p> <p></p> <p>Question 3</p> <ol> <li>V\u00e9rifier que le co\u00fbt de la liaison entre les routeurs A et B est 0,01.</li> <li>La liaison entre le routeur B et D a un co\u00fbt de 5. Quel est le d\u00e9bit de cette liaison ?</li> </ol> R\u00e9ponse <p>3.1 A -&gt; B : 10 Gb/s soit un co\u00fbt : \\(\\dfrac{10^8}{10 \\times 10^9}=0.01\\)</p> <p>3.2 \\(\\dfrac{10^8}{d}=5 \\rightarrow d=\\dfrac{10^8}{5} = 2 \\times 10^7\\) b/s soit 20 Mb/s</p> <p>Question 4</p> <p>Le routeur A doit transmettre un message au routeur G, en empruntant le chemin dont la somme des co\u00fbts sera la plus petite possible. D\u00e9terminer le chemin parcouru. On indiquera le raisonnement utilis\u00e9.</p> R\u00e9ponse <p> </p> <p>Le parcourt avec un co\u00fbt minimal pour aller de A \u00e0 G est donc ADEG dont le co\u00fbt est 1,011.</p> <p>Correction du tableau de l'algorithme de Dijkstra</p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC_Correction/#sujet-n2","title":"Sujet n\u00b02","text":"<p>Exo</p> <p>Cet exercice porte sur les r\u00e9seaux et les protocoles de routage. </p> <p>On repr\u00e9sente ci-dessous un r\u00e9seau dans lequel R1, R2, R3, R4, R5 et R6 sont des routeurs. Le r\u00e9seau local L1 est reli\u00e9 au routeur R1 et le r\u00e9seau local L2 au routeur R6.</p> <p></p> <p>Rappels et notations Dans cet exercice, les adresses IP sont compos\u00e9es de 4 octets, soit 32 bits. Elles sont not\u00e9es X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets, convertis en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants repr\u00e9sentent la partie \u00ab h\u00f4te \u00bb. Toutes les adresses des h\u00f4tes connect\u00e9s \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau et peuvent donc communiquer directement. L\u2019adresse IP dont tous les bits de la partie \u00ab h\u00f4te \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb.  </p> <p>On donne \u00e9galement des extraits de la table de routage des routeurs R1 \u00e0 R5 dans le tableau suivant :</p> Routeur R\u00e9seau destinataire Passerelle Interface R1 54.37.122.0/24 86.154.10.1 86.154.10.56 R2 54.37.122.0/24 37.49.236.22 37.49.236.23 R3 54.37.122.0/24 62.34.2.8 62.34.2.9 R4 54.37.122.0/24 94.23.122.10 94.23.122.11 R5 54.37.122.0/24 218.32.15.1 218.32.15.2 <p>Question 1</p> <p>Un paquet part du r\u00e9seau local L1 \u00e0 destination du r\u00e9seau local L2.  </p> <p>a. En utilisant l\u2019extrait de la table de routage de R1, vers quel routeur R1 envoie-t-il ce paquet : R2 ou R3 ? Justifier. b. A l\u2019aide des extraits de tables de routage ci-dessus, nommer les routeurs travers\u00e9s par ce paquet, lorsqu\u2019il va du r\u00e9seau L1 au r\u00e9seau L2.</p> R\u00e9ponse 1.a <p>L\u2019extrait de la table de routage de R1 montre que pour atteindre le r\u00e9seau L2 (57.37.122.0/24) les paquets doivent \u00eatre envoy\u00e9s via l\u2019interface 86.154.10.56. Cette interface fait partie du r\u00e9seau 86.154.10.0/24. Le routeur R2 fait aussi partie de ce r\u00e9seau. On peut donc affirmer que depuis R1, les paquets seront dirig\u00e9s vers R2.</p> R\u00e9ponse 1.b <p>L1 -&gt; R1 -&gt; R2 -&gt; R6 -&gt; L2</p> <p>Question 2</p> <p>La liaison entre R1 et R2 est rompue.  </p> <p>a. Sachant que ce r\u00e9seau utilise le protocole RIP (distance en nombre de sauts), donner l\u2019un des deux chemins possibles que pourra suivre un paquet allant de L1 vers L2. b. Dans les extraits de tables de routage ci-dessus, pour le chemin de la question 2.a, quelle(s) ligne(s) sera (seront) modifi\u00e9e(s) ?</p> R\u00e9ponse 2.a <p>L1 -&gt; R1 -&gt; R3 -&gt; R4 -&gt; R6 -&gt; L2</p> R\u00e9ponse 2.b <p>Vu le chemin choisi \u00e0 la question 2a, seule la ligne R1 sera modifi\u00e9e (r\u00e9seau 112.44.65.0 \u00e0 la place du r\u00e9seau 86.154.10.0).</p> <p>Question 3</p> <p>On a r\u00e9tabli la liaison entre R1 et R2. Par ailleurs, pour tenir compte du d\u00e9bit des liaisons, on d\u00e9cide d\u2019utiliser le protocole OSPF (distance li\u00e9e au co\u00fbt minimal des liaisons) pour effectuer le routage. Le co\u00fbt des liaisons entre les routeurs est donn\u00e9 par le tableau suivant : </p> Liaison R1-R2 R1-R3 R2-R3 R2-R4 R2-R5 R2-R6 R3-R4 R4-R5 R4-R6 R5-R6 Co\u00fbt 100 100 ? 1 10 10 10 1 10 1 <p>a. Le co\u00fbt \\(C\\) d'une liaison est donn\u00e9 ici par la formule \u0b3d  </p> <p>\\(C=\\dfrac{10^9}{BP}\\)</p> <p>o\u00f9 \\(BP\\) est la bande passante de la connexion en bps (bit par seconde). Sachant que la bande passante de la liaison R2-R3 est de 10 Mbps, calculer le co\u00fbt correspondant. b. D\u00e9terminer le chemin parcouru par un paquet partant du r\u00e9seau L1 et arrivant au r\u00e9seau L2, en utilisant le protocole OSPF. c. Indiquer pour quel(s) routeur(s) l\u2019extrait de la table de routage sera modifi\u00e9 pour un paquet \u00e0 destination de L2, avec la m\u00e9trique OSPF.</p> R\u00e9ponse 2.a <p>\\(C = \\dfrac{10^9}{10^7} = 100\\)</p> R\u00e9ponse 2.b <p>La route avec le co\u00fbt minimum (103) est la suivante : L1 -&gt; R1 -&gt; R2 -&gt; R4 -&gt; R5 -&gt; R6 -&gt; L2</p> R\u00e9ponse 2.c <p>Les tables de routage R2 et R4 seront modifi\u00e9es.</p> <p>Annexe</p> <p></p>"},{"location":"Archi_Materielle/T3_1_Routage_BAC_Correction/#sujet-n3-2022-metropole-j2","title":"Sujet n\u00b03 : 2022, M\u00e9tropole, J2","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 3</p> <p>Rappels :</p> <p>Une adresse IPv4 est compos\u00e9e de 4 octets, soit 32 bits. Elle est not\u00e9e <code>a.b.c.d</code>, o\u00f9 <code>a</code>, <code>b</code>, <code>c</code> et <code>d</code> sont les valeurs des 4 octets.</p> <p>La notation <code>a.b.c.d/n</code> signifie que les <code>n</code> premiers bits de l'adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits qui suivent repr\u00e9sentent la partie \u00ab machine \u00bb.</p> <p>L'adresse IPv4 dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb.</p> <p>L'adresse IPv4 dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 1 est appel\u00e9e \u00ab adresse de diffusion \u00bb.</p> <p>On consid\u00e8re le r\u00e9seau repr\u00e9sent\u00e9 sur la ci-dessous :</p> <p> </p> <p>1</p> <p>1. On consid\u00e8re la machine d'adresse IPv4 <code>192.168.1.1</code>.</p> <p>Question 1.a</p> <p>Donner l'adresse du r\u00e9seau sur lequel se trouve cette machine.</p> R\u00e9ponse 1.a <p>On lit sur la figure la d\u00e9nomination suivante : <code>192.168.1.0/24</code>. Les 24 premiers bits, trois octets, repr\u00e9sentent l'adresse r\u00e9seau : celle-ci est donc <code>192.168.1.0</code>.</p> <p>Question 1.b</p> <p>Donner l'adresse de diffusion (broadcast) de ce r\u00e9seau.</p> R\u00e9ponse 1.b <p>Les 8 derniers bits, le dernier octet, prennent la valeur <code>1</code>. Donc l'adresse de diffusion est <code>192.168.1.255</code>.</p> <p>Question 1.c</p> <p>Donner le nombre maximal de machines que l'on peut connecter sur ce r\u00e9seau.</p> R\u00e9ponse 1.c <p>On peut connecter 256 - 2 = 254 machines sur ce r\u00e9seau.</p> <p>Question 1.d</p> <p>On souhaite ajouter une machine sur ce r\u00e9seau, proposer une adresse IPv4 possible pour cette machine.</p> R\u00e9ponse 1.d <p>On propose <code>192.168.1.17</code>.</p> <p>2</p> <p>2. La machine d'adresse IPv4 <code>192.168.1.1</code> transmet un paquet IPv4 \u00e0 la machine d'adresse IPv4 <code>192.168.4.2</code>.</p> <p>Question 2.a </p> <p>Donner toutes les routes pouvant \u00eatre emprunt\u00e9es par ce paquet IPv4, chaque routeur ne pouvant \u00eatre travers\u00e9 qu'une seule fois.</p> R\u00e9ponse <p>Les routes possibles sont :</p> <ul> <li>A \u2192 E \u2192 D</li> <li>A \u2192 E \u2192 C \u2192 F \u2192 D</li> <li>A \u2192 B \u2192 C \u2192 E \u2192 D</li> <li>A \u2192 B \u2192 C \u2192 F \u2192 D</li> <li>A \u2192 C \u2192 E \u2192 D</li> <li>A \u2192 C \u2192 F \u2192 D</li> </ul> <p>Question 2.b</p> <p>Expliquer l'utilit\u00e9 d'avoir plusieurs routes possibles reliant les r\u00e9seaux <code>192.168.1.0/24</code> et <code>192.168.4.0/24</code>.</p> R\u00e9ponse <p>En cas de panne, on pourra utiliser une autre route.</p> <p>Question 3</p> <p>Dans cette question, on suppose que le protocole de routage mis en place dans le r\u00e9seau est RIP. Ce protocole consiste \u00e0 minimiser le nombre de sauts.</p> <p>Le sch\u00e9ma du r\u00e9seau est celui de la figure ci-dessus.</p> <p>Les tables de routage utilis\u00e9es sont donn\u00e9es ci-dessous :</p> Routeur ARouteur BRouteur CRouteur DRouteur ERouteur F Destination passe par B ... C ... D E E ... F C Destination passe par A A C C D C E C F C Destination passe par A A B B D E E E F F Destination passe par A E B F C F E E F F Destination passe par A A B C C C D D F C Destination passe par A C B C C C D D E C <p>Question 3.a</p> <p>Recopier et compl\u00e9ter sur la copie la table de routage du routeur A.</p> R\u00e9ponse <p>Table de routage de A :</p> Destination Passe par B B C C D E E E F C <p>Question 3.b</p> <p>Un paquet IP doit aller du routeur B au routeur D. En utilisant les tables de routage, donner le parcours emprunt\u00e9 par celui-ci.</p> R\u00e9ponse <p>Le paquet suit le trajet suivant :</p> <ul> <li>B \u2192 C (table de routage de B)</li> <li>C \u2192 E (table de routage de C)</li> <li>E \u2192 D (table de routage de E)</li> </ul> <p>Question 3.c</p> <p>Les connexions entre les routeurs B-C et A-E \u00e9tant coup\u00e9es, sur la copie, r\u00e9\u00e9crire les tables de routage des routeurs A, B et C.</p> R\u00e9ponse Routeur ARouteur BRouteur C Destination Passe par B B C C D C E C F C Destination Passe par A A C A D A E A F A Destination Passe par A A B A D E E E F F <p>Question 3.d</p> <p>D\u00e9terminer le nouveau parcours emprunt\u00e9 par le paquet IP pour aller du routeur B au routeur D.</p> R\u00e9ponse <p>Le nouveau parcours est : B \u2192 A \u2192 C \u2192 E \u2192 D.</p> <p>Question 4</p> <p>Dans cette question, on suppose que le protocole de routage mis en place dans le r\u00e9seau est OSPF. Ce protocole consiste \u00e0 minimiser la somme des co\u00fbts des liaisons emprunt\u00e9es.</p> <p>Le co\u00fbt d'une liaison est d\u00e9fini par la relation \\(\\mathrm{co\u00fbt} = \\frac{10^8}{d}\\) o\u00f9 \\(d\\) repr\u00e9sente le d\u00e9bit en \\(\\mathrm{bit}/\\mathrm{s}\\) et \\(\\mathrm{co\u00fbt}\\) est sans unit\u00e9. Le sch\u00e9ma du r\u00e9seau reste celui du d\u00e9but de l'exercice.</p> <p>Question 4.a</p> <p>D\u00e9terminer le co\u00fbt des liaisons Ethernet (\\(d = 10^7\\,\\mathrm{bit}/\\mathrm{s}\\)), Fast-Ethernet (\\(d = 10^8\\,\\mathrm{bit}/\\mathrm{s}\\)) et Fibre (\\(d = 10^9\\,\\mathrm{bit}/\\mathrm{s}\\)).</p> R\u00e9ponse <p>Les co\u00fbts sont les suivants :</p> <ul> <li>liaison Ethernet : \\(\\frac{10^8}{10^7}=10\\),</li> <li>liaison Fast-Ethernet : \\(\\frac{10^8}{10^8}=1\\),</li> <li>liaison Fibre : \\(\\frac{10^8}{10^9}=0,1\\)</li> </ul> <p>Attention</p> <p>Dans le protocole OSPF, les co\u00fbts sont normalement des nombres entiers strictement positifs (entre \\(1\\) et \\(65\\,535\\)). On peut donc aussi arrondir par exc\u00e8s le co\u00fbt de la liaison Fibre \u00e0 \\(1\\).</p> <p>Question 4.b</p> <p>On veut repr\u00e9senter sch\u00e9matiquement le r\u00e9seau de routeurs \u00e0 partir du sch\u00e9ma du r\u00e9seau.</p> <p>Recopier sur la copie le sch\u00e9ma ci-dessous et tracer les liaisons entre les routeurs en y indiquant leur co\u00fbt.</p> <pre><code>graph LR\n    A[(A)] ---  B[(B)]\n    A ---  C[(C)]\n    A ---  E[(E)]\n    B ---  C\n    C ---  E\n    E ---  D[(D)]\n    D ---  F[(F)]\n    C --- F\n    linkStyle 0 stroke-width:0;\n    linkStyle 1 stroke-width:0;\n    linkStyle 2 stroke-width:0;\n    linkStyle 3 stroke-width:0;\n    linkStyle 4 stroke-width:0;\n    linkStyle 5 stroke-width:0;\n    linkStyle 6 stroke-width:0;\n    linkStyle 7 stroke-width:0;</code></pre> R\u00e9ponse Sans arrondiAvec arrondi <p>On conserve ici la valeur de \\(0,1\\) pour le co\u00fbt de la liaison Fibre.</p> <pre><code>graph LR\n    A[(A)] --- |1| B[(B)]\n    A --- |0,1| C[(C)]\n    A --- |1| E[(E)]\n    B --- |10| C\n    C --- |0,1| E\n    E --- |0,1| D[(D)]\n    D --- |0,1| F[(F)]\n    C --- |1| F</code></pre> <p>On arrondit le co\u00fbt de la liaison Fibre \u00e0 \\(1\\).</p> <pre><code>graph LR\n    A[(A)] --- |1| B[(B)]\n    A --- |1| C[(C)]\n    A --- |1| E[(E)]\n    B --- |10| C\n    C --- |1| E\n    E --- |1| D[(D)]\n    D --- |1| F[(F)]\n    C --- |1| F</code></pre> <p>Question 4.c</p> <p>Un paquet IPv4 doit \u00eatre achemin\u00e9 d'une machine ayant pour adresse IPv4 <code>192.168.2.1</code> \u00e0 une machine ayant pour adresse IPv4 <code>192.168.4.1</code>.</p> <p>\u00c9crire les routes possibles, c'est \u00e0 dire la liste des routeurs travers\u00e9s, et le co\u00fbt de chacune de ces routes, chaque routeur ne pouvant \u00eatre travers\u00e9 qu'une seule fois.</p> R\u00e9ponse Sans arrondiSans arrondi <p>On conserve la valeur de \\(0,1\\) pour le co\u00fbt de la liaison Fibre. On aura donc :</p> Route Co\u00fbt B \u2192 A \u2192 E \u2192 D 2,1 B \u2192 C \u2192 A \u2192 E \u2192 D 11,2 B \u2192  A \u2192  C \u2192  F \u2192  D 2,2 B \u2192  A \u2192  C \u2192  E \u2192  D 1,3 B \u2192  A \u2192  E \u2192  C \u2192  F \u2192  D 3,2 B \u2192  C \u2192  F \u2192  D 11,1 B \u2192  C \u2192  E \u2192  D 10,2 <p>On arrondit le co\u00fbt de la liaison Fibre \u00e0 \\(1\\). On aura donc :</p> Route Co\u00fbt B \u2192 A \u2192 E \u2192 D 3 B \u2192 C \u2192 A \u2192 E \u2192 D 13 B \u2192  A \u2192  C \u2192  F \u2192  D 4 B \u2192  A \u2192  C \u2192  E \u2192  D 4 B \u2192  A \u2192  E \u2192  C \u2192  F \u2192  D 5 B \u2192  C \u2192  F \u2192  D 12 B \u2192  C \u2192  E \u2192  D 12 <p>Question 4.d</p> <p>Donner, en la justifiant, la route qui sera emprunt\u00e9e par un paquet IPv4 pour aller d'une machine ayant pour adresse IPv4 <code>192.168.2.1</code> \u00e0 une machine ayant pour adresse IPv4 <code>192.168.4.1</code>.</p> R\u00e9ponse <p>On choisit le chemin de co\u00fbt minimal :</p> <ul> <li>si l'on a conserv\u00e9 un co\u00fbt de \\(0,1\\) pour la liaison Fibre, on obtient le chemin B \u2192 A \u2192 C \u2192 E \u2192 D pour un co\u00fbt de \\(1,3\\) ;</li> <li>si l'on arrondit ce co\u00fbt \u00e0 \\(1\\), on obtient le chemin B \u2192 A \u2192 E \u2192 D pour un co\u00fbt de \\(3\\).</li> </ul>"},{"location":"Archi_Materielle/T3_1_Routage_BAC_Correction/#sujet-4-2022-metropole-j1","title":"Sujet 4 : 2022, M\u00e9tropole, J1","text":"<p>: D'apr\u00e8s 2022, M\u00e9tropole J1</p> <p>Question 1</p> <p>Une adresse IPv4 est repr\u00e9sent\u00e9e sous la forme de 4 nombres entiers positifs s\u00e9par\u00e9s par des points. Chacun de ces 4 entiers peut \u00eatre repr\u00e9sent\u00e9 sur un octet.</p> <p>Question 1.a</p> <p>Donner en \u00e9criture d\u00e9cimale l'adresse IPv4 correspondant \u00e0 l'\u00e9criture binaire : <code>11000000.10101000.10000000.10000011</code></p> R\u00e9ponse <p>\\(1 + 2 + 128 = 131\\), ainsi l'adresse est <code>192.168.128.131</code>.</p> <p>Question 1.b</p> <p>Tous les ordinateurs du r\u00e9seau A ont une adresse IPv4 de la forme : <code>192.168.128.___</code>, o\u00f9 seul le dernier octet (repr\u00e9sent\u00e9 par <code>___</code> ) diff\u00e8re.</p> <p>Donner le nombre d'adresses diff\u00e9rentes possibles du r\u00e9seau A.</p> R\u00e9ponse <p>Sur les 256 adresses possibles avec 1 octet on trouvera :</p> <ul> <li>la valeur 0 qui est r\u00e9serv\u00e9e pour l'adresse IP du r\u00e9seau ;</li> <li>les valeurs 1 \u00e0 254 qui peuvent \u00eatre utilis\u00e9es pour les adresses des h\u00f4tes dans le r\u00e9seau ;</li> <li>la valeur 255 qui est r\u00e9serv\u00e9e pour l'adresse de diffusion du r\u00e9seau.</li> </ul> <p>Question 2</p> <p>On rappelle que le protocole RIP cherche \u00e0 minimiser le nombre de routeurs travers\u00e9s (qui correspond \u00e0 la m\u00e9trique). On donne les tables de routage d'un r\u00e9seau informatique compos\u00e9 de 5 routeurs (appel\u00e9s A, B, C, D et E), chacun associ\u00e9 directement \u00e0 un r\u00e9seau du m\u00eame nom, obtenues avec le protocole RIP :</p> Routeur ARouteur BRouteur CRouteur DRouteur E Destination M\u00e9trique A 0 B 1 C 1 D 1 E 2 Destination M\u00e9trique A 1 B 0 C 2 D 1 E 2 Destination M\u00e9trique A 1 B 2 C 0 D 1 E 2 Destination M\u00e9trique A 1 B 1 C 1 D 0 E 1 Destination M\u00e9trique A 2 B 2 C 2 D 1 E 0 <p>Question 2.a</p> <p>Donner la liste des routeurs avec lesquels le routeur A est directement reli\u00e9.</p> R\u00e9ponse <p>Le routeur A est directement reli\u00e9 aux routeurs B, C et D, en effet la valeur de la m\u00e9trique est de 1 pour ces destinations dans la table de routage du routeur A.</p> <p>Question 2.b</p> <p>Repr\u00e9senter graphiquement et de mani\u00e8re sommaire les 5 routeurs ainsi que les liaisons existantes entre ceux-ci.</p> R\u00e9ponse <pre><code>flowchart LR\n    a[(A)] --- b[(B)]\n    a --- c[(C)]\n    a --- d[(D)]\n    b --- d[(D)]\n    c --- d[(D)]\n    d --- e[(E)]</code></pre> <p>Question 3</p> <p>Le protocole OSPF est un protocole de routage qui cherche \u00e0 minimiser la somme des m\u00e9triques des liaisons entre routeurs. Dans le protocole de routage OSPF le d\u00e9bit des liaisons entre routeurs agit sur la m\u00e9trique via la relation : \\(\\text{m\u00e9trique} = \\dfrac{10^8}{\\text{d\u00e9bit}}\\) dans laquelle le d\u00e9bit est exprim\u00e9 en bit par seconde (\\(\\text{bps}\\)).</p> <p>On rappelle qu'un \\(\\text{kbps}\\) est \u00e9gal \u00e0 \\(10^3~\\text{bps}\\) et qu'un \\(\\text{Mbps}\\) est \u00e9gal \u00e0 \\(10^6~\\text{bps}\\).</p> <p>Recopier sur votre copie et compl\u00e9ter le tableau suivant :</p> D\u00e9bit \\(100~\\text{kbps}\\) \\(500~\\text{kbps}\\) ... \\(100~\\text{Mbps}\\) M\u00e9trique associ\u00e9e \\(1000\\) ... \\(10\\) \\(1\\) R\u00e9ponse <p>Les deux lignes sont inversement proportionnelles.</p> D\u00e9bit \\(100~\\text{kbps}\\) \\(500~\\text{kbps}\\) \\(10~\\text{Mbps}\\) \\(100~\\text{Mbps}\\) M\u00e9trique associ\u00e9e \\(1000\\) \\(200\\) \\(10\\) \\(1\\) <p>Question 4</p> <p>Voici la repr\u00e9sentation d'un r\u00e9seau et la table de routage incompl\u00e8te du routeur F obtenue avec le protocole OSPF :</p> <p></p> <p>Routeur F</p> Destination M\u00e9trique F 0 G 8 H 5 I J K L <p>Les nombres pr\u00e9sents sur les liaisons repr\u00e9sentent les co\u00fbts des routes avec le protocole OSPF.</p> <p>Question 4.a</p> <p>Indiquer le chemin emprunt\u00e9 par un message d'un ordinateur du r\u00e9seau F \u00e0 destination d'un ordinateur du r\u00e9seau I. Justifier votre r\u00e9ponse.</p> R\u00e9ponse <p>Le message sera achemin\u00e9 du r\u00e9seau F vers le r\u00e9seau I en passant successivement par les routeurs H, J et K. En effet, avec ce trajet, le co\u00fbt sera \u00e9gal \u00e0 5 + 1 + 2 + 5 soit 13. Tout autre trajet aura un co\u00fbt plus \u00e9lev\u00e9.</p> <p>Question 4.b</p> <p>Recopier et compl\u00e9ter la table de routage du routeur F.</p> R\u00e9ponse Destination M\u00e9trique F 0 G 8 H 5 I 13 J 6 K 8 L 11 <p>Question 4.c</p> <p>Citer une unique panne qui suffirait \u00e0 ce que toutes les donn\u00e9es des \u00e9changes de tout autre r\u00e9seau \u00e0 destination du r\u00e9seau F transitent par le routeur G. Expliquer en d\u00e9tail votre r\u00e9ponse.</p> R\u00e9ponse <p>Une panne de la liaison F-H.</p> <p>En consid\u00e9rant le routeur I : la liaison est directe avec F, mais pour un co\u00fbt de 20. Or de I, en passant par les routeurs K, J et G, le co\u00fbt sera seulement de 19. De fait les routeurs K et J privil\u00e9gieront \u00e9galement le routeur G. Le routeur J deviendra aussi le routeur le plus \u00e9conomique pour les routeurs H et L.</p> <p> Une panne du routeur H n'est pas une r\u00e9ponse acceptable. D'apr\u00e8s l'\u00e9nonc\u00e9, tout r\u00e9seau autre que F doit joindre ce dernier en passant par G.</p>"},{"location":"Archi_Materielle/T3_2_gestion_processus%20copy/","title":"Macro Rendering Error","text":"<p>File: <code>Archi_Materielle/T3_2_gestion_processus copy.md</code></p> <p>KeyError: 13</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 13\n</code></pre>"},{"location":"Archi_Materielle/T3_2_gestion_processus/","title":"Macro Rendering Error","text":"<p>File: <code>Archi_Materielle/T3_2_gestion_processus.md</code></p> <p>KeyError: 13</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 13\n</code></pre>"},{"location":"Archi_Materielle/T3_3_gestion_processus_BAC/","title":"Sujet BAC 13 :  \u00a0 Gestion Processus","text":""},{"location":"Archi_Materielle/T3_3_gestion_processus_BAC/#2021-france-sujet-1","title":"2021, France sujet 1","text":"<p>Exo</p> <p>Partie A</p> <p>Cette partie est un questionnaire \u00e0 choix multiples (QCM). Pour chacune des questions, une seule des quatre r\u00e9ponses est exacte. Le candidat indiquera sur sa copie le num\u00e9ro de la question et la lettre correspondant \u00e0 la r\u00e9ponse exacte. Aucune justification n\u2019est demand\u00e9e. Une r\u00e9ponse fausse ou une absence de r\u00e9ponse n\u2019enl\u00e8ve aucun point.</p> <p>Question 1</p> <p>Parmi les commandes ci-dessous, laquelle permet d\u2019afficher les processus en cours d\u2019ex\u00e9cution ?</p> \ud83d\udccb Texte<pre><code>a. dir  \nb. ps  \nc. man  \nd. ls\n</code></pre> <p>Question 2</p> <p>Quelle abr\u00e9viation d\u00e9signe l\u2019identifiant d\u2019un processus dans un syst\u00e8me d\u2019exploitation de type UNIX ? </p> \ud83d\udccb Texte<pre><code>a. PIX  \nb. SIG  \nc. PID  \nd. SID\n</code></pre> <p>Question 3</p> <p>Comment s\u2019appelle la gestion du partage du processeur entre diff\u00e9rents processus ?</p> \ud83d\udccb Texte<pre><code>a. L\u2019interblocage  \nb. L\u2019ordonnancement  \nc. La planification  \nd. La priorisation\n</code></pre> <p>Question 4</p> <p>Quelle commande permet d\u2019interrompre un processus dans un syst\u00e8me d\u2019exploitation de type UNIX ?</p> \ud83d\udccb Texte<pre><code>a. stop  \nb. interrupt  \nc. end  \nd. kill\n</code></pre> Correction <p>1.b 2.c 3.b 4.d  </p> <p>Partie B</p> <p>Question 1</p> <p>Un processeur choisit \u00e0 chaque cycle d\u2019ex\u00e9cution le processus qui doit \u00eatre ex\u00e9cut\u00e9. Le tableau ci-dessous donne pour trois processus P1, P2, P3 :</p> <ul> <li> <p>la dur\u00e9e d\u2019ex\u00e9cution (en nombre de cycles),</p> </li> <li> <p>l\u2019instant d\u2019arriv\u00e9e sur le processeur (exprim\u00e9 en nombre de cycles \u00e0 partir de 0),</p> </li> <li> <p>le num\u00e9ro de priorit\u00e9.</p> </li> </ul> <p>Le num\u00e9ro de priorit\u00e9 est d\u2019autant plus petit que la priorit\u00e9 est grande. On suppose qu\u2019\u00e0 chaque instant, c\u2019est le processus qui a le plus petit num\u00e9ro de priorit\u00e9 qui est ex\u00e9cut\u00e9, ce qui peut provoquer la suspension d\u2019un autre processus, lequel reprendra lorsqu\u2019il sera le plus prioritaire.</p> <p></p> <p>Reproduire le tableau ci-dessous sur la copie et indiquer dans chacune des cases le processus ex\u00e9cut\u00e9 \u00e0 chaque cycle.</p> <p></p> Correction <p></p> <p>Question 1</p> <p>On suppose maintenant que les trois processus pr\u00e9c\u00e9dents s\u2019ex\u00e9cutent et utilisent une ou plusieurs ressources parmi R1, R2 et R3. Parmi les sc\u00e9narios suivants, lequel provoque un interblocage ? Justifier.</p> <p></p> Correction <p>Il s\u2019agit du sc\u00e9nario 2 car nous nous retrouvons dans la situation o\u00f9 P1 poss\u00e8de R1 et attend R2 avant de pouvoir continuer et P3 poss\u00e8de R2 et attend R1 avant de pouvoir continuer.</p> <p>Partie C </p> <p>Dans cette partie, pour une meilleure lisibilit\u00e9, des espaces sont plac\u00e9es dans les \u00e9critures binaires des nombres. Il ne faut pas les prendre en compte dans les calculs. Pour chiffrer un message, une m\u00e9thode, dite du masque jetable, consiste \u00e0 le combiner avec une cha\u00eene de caract\u00e8res de longueur comparable. Une impl\u00e9mentation possible utilise l\u2019op\u00e9rateur XOR (ou exclusif) dont voici la table de v\u00e9rit\u00e9 :</p> a b a XOR b 0 0 0 0 1 1 1 0 1 1 1 0 <p>Dans la suite, les nombres \u00e9crits en binaire seront pr\u00e9c\u00e9d\u00e9s du pr\u00e9fixe 0b.</p> <p>Question 1</p> <p>Pour chiffrer un message, on convertit chacun de ses caract\u00e8res en binaire (\u00e0 l\u2019aide du format Unicode), et on r\u00e9alise l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9. Apr\u00e8s conversion en binaire, et avant que l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9 n\u2019ait \u00e9t\u00e9 effectu\u00e9e, Alice obtient le message suivant :  </p> <p><code>m = 0b 0110 0011 0100 0110</code></p> <p>a. Le message m correspond \u00e0 deux caract\u00e8res cod\u00e9s chacun sur 8 bits : d\u00e9terminer quels sont ces caract\u00e8res. On fournit pour cela la table ci-dessous qui associe \u00e0 l\u2019\u00e9criture hexad\u00e9cimale d\u2019un octet le caract\u00e8re correspondant (figure 2). Exemple de lecture : le caract\u00e8re correspondant \u00e0 l\u2019octet cod\u00e9 4A en hexad\u00e9cimal est la lettre J.</p> <p></p> Correction <p>0100 0110 =&gt; 46 en hexa =&gt; caract\u00e8re F 0110 0011 =&gt; 63 en hexa =&gt; caract\u00e8re c  </p> <p>donc cF</p> <p>Question 1.b</p> <p>Pour chiffrer le message d\u2019Alice, on r\u00e9alise l\u2019op\u00e9ration XOR bit \u00e0 bit avec la cl\u00e9 suivante : <code>k = 0b 1110 1110 1111 0000</code> </p> <p>Donner l\u2019\u00e9criture binaire du message obtenu.</p> Correction <p><code>0b 1000 1101 1011 0110</code></p> <p>Question 2.a</p> <p>Dresser la table de v\u00e9rit\u00e9 de l\u2019expression bool\u00e9enne suivante : </p> <p><code>(a XOR b) XOR b</code></p> Correction a b (a XOR b) XOR b 0 0 0 0 1 0 1 0 1 1 1 1 <p>Question 2.b</p> <p>Bob conna\u00eet la cha\u00eene de caract\u00e8res utilis\u00e9e par Alice pour chiffrer le message. Quelle op\u00e9ration doit-il r\u00e9aliser pour d\u00e9chiffrer son message ?</p> Correction <p>On peut remarquer que (a xor b) xor b permet de retrouver a, donc si a correspond au message non chiffr\u00e9 et a xor b correspond au message chiffr\u00e9, un (a xor b) xor b permet donc de retrouver le message non chiffr\u00e9. Si on appelle m le message non chiffr\u00e9, m\u2019 le message chiffr\u00e9 et k la cl\u00e9 de chiffrement, un m\u2019 xor k permettra de retrouver m.</p>"},{"location":"Archi_Materielle/T3_3_gestion_processus_BAC/#2021-france-sujet-annule","title":"2021, France sujet annul\u00e9","text":"<p>d'apr\u00e8s le sujet du bac NSI 2021</p> <p>Cet exercice porte sur les syst\u00e8mes d\u2019exploitation : gestion des processus et des ressources. Les parties A et B peuvent \u00eatre trait\u00e9es ind\u00e9pendamment</p> <p>Partie A </p> <p>Question 1</p> <p>La commande ps suivie \u00e9ventuellement de diverses options permet de lister les processus actifs ou en attente sur une machine. Sur une machine \u00e9quip\u00e9e du syst\u00e8me d\u2019exploitation GNU/Linux, la commande \u201cps -aef\u201d permet d\u2019obtenir la sortie suivante (extrait) :</p> <p></p> <p>a) Quelle est la particularit\u00e9 de l\u2019utilisateur \u201croot\u201d ?</p> <p>b) Quel est le processus parent du processus ayant pour PID 3383</p> Correction <p>Dans un bureau d\u2019architectes, on dispose de certaines ressources qui ne peuvent \u00eatre utilis\u00e9es simultan\u00e9ment par plus d\u2019un processus, comme l\u2019imprimante, la table tra\u00e7ante, le modem. Chaque programme, lorsqu\u2019il s\u2019ex\u00e9cute, demande l\u2019allocation des ressources qui lui sont n\u00e9cessaires. Lorsqu\u2019il a fini de s\u2019ex\u00e9cuter, il lib\u00e8re ses ressources.</p> <p></p> <p>Question 2</p> <p>On appelle p1, p2 et p3 les processus associ\u00e9s respectivement aux programmes 1, 2 et 3.</p> <p>a) Justifier qu'une situation d'interblocage peut se produire.</p> <p>b) Modifier l'ordre des instructions du programme 3 pour qu'une telle situation ne puisse pas se produire.</p> Correction <p>2.a Pour passer \u00e0 l\u2019ex\u00e9cution, le Programme 1 a besoin du modem, mais le modem est d\u00e9j\u00e0 utilis\u00e9 par le Programme 2. Le processus p1 est donc bloqu\u00e9. Pour passer \u00e0 l\u2019ex\u00e9cution, le Programme 2 a besoin de l\u2019imprimante, mais l\u2019imprimante est d\u00e9j\u00e0 utilis\u00e9e par le Programme 3. Le processus p2 est donc bloqu\u00e9. Pour passer \u00e0 l\u2019ex\u00e9cution, le Programme 3 a besoin de la table tra\u00e7ante, mais la table tra\u00e7ante est d\u00e9j\u00e0 utilis\u00e9e par le Programme 1. Le processus p3 est donc bloqu\u00e9. Les 3 processus sont bloqu\u00e9s et ne pourront pas lib\u00e9rer les ressources attendues par les autres processus (la lib\u00e9ration des ressources se faisant apr\u00e8s l\u2019ex\u00e9cution), nous sommes bien en situation d\u2019interblocage.  </p> <p>2.b </p> Programme 3 demander (table tra\u00e7ante) demander (imprimante) ex\u00e9cution lib\u00e9rer (imprimante) lib\u00e9rer (table tra\u00e7ante) <p>Question 3</p> <p>Supposons que le processus p1 demande la table tra\u00e7ante alors qu'elle est en cours d'utilisation par le processus p3. Parmi les \u00e9tats suivants, quel sera l'\u00e9tat du processus p1 tant que la table tra\u00e7ante n'est pas disponible :  </p> <p>a) \u00e9lu b) bloqu\u00e9 c) pr\u00eat d) termin\u00e9  </p> Correction <p>bloqu\u00e9</p> <p>Partie B </p> <p>Avec une ligne de commande dans un terminal sous Linux, on obtient l'affichage suivant :</p> <p></p> <p>La documentation Linux donne la signification des diff\u00e9rents champs :</p> <ul> <li>UID : identifiant utilisateur effectif ;  </li> <li>PID : identifiant de processus ;  </li> <li>PPID : PID du processus parent ;  </li> <li>C : partie enti\u00e8re du pourcentage d'utilisation du processeur par rapport au temps de vie des  processus ;  </li> <li>STIME : l'heure de lancement du processus ;  </li> <li>TTY : terminal de contr\u00f4le  </li> <li>TIME : temps d'ex\u00e9cution  </li> <li>CMD : nom de la commande du processus  </li> </ul> <p>Question 1</p> <p>Parmi les quatre commandes suivantes, laquelle a permis cet affichage ?  </p> <p>a) ls -l b) ps \u2013ef c) cd .. d) chmod 741 processus.txt  </p> Correction <p>ps -ef</p> <p>Question 2</p> <p>Quel est l'identifiant du processus parent \u00e0 l'origine de tous les processus concernant le navigateur Web (chromium-browser) ?</p> Correction <p>L\u2019identifiant du processus parent \u00e0 l\u2019origine de tous les processus concernant le navigateur Web est 831</p> <p>Question 3</p> <p>Quel est l'identifiant du processus dont le temps d'ex\u00e9cution est le plus long ?</p> Correction <p>L\u2019identifiant du processus dont le temps d\u2019ex\u00e9cution est le plus long est 6211 (00:01:16)</p>"},{"location":"Archi_Materielle/T3_3_gestion_processus_BAC/#2021-france-candidat-libre","title":"2021, France candidat libre","text":"<p>Extrait sujet BAC 2021</p> <p>Cet exercice porte sur la gestion des processus par un syst\u00e8me d\u2019exploitation.</p> <p>Partie A : Processus </p> <p>La commande UNIX ps pr\u00e9sente un clich\u00e9 instantan\u00e9 des processus en cours d'ex\u00e9cution. Avec l\u2019option \u2212eo pid,ppid,stat,command, cette commande affiche dans l\u2019ordre l\u2019identifiant du processus PID (process identifier), le PPID (parent process identifier), l\u2019\u00e9tat STAT et le nom de la commande \u00e0 l\u2019origine du processus.  </p> <p>Les valeurs du champ STAT indique l\u2019\u00e9tat des processus :  </p> <ul> <li>R : processus en cours d\u2019ex\u00e9cution  </li> <li>S : processus endormi  </li> </ul> <p>Sur un ordinateur, on ex\u00e9cute la commande ps \u2212eo pid,ppid,stat,command et on obtient un affichage dont on donne ci-dessous un extrait. </p> <p></p> <p>\u00c0 l'aide de cet affichage, r\u00e9pondre aux questions ci-dessous.</p> <p>Question 1</p> <p>Quel est le nom de la premi\u00e8re commande ex\u00e9cut\u00e9e par le syst\u00e8me d'exploitation lors du d\u00e9marrage ?</p> Correction <p>La premi\u00e8re commande ex\u00e9cut\u00e9e par le syst\u00e8me d\u2019exploitation lors du d\u00e9marrage est la commande init</p> <p>Question 2</p> <p>Quels sont les identifiants des processus actifs sur cet ordinateur au moment de l\u2019appel de la commande ps ? Justifier la r\u00e9ponse.  </p> Correction <p>Les processus actifs sont les processus ayant pour PID 5440 et 5450 (pr\u00e9sence de l\u2019indicateur R dans la colonne STAT pour ces 2 processus).</p> <p>Question 3</p> <p>Depuis quelle application a-t-on ex\u00e9cut\u00e9 la commande ps ? Donner les autres commandes qui ont \u00e9t\u00e9 ex\u00e9cut\u00e9es \u00e0 partir de cette application.  </p> Correction <p>La commande ps a \u00e9t\u00e9 ex\u00e9cut\u00e9e depuis l\u2019application Bash (car le processus ps a pour PPID 1912 qui correspond au PID de Bash). Deux autres processus Bash (PID 2014 et PID 2013) et un processus python programme1.py (PID 5437) ont \u00e9t\u00e9 lanc\u00e9s depuis le processus Bash de PID 1912.</p> <p>Question 4</p> <p>Expliquer l'ordre dans lequel les deux commandes python programme1.py et python programme2.py ont \u00e9t\u00e9 ex\u00e9cut\u00e9es.  </p> Correction <p>Le processus python programme1.py a un PID de 5437 alors que le processus python programme2.py a un PID de 5440. python programme1.py a \u00e9t\u00e9 ex\u00e9cut\u00e9 avant python programme2.py.</p> <p>Question 5</p> <p>Peut-on pr\u00e9dire que l'une des deux commandes python programme1.py et python programme2.py finira avant l\u2019autre ?</p> Correction <p>Non, aucune pr\u00e9diction n\u2019est possible.</p>"},{"location":"Archi_Materielle/T3_3_gestion_processus_BAC/#2023-polynesie-j1","title":"2023, Polyn\u00e9sie, J1","text":"<p>Ordonnanceur avec liste d'attente</p> <p>Un syst\u00e8me est compos\u00e9 de 4 p\u00e9riph\u00e9riques, num\u00e9rot\u00e9s de 0 \u00e0 3, et d'une m\u00e9moire, reli\u00e9s entre eux par un bus auquel est \u00e9galement connect\u00e9 un dispositif ordonnanceur. \u00c0 l'aide d'un signal sp\u00e9cifique envoy\u00e9 sur le bus, l'ordonnanceur sollicite \u00e0 tour de r\u00f4le les p\u00e9riph\u00e9riques pour qu'ils indiquent le type d'op\u00e9ration (lecture ou \u00e9criture) qu'ils souhaitent effectuer, et l'adresse m\u00e9moire concern\u00e9e.</p> <p>Un tour a lieu quand les 4 p\u00e9riph\u00e9riques ont \u00e9t\u00e9 sollicit\u00e9s. Au d\u00e9but d'un nouveau tour, on consid\u00e8re que toutes les adresses sont disponibles en lecture et \u00e9criture.</p> <p>Si un p\u00e9riph\u00e9rique demande l'\u00e9criture \u00e0 une adresse m\u00e9moire \u00e0 laquelle on n'a pas encore acc\u00e9d\u00e9 pendant le tour, l'ordonnanceur r\u00e9pond <code>\"OK\"</code> et l'\u00e9criture a lieu. Si on a d\u00e9j\u00e0 demand\u00e9 la lecture ou l'\u00e9criture \u00e0 cette adresse, l'ordonnanceur r\u00e9pond <code>\"ATT\"</code> et l'op\u00e9ration n'a pas lieu.</p> <p>Si un p\u00e9riph\u00e9rique demande la lecture \u00e0 une adresse \u00e0 laquelle on n'a pas encore acc\u00e9d\u00e9 en \u00e9criture pendant le tour, l'ordonnanceur r\u00e9pond <code>\"OK\"</code> et la lecture a lieu. Plusieurs lectures peuvent avoir donc lieu pendant le m\u00eame tour \u00e0 la m\u00eame adresse.</p> <p>Si un p\u00e9riph\u00e9rique demande la lecture \u00e0 une adresse \u00e0 laquelle on a d\u00e9j\u00e0 acc\u00e9d\u00e9 en \u00e9criture, l'ordonnanceur r\u00e9pond <code>\"ATT\"</code> et la lecture n'a pas lieu.</p> <p>Ainsi, pendant un tour, une adresse peut \u00eatre utilis\u00e9e soit une seule fois en \u00e9criture, soit autant de fois qu'on veut en lecture, soit pas utilis\u00e9e.</p> <p>Si un p\u00e9riph\u00e9rique ne peut pas effectuer une op\u00e9ration \u00e0 une adresse, il demande la m\u00eame op\u00e9ration \u00e0 la m\u00eame adresse au tour suivant.</p> <p>1. Le tableau donn\u00e9 en annexe 1 indique, sur chaque ligne, le p\u00e9riph\u00e9rique s\u00e9lectionn\u00e9, l'adresse \u00e0 laquelle il souhaite acc\u00e9der et l'op\u00e9ration \u00e0 effectuer sur cette adresse. Compl\u00e9ter dans la derni\u00e8re colonne de cette annexe, \u00e0 rendre avec la copie, la r\u00e9ponse donn\u00e9e par l'ordonnanceur pour chaque op\u00e9ration.</p> <p>Annexe 1</p> N\u00b0 p\u00e9riph\u00e9rique Adresse Op\u00e9ration R\u00e9ponse de l'ordonnanceur 0 <code>10</code> \u00e9criture <code>\"OK\"</code> 1 <code>11</code> lecture <code>\"OK\"</code> 2 <code>10</code> lecture <code>\"ATT\"</code> 3 <code>10</code> \u00e9criture <code>\"ATT\"</code> 0 <code>12</code> lecture 1 <code>10</code> lecture 2 <code>10</code> lecture 3 <code>10</code> \u00e9criture R\u00e9ponse N\u00b0 p\u00e9riph\u00e9rique Adresse Op\u00e9ration R\u00e9ponse de l'ordonnanceur 0 <code>10</code> \u00e9criture <code>\"OK\"</code> 1 <code>11</code> lecture <code>\"OK\"</code> 2 <code>10</code> lecture <code>\"ATT\"</code> 3 <code>10</code> \u00e9criture <code>\"ATT\"</code> 0 <code>12</code> lecture <code>\"OK\"</code> 1 <code>10</code> lecture <code>\"OK\"</code> 2 <code>10</code> lecture <code>\"OK\"</code> 3 <code>10</code> \u00e9criture <code>\"ATT\"</code> <p>Il s'agit d'un nouveau tour, les lectures sont possibles, la premi\u00e8re \u00e9criture ne l'est pas, on a d\u00e9j\u00e0 acc\u00e9d\u00e9 en lecture pendant le tour \u00e0 l'adresse demand\u00e9e.</p> <p>On suppose dans toute la suite que :</p> <ul> <li>le p\u00e9riph\u00e9rique 0 \u00e9crit syst\u00e9matiquement \u00e0 l'adresse <code>10</code> ;</li> <li>le p\u00e9riph\u00e9rique 1 lit syst\u00e9matiquement \u00e0 l'adresse <code>10</code> ;</li> <li>le p\u00e9riph\u00e9rique 2 \u00e9crit alternativement aux adresses <code>11</code> et <code>12</code> ;</li> <li>le p\u00e9riph\u00e9rique 3 lit alternativement aux adresses <code>11</code> et <code>12</code> ;</li> </ul> <p>Pour les p\u00e9riph\u00e9riques 2 et 3, le changement d'adresse n'est effectif que lorsque l'op\u00e9ration est r\u00e9alis\u00e9e.</p> <p>2. On suppose que les p\u00e9riph\u00e9riques sont s\u00e9lectionn\u00e9s \u00e0 chaque tour dans l'ordre 0 ; 1 ; 2 ; 3. Expliquer ce qu'il se passe pour le p\u00e9riph\u00e9rique 1.</p> R\u00e9ponse <ul> <li>\u00c0 chaque d\u00e9but de tour, le p\u00e9riph\u00e9rique 0 demande \u00e0 \u00e9crire \u00e0 l'adresse <code>10</code> ; c'est accept\u00e9.</li> <li>Juste apr\u00e8s, le p\u00e9riph\u00e9rique 1 demande \u00e0 lire \u00e0 l'adresse <code>10</code> ; c'est refus\u00e9.</li> </ul> <p>Le p\u00e9riph\u00e9rique 1 ne pourra jamais lire l'adresse <code>10</code>.</p> <p>Les p\u00e9riph\u00e9riques sont sollicit\u00e9s de la mani\u00e8re suivante lors de quatre tours successifs :</p> <ul> <li>au premier tour, ils sont sollicit\u00e9s dans l'ordre 0 ; 1 ; 2 ; 3 ;</li> <li>au deuxi\u00e8me tour, dans l'ordre 1 ; 2 ; 3 ; 0 ;</li> <li>au troisi\u00e8me tour, 2 ; 3 ; 0 ; 1 ;</li> <li>puis 3 ; 0 ; 1 ; 2 au dernier tour.</li> <li>Et on recommence...</li> </ul> <p>3.a. Pr\u00e9ciser pour chacun de ces tours si le p\u00e9riph\u00e9rique 0 peut \u00e9crire et si le p\u00e9riph\u00e9rique 1 peut lire.</p> R\u00e9ponse <ul> <li>Tour 1 : 0 ; 1 ; 2 ; 3<ul> <li>0 peut \u00e9crire, puis</li> <li>1 ne peut pas lire</li> </ul> </li> <li>Tour 2 : 1 ; 2 ; 3 ; 0<ul> <li>1 peut lire, puis</li> <li>0 ne peut pas \u00e9crire</li> </ul> </li> <li>Tour 3 : 2 ; 3 ; 0 ; 1<ul> <li>0 peut \u00e9crire, puis</li> <li>1 ne peut pas lire</li> </ul> </li> <li>Tour 4 : 3 ; 0 ; 1 ; 2<ul> <li>0 peut \u00e9crire, puis</li> <li>1 ne peut pas lire</li> </ul> </li> </ul> <p>3.b. En d\u00e9duire la proportion des valeurs \u00e9crites par le p\u00e9riph\u00e9rique 0 qui sont effectivement lues par le p\u00e9riph\u00e9rique 1.</p> R\u00e9ponse <ul> <li>Au tour 1, la valeur \u00e9crite par le p\u00e9riph\u00e9rique 0 sera lue par le p\u00e9riph\u00e9rique 1 au tour suivant.</li> <li>Au tour 2, rien n'est \u00e9crit par le p\u00e9riph\u00e9rique 0.</li> <li>Au tour 3, la valeur \u00e9crite par le p\u00e9riph\u00e9rique 0 ne sera jamais lue par le p\u00e9riph\u00e9rique 1 ; en effet, une autre \u00e9criture intervient avant la prochaine lecture.</li> <li>Au tour 4, la valeur \u00e9crite par le p\u00e9riph\u00e9rique 0 ne sera jamais lue par le p\u00e9riph\u00e9rique 1 ; en effet, une autre \u00e9criture intervient avant la prochaine lecture.</li> </ul> <p>Ainsi, une seule valeur sur trois sera effectivement lue. La proportion est \\(\\frac13\\).</p> <p>On change la m\u00e9thode d'ordonnancement : on d\u00e9termine l'ordre des p\u00e9riph\u00e9riques au cours d'un tour \u00e0 l'aide de deux listes d'attente <code>ATT_L</code> et <code>ATT_E</code> \u00e9tablies au tour pr\u00e9c\u00e9dent.</p> <p>Au cours d'un tour, on place dans la liste <code>ATT_L</code> toutes les op\u00e9rations de lecture mises en attente, et dans la liste d'attente <code>ATT_E</code> toutes les op\u00e9rations d'\u00e9criture mises en attente.</p> <p>Au d\u00e9but du tour suivant, on \u00e9tablit l'ordre d'interrogation des p\u00e9riph\u00e9riques en proc\u00e9dant ainsi :</p> <ul> <li>on interroge ceux pr\u00e9sents dans la liste <code>ATT_L</code>, par ordre croissant d'adresse,</li> <li>on interroge ensuite ceux pr\u00e9sents dans la liste <code>ATT_E</code>, par ordre croissant d'adresse,</li> <li>puis on interroge les p\u00e9riph\u00e9riques restants, par ordre croissant d'adresse.</li> </ul> <p>4. Compl\u00e9ter et rendre avec la copie le tableau fourni en annexe 2, en utilisant l'ordonnancement d\u00e9crit ci-dessus, sur 3 tours.</p> <p>Annexe 2</p> Tour N\u00b0 p\u00e9riph\u00e9rique Adresse Op\u00e9ration R\u00e9ponse ordonnanceur <code>ATT_L</code> <code>ATT_E</code> 1 0 <code>10</code> \u00e9criture <code>\"OK\"</code> vide vide 1 1 <code>10</code> lecture <code>\"ATT\"</code> <code>(1, 10)</code> vide 1 2 <code>11</code> \u00e9criture 1 3 <code>11</code> lecture 2 1 <code>10</code> lecture vide 2 2 2 3 0 <code>10</code> \u00e9criture vide vide 3 1 <code>10</code> lecture vide 3 2 <code>11</code> \u00e9criture <code>\"OK\"</code> <code>(1, 10)</code> vide 3 3 <code>12</code> lecture R\u00e9ponse Tour N\u00b0 p\u00e9riph\u00e9rique Adresse Op\u00e9ration R\u00e9ponse ordonnanceur <code>ATT_L</code> <code>ATT_E</code> 1 0 <code>10</code> \u00e9criture <code>\"OK\"</code> vide vide 1 1 <code>10</code> lecture <code>\"ATT\"</code> <code>(1, 10)</code> vide 1 2 <code>11</code> \u00e9criture <code>\"OK\"</code> <code>(1, 10)</code> vide 1 3 <code>11</code> lecture <code>\"ATT\"</code> <code>(1, 10), (3, 11)</code> vide 2 1 <code>10</code> lecture <code>\"OK\"</code> <code>(3, 11)</code> vide 2 3 <code>11</code> lecture <code>\"OK\"</code> vide vide 2 0 <code>10</code> \u00e9criture <code>\"ATT\"</code> vide <code>(0, 10)</code> 2 2 <code>12</code> \u00e9criture <code>\"OK\"</code> vide <code>(0, 10)</code> 3 0 <code>10</code> \u00e9criture <code>\"OK\"</code> vide vide 3 1 <code>10</code> lecture <code>\"ATT\"</code> <code>(1, 10)</code> vide 3 2 <code>11</code> \u00e9criture <code>\"OK\"</code> <code>(1, 10)</code> vide 3 3 <code>12</code> lecture <code>\"OK\"</code> <code>(1, 10)</code> vide <p>Les colonnes e0 et e1 du tableau suivant recensent les deux chiffres de l'\u00e9criture binaire de l'entier n de la premi\u00e8re colonne.</p> nombre n \u00e9criture binaire de n sur deux bits e1 e0 0 00 0 0 1 01 0 1 2 10 1 0 3 11 1 1 <p>L'ordonnanceur attribue \u00e0 deux signaux sur le bus de donn\u00e9es les valeurs de e0 et e1 associ\u00e9es au num\u00e9ro du circuit qu'il veut s\u00e9lectionner. On souhaite construire \u00e0 l'aide des portes ET, OU et NON un circuit pour chaque p\u00e9riph\u00e9rique. Chacun des quatre circuits \u00e0 construire prend en entr\u00e9e deux signaux e0 et e1, le signal de sortie s valant 1 uniquement lorsque les niveaux de e0 et e1 correspondent aux bits de l'\u00e9criture en binaire du num\u00e9ro du p\u00e9riph\u00e9rique correspondant.</p> <p>Par exemple, le circuit ci-dessous r\u00e9alise la s\u00e9lection du p\u00e9riph\u00e9rique 3. En effet, le signal s vaut 1 si et seulement si e0 et e1 valent tous les deux 1.</p> <pre><code>flowchart LR\n    e0---ET(ET)\n    e1---ET\n    ET---s\n    style e0 stroke-width:0px,opacity:0\n    style e1 stroke-width:0px,opacity:0\n    style s stroke-width:0px,opacity:0</code></pre> <p>5.a. Recopier sur la copie et indiquer dans le circuit ci-dessous les entr\u00e9es e0 et e1 de fa\u00e7on que ce circuit s\u00e9lectionne le p\u00e9riph\u00e9rique 1.</p> <pre><code>flowchart LR\n    ea( )---NON(NON)---ET(ET)\n    eb( )----ET\n    ET---s\n    style ea stroke-width:0px,opacity:0\n    style eb stroke-width:0px,opacity:0\n    style s stroke-width:0px,opacity:0</code></pre> R\u00e9ponse <pre><code>flowchart LR\n    ea(e1)---NON(NON)---ET(ET)\n    eb(e0)----ET\n    ET---s\n    style ea stroke-width:0px,opacity:0\n    style eb stroke-width:0px,opacity:0\n    style s stroke-width:0px,opacity:0</code></pre> <p>5.b. Dessiner un circuit constitu\u00e9 d'une porte ET et d'une porte NON, qui s\u00e9lectionne le p\u00e9riph\u00e9rique 2.</p> R\u00e9ponse <pre><code>flowchart LR\n    ea(e1)----ET(ET)\n    eb(e0)---NON(NON)---ET\n    ET---s\n    style ea stroke-width:0px,opacity:0\n    style eb stroke-width:0px,opacity:0\n    style s stroke-width:0px,opacity:0</code></pre> <p>5.c. Dessiner un circuit permettant de s\u00e9lectionner le p\u00e9riph\u00e9rique 0.</p> R\u00e9ponse <pre><code>flowchart LR\n    ea(e0)---NON1(NON)---ET(ET)\n    eb(e1)---NON2(NON)---ET\n    ET---s\n    style ea stroke-width:0px,opacity:0\n    style eb stroke-width:0px,opacity:0\n    style s stroke-width:0px,opacity:0</code></pre>"},{"location":"Archi_Materielle/T3_3_gestion_processus_BAC/#2022-amerique-du-nord-j2","title":"2022, Am\u00e9rique du Nord, J2","text":"<p>Exo</p> <p>Cet exercice pourra utiliser des commandes de syst\u00e8me d'exploitation de type UNIX telles que <code>cd, ls, mkdir, rm, rmd, mv, cat</code>.  </p> <p>Question 1</p> <p>Dans un syst\u00e8me d'exploitation de type UNIX, on consid\u00e8re l'arborescence des fichiers suivante dans laquelle les noms de dossiers sont en italique et ceux des fichiers qui sont en gras :</p> <p></p> <p>On souhaite, gr\u00e2ce \u00e0 l'utilisation du terminal de commande, explorer et modifier les r\u00e9pertoires et fichiers pr\u00e9sents. On suppose qu'on se trouve actuellement \u00e0 l'emplacement /home/morgane </p> <p>(a) Parmi les quatre propositions suivantes, donner celle correspondant \u00e0 l'affichage obtenu lors se l'utilisation de la commande <code>ls</code>.  </p> <ul> <li>Proposition 1 : lycee francais NSI info.txt image1.jpg perso  </li> <li>Proposition 2 : lycee perso  </li> <li>Proposition 3 : morgane  </li> <li>Proposition 4 : bin etc home tmp  </li> </ul> <p>(b) Ecrire la commande qui permet, \u00e0 partir de cet emplacement, d'attendre le r\u00e9pertoire lycee. On suppose maintenant qu'on se trouve dans le repertoire <code>/home/morgane/lycee/NSI</code> </p> <p>(c) Ecrire la commande qui permet de cr\u00e9er \u00e0 cet emplacement un r\u00e9pertoire nomm\u00e9 <code>algorithmique</code>.  </p> <p>(d)  Ecrire la commande qui permet, \u00e0 partir de cet emplacement, de supprimer le fichier <code>image1.jpg</code>.  </p> <p>Quesiton 2</p> <p>On rappelle qu'un processus est une instance d'application. Un processus peut \u00eatre d\u00e9marr\u00e9 par l'utilisateur, par un p\u00e9riph\u00e9rique ou par un autre processus appel\u00e9 parent. La commande UNIX <code>pa</code> pr\u00e9sente un clich\u00e9 instantan\u00e9 des procesus en cours d'ex\u00e9cution. On a ex\u00e9cut\u00e9 la commande <code>ps</code> (avec quelques options qu'il n'est pas n\u00e9cessaire de conna\u00eetre pour la r\u00e9ussite de cet exercice). Un extrait du r\u00e9sultat de la commande est pr\u00e9sent\u00e9 ci-dessous :  </p> <p> </p> <p>On rappelle que :  </p> <ul> <li>l'UID est l'identifiant de l'utilisateur propri\u00e9taire du processus;  </li> <li>le PID est l'identifiant du processus parent;  </li> <li>le PPID est l'identifiant du provessus parent;  </li> <li>C indique l'utilisation processeur;  </li> <li>STIME est l'heure de d\u00e9marrage du processus;  </li> <li>TTy est le nom du terminal de commande auquel le processus est attach\u00e9;  </li> <li>TIME est la dur\u00e9e d'utilisation du processus par le processeur;  </li> <li>CMD le nom de commande utilis\u00e9 pour d\u00e9marrer le processus.  </li> </ul> <p>(a) Donner le PID du parent du processus d\u00e9marr\u00e9 par la commande <code>vi</code>. (b) Donner le PID d'un processus enfant du processus d\u00e9marr\u00e9 par la commande <code>xfce4-terminal</code>. (c) Citer le PID de deux processus qui ont le m\u00eame parent. (d) Parmi tous les processus affich\u00e9s, citer le PID des deux qui ont consomm\u00e9 le plus de temps.  </p> <p>Question 3</p> <p>On consid\u00e8re les trois processus P1, P2, P3, tous soumis \u00e0 l'instant 0 dans l'ordre 1, 2, 3 :  </p> Nom du processus Dur\u00e9e d'ex\u00e9cution  en unit\u00e9 de temps Ordre de soumission P1 3 1 P2 1 2 P3 4 3 <p>(a) Dans cette question, on consid\u00e8re que les processus sont ex\u00e9cut\u00e9s de mani\u00e8re concurrente selon la politique du tourniquet : le temps est d\u00e9coup\u00e9 en tranches nomm\u00e9es quantums de temps. Les processus pr\u00eats \u00e0 \u00eatre ex\u00e9cut\u00e9s sont plac\u00e9s dans une file d'attente selon leur ordre de soumission. Lorsqu'un processus est \u00e9lu, il s'ex\u00e9cute au plus durant un quantum de temps. Si le processus n'a pas termin\u00e9 son ex\u00e9cution \u00e0 l'issue du quantum de temps, il r\u00e9int\u00e8gre la file des processus pr\u00eats (cot\u00e9 entr\u00e9e). Un autre processus, d\u00e9sormais en t\u00eate de la file (cot\u00e9 sortie) des processus pr\u00eats, est alors \u00e0 son tour \u00e9lu pour une dur\u00e9e \u00e9gale \u00e0 un quantum de temps maximum.  </p> <p></p> <p>Reproduire le tableau ci-dessous sur la copie et indiquer dans chacune des cases le processus ex\u00e9cut\u00e9 \u00e0 chaque cycle. Le quantum correspond \u00e0 une unit\u00e9 de temps.  </p> <p></p> <p>(b) Dans cette question, on consid\u00e8re que les processus sont ex\u00e9cut\u00e9s en appliquant la politique du plus court d'abord : les processus sont ex\u00e9cut\u00e9s compl\u00e9tement dans l'ordre croissant de leurs temps d'ex\u00e9cution, le plus court \u00e9tant ex\u00e9cut\u00e9 en premier. Reproduire le tableau ci-dessous sur la copie et indiquer dans chacune des cases le processus exc\u00e9cut\u00e9 \u00e0 chaque cycle.  </p> <p></p> <p>Question 4</p> <p>On consid\u00e8re trois ressources R1, R2 et R3 et trois processus P1,P2 et P3 dont les files d'ex\u00e9cution des instructions \u00e9l\u00e8mentaires sont indiqu\u00e9es ci-dessous : </p> <p> </p> <p>(a) Rappeler les diff\u00e9rens \u00e9tats d'un processus et expliquer pourquoi il y a ici risque d'interblocage, en proposant un ordre d'ex\u00e9cution des instructions \u00e9l\u00e8mentaires le provoquant. (b) Proposer un ordre d'ex\u00e9cution des instructions \u00e9l\u00e8mentaires sans interblocage.</p>"},{"location":"Archi_Materielle/T3_5_systeme_sur_puce/","title":"Macro Rendering Error","text":"<p>File: <code>Archi_Materielle/T3_5_systeme_sur_puce.md</code></p> <p>KeyError: 21</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 21\n</code></pre>"},{"location":"Archi_Materielle/index_archi/","title":"\u27a1 Th\u00e8me : Architectures mat\u00e9rielles, syst\u00e8me d\u2019exploitation et r\u00e9seaux(ARSE)","text":"<p>Info</p> <p>\ud83d\uddf9 Protocoles de routage \ud83d\uddf9 Gestion des processus et des ressources par un syst\u00e8me d'exploitation \u25a1 Revoir les principales commandes Linux</p>"},{"location":"Archi_Materielle/test/","title":"Macro Syntax Error","text":"<p>File: <code>Archi_Materielle/test.md</code></p> <p>Line 47 in Markdown file: expected token 'end of print statement', got 'masqu\u00e9e' Markdown<pre><code>- `{{partie masqu\u00e9e}}` pour masquer une partie &lt;BR&gt; d'un texte :  voici par exemple un {{passage}} masqu\u00e9 &lt;BR&gt; (cliquer dessus pour afficher / masquer \u00e0 nouveau)\n</code></pre></p>"},{"location":"BAC/bac_explication/","title":"BAC NSI","text":""},{"location":"BAC/bac_explication/#epreuve-ecrite","title":"\u00c9preuve \u00e9crite","text":"<ul> <li>L'\u00e9preuve \u00e9crite de sp\u00e9cialit\u00e9 NSI dure 3h30.</li> <li>Elle comporte trois exercices not\u00e9s chacun sur 4 points, pour un total donc de 12 points.</li> <li>Les exercices portent sur les chapitres du programme signal\u00e9s par \u2192 BAC sur la page d'accueil.</li> </ul>"},{"location":"BAC/index_BAC/","title":"\u27a1 Sujets de BAC suppl\u00e9mentaires pour chaque th\u00e8me.","text":"<p>Bon courage \u00e0 tous.</p> <p>Info</p> <p>\ud83d\uddf9 Piles et Files \ud83d\uddf9 R\u00e9cursivit\u00e9 \ud83d\uddf9 Programmation - Tableaux - Cha\u00eenes - Tupples - Parcours. \ud83d\uddf9 SQL  </p>"},{"location":"BAC/SQL/compile_sql/","title":"Sujet BAC 18 :  \u00a0 SQL","text":""},{"location":"BAC/SQL/compile_sql/#cours","title":"Cours","text":"<p>Vous pouvez t\u00e9l\u00e9charger une copie au format pdf du diaporama de synth\u00e8se de cours :</p> <p>Diaporama de cours </p> <p>Attention</p> <p>Ce diaporama n'est qu'une synth\u00e8se de cours et ne donne que quelques points de rep\u00e8res pour de vos r\u00e9visions.</p>"},{"location":"BAC/SQL/compile_sql/#gestions-de-musiciens","title":"Gestions de musiciens","text":"<p>D'apr\u00e8s 2023, sujet z\u00e9ro A</p> <p>On pourra utiliser les mots cl\u00e9s SQL suivants :</p> <p><code>AND</code>, <code>SELECT</code>, <code>FROM</code>, <code>WHERE</code>, <code>JOIN</code>, <code>INSERT INTO</code>, <code>VALUES</code>, <code>COUNT</code>, <code>ORDER BY</code>, <code>OR</code>, <code>ON</code>, <code>SET</code>, <code>UPDATE</code>.</p> <p>On \u00e9tudie une base de donn\u00e9es permettant la gestion de l'organisation d'un festival de musique de jazz, dont voici le sch\u00e9ma relationnel comportant trois relations :</p> <ul> <li>la relation <code>groupes (id_groupe, nom, style, nb_pers)</code></li> <li>la relation <code>musiciens (id_musicien, nom, prenom, instru, #id_groupe)</code></li> <li>la relation <code>concerts (id_concert, scene, heure_debut, heure_fin, #id_groupe)</code></li> </ul> <p>Dans ce sch\u00e9ma relationnel :</p> <ul> <li>les cl\u00e9s primaires sont soulign\u00e9es ;</li> <li>les cl\u00e9s \u00e9trang\u00e8res sont pr\u00e9c\u00e9d\u00e9es d'un #. Ainsi <code>concerts.id_groupe</code> est une cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 <code>groupes.id_groupe</code>.</li> </ul> <p>Voici un extrait des tables <code>groupes</code>, <code>musiciens</code> et <code>concerts</code> :</p> <p>Extrait de <code>groupes</code></p> <code>id_groupe</code> <code>nom</code> <code>style</code> <code>nb_pers</code> <code>12</code> <code>'Weather Report'</code> <code>'Jazz Fusion'</code> <code>5</code> <code>25</code> <code>'The 3 Sounds'</code> <code>'Soul Jazz'</code> <code>4</code> <code>87</code> <code>'Return to Forever'</code> <code>'Jazz Fusion'</code> <code>8</code> <code>96</code> <code>'The Jazz Messenger'</code> <code>'Hard Bop'</code> <code>3</code> <p>Extrait de <code>musiciens</code></p> <code>id_musicien</code> <code>nom</code> <code>prenom</code> <code>instru</code> <code>id_groupe</code> <code>12</code> <code>'Garrett'</code> <code>'Kenny'</code> <code>'saxophone alto'</code> <code>96</code> <code>13</code> <code>'Garrett'</code> <code>'Kenny'</code> <code>'flute'</code> <code>25</code> <code>58</code> <code>'Corea'</code> <code>'Chick'</code> <code>'piano'</code> <code>87</code> <code>97</code> <code>'Clarke'</code> <code>'Stanley'</code> <code>'basse'</code> <code>87</code> <p>Extrait de <code>concerts</code></p> <code>id_concert</code> <code>scene</code> <code>heure_debut</code> <code>heure_fin</code> <code>id_groupe</code> <code>10</code> <code>1</code> <code>'20 h 00'</code> <code>'20 h 45'</code> <code>12</code> <code>24</code> <code>2</code> <code>'20 h 00'</code> <code>'20 h 45'</code> <code>35</code> <code>36</code> <code>1</code> <code>'21 h 00'</code> <code>'22 h 00'</code> <code>96</code> <code>45</code> <code>3</code> <code>'18 h 00'</code> <code>'18 h 30'</code> <code>87</code> <p>1.  Citer les attributs de la table <code>groupes</code>.</p> R\u00e9ponse <p>Les attributs de la table groupes sont : <code>id_groupe</code>, <code>nom</code>, <code>style</code> et <code>nb_pers</code>.</p> <p>2.  Justifier que l'attribut <code>nom</code> de la table <code>musiciens</code> ne peut pas \u00eatre une cl\u00e9 primaire.</p> R\u00e9ponse <p>Une cl\u00e9 primaire doit \u00eatre unique. Le nom <code>'Garrett'</code> apparait plusieurs fois, donc le nom ne peut \u00eatre une cl\u00e9 primaire.</p> <p>On notera que le couple <code>(nom, prenom)</code> n'est pas non plus une cl\u00e9 primaire de cette table pour la m\u00eame raison.</p> <p>De la m\u00eame fa\u00e7on, le triplet <code>(nom, prenom, intru)</code> ne peut pas non plus \u00eatre utilis\u00e9 comme cl\u00e9 primaire : le m\u00eame musicien peut tout \u00e0 fait jouer du m\u00eame instrument dans deux groupes diff\u00e9rents.</p> <p>3. En s'appuyant uniquement sur l'extrait des tables fourni ci-dessus \u00e9crire ce que renvoie la requ\u00eate :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom\nFROM groupes\nWHERE style = 'Jazz Fusion';\n</code></pre> R\u00e9ponse <p>La requ\u00eate renvoie : <code>'Weather Report'</code> et <code>'Return to Forever'</code>.</p> <p>4. Le concert dont l'<code>id_concert</code> est <code>36</code> finira \u00e0 22 h 30 au lieu de 22 h 00. </p> <p>Recopier sur la copie et compl\u00e9ter la requ\u00eate SQL ci-dessous permettant de mettre \u00e0 jour la relation <code>concerts</code> pour modifier l'horaire de fin de ce concert.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE concerts\nSET ...\nWHERE ... ;\n</code></pre> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE concerts\nSET heure_fin = '22 h 30'\nWHERE id_concert = 36;\n</code></pre> <p>5. Donner une seule requ\u00eate SQL permettant de r\u00e9cup\u00e9rer le nom de tous les groupes qui jouent sur la sc\u00e8ne 1.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT groupes.nom FROM groupes\nJOIN concerts ON concerts.id_groupe = groupes.id_groupe\nWHERE concerts.scene = 1;\n</code></pre> <p>6. Fournir une seule requ\u00eate SQL permettant d'ajouter dans la relation <code>groupes</code> le groupe <code>'Smooth Jazz Fourplay'</code>, de style <code>'Free Jazz'</code>, compos\u00e9 de 4 membres. Ce groupe aura un <code>id_groupe</code> de 15. </p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO groupes (id_groupe, nom, style, nb_pers)\nVALUES (15, 'Smooth Jazz Fourplay', 'Free Jazz', 4);\n</code></pre> <p>Les donn\u00e9es sont ensuite r\u00e9cup\u00e9r\u00e9es pour \u00eatre analys\u00e9es par la soci\u00e9t\u00e9 qui produit les festivals de musique. Pour ce faire, elle utilise la programmation en Python afin d'effectuer certaines op\u00e9rations plus complexes.</p> <p>Elle stocke les donn\u00e9es relatives aux musiciens sous forme d'un tableau de dictionnaires dans laquelle a \u00e9t\u00e9 ajout\u00e9 le nombre de concerts effectu\u00e9s par chaque musicien :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; print(musiciens)\n  [{'id_musicien': 12, 'nom': 'Garrett', 'prenom': 'Kenny',\n    'instru': 'saxophone alto', 'id_groupe' : 96, 'nb_concerts': 5},\n   {'id_musicien': 13, 'nom': 'Garrett', 'prenom': 'Kenny',\n    'instru': 'flute', 'id_groupe' : 25, 'nb_concerts': 9},\n   {'id_musicien': 58, 'nom': 'Corea', 'prenom': 'Chick',\n    'instru': 'piano', 'id_groupe' : 87, 'nb_concerts': 4},\n   {'id_musicien': 97, 'nom': 'Clarke', 'prenom': 'Stanley',\n    'instru': 'basse', 'id_groupe' : 87, 'nb_concerts': 4},\n   ...\n  ]\n</code></pre> <p>7.  \u00c9crire la fonction <code>recherche_nom</code> ayant pour unique param\u00e8tre un tableau de dictionnaires (comme <code>musiciens</code> pr\u00e9sent\u00e9 pr\u00e9c\u00e9demment) renvoyant une liste contenant le nom de tous les musiciens ayant particip\u00e9 \u00e0 au moins 4 concerts.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def recherche_nom(musiciens):\n    resultat = []\n    for musicien in musiciens:\n        if musicien['nb_concerts'] &gt;= 4:\n            resultat.append(musicien['nom'])\n    return resultat\n</code></pre>"},{"location":"BAC/SQL/compile_sql/#centres-etrangers-j1","title":"Centres Etrangers J1","text":"<p>D'apr\u00e8s 2022, Centres \u00e9trangers, J1,Ex. 4</p> <p>Rappel sur le langage SQL</p> <p>Types de donn\u00e9es</p> Type Description <code>CHAR(t)</code> Texte fixe de <code>t</code> caract\u00e8res <code>VARCHAR(t)</code> Texte de t caract\u00e8res variables <code>TEXT</code> Texte de \\(65\\,535\\) caract\u00e8res maximum <code>INT</code> Nombre entier de \\(-2^{31}\\) \u00e0 \\(2^{31} - 1\\) (sign\u00e9) ou de \\(0\\) \u00e0 \\(2^{32} - 1\\) (non sign\u00e9) <code>FLOAT</code> R\u00e9el \u00e0 virgule flottante (approximation) <code>DATE</code> Date format <code>AAAA-MM-JJ</code> <p>Quelques exemples de syntaxe SQL :</p> <ul> <li>Ins\u00e9rer des enregistrements :<ul> <li><code>INSERT INTO Table1 (attribut1, attribut2) VALUES (valeur1 , valeur2);</code></li> </ul> </li> <li>Modifier des enregistrements :<ul> <li><code>UPDATE Table1 SET attribut1=valeur1, attribut2=valeur2 WHERE Selecteur;</code></li> </ul> </li> <li>Supprimer des enregistrements :<ul> <li><code>DELETE FROM Table1 WHERE Selecteur;</code></li> </ul> </li> <li>S\u00e9lectionner des enregistrements :<ul> <li><code>SELECT attributs FROM Table1 WHERE Selecteur;</code></li> </ul> </li> <li>S\u00e9lectionner des enregistrements dans un ordre ascendant :<ul> <li><code>SELECT attributs FROM Table1 WHERE Selecteur ORDER BY attribut ASC;</code></li> </ul> </li> <li>S\u00e9lectionner des enregistrements sans doublon :<ul> <li><code>SELECT DISTINCT attributs FROM Table1 WHERE Selecteur;</code></li> </ul> </li> <li>Effectuer une jointure :<ul> <li><code>SELECT attributs FROM Table1 JOIN Table2 ON Table1.cle1=Table2.cle2 WHERE Selecteur;</code></li> </ul> </li> </ul> <p>Dans le cadre d'une \u00e9tude sur le r\u00e9chauffement climatique, un centre m\u00e9t\u00e9orologique rassemble des donn\u00e9es. On consid\u00e8re que la base de donn\u00e9es contient deux relations (tables). La relation <code>Centres</code> qui contient l'identifiant des centres m\u00e9t\u00e9orologiques, la ville, la latitude, la longitude et l'altitude du centre. La relation <code>Mesures</code> qui contient l'identifiant de la mesure, l'identifiant du centre, la date de la mesure, la temp\u00e9rature, la pression et la pluviom\u00e9trie mesur\u00e9es.</p> <p>Le sch\u00e9ma relationnel de la relation <code>Centres</code> est le suivant :</p> <p><code>Centres(id_centre: INT, nom_ville: VARCHAR, latitude: FLOAT, longitude: FLOAT, altitude: INT)</code></p> <p>Le sch\u00e9ma relationnel de la relation <code>Mesures</code> est le suivant :</p> <p><code>Mesures(id_mesure: INT, id_centre: INT, date_mesure: DATE, temperature: FLOAT, pression: INT, pluviometrie: INT)</code></p> <p>On fournit ci-dessous le contenu des deux relations.</p> <p>Relation <code>Centres</code></p> <code>id_centre</code> <code>nom_ville</code> <code>latitude</code> <code>longitude</code> <code>altitude</code> <code>213</code> <code>'Amiens'</code> <code>49.894</code> <code>2.293</code> <code>60</code> <code>138</code> <code>'Grenoble'</code> <code>45.185</code> <code>5.723</code> <code>550</code> <code>263</code> <code>'Brest'</code> <code>48.388</code> <code>-4.49</code> <code>52</code> <code>185</code> <code>'Tignes'</code> <code>45.469</code> <code>6.909</code> <code>2594</code> <code>459</code> <code>'Nice'</code> <code>43.706</code> <code>7.262</code> <code>260</code> <code>126</code> <code>'Le Puy-en-Velay'</code> <code>45.042</code> <code>3.888</code> <code>744</code> <code>317</code> <code>'G\u00e9rardmer'</code> <code>48.073</code> <code>6.879</code> <code>855</code> <p>Relation <code>Mesures</code></p> <code>id_mesure</code> <code>id_centre</code> <code>date_mesure</code> <code>temperature</code> <code>pression</code> <code>pluviometrie</code> <code>1566</code> <code>138</code> <code>'2021-10-29'</code> <code>8.0</code> <code>1015</code> <code>3</code> <code>1568</code> <code>213</code> <code>'2021-10-29'</code> <code>15.1</code> <code>1011</code> <code>0</code> <code>2174</code> <code>126</code> <code>'2021-10-30'</code> <code>18.2</code> <code>1023</code> <code>0</code> <code>2200</code> <code>185</code> <code>'2021-10-30'</code> <code>5.6</code> <code>989</code> <code>20</code> <code>2232</code> <code>459</code> <code>'2021-10-31'</code> <code>25.0</code> <code>1035</code> <code>0</code> <code>2514</code> <code>213</code> <code>'2021-10-31'</code> <code>17.4</code> <code>1020</code> <code>0</code> <code>2563</code> <code>126</code> <code>'2021-11-01'</code> <code>10.1</code> <code>1005</code> <code>15</code> <code>2592</code> <code>459</code> <code>'2021-11-01'</code> <code>23.3</code> <code>1028</code> <code>2</code> <code>3425</code> <code>317</code> <code>'2021-11-02'</code> <code>9.0</code> <code>1012</code> <code>13</code> <code>3430</code> <code>138</code> <code>'2021-11-02'</code> <code>7.5</code> <code>996</code> <code>16</code> <code>3611</code> <code>263</code> <code>'2021-11-03'</code> <code>13.9</code> <code>1005</code> <code>8</code> <code>3625</code> <code>126</code> <code>'2021-11-03'</code> <code>10.8</code> <code>1008</code> <code>8</code> <p>1.a. Proposer une cl\u00e9 primaire pour la relation <code>Mesures</code>. Justifier votre choix.</p> R\u00e9ponse <ul> <li><code>id_centre</code> n'est pas unique, elle ne peut pas servir de cl\u00e9 primaire.</li> <li><code>date_mesure</code> et <code>pluviometrie</code> non plus.</li> <li><code>temperature</code> et <code>pression</code> sont uniques, certes, pour l'instant, mais probablement pas ensuite, c'est un mauvais choix.</li> </ul> <p><code>id_mesure</code> permet d'identifier de mani\u00e8re unique chaque mesure de la table ; c'est la bonne cl\u00e9 primaire pour cette relation.</p> <p>1.b. Avec quel attribut peut-on faire une jointure entre la relation <code>Centres</code> et la relation <code>Mesures</code> ?</p> R\u00e9ponse <p>La cl\u00e9 \u00e9trang\u00e8re <code>id_centre</code> dans la table <code>Mesures</code> fait r\u00e9f\u00e9rence de mani\u00e8re unique \u00e0 la cl\u00e9 primaire <code>id_centre</code> de la table <code>Centres</code>.</p> <p>Une jointure pourra \u00eatre sans \u00e9quivoque en utilisant l'\u00e9galit\u00e9 de ces deux champs.</p> <p>2.a. Qu'affiche la requ\u00eate suivante ?</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT * FROM Centres WHERE altitude &gt; 500;\n</code></pre> R\u00e9ponse <p>La requ\u00eate affiche tous les champs de la table <code>Centres</code> pour lesquels l'altitude est strictement sup\u00e9rieure \u00e0 500 m.</p> <code>id_centre</code> <code>nom_ville</code> <code>latitude</code> <code>longitude</code> <code>altitude</code> <code>138</code> <code>'Grenoble'</code> <code>45.185</code> <code>5.723</code> <code>550</code> <code>185</code> <code>'Tignes'</code> <code>45.469</code> <code>6.909</code> <code>2594</code> <code>126</code> <code>'Le Puy-en-Velay'</code> <code>45.042</code> <code>3.888</code> <code>744</code> <code>317</code> <code>'G\u00e9rardmer'</code> <code>48.073</code> <code>6.879</code> <code>855</code> <p>2.b. On souhaite r\u00e9cup\u00e9rer le nom de la ville des centres m\u00e9t\u00e9orologiques situ\u00e9s \u00e0 une altitude comprise entre 700 m et 1200 m, inclus. \u00c9crire la requ\u00eate SQL correspondante.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom_ville FROM Centres WHERE altitude &gt;= 700 AND altitude &lt;= 1200;\n</code></pre> <code>nom_ville</code> <code>'Le Puy-en-Velay'</code> <code>'G\u00e9rardmer'</code> <p>2.c. On souhaite r\u00e9cup\u00e9rer la liste des longitudes et des noms des villes des centres m\u00e9t\u00e9orologiques dont la longitude est sup\u00e9rieure \u00e0 <code>5.0</code> La liste devra \u00eatre tri\u00e9e par ordre alphab\u00e9tique des noms de ville. \u00c9crire la requ\u00eate SQL correspondante.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT longitude, nom_ville\nFROM Centres\nWHERE longitude &gt; 5.0\nORDER BY nom_ville ASC;\n</code></pre> <code>longitude</code> <code>nom_ville</code> <code>6.879</code> <code>'G\u00e9rardmer'</code> <code>5.723</code> <code>'Grenoble'</code> <code>7.262</code> <code>'Nice'</code> <code>6.909</code> <code>'Tignes'</code> <p>3.a. Qu'affiche la requ\u00eate suivante ?</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT * FROM Mesures WHERE date_mesure = '2021-10-30';\n</code></pre> R\u00e9ponse <p>La requ\u00eate affiche tous les champs des enregistrements de la table <code>Mesures</code> pour la date du 30 octobre 2021.</p> <code>id_mesure</code> <code>id_centre</code> <code>date_mesure</code> <code>temperature</code> <code>pression</code> <code>pluviometrie</code> <code>2174</code> <code>126</code> <code>'2021-10-30'</code> <code>18.2</code> <code>1023</code> <code>0</code> <code>2200</code> <code>185</code> <code>'2021-10-30'</code> <code>5.6</code> <code>989</code> <code>20</code> <p>3.b. \u00c9crire une requ\u00eate SQL permettant d'ajouter une mesure prise le 8 novembre 2021 dans le centre num\u00e9ro 138, o\u00f9 la temp\u00e9rature \u00e9tait de 11\u00b0C, la pression de 1013 hPa et la pluviom\u00e9trie de 0 mm. La donn\u00e9e dont l'attribut est <code>id_mesure</code> aura pour valeur 3650.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Mesures (id_mesure, id_centre, date_mesure, temperature, pression, pluviometrie)\nVALUES (3650, 138, '2021-11-08', 11.0, 1013, 0);\n</code></pre> <p>4.a. Expliquer ce que renvoie la requ\u00eate SQL suivante ?</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT * FROM Centres WHERE latitude = (SELECT MIN(latitude) FROM Centres);\n</code></pre> R\u00e9ponse <p>La requ\u00eate imbriqu\u00e9e <code>SELECT MIN(latitude) FROM Centres;</code> renvoie <code>43.706</code> qui est la plus petite latitude parmi celle de la table <code>Centres</code>. Elle correspond \u00e0 la latitude de Nice, la ville du centre le plus au Sud de cette table.</p> <p>Cette requ\u00eate renvoie donc tous les champs du centre situ\u00e9 le plus au sud parmi ceux de la table <code>Centres</code>.</p> <code>id_centre</code> <code>nom_ville</code> <code>latitude</code> <code>longitude</code> <code>altitude</code> <code>459</code> <code>'Nice'</code> <code>43.706</code> <code>7.262</code> <code>260</code> <p>4.b. \u00c9crire une requ\u00eate SQL donnant la liste des villes dans lesquelles on a enregistr\u00e9 une temp\u00e9rature inf\u00e9rieure \u00e0 10\u00b0C en octobre 2021. On utilisera le mot cl\u00e9 <code>DISTINCT</code> afin d'\u00e9viter d'avoir des doublons. On rappelle que l'on peut utiliser les op\u00e9rateurs de comparaison avec les dates.</p> R\u00e9ponses \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT nom_ville\nFROM Centres\nJOIN Mesures\nON Centres.id_centre = Mesures.id_centre\nWHERE Mesures.temperature &lt; 10.0\nAND Mesures.date_mesure &gt;= '2021-10-01'\nAND Mesures.date &lt; '2021-11-01';\n</code></pre> <code>nom_ville</code> <code>'Grenoble'</code> <code>'Tignes'</code> <code>'G\u00e9rardmer'</code>"},{"location":"BAC/SQL/compile_sql/#evaluations-deleves-par-competence","title":"\u00c9valuations d'\u00e9l\u00e8ves par comp\u00e9tence","text":"<p>D'apr\u00e8s 2022, Centres \u00e9trangers, J2, Ex. 3</p> <p>Rappel sur le langage SQL</p> <p>Types de donn\u00e9es</p> Type Description <code>CHAR</code> Chaine de caract\u00e8res <code>INT</code> Nombre entier de \\(-2^{31}\\) \u00e0 \\(2^{31} - 1\\) (sign\u00e9) ou de \\(0\\) \u00e0 \\(2^{32} - 1\\) (non sign\u00e9) <code>FLOAT</code> R\u00e9el \u00e0 virgule flottante (approximation) <code>DATE</code> Date format <code>AAAA-MM-JJ</code> <code>DATETIME</code> Date et heure format <code>AAAA-MM-JJHH:MI:SS</code> <p>Quelques exemples de syntaxe SQL :</p> <ul> <li>Ins\u00e9rer des enregistrements :<ul> <li><code>INSERT INTO Table1 (attribut1, attribut2) VALUES (valeur1 , valeur2);</code></li> </ul> </li> <li>Modifier des enregistrements :<ul> <li><code>UPDATE Table1 SET attribut1=valeur1, attribut2=valeur2 WHERE Selecteur;</code></li> </ul> </li> <li>Supprimer des enregistrements :<ul> <li><code>DELETE FROM Table1 WHERE Selecteur;</code></li> </ul> </li> <li>S\u00e9lectionner des enregistrements :<ul> <li><code>SELECT attributs FROM Table1 WHERE Selecteur;</code></li> </ul> </li> <li>Effectuer une jointure :<ul> <li><code>SELECT attributs FROM Table1 JOIN Table2 ON Table1.cle1=Table2.cle2 WHERE Selecteur;</code></li> </ul> </li> </ul> <p>Les enseignants d'un \u00e9tablissement imaginaire proposent des parcours d'entrainement au num\u00e9rique \u00e0 leurs \u00e9l\u00e8ves en cr\u00e9ant des s\u00e9ries d'exercices appel\u00e9es <code>Evaluations</code>. Les diff\u00e9rentes informations sont stock\u00e9es dans une base de donn\u00e9es.</p> <p>Les informations de chaque campagne cr\u00e9\u00e9e sont stock\u00e9es dans la table <code>Evaluations</code> dont la structure est la suivante :</p> Attribut Type <code>Code_evaluation</code> <code>CHAR</code> <code>Nom_evaluation</code> <code>CHAR</code> <code>Auteur</code> <code>CHAR</code> <code>Date_evaluation</code> <code>CHAR</code> <code>Code_competences</code> <code>INT</code> <p>Un extrait de la table <code>Evaluations</code> est donn\u00e9 ci-dessous :</p> <p>Tableau 1</p> <code>Code_evaluation</code> <code>Nom_evaluation</code> <code>Auteur</code> <code>Date_evaluation</code> <code>Code_competences</code> <code>'EXKVLX886'</code> <code>'Term7'</code> <code>'Peltier'</code> <code>'13/10/2021'</code> <code>1453</code> <code>'AZVBYB689'</code> <code>'Groupe3'</code> <code>'Lacour'</code> <code>'07/10/2021'</code> <code>1276</code> <code>'PRJUYR491'</code> <code>'Term5'</code> <code>'Peltier'</code> <code>'07/10/2021'</code> <code>1453</code> <code>'RTKVLX656'</code> <code>'campagneSTMG'</code> <code>'Beley'</code> <code>'03/10/2021'</code> <code>476</code> <code>'DZLYYR479'</code> <code>'Term5'</code> <code>'Serhani'</code> <code>'27/09/2021'</code> <code>1659</code> <code>'XJVBTX585'</code> <code>'grNSI2'</code> <code>'Eisen'</code> <code>'24/09/2021'</code> <code>532</code> <code>'CRLYYR439'</code> <code>'1ere6'</code> <code>'Caille'</code> <code>'13/09/2021'</code> <code>532</code> <code>'AZVBYB789'</code> <code>'rentreeHGGSP'</code> <code>'Martin'</code> <code>'13/09/2021'</code> <code>386</code> <code>'OBJUYR491'</code> <code>'Web_2nde'</code> <code>'Boucher'</code> <code>'07/09/2021'</code> <code>452</code> <code>'AGTBYB689'</code> <code>'rechercheBTS'</code> <code>'Beley'</code> <code>'07/09/2021'</code> <code>1341</code> <code>'DQVBTX905'</code> <code>'2nde2'</code> <code>'Nguyen'</code> <code>'07/09/2021'</code> <code>452</code> <p>1.a. Dans la table <code>Evaluations</code>, quel est le seul attribut pouvant servir de cl\u00e9 primaire ? Justifier votre r\u00e9ponse.</p> R\u00e9ponse <p>Le seul attribut a avoir des valeurs unique est <code>Code_evaluation</code>, tous les autres peuvent cr\u00e9er des ambig\u00fcit\u00e9s lors de la d\u00e9signation d'une entr\u00e9e.</p> <p>La cl\u00e9 primaire doit donc \u00eatre <code>Code_evaluation</code>.</p> <p>1.b. \u00c9crire la requ\u00eate SQL d'insertion qui a permis d'enregistrer la campagne <code>Term7</code> dans la table <code>Evaluations</code>. Les informations relatives \u00e0 cette campagne sont donn\u00e9es dans la premi\u00e8re ligne du tableau 1 pr\u00e9c\u00e9dent.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Evaluations VALUES ('EXKVLX886', 'Term7', 'Peltier', '13/10/2021', 1453);\n</code></pre> <p>2. On suppose maintenant que la table <code>Evaluations</code> contient uniquement les 11 enregistrements pr\u00e9sents dans le tableau 1.</p> <p>2.a. Combien de lignes s'affichent apr\u00e8s l'ex\u00e9cution de la requ\u00eate suivante ?</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT auteur FROM Evaluations;\n</code></pre> R\u00e9ponse <p>Les r\u00e9sultats ne sont pas regroup\u00e9s par auteur donc tous les auteurs sont renvoy\u00e9s y compris les doublons : il y a 11 lignes.</p> <p>2.b. Recopier les lignes issues de la requ\u00eate suivante :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Nom_evaluation, Date_evaluation FROM Evaluations WHERE auteur = 'Peltier';\n</code></pre> R\u00e9ponse <code>Nom_evaluation</code> <code>Date_evaluation</code> <code>Term7</code> <code>13/10/2021</code> <code>Term5</code> <code>07/10/2021</code> <p>2.c. R\u00e9diger une requ\u00eate permettant de connaitre le nom des campagnes pr\u00e9voyant un entrainement cibl\u00e9 sur le web (<code>Code_competences</code> \\(452\\)).</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Nom_evaluation\nFROM Evaluations\nWHERE Code_competences = 452;\n</code></pre> <p>3. Le syst\u00e8me de gestion de bases de donn\u00e9es dispose \u00e9galement d'une table <code>Resultats</code> dont la structure est la suivante :</p> Attribut Type <code>Code_evaluation</code> <code>CHAR</code> <code>Num_eleve</code> <code>INT</code> <code>Score</code> <code>INT</code> <p>Si l'\u00e9l\u00e8ve s'est connect\u00e9 \u00e0 la campagne, mais n'a pas cliqu\u00e9 sur \u00ab envoyer les r\u00e9sultats \u00bb, son score vaut -1.</p> <p>3.a. Qu'imposerait le choix du couple <code>(Code_evaluation, Num_eleve)</code> comme cl\u00e9 primaire pour la table <code>Resultats</code> ?</p> R\u00e9ponse <p>On fait l'hypoth\u00e8se que les <code>Num_eleve</code> sont tous uniques (un par \u00e9l\u00e8ve).</p> <p>Une cl\u00e9 primaire ne doit \u00eatre associ\u00e9e qu'\u00e0 une entr\u00e9e de la table. Choisir ce couple comme cl\u00e9 primaire imposerait que chaque \u00e9l\u00e8ve ne fasse l'\u00e9valuation qu'une seule fois.</p> <p>Un extrait de la relation est donn\u00e9 ci-dessous :</p> <code>Code_evaluation</code> <code>Num_eleve</code> <code>Scores</code> <code>'PRJUYR491'</code> <code>17</code> <code>300</code> <code>'CRLYYR439'</code> <code>654</code> <code>-1</code> <code>'PRJUYR491'</code> <code>1454</code> <code>220</code> <code>'RTKVLX656'</code> <code>554</code> <code>255</code> <code>'DZLYYR479'</code> <code>17</code> <code>-1</code> <code>'XJVBTX585'</code> <code>1664</code> <code>12</code> <code>'CRLYYR439'</code> <code>18703</code> <code>0</code> <code>'PRJUYR491'</code> <code>1565</code> <code>422</code> <code>'XJVBTX585'</code> <code>12</code> <code>643</code> <code>'CRLYYR439'</code> <code>168</code> <code>19</code> <code>'DZLYYR479'</code> <code>17</code> <code>140</code> <code>'XJVBTX585'</code> <code>1658</code> <code>647</code> <p>3.b. \u00c9crire une requ\u00eate permettant d'obtenir les num\u00e9ros des \u00e9l\u00e8ves (<code>Num_eleve</code>) qui ont travaill\u00e9 la comp\u00e9tence <code>532</code>.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT Num_eleve\nFROM Resultats\nJOIN Evaluations ON Resultats.Code_evaluation = Evaluations.Code_evaluation\nWHERE Evaluation.Code_competences = 532\n</code></pre> <p>4.a. Proposer la structure d'une table <code>Eleves</code> permettant d'identifier les noms, pr\u00e9noms et les classes des \u00e9l\u00e8ves.</p> R\u00e9ponse <p>L\u00e0 encore on fait l'hypoth\u00e8se que chaque \u00e9l\u00e8ve poss\u00e8de un <code>Num_eleve</code> unique.</p> Attribut Type <code>Num_eleve</code> <code>CHAR</code> <code>Nom</code> <code>CHAR</code> <code>Prenom</code> <code>CHAR</code> <code>Classe</code> <code>CHAR</code> <p>4.b. Proposer une cl\u00e9 primaire pour cette table.</p> R\u00e9ponse <p>La cl\u00e9 primaire serait <code>Num_eleve</code>.</p>"},{"location":"BAC/SQL/compile_sql/#donnees-de-visites-de-pages-web","title":"Donn\u00e9es de visites de pages Web","text":"<p>D'apr\u00e8s 2022, Polyn\u00e9sie, J1, Ex. 3</p> <p>SQL</p> <p>L'\u00e9nonc\u00e9 de cet exercice peut utiliser les mots du langage SQL suivants :</p> <p><code>SELECT, FROM, WHERE, JOIN ON, INSERT INTO, VALUES, UPDATE, SET, DELETE, COUNT, DISTINCT, AND, OR, AS, ORDER BY, ASC, DESC</code></p> <p>Un site web recueille des donn\u00e9es de navigation dans une base de donn\u00e9es afin d'\u00e9tudier les profils de ses visiteurs. Chaque requ\u00eate d'interrogation d'une page de ce site est enregistr\u00e9e dans une premi\u00e8re table d\u00e9nomm\u00e9e <code>Visites</code> sous la forme d'un 5-uplet : <code>(identifiant, adresse IP, date et heure de visite, nom de la page, navigateur)</code>.</p> <p>Le chargement de la page <code>index.html</code> par <code>192.168.1.91</code> le 12 juillet 1998 \u00e0 22 h 48 aura par exemple \u00e9t\u00e9 enregistr\u00e9 de la fa\u00e7on suivante :</p> <p><code>(1534, \"192.168.1.91\", \"1998-07-12 22:48:00\", \"index.html\", \"Internet explorer 4.1\")</code>.</p> <p>Un extrait de cette table vous est donn\u00e9 ci-dessous :</p> Identifiant ip dateheure nompage navigateur ... ... ... ... ... 1534 <code>\"192.168.1.91\"</code> <code>\"1998-07-12 22:48:00\"</code> <code>\"index.html\"</code> <code>\"Internet explorer 4.1\"</code> 1535 <code>\"192.168.1.91\"</code> <code>\"1998-07-12 22:49:05\"</code> <code>\"exercices.html\"</code> <code>\"Internet explorer 4.1\"</code> 1536 <code>\"192.168.1.151\"</code> <code>\"1998-07-12 22:59:44\"</code> <code>\"index.html\"</code> <code>\"Netscape 6\"</code> 1537 <code>\"192.168.1.151\"</code> <code>\"1998-07-12 23:00:00\"</code> <code>\"espace_enseignant.html\"</code> <code>\"Netscape 6\"</code> 1538 <code>\"192.168.1.91\"</code> <code>\"1998-07-12 23:29:00\"</code> <code>\"icorrection.html\"</code> <code>\"Internet explorer 4.1\"</code> ... ... ... ... ... <p>1.a) Donner une commande d'interrogation en langage SQL permettant d'obtenir l'ensemble des 2-uplets <code>(adresse IP, nom de la page)</code> de cette table.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT ip, nompage FROM Visites;\n</code></pre> <p>1.b) Donner une commande en langage SQL permettant d'obtenir l'ensemble des adresses IP ayant interrog\u00e9 le site, sans doublon.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT ip FROM Visites;\n</code></pre> <p>1.c) Donner une commande en langage SQL permettant d'obtenir la liste des noms des pages visit\u00e9es par l'adresse IP <code>192.168.1.91</code></p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nompage FROM Visites WHERE ip = '192.168.1.91';\n</code></pre> <p>Ce site web met en place, sur chacune de ses pages, un programme en JavaScript qui envoie au serveur, \u00e0 intervalle r\u00e9gulier de 15 secondes, le temps en secondes (<code>duree</code>) de pr\u00e9sence sur la page. Ces envois contiennent tous la valeur de <code>identifiant</code> correspondant au chargement initial de la page. Par exemple, si le visiteur du 12 juillet 1998 est rest\u00e9 65 secondes sur la page, celle-ci a envoy\u00e9 au serveur les 4 doublets <code>(1534, 15)</code>, <code>(1534, 30)</code>, <code>(1534, 45)</code> et <code>(1534, 60)</code>.</p> <p>Ces donn\u00e9es sont enregistr\u00e9es dans une table nomm\u00e9e <code>Pings</code>.</p> <p>En plus de l'inscription d'une ligne dans la table <code>Visites</code>, chaque chargement d'une nouvelle page provoque l'insertion d'une ligne dans la table <code>Pings</code> comprenant l'identifiant de ce chargement et une dur\u00e9e de <code>0</code>.</p> <p>Enfin, chaque ligne de la table <code>Pings</code> est unique, et ses deux colonnes contiennent toujours un <code>identifiant</code> et une <code>duree</code>.</p> <p>L'attribut <code>identifiant</code> de la table <code>Pings</code> fait r\u00e9f\u00e9rence \u00e0 l'attribut du m\u00eame nom de la table <code>Visites</code> et les deux partagent les m\u00eames valeurs.</p> <p>Un extrait de cette table vous est donn\u00e9 ci-dessous :</p> Identifiant duree ... ... <code>1534</code> <code>0</code> <code>1534</code> <code>15</code> <code>1534</code> <code>30</code> <code>1534</code> <code>45</code> <code>1534</code> <code>60</code> ... ... <code>1536</code> <code>0</code> <code>1537</code> <code>0</code> <code>1537</code> <code>15</code> ... ... <p>2.a) De quelle table l'attribut <code>identifiant</code> est-il la cl\u00e9 primaire ?</p> R\u00e9ponse <p>L'attribut <code>identifiant</code> est la cl\u00e9 primaire de la table <code>Visites</code>.</p> <p>Remarque : dans la table <code>Pings</code>, le doublet <code>(identifiant, duree)</code>  est cl\u00e9 primaire composite.</p> <p>2.b) De quelle table l'attribut <code>identifiant</code> est-il une cl\u00e9 \u00e9trang\u00e8re ?</p> R\u00e9ponse <p>L'attribut <code>identifiant</code> est cl\u00e9 \u00e9trang\u00e8re dans la table <code>Pings</code>.</p> <p>2.c) On suppose que ces cl\u00e9s et r\u00e8gles (unicit\u00e9, non nullit\u00e9) ont \u00e9t\u00e9 d\u00e9clar\u00e9es lors de la cr\u00e9ation des tables. Quelles v\u00e9rifications sont automatiquement effectu\u00e9es par le syst\u00e8me de gestion de base de donn\u00e9es ?</p> R\u00e9ponse <p>Lors d'un enregistrement dans la table <code>Pings</code>, le syst\u00e8me de gestion de base de donn\u00e9es va v\u00e9rifier :</p> <ul> <li>la contrainte de domaine : le doublet ins\u00e9r\u00e9 doit \u00eatre un doublet du type sp\u00e9cifi\u00e9 dans la d\u00e9finition de la table, par exemple (entier, entier)</li> <li>la contrainte d'unicit\u00e9 : on ne peut pas ins\u00e9rer deux fois le m\u00eame doublet ;</li> <li>les contraintes de non nullit\u00e9 : ni le champ <code>identifiant</code>, ni le champ <code>duree</code> ne peuvent \u00eatre <code>NULL</code></li> <li>la contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle : la valeur de l'attribut de la cl\u00e9 \u00e9trang\u00e8re doit \u00eatre inclus dans les valeurs de la cl\u00e9 primaire \u00e0 laquelle il fait r\u00e9f\u00e9rence.</li> </ul> <p>3. Le serveur re\u00e7oit le doublet <code>(identifiant, duree)</code> suivant : <code>(1534, 105)</code>. \u00c9crire la commande SQL d'insertion qui permet d'ajouter cet enregistrement \u00e0 la table <code>Pings</code>.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Pings VALUES (1534, 105);\n</code></pre> <p>On envisage ensuite d'optimiser la table en se contentant d'une seule ligne par identifiant dans la table <code>Pings</code> : les valeurs de l'attribut <code>duree</code> devraient alors \u00eatre mises \u00e0 jour \u00e0 chaque r\u00e9ception d'un nouveau doublet <code>(identifiant, duree)</code>.</p> <p>4.a) \u00c9crire la requ\u00eate de mise \u00e0 jour permettant de fixer \u00e0 120 la valeur de l'attribut <code>duree</code> associ\u00e9e \u00e0 l'identifiant 1534 dans la table <code>Pings</code>.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Pings SET duree = 120 WHERE identifiant = 1534;\n</code></pre> <p>Remarque : Dans le cadre de cette optimisation, l'attribut <code>identifiant</code> est cl\u00e9 primaire.</p> <p>4.b) Expliquer pourquoi on ne peut pas \u00eatre certain que les donn\u00e9es envoy\u00e9es par une page web, depuis le navigateur d'un client, via plusieurs requ\u00eates formul\u00e9es en JavaScript, arrivent au serveur dans l'ordre dans lequel elles ont \u00e9t\u00e9 \u00e9mises.</p> R\u00e9ponse <p>Dans le protocole IP, les paquets sont rout\u00e9s ind\u00e9pendamment et peuvent donc \u00e9ventuellement suivre des chemins diff\u00e9rents s'il existe plusieurs itin\u00e9raires disponibles, ce qui peut impacter la dur\u00e9e d'acheminement. Une requ\u00eate A envoy\u00e9e avant une requ\u00eate B peut donc arriver apr\u00e8s cette derni\u00e8re.</p> <p>Ainsi, on ne peut pas \u00eatre certain que les donn\u00e9es envoy\u00e9es par une page web, depuis le navigateur d'un client, via plusieurs requ\u00eates formul\u00e9es en JavaScript, arrivent au serveur dans l'ordre dans lequel elles ont \u00e9t\u00e9 \u00e9mises.</p> <p>4.c) En d\u00e9duire qu'il est pr\u00e9f\u00e9rable d'utiliser une requ\u00eate d'insertion plut\u00f4t qu'une requ\u00eate de mise \u00e0 jour pour ajouter des donn\u00e9es \u00e0 la table <code>Pings</code>.</p> R\u00e9ponse <p>Il est pr\u00e9f\u00e9rable d'utiliser une requ\u00eate d'insertion plut\u00f4t qu'une requ\u00eate de mise \u00e0 jour pour ajouter des donn\u00e9es \u00e0 la table <code>Pings</code> afin de s'assurer de conserver dans la table <code>Pings</code> un enregistrement repr\u00e9sentatif du temps pass\u00e9 par un utilisateur sur une page donn\u00e9e (dans ce cas, lors d'une requ\u00eate sur la table <code>Pings</code>, il faudrait alors rechercher la valeur maximale relative \u00e0 un identifiant de connexion donn\u00e9).</p> <p>Remarque : il est en r\u00e9alit\u00e9 techniquement possible d'emp\u00eacher de stocker une valeur qui diminuerait la dur\u00e9e, mais cela est hors programme.</p> <p>5. \u00c9crire une requ\u00eate SQL utilisant le mot-cl\u00e9 <code>JOIN</code> et une clause <code>WHERE</code>, permettant de trouver les noms de toutes les pages qui ont \u00e9t\u00e9 consult\u00e9es plus d'une minute par au moins un utilisateur.</p> R\u00e9ponse <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT Visites.nompage FROM Visites JOIN Pings ON Visites.identifiant = Pings.identifiant WHERE Pings.duree &gt; 60;\n</code></pre> Remarque 1 : le \"par au moins un utilisateur\" me fait utiliser le <code>DISTINCT</code> parce qu'il y aura des doublons si plusieurs utilisateurs ont consult\u00e9e la m\u00eame page assez longtemps, ind\u00e9pendamment de l'optimisation ou non.</p> <p>Remarque 2 : dans le cas o\u00f9 la cl\u00e9 est composite, il y aura en plus plusieurs fois la m\u00eame page pour une m\u00eame consultation si la dur\u00e9e est &gt;= 75. Ce n'est pas important pour lister les pages, mais \u00e7a l'est si on veut les compter ensuite (y compris si on fait du <code>GROUP BY</code>).</p> <p>Remarque 3 : dans le cas o\u00f9 l'optimisation a \u00e9t\u00e9 faite, ces doublons de m\u00eame consultation n'existeront pas, mais le cas de multiples utilisateurs consultant la m\u00eame page reste. La requ\u00eate est inchang\u00e9e.</p>"},{"location":"BAC/pile_file/compilation_pile_file/","title":"Sujet BAC 14 :  \u00a0 Piles et Files","text":"<p>Vous pouvez t\u00e9l\u00e9charger une copie au format pdf du diaporama de synth\u00e8se de cours :</p> <p>Diaporama de cours </p> <p>Attention</p> <p>Ce diaporama n'est qu'une synth\u00e8se de cours et ne donne que quelques points de rep\u00e8res pour de vos r\u00e9visions.</p>"},{"location":"BAC/pile_file/compilation_pile_file/#sujet-zero","title":"Sujet z\u00e9ro","text":"<p>Exo</p> <p>Cet exercice porte sur la notion de pile et sur la programmation de base en Python. </p> <p>On rappelle qu\u2019une pile est une structure de donn\u00e9es abstraite fond\u00e9e sur le principe \u00ab dernier arriv\u00e9, premier sorti \u00bb :</p> <p></p> <p>On munit la structure de donn\u00e9es Pile de quatre fonctions primitives d\u00e9finies dans le tableau ci-dessous. :  </p> <p>Structure de donn\u00e9es abstraite : Pile </p> <p>Utilise : \u00c9l\u00e9ments, Bool\u00e9en</p> <p>Op\u00e9rations :  </p> <ul> <li>creer_pile_vide : \u2205 \u2192 Pile     creer_pile_vide() renvoie une pile vide</li> <li>est_vide : Pile \u2192 Bool\u00e9en      est_vide(pile) renvoie True si pile est vide, False sinon</li> <li>empiler : Pile, \u00c9l\u00e9ment \u2192 Rien     empiler(pile, element) ajoute element au sommet de la pile</li> <li>depiler : Pile \u2192 \u00c9l\u00e9ment     depiler(pile) renvoie l\u2019\u00e9l\u00e9ment au sommet de la pile en le retirant de la pile</li> </ul> <p>Question 1 :</p> <p>On suppose dans cette question que le contenu de la pile P est le suivant (les \u00e9l\u00e9ments \u00e9tant empil\u00e9s par le haut) :</p> <p></p> <p>Quel sera le contenu de la pile Q apr\u00e8s ex\u00e9cution de la suite d\u2019instructions suivante ?  </p> \ud83d\udc0d Script Python<pre><code>1  Q = creer_pile_vide ()\n2    while not est_vide ( P ):\n3       empiler (Q , depiler ( P ))\n</code></pre> R\u00e9ponse <p></p> <p>Question 2 :</p> <ol> <li>On appelle hauteur d\u2019une pile le nombre d\u2019\u00e9l\u00e9ments qu\u2019elle contient. La fonction hauteur_pile prend en param\u00e8tre une pile P et renvoie sa hauteur. Apr\u00e8s appel de cette fonction, la pile P doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.  Exemple : si P est la pile de la question 1 : <code>hauteur_pile(P) = 4</code>. Recopier et compl\u00e9ter sur votre copie le programme Python suivant impl\u00e9mentant la fonction <code>hauteur_pile</code> en rempla\u00e7ant les ??? par les bonnes instructions.</li> </ol> <p>\ud83d\udc0d Script Python<pre><code>def hauteur_pile ( P ):\n   Q = creer_pile_vide ()\n   n = 0\n   while not ( est_vide ( P )):\n        ???\n        x = depiler (P )\n        empiler (Q ,x )\n    while not ( est_vide ( Q )):\n        ???\n        empiler (P , x )\n    return ???\n</code></pre> 2. Cr\u00e9er une fonction <code>max_pile</code> ayant pour param\u00e8tres une pile P et un entier i. Cette fonction renvoie la position j de l\u2019\u00e9l\u00e9ment maximum parmi les i derniers \u00e9l\u00e9ments empil\u00e9s de la pile P. Apr\u00e8s appel de cette fonction, la pile P devra avoir retrouv\u00e9 son \u00e9tat d\u2019origine. La position du sommet de la pile est 1. Exemple : si P est la pile de la question 1 : <code>max_pile(P, 2) = 1</code></p> R\u00e9ponse <ol> <li></li> </ol> \ud83d\udc0d Script Python<pre><code>def hauteur_pile(P):\n    Q=creer_pile_vide()\n    n=0\n    while not est_vide(P):\n        n+=1\n        x=depiler(P)\n        empiler(Q,x)\n    while not est_vide(Q):\n        x=depiler(Q)\n        empiler(P,x)\n    return n\n</code></pre> <p>Explication </p> <p>\ud83d\udc0d Script Python<pre><code>Q=creer_pile_vide()\nn=0\n</code></pre> On initialise Q est vide et n = 0</p> <p>\ud83d\udc0d Script Python<pre><code>while not est_vide(P):\n    n+=1\n    x=depiler(P)\n    empiler(Q,x)\n</code></pre> </p> <p>Maintenant il faut remettre la pile P \u00e0 l\u2019\u00e9tat initial, d\u2019o\u00f9 la deuxi\u00e8me partie du programme :  </p> \ud83d\udc0d Script Python<pre><code>while not est_vide(Q):\n    x=depiler(Q)\n    empiler(P,x)\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def max_pile(P,i):\n    # si la pile comporte moins de i \u00e9l\u00e9ment ou que i=0 on renvoie 0\n    if i &gt; hauteur_pile(P) or i==0:\n        return 0\n    maxi = depiler(P)\n    Q = creer_pile_vide()\n    empiler(Q,maxi)\n    j = 1\n    indice = 1\n    while j &lt; i:\n        j = j + 1\n        x = depiler(P)\n        if x &gt; maxi:\n            maxi = x\n            indice = j\n        empiler(Q,x)\n    while not est_vide(Q):\n        empiler(P, depiler(Q))\n    return indice\n</code></pre> <p>Question 3 :</p> <p>Cr\u00e9er une fonction <code>retourner</code> ayant pour param\u00e8tres une pile P et un entier j. Cette fonction inverse l\u2019ordre des j derniers \u00e9l\u00e9ments empil\u00e9s et ne renvoie rien. On pourra utiliser deux piles auxiliaires. Exemple : si P est la pile de laquestion 1(a), apr\u00e8s l\u2019appel de retourner(P, 3), l\u2019\u00e9tat de la pile P sera :</p> <p></p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def retourner(P,j):\n    Q1 = creer_pile_vide()\n    Q2 = creer_pile_vide()\n    i = 0\n    while not est_vide(P) and i &lt; j:\n        i = i + 1\n        x = depiler(P)\n        empiler(Q1, x)\n    while not est_vide(Q1):\n        x = depiler(Q1)\n        empiler(Q2, x)\n    while not est_vide(Q2):\n        x = depiler(Q2)\n        empiler(P, x)\n</code></pre> <p>Question 4 :</p> <p>L\u2019objectif de cette question est de trier une pile de cr\u00eapes. On mod\u00e9lise une pile de cr\u00eapes par une pile d\u2019entiers repr\u00e9sentant le diam\u00e8tre de chaque cr\u00eape. On souhaite r\u00e9ordonner les cr\u00eapes de la plus grande (plac\u00e9e en bas de la pile) \u00e0 la plus petite (plac\u00e9e en haut de la pile). On dispose uniquement d\u2019une spatule que l\u2019on peut ins\u00e9rer dans la pile de cr\u00eapes de fa\u00e7on \u00e0 retourner l\u2019ensemble des cr\u00eapes qui lui sont au-dessus. Le principe est le suivant :  </p> <ul> <li>On recherche la plus grande cr\u00eape.</li> <li>On retourne la pile \u00e0 partir de cette cr\u00eape de fa\u00e7on \u00e0 mettre cette plus grande cr\u00eape tout en haut de la pile.</li> <li>On retourne l\u2019ensemble de la pile de fa\u00e7on \u00e0 ce que cette plus grande cr\u00eape se retrouve tout en bas.</li> <li>La plus grande cr\u00eape \u00e9tant \u00e0 sa place, on recommence le principe avec le reste de la pile</li> </ul> <p>Exemple : </p> <p></p> <p>Cr\u00e9er la fonction <code>tri_crepes</code> ayant pour param\u00e8tre une pile P. Cette fonction trie la pile P selon la m\u00e9thode du tri cr\u00eapes et ne renvoie rien. On utilisera les fonctions cr\u00e9\u00e9es dans les questions pr\u00e9c\u00e9dentes.</p> <p>Exemple : </p> <p>Si la pile P est  apr\u00e8s l\u2019appel de <code>tri_crepes(P)</code>, la pile P devient </p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def tri_crepes(P):\n    N = hauteur_pile(P)\n    i = N\n    while i &gt; 1:\n        j = max_pile(P,i)\n        retourner(P,j)\n        retourner(P,i)\n        i -= 1\n</code></pre>"},{"location":"BAC/pile_file/compilation_pile_file/#sujet-metropole-7-juin-2021-exercice-2","title":"Sujet M\u00e9tropole 7 Juin 2021 - Exercice 2","text":"<p>Exo</p> <p>Cet exercice traite des notions de piles et de programmation orient\u00e9e objet. </p> <p>On cr\u00e9e une classe Pile qui mod\u00e9lise la structure d'une pile d'entiers.  </p> <p>Le constructeur de la classe initialise une pile vide.  </p> <p>La d\u00e9finition de cette classe sans l\u2019impl\u00e9mentation de ses m\u00e9thodes est donn\u00e9e ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n\"\"\"Initialise la pile comme une pile vide.\"\"\"\n\n    def est_vide(self):\n\"\"\"Renvoie True si la liste est vide, False sinon.\"\"\"\n\n    def empiler(self, e):\n\"\"\"Ajoute l'\u00e9l\u00e9ment e sur le sommet de la pile, ne renvoie rien.\"\"\"\n\n    def depiler(self):\n\"\"\"Retire l\u2019\u00e9l\u00e9ment au sommet de la pile et le renvoie.\"\"\"\n\n    def nb_elements(self):\n\"\"\"Renvoie le nombre d'\u00e9l\u00e9ments de la pile. \"\"\"\n\n    def afficher(self):\n\"\"\"Affiche de gauche \u00e0 droite les \u00e9l\u00e9ments de la pile, du fond\n        de la pile vers son sommet. Le sommet est alors l\u2019\u00e9l\u00e9ment\n        affich\u00e9 le plus \u00e0 droite. Les \u00e9l\u00e9ments sont s\u00e9par\u00e9s par une\n        virgule. Si la pile est vide la m\u00e9thode affiche \u00ab pile\n        vide \u00bb.\"\"\"\n</code></pre> <p>Seules les m\u00e9thodes de la classe ci-dessus doivent \u00eatre utilis\u00e9es pour manipuler les objets Pile. </p> <p>Question 1.a</p> <p>\u00c9crire une suite d\u2019instructions permettant de cr\u00e9er une instance de la classe Pile affect\u00e9e \u00e0 une variable <code>pile1</code> contenant les \u00e9l\u00e9ments 7, 5 et 2 ins\u00e9r\u00e9s dans cet ordre. Ainsi, \u00e0 l\u2019issue de ces instructions, l\u2019instruction <code>pile1.afficher()</code> produit l\u2019affichage : 7, 5, 2. </p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>pile1 = Pile()\npile1.empiler(7)\npile1.empiler(5)\npile1.empiler(2)\n</code></pre> <p>Question 1.b</p> <p>Donner l\u2019affichage produit apr\u00e8s l\u2019ex\u00e9cution des instructions suivantes. \ud83d\udc0d Script Python<pre><code>element1 = pile1.depiler()\npile1.empiler(5)\npile1.empiler(element1)\npile1.afficher()\n</code></pre></p> R\u00e9ponse <p>7,5,5,2</p> <p>Question 2.</p> <p>On donne la fonction mystere suivante :  </p> \ud83d\udc0d Script Python<pre><code>def mystere(pile, element):\n    pile2 = Pile()\n    nb_elements = pile.nb_elements()\n    for i in range(nb_elements):\n        elem = pile.depiler()\n        pile2.empiler(elem)\n        if elem == element:\n            return pile2\n    return pile2 \n</code></pre> <p>a. Dans chacun des quatre cas suivants, quel est l\u2019affichage obtenu dans la console ?  </p> <ul> <li>Cas n\u00b01 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;mystere(pile, 2).afficher()\n</code></pre></li> <li> <p>Cas n\u00b02 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;mystere(pile, 9).afficher()\n</code></pre></p> </li> <li> <p>Cas n\u00b03 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;mystere(pile, 3).afficher()\n</code></pre></p> </li> <li> <p>Cas n\u00b04  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.est_vide()\nTrue\n&gt;&gt;&gt;mystere(pile, 3).afficher() \n</code></pre></p> </li> </ul> <p>b. Expliquer ce que permet d\u2019obtenir la fonction <code>mystere</code>.</p> R\u00e9ponse <p>a) </p> <ul> <li> <p>cas n\u00b01 : 3, 2</p> </li> <li> <p>cas n\u00b02 : 3, 2, 5, 7</p> </li> <li> <p>cas n\u00b03 : 3</p> </li> <li> <p>cas n\u00b04 : pile vide</p> </li> </ul> <p>b) </p> <p>La fonction mystere renvoie une pile qui contiendra tous les \u00e9l\u00e9ments de la pile pass\u00e9e en param\u00e8tre (pile) \u00e0 condition qu\u2019ils soient situ\u00e9s au-dessus de l\u2019\u00e9l\u00e9ment pass\u00e9 en param\u00e8tre (element). L\u2019\u00e9l\u00e9ment element sera lui aussi pr\u00e9sent dans la pile renvoy\u00e9e par la fonction.</p> <p>Question 3.</p> <p>\u00c9crire une fonction <code>etendre(pile1, pile2)</code> qui prend en arguments deux objets Pile appel\u00e9s pile1 et pile2 et qui modifie pile1 en lui ajoutant les \u00e9l\u00e9ments de pile2 rang\u00e9s dans l'ordre inverse. Cette fonction ne renvoie rien. On donne ci-dessous les r\u00e9sultats attendus pour certaines instructions.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile1.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;pile2.afficher()\n1, 3, 4\n&gt;&gt;&gt;etendre(pile1, pile2)\n&gt;&gt;&gt;pile1.afficher()\n7, 5, 2, 3, 4, 3, 1\n&gt;&gt;&gt;pile2.est_vide()\nTrue \n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def etendre(pile1, pile2):\n    while not pile2.est_vide():\n        x = pile2.depiler()\n        pile1.empiler(x)\n</code></pre> <p>Question 4.</p> <p>\u00c9crire une fonction supprime_toutes_occurences(pile, element) qui prend en arguments un objet Pile appel\u00e9 pile et un \u00e9l\u00e9ment element et supprime tous les \u00e9l\u00e9ments element de pile. On donne ci-dessous les r\u00e9sultats attendus pour certaines instructions.  </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3, 5\n&gt;&gt;&gt;supprime_toutes_occurences (pile, 5)\n&gt;&gt;&gt;pile.afficher()\n7, 2, 3\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def supprime_toutes_occurences(pile, element):\n    p2 = Pile()\n    while not pile.est_vide():\n        x = pile.depiler()\n        if x != element:\n            p2.empiler(x)\n    while not p2.est_vide():\n        x = p2.depiler()\n        pile.empiler(x)\n</code></pre>"},{"location":"BAC/pile_file/compilation_pile_file/#sujet-centres-etrangers-2021-exercice-5","title":"Sujet Centres-Etrangers 2021 - Exercice 5","text":"<p>Exo</p> <p>Notion abord\u00e9e : structures de donn\u00e9es : les piles. </p> <p>Dans cet exercice, on consid\u00e8re une pile d'entiers positifs. On suppose que les quatre fonctions suivantes ont \u00e9t\u00e9 programm\u00e9es pr\u00e9alablement en langage Python : \ud83d\udc0d Script Python<pre><code>        empiler(P, e) : ajoute l'\u00e9l\u00e9ment e sur la pile P ;\n        depiler(P) : enl\u00e8ve le sommet de la pile P et retourne la valeur de ce sommet ;\n        est_vide(P) : retourne True si la pile est vide et False sinon ;\n        creer_pile() : retourne une pile vide.\n</code></pre></p> <p>Dans cet exercice, seule l'utilisation de ces quatre fonctions sur la structure de donn\u00e9es pile est autoris\u00e9e.</p> <p>Question 1.</p> <p>Recopier le sch\u00e9ma ci-dessous et le compl\u00e9ter sur votre copie en ex\u00e9cutant les appels de fonctions donn\u00e9s. On \u00e9crira ce que renvoie la fonction utilis\u00e9e dans chaque cas, et on indiquera None si la fonction ne retourne aucune valeur. </p> <p></p> R\u00e9ponse <p></p> <p>Question 2.</p> <p>On propose la fonction ci-dessous, qui prend en argument une pile P et renvoie un couple de piles :</p> \ud83d\udc0d Script Python<pre><code>    def transforme(P) :\n        Q = creer_pile()\n        while not est_vide(P) :\n            v = depile(P)\n            empile(Q,v)\n        return (P,Q)\n</code></pre> <p>Recopier et compl\u00e9ter sur votre copie le document ci-dessous </p> <p></p> R\u00e9ponse <p></p> <p>Question 3.</p> <p>Ecrire une fonction en langage Python <code>maximum(P)</code> recevant une pile P comme argument et qui renvoie la valeur maximale de cette pile. On ne s\u2019interdit pas qu\u2019apr\u00e8s ex\u00e9cution de la fonction, la pile soit vide.  </p> <p>On souhaite conna\u00eetre le nombre d\u2019\u00e9l\u00e9ments d\u2019une pile \u00e0 l\u2019aide de la fonction <code>taille(P)</code></p> <p></p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def maximum(P):\n    m=depiler(P)\n    while not est_vide(P):\n        v = depiler(P)\n        if v &gt; m:\n            m = v\n    return m\n</code></pre> <p>Question 4.</p> <p>a. Proposer une strat\u00e9gie \u00e9crite en langage naturel et/ou expliqu\u00e9e \u00e0 l\u2019aide de sch\u00e9mas, qui permette de mettre en place une telle fonction. b. Donner le code Python de cette fonction <code>taille(P)</code> (on pourra utiliser les cinq fonctions d\u00e9j\u00e0 programm\u00e9es).</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def taille(P):\n    cmp = 0\n    Q = creer_pile()\n    while not est_vide(P):\n        v = depiler(P)\n        empiler(Q,v)\n        cmp = cmp + 1\n    while not est_vide(Q):\n        v = depiler(Q)\n        empiler(P,v)\n    return cmp\n</code></pre>"},{"location":"BAC/pile_file/compilation_pile_file/#metropole-juin-2021-sujet-2","title":"M\u00e9tropole Juin 2021 - Sujet 2","text":"<p>Exo</p> <p>Cet exercice porte sur les structures de donn\u00e9es lin\u00e9aires </p> <p>Une m\u00e9thode simple pour g\u00e9rer l'ordonnancement des processus est d'ex\u00e9cuter les processus en une seule fois et dans leur ordre d'arriv\u00e9e.</p> <p>Question 1</p> <p>Parmi les propositions suivantes, quelle est la structure de donn\u00e9es la plus appropri\u00e9e pour mettre en \u0153uvre le mode FIFO (First In First Out) ?  </p> <p>a. liste b. dictionnaire c. pile d. file   </p> R\u00e9ponse <p>r\u00e9ponse d une file</p> <p>Question 2</p> <p>On choisit de stocker les donn\u00e9es des processus en attente \u00e0 l'aide d'une liste Python lst. On dispose d\u00e9j\u00e0 d'une fonction <code>retirer(lst)</code> qui renvoie l'\u00e9l\u00e9ment <code>lst[0]</code> puis le supprime de la liste <code>lst</code>. \u00c9crire en Python le code d'une fonction <code>ajouter(lst, proc)</code> qui ajoute \u00e0 la fin de la liste <code>lst</code> le nouveau processus en attente <code>proc</code>. </p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def ajouter(lst,proc)\n    lst.append(proc)\n</code></pre> <p>On choisit maintenant d'impl\u00e9menter une file <code>file</code> \u00e0 l'aide d'un couple (<code>p1,p2)</code>o\u00f9 <code>p1</code> et <code>p2</code> sont des piles. Ainsi <code>file[0]</code> et <code>file[1]</code> sont respectivement les piles <code>p1</code> et <code>p2</code>. Pour enfiler un nouvel \u00e9l\u00e9ment <code>elt</code> dans <code>file</code>, on l'empile dans <code>p1</code>. Pour d\u00e9filer <code>file</code>, deux cas se pr\u00e9sentent. </p> <ul> <li>La pile <code>p2</code> n'est pas vide : on d\u00e9pile <code>p2</code>.</li> <li>La pile <code>p2</code> est vide : on d\u00e9pile les \u00e9l\u00e9ments de <code>p1</code> en les empilant dans <code>p2</code> jusqu'\u00e0 ce que <code>p1</code> soit vide, puis on d\u00e9pile <code>p2</code>.</li> </ul> <p></p> <p>Question 3</p> <p>On consid\u00e8re la situation repr\u00e9sent\u00e9e ci-dessous.  </p> <p></p> <p>On ex\u00e9cute la s\u00e9quence d'instructions suivante :</p> \ud83d\udc0d Script Python<pre><code>enfiler(file,ps6)\ndefiler(file)\ndefiler(file)\ndefiler(file)\nenfiler(file,ps7)\n</code></pre> <p>Repr\u00e9senter le contenu final des deux piles \u00e0 la suite de ces instructions. </p> R\u00e9ponse <p> </p> <p>Question 4</p> <p>On dispose des fonctions :</p> <ul> <li><code>empiler(p,elt)</code> qui empile l'\u00e9l\u00e9ment <code>elt</code> dans la pile <code>p</code>,  </li> <li><code>depiler(p)</code> qui renvoie le sommet de la pile <code>p</code> si <code>p</code> n'est pas vide et le supprime,  </li> <li><code>pile_vide(p)</code> qui renvoie <code>True</code> si la pile <code>p</code> est vide, <code>False</code> si la pile <code>p</code> n'est pas vide.   </li> </ul> <p>a. \u00c9crire en Python une fonction est_<code>vide(f)</code> qui prend en argument un couple de piles <code>f</code> et qui renvoie <code>True</code> si la file repr\u00e9sent\u00e9e par <code>f</code> est vide, <code>False</code> sinon. </p> <p>b. \u00c9crire en Python une fonction <code>enfiler(f,elt)</code> qui prend en arguments un couple de piles <code>f</code> et un \u00e9l\u00e9ment <code>elt</code> et qui ajoute <code>elt</code> en queue de la file repr\u00e9sent\u00e9e par <code>f</code>. </p> <p>c. \u00c9crire en Python une fonction <code>defiler(f)</code> qui prend en argument un couple de piles <code>f</code> et qui renvoie l'\u00e9lement en t\u00eate de la file repr\u00e9sent\u00e9e par <code>f</code> en le retirant. </p> R\u00e9ponse <p>4.a \ud83d\udc0d Script Python<pre><code>def est_vide(f):\n    return pile_vide(f[0]) and pile_vide(f[1])\n</code></pre> 4.b \ud83d\udc0d Script Python<pre><code>def enfiler(f,elt):\n    empiler(f[0],elt)\n</code></pre></p> <p>4.c* \ud83d\udc0d Script Python<pre><code>def defiler(f):\n    p1 = f[0]\n    p2 = f[1]\n    if pile_vide(p2):\n        while not pile_vide(p1):\n            v = depiler(p1)\n            empiler(p2,v)\n    return depiler(p2)\n</code></pre></p>"},{"location":"BAC/pile_file/compilation_pile_file/#amerique-du-nord-2021-sujet-2","title":"Am\u00e9rique du Nord 2021 - Sujet 2","text":"<p>Cet exercice porte sur la notion de pile, de file et sur la programmation de base en Python.</p> <p>Les interfaces des structures de donn\u00e9es abstraites Pile et File sont propos\u00e9es ci-dessous.</p> <p>On utilisera uniquement les fonctions ci-dessous :</p> <p>Structure de donn\u00e9es abstraite : Pile </p> <p>Utilise : </p> <ul> <li>\u00c9l\u00e9ments, Bool\u00e9en</li> </ul> <p>Op\u00e9rations :  </p> <ul> <li>creer_pile_vide : \u2205 \u2192 Pile     creer_pile_vide() renvoie une pile vide</li> <li>est_vide : Pile \u2192 Bool\u00e9en      est_vide(pile) renvoie True si pile est vide, False sinon</li> <li>empiler : Pile, \u00c9l\u00e9ment \u2192 Rien     empiler(pile, element) ajoute element au sommet de la pile</li> <li>depiler : Pile \u2192 \u00c9l\u00e9ment     depiler(pile) renvoie l\u2019\u00e9l\u00e9ment au sommet de la pile en le retirant de la pile</li> </ul> <p>Structure de donn\u00e9es abstraite : File </p> <p>Utilise : </p> <ul> <li>\u00c9l\u00e9ments, Bool\u00e9en</li> </ul> <p>Op\u00e9rations :  </p> <ul> <li>creer_file_vide : \u2205 \u2192 File     creer_file_vide() renvoie une file vide</li> <li>est_vide : File \u2192 Bool\u00e9en      est_vide(file) renvoie True si file est vide, False sinon</li> <li>empiler : File, \u00c9l\u00e9ment \u2192 Rien     empiler(file, element) ajoute element dans la file</li> <li>depiler : File \u2192 \u00c9l\u00e9ment     depiler(file) renvoie l\u2019\u00e9l\u00e9ment au sommet de la file en le retirant de la file</li> </ul> <p>Question 1</p> <p>(a) On consid\u00e8re la file F suivante :  </p> <p></p> <p>Quel sera le contenu de la pile P et de la file F apr\u00e8s l\u2019ex\u00e9cution du programme Python suivant ?</p> \ud83d\udc0d Script Python<pre><code>P = creer_pile_vide ()\nwhile not( est_vide (F )):\n    empiler (P, defiler (F))\n</code></pre> <p>(b) Cr\u00e9er une fonction <code>taille_file</code> qui prend en param\u00e8tre une file <code>F</code> et qui renvoie le nombre d\u2019\u00e9l\u00e9ments qu\u2019elle contient. Apr\u00e8s appel de cette fonction la file <code>F</code> doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.</p> \ud83d\udc0d Script Python<pre><code>def taille_file (F):\n\"\"\" File -&gt; Int \"\"\"\n</code></pre> R\u00e9ponse <p>1.a** </p> <p>1.b \ud83d\udc0d Script Python<pre><code>def taille_file(F):\n    t = 0\n    ft = creer_file_vide()\n    while not est_vide(F):\n        t = t + 1\n        enfiler(ft, defiler(F))\n    while not est_vide(ft):\n        enfiler(F, defiler(ft))\n    return t   \n</code></pre></p> <p>Question 2</p> <p>\u00c9crire une fonction former_pile qui prend en param\u00e8tre une file <code>F</code> et qui renvoie une pile <code>P</code> contenant les m\u00eames \u00e9l\u00e9ments que la file. Le premier \u00e9l\u00e9ment sorti de la file devra se trouver au sommet de la pile ; le deuxi\u00e8me \u00e9l\u00e9ment sorti de la file devra se trouver juste en-dessous du sommet, etc. Exemple :  <code>former_pile(F)</code> va renvoyer la pile P ci-dessous :</p> <p></p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def former_pile(F):\n    p = creer_pile_vide()\n    pt = creer_pile_vide()\n    while not est_vide(F):\n        empiler(pt,defiler(F))\n    while not est_vide(pt):\n        empiler(p,depiler(pt))\n    return p\n</code></pre> <p>Question 3</p> <p>\u00c9crire une fonction <code>nb_elements</code> qui prend en param\u00e8tres une file <code>F</code> et un \u00e9l\u00e9ment <code>elt</code> et qui renvoie le nombre de fois o\u00f9 <code>elt</code> est pr\u00e9sent dans la file <code>F</code>.   Apr\u00e8s appel de cette fonction la file <code>F</code> doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def nb_elements(F, ele):\n    nb = 0\n    ft = creer_file_vide()\n    while not est_vide(F):\n        x = defiler(F)\n        if x==ele:\n            nb = nb + 1\n        enfiler(ft, x)\n    while not est_vide(ft):\n        enfiler(F, defiler(ft))\n    return nb\n</code></pre> <p>Question 4</p> <p>\u00c9crire une fonction <code>verifier_contenu</code> qui prend en param\u00e8tres une file F et trois entiers : <code>nb_rouge</code>, <code>nb_vert</code> et <code>nb_jaune</code>. Cette fonction renvoie le bool\u00e9en <code>True</code> si \"rouge\" appara\u00eet au plus <code>nb_rouge</code> fois dans la file <code>F</code>, \"vert\" appara\u00eet au plus <code>nb_vert</code> fois dans la file <code>F</code> et \"jaune\" appara\u00eet au plus <code>nb_jaune</code> fois dans la file <code>F</code>. Elle renvoie <code>False</code> sinon. On pourra utiliser les fonctions pr\u00e9c\u00e9dentes.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def verifier_contenu(F, nb_rouge, nb_vert, nb_jaune):\n    return nb_elements(F, \"rouge\") &lt;= nb_rouge and nb_elements(F,\"vert\") &lt;= nb_vert and nb_elements(F, \"jaune\") &lt;= nb_jaune\n</code></pre>"},{"location":"BAC/pile_file/data/TD13_Piles/","title":"TD13 Piles","text":"TD n\u00b013 : Structures de donn\u00e9es - Les Piles Th\u00e8me 1 : Structures de donn\u00e9es COURS et EXERCICES <p>Les piles et les files sont deux structures de donn\u00e9es lin\u00e9aires qui permettent, au m\u00eame titre que les listes, de g\u00e9rer des s\u00e9quences d\u2019\u00e9l\u00e9ments. Ainsi, dans une pile et dans une file chaque \u00e9l\u00e9ment est \u00e9ga- lement rep\u00e9r\u00e9 par sa position, il y a un premier, un dernier, chaque \u00e9l\u00e9ment a un successeur (sauf le premier) et un pr\u00e9d\u00e9cesseur (sauf le dernier). Les op\u00e9rations disponibles pour ces deux structures sont assez proches car dans les deux cas, on veut pouvoir : * cr\u00e9er une pile/file vide * conna\u00eetre sa taille * lui ajouter un \u00e9l\u00e9ment * lui retirer un \u00e9l\u00e9ment * acc\u00e9der \u00e0 un \u00e9l\u00e9ment particulier</p> <p>Cependant, la politique d\u2019ajout/retrait des \u00e9l\u00e9ments dans la s\u00e9quence n\u2019est pas la m\u00eame. Le nom des op\u00e9rations diff\u00e8rent \u00e9galement pour mieux distinguer les deux structures.</p> I. Les Piles  <p>Il faut se repr\u00e9senter une pile comme. . . une pile de livres ! Seul le livre dispos\u00e9 sur le dessus est accessible : l\u2019ajout et le retrait d\u2019un livre ne peut donc se faire que sur le sommet de la pile. </p> <p></p>"},{"location":"BAC/pile_file/data/TD13_Piles/#interface-dune-pile","title":"\u27a1 Interface d'une pile","text":"<p>Interface d'une pile</p> <p>Le jeu d'op\u00e9rations disponibles pour une pile est :</p> <ul> <li><code>construire_pile()</code> : cr\u00e9e une pile vide</li> <li><code>taille(P)</code> : acc\u00e8s au nombre d'\u00e9l\u00e9ments dans la pile <code>P</code></li> <li><code>empiler(P, e)</code> : ajoute l'\u00e9l\u00e9ment <code>e</code> au sommet de la pile <code>P</code>.</li> <li><code>depiler(P)</code> : retire l'\u00e9l\u00e9ment au sommet de la pile <code>P</code>. Pr\u00e9condition : <code>P</code> n'est pas vide.</li> <li><code>sommet(P)</code> : pour acc\u00e9der (en lecture) au sommet de la pile <code>P</code> (sans le retirer de la pile). Pr\u00e9condition : <code>P</code> n'est pas vide.</li> </ul> <p>En anglais, l'op\u00e9ration <code>empiler</code> est souvent not\u00e9e <code>push</code>, l'op\u00e9ration <code>depiler</code> est souvent not\u00e9e <code>pop</code> et l'op\u00e9ration <code>taille</code> est souvent not\u00e9e <code>top</code>.</p> <p>Remarque : Certaines signatures algorithmiques peuvent l\u00e9g\u00e8rement varier. Par exemple, on peut parfois voir l'op\u00e9ration <code>est_vide</code> (qui teste si une pile est vide) \u00e0 la place de <code>taille</code> (une pile est vide si et seulement si sa taille vaut 0) ou encore l'op\u00e9ration <code>depiler</code> qui renvoie \u00e9galement le sommet (donc l'op\u00e9ration <code>sommet</code> n'est plus n\u00e9cessaire). C'est un choix libre qui ne change pas la nature de la structure de donn\u00e9es abstraite mais la fa\u00e7on d'\u00e9crire des algorithmes.</p>"},{"location":"BAC/pile_file/data/TD13_Piles/#representation-dune-pile-et-exemple","title":"\u27a1 Repr\u00e9sentation d'une pile et exemple","text":"<p>Une pile contenant les \u00e9l\u00e9ments \\(\\text{'a'}\\), \\(\\text{'b'}\\) et \\(\\text{'c'}\\) (\\(\\text{'a'}\\) \u00e9tant le sommet et donc \\(\\text{'c'}\\) le fond de la pile) sera repr\u00e9sent\u00e9e : </p> \\[\\text{&gt;'a', 'b', 'c']}\\] <p>Exemple</p> <p>On consid\u00e8re la pile <code>P</code> :  \\(\\text{&gt;'a', 'b', 'c']}\\). Voici comment la manipuler :</p> Op\u00e9ration Contenu de la pile <code>empiler(P, 'e')</code> \\(\\text{&gt;'e', 'a', 'b', 'c']}\\) <code>depiler(P)</code> \\(\\text{&gt;'a', 'b', 'c']}\\) <code>depiler(P)</code> \\(\\text{&gt;'b', 'c']}\\) <code>sommet(P)</code> renvoie \\(\\text{'b'}\\) <code>depiler(P)</code> \\(\\text{&gt;'c']}\\) <code>empiler(P, 'm')</code> \\(\\text{&gt;'m', 'c']}\\) <code>taille(P)</code> renvoie 2"},{"location":"BAC/pile_file/data/TD13_Piles/#applications-des-piles","title":"\u27a1 Applications des piles","text":"<p>Les piles sont tr\u00e8s utilis\u00e9es en informatique. Voici quelques usages caract\u00e9ristiques :</p> <ul> <li>Les algorithmes r\u00e9cursifs utilisent une pile d'appel pour m\u00e9moriser les contextes d'ex\u00e9cution de chaque appel. (d\u00e9j\u00e0 abord\u00e9)</li> <li>Dans un navigateur web, une pile sert \u00e0 m\u00e9moriser les pages Web visit\u00e9es. L'adresse de chaque nouvelle page visit\u00e9e est empil\u00e9e et l'utilisateur d\u00e9pile l'adresse courante pour acc\u00e9der \u00e0 la page pr\u00e9c\u00e9dente en cliquant le bouton \u00ab Afficher la page pr\u00e9c\u00e9dente \u00bb.</li> <li>La fonction \u00ab Annuler la frappe \u00bb (en anglais Undo, le c\u00e9l\u00e8bre CTRL+F) d'un traitement de texte m\u00e9morise les modifications apport\u00e9es au texte dans une pile.</li> <li>On peut aussi utiliser une pile pour parcourir (en profondeur) un graphe et m\u00e9moriser les sommets visit\u00e9s. (voir Th\u00e8me 5 : Algorithmique)</li> <li>La v\u00e9rification du bon parenth\u00e9sage d'une expression peur \u00e9galement se faire \u00e0 l'aide d'une pile.</li> <li>etc.</li> </ul>"},{"location":"BAC/pile_file/data/TD13_Piles/#implementations","title":"\u27a1 Impl\u00e9mentations","text":"<p>Une pile est g\u00e9n\u00e9ralement impl\u00e9ment\u00e9e par :  </p> <ul> <li>un tableau (redimensionnable ou non) </li> <li>ou par une liste cha\u00een\u00e9e. </li> </ul> <p>Selon le cas, il faudra veiller \u00e0 ce que l'impl\u00e9mentation soit la plus efficace possible.</p> <ul> <li>Si on utilise un tableau, les op\u00e9rations <code>empiler</code> et <code>depiler</code> seront plus efficaces si elles se font \u00e0 la fin du tableau plut\u00f4t qu'au d\u00e9but car cela ne n\u00e9cessite pas de d\u00e9caler les autres \u00e9l\u00e9ments. </li> <li>En revanche, si on utilise une liste cha\u00een\u00e9e, elles seront plus efficaces si elles ont lieu au d\u00e9but (car pour acc\u00e9der au dernier \u00e9l\u00e9ment il faut parcourir tous les \u00e9l\u00e9ments de proche en proche \u00e0 partir du premier qui est le seul accessible). </li> </ul>  II. Exercices sur les piles  Activit\u00e9 1 : Manipulation des piles <ol> <li>On consid\u00e8re la s\u00e9quence d'instructions suivantes. Indiquez le r\u00e9sultat \u00e0 chaque \u00e9tape.     \ud83d\udccb Texte<pre><code>P = construire_pile()\nempiler(P, 1)\nempiler(P, 2)\nempiler(P, 3)\ns = sommet(P)\ndepiler(P)\ndepiler(P)\nempiler(P, s)\n</code></pre></li> <li>Ecrivez la s\u00e9quence d'instructions permettant d'obtenir l'\u00e9volution suivante pour une pile <code>P</code>.</li> </ol> Etat de la pile P Instructions (\u00e0 compl\u00e9ter) \\(\\text{&gt;]}\\) \\(\\text{&gt;3]}\\) \\(\\text{&gt;1, 3]}\\) \\(\\text{&gt;4, 1, 3]}\\) \\(\\text{&gt;1, 3]}\\) \\(\\text{&gt;3]}\\) \\(\\text{&gt;]}\\)  Activit\u00e9 2 : Premi\u00e8re impl\u00e9mentation d'une pile (avec le type `list` de Python) <p>Interface</p> <p>On d\u00e9finit le type abstrait <code>Pile</code> par ses op\u00e9rations :</p> <ul> <li>cr\u00e9ation de pile vide</li> <li><code>empiler</code> : ajout au sommet</li> <li><code>depiler</code> : retrait du sommet</li> <li><code>sommet</code> : acc\u00e8s (en lecture) au sommet</li> <li><code>taille</code> : acc\u00e8s au nombre d'\u00e9l\u00e9ments</li> </ul> <p>L'objectif est d'impl\u00e9menter ce type abstrait en utilisant le type pr\u00e9d\u00e9fini <code>list</code> de Python (tableau dynamique = redimensionnable). Les \u00e9l\u00e9ments sont ajouter/retirer \u00e0 la fin pour des raisons d'efficacit\u00e9. Vous utiliserez le paradigme objet.</p> <p>Question 1</p> Enonc\u00e9Solution <p>Cr\u00e9ez une classe <code>Pile</code> impl\u00e9mentant ce type abstrait. Les objets de cette classe auront un attribut appel\u00e9 <code>contenu</code> qui est le contenu de la pile stock\u00e9 un objet <code>list</code> de Python. Indication : il faudra utiliser les m\u00e9thodes <code>append</code> et <code>pop</code> du type <code>list</code>. \ud83d\udc0d Script Python<pre><code>\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.contenu=[]\n\n    def empiler(self,e):\n        self.contenu.append(e)\n\n    def depiler(self):\n        if self.contenu!=[]:\n            self.contenu.pop()\n    def sommet(self):\n        if self.contenu!=[]:\n            return self.contenu[-1]\n\n    def taille(self):\n        return len(self.contenu)        \n</code></pre> <p>Question 2</p> Enonc\u00e9Solution <p>D\u00e9finissez la m\u00e9thode sp\u00e9ciale <code>__repr__</code> pour afficher le contenu d'une pile comme une <code>list</code> Python. </p> <p>Attention : la m\u00e9thode <code>__repr__</code> doit renvoyer une cha\u00eene de caract\u00e8res (conversion avec la fonction <code>str</code>). \ud83d\udc0d Script Python<pre><code>\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.contenu=[]\n\n    def empiler(self,e):\n        self.contenu.append(e)\n\n    def depiler(self):\n        if self.contenu!=[]:\n            self.contenu.pop()\n\n    def sommet(self):\n        if self.contenu!=[]:\n            return self.contenu[-1]\n\n    def taille(self):\n        return len(self.contenu)\n\n    def __repr__(self):\n        ch = \"\"\n        for e in self.contenu:\n            ch = str(e) + \",\" + ch # ne pas oublier de convertir les \u00e9l\u00e9ments en chaine de caract\u00e8res\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = \"&gt;\" + ch+']'\n        return ch\n</code></pre> <p>Question 3</p> <p>Modifiez la m\u00e9thode <code>__repr__</code> pour afficher les piles avec la notation du cours : \\(\\text{&gt;...]}\\). Attention \u00e0 l'odre des \u00e9l\u00e9ments, dans cette repr\u00e9sentation le sommet de la pile est \u00e0 gauche. \ud83d\udc0d Script Python<pre><code>\n</code></pre></p> <p>Exemple</p> <p>on souhaite que le code</p> \ud83d\udc0d Script Python<pre><code>P = Pile()\nprint(P)\nP.empiler('a')\nprint(P)\nP.empiler('c')\nprint(P)\nP.empiler('b')\nprint(P)\nP.depiler()\nprint(P)\nP.empiler('z')\nprint(P)\n</code></pre> <p>produise l'affichage</p> \ud83d\udccb Texte<pre><code>&gt;]\n&gt;a]\n&gt;c,a]\n&gt;b,c,a]\n&gt;c,a]\n&gt;z,c,a]\n</code></pre>  Activit\u00e9 3 : Renverser un objet <p>On souhaite renverser une liste en utilisant une pile. Renverser la liste <code>[1, 2, 3]</code> donne une nouvelle liste <code>[3, 2, 1]</code>.</p> <p>Question 1 :</p> <p>Proposez l'algorithme d'une fonction <code>renverser</code> permettant de renverser une liste en utilisant une pile.</p> <p>Question 2</p> Enonc\u00e9Solution <p>Ecrivez une fonction <code>renverse(L)</code> qui permet de renverser une liste <code>L</code>.</p> \ud83d\udc0d Script Python<pre><code>def renverser(P):\n    P1=Pile()\n    for k in range(P.taille()):\n        v=P.sommet()\n        P.depiler()\n        P1.empiler(v)\n\n    return P1\n</code></pre> \ud83d\udc0d Script Python<pre><code>#Test\nP= Pile()\nP.empiler('a')\nP.empiler('c')\nP.empiler('b')\nP.depiler()\nP.empiler('z')\nprint(P)\n\n\nP=renverser(P)\nprint(P)\n</code></pre>  Activit\u00e9 4 : V\u00e9rifier le bon parenth\u00e9sage d'une expression <p>Voici deux expressions mal parenth\u00e9s\u00e9es : \\(2(x-1)(4(x+3)\\) et \\(2(x-1))(4(x+3)\\)</p> <p>En voici une bien parenth\u00e9s\u00e9e : \\(3(x-1)(4(x+3)-2)\\).</p> <p>On souhaite \u00e9crire une fonction <code>verif_parenthesage(expression)</code> qui renvoie Vrai si l'expression pass\u00e9e en argument est bien parenth\u00e9s\u00e9e et Faux sinon. On suppose que l'expression est une cha\u00eene de caract\u00e8res</p> <p>Sp\u00e9cification :  </p> <ul> <li>Entr\u00e9e : une cha\u00eene de caract\u00e8res <code>expression</code></li> <li>Sortie : un bool\u00e9en <code>OK</code></li> <li>R\u00f4le : <code>OK = Vrai</code> si et seulement si le parenth\u00e9sage dans <code>expression</code> est correct</li> <li>Pr\u00e9condition : les caract\u00e8res \u00e0 tester sont <code>(</code> et <code>)</code>.</li> </ul> <p>Id\u00e9e de l'algorithme :  </p> <ul> <li>On consulte les caract\u00e8res un \u00e0 un dans l'ordre de la cha\u00eene</li> <li>Si on voit une parenth\u00e8se ouvrante, il faut attendre pour trouver la fermante correspondante. On peut ajouter cette parenth\u00e8se ouvrante \u00e0 une pile en attendant de trouver la fermante correspondante.</li> <li>Si on voit une fermante, la derni\u00e8re ouvrante qui n'a pas encore \u00e9t\u00e9 associ\u00e9e, celle au sommet de la pile, doit normalement lui correspondre.</li> </ul> <p>Comme on a besoin de trouver la derni\u00e8re parenth\u00e8se ouvrante pas encore associ\u00e9e, une pile est appropri\u00e9e pour conserver les ouvrantes non encore associ\u00e9es car la derni\u00e8re se trouve alors au sommet de la pile (donc facilement accessible).</p> <p>Question 1</p> <p>Proposez un jeu de tests de qualit\u00e9 pour cette fonction avec des <code>assert</code>.</p> \ud83d\udc0d Script Python<pre><code>\n</code></pre> <p>Question 2</p> <p>Ecrivez une fonction <code>verif_parenthesage(expression)</code> qui convient. Elle doit passer tous les tests avec succ\u00e8s bien s\u00fbr.</p> \ud83d\udc0d Script Python<pre><code>def verif_parenthesage(expression):\n    OK = True\n    P = Pile() # cr\u00e9ation pile vide\n    # \u00e0 compl\u00e9ter\n\n\n\n# jeu de tests \u00e0 recopier ici\n</code></pre>  Activit\u00e9 5 : Deuxi\u00e8me impl\u00e9mentation d'une pile (avec des listes cha\u00een\u00e9es) <p>Importez la classe <code>ListeChainee</code> du TD 12 listechainee.py qui a \u00e9t\u00e9 cr\u00e9\u00e9 dans l'activit\u00e9 sur les listes cha\u00een\u00e9es puis impl\u00e9mentez une classe <code>Pile</code> par une liste cha\u00een\u00e9e. On rappelle que les op\u00e9rations d'ajout/retrait pour une liste cha\u00een\u00e9e sont efficaces au t\u00eate de liste.</p> \ud83d\udc0d Script Python<pre><code>\n</code></pre>  III. Exercices sur les piles - Sujet BAC  Sujet z\u00e9ro - Exercice 1 <p>Cet exercice porte sur la notion de pile et sur la programmation de base en Python. </p> <p>On rappelle qu\u2019une pile est une structure de donn\u00e9es abstraite fond\u00e9e sur le principe \u00ab dernier arriv\u00e9, premier sorti \u00bb :</p> <p></p> <p>On munit la structure de donn\u00e9es Pile de quatre fonctions primitives d\u00e9finies dans le tableau ci-dessous. :  </p> <p>Structure de donn\u00e9es abstraite : Pile </p> <p>Utilise : \u00c9l\u00e9ments, Bool\u00e9en</p> <p>Op\u00e9rations :  </p> <ul> <li>creer_pile_vide : \u2205 \u2192 Pile     creer_pile_vide() renvoie une pile vide</li> <li>est_vide : Pile \u2192 Bool\u00e9en      est_vide(pile) renvoie True si pile est vide, False sinon</li> <li>empiler : Pile, \u00c9l\u00e9ment \u2192 Rien     empiler(pile, element) ajoute element au sommet de la pile</li> <li>depiler : Pile \u2192 \u00c9l\u00e9ment     depiler(pile) renvoie l\u2019\u00e9l\u00e9ment au sommet de la pile en le retirant de la pile</li> </ul> <p>Question 1 :</p> Enonc\u00e9Solution <p>On suppose dans cette question que le contenu de la pile P est le suivant (les \u00e9l\u00e9ments \u00e9tant empil\u00e9s par le haut) :</p> <p></p> <p>Quel sera le contenu de la pile Q apr\u00e8s ex\u00e9cution de la suite d\u2019instructions suivante ?  </p> \ud83d\udccb Texte<pre><code>1  Q = creer_pile_vide ()\n2    while not est_vide ( P ):\n3       empiler (Q , depiler ( P ))\n</code></pre> <p></p> <p>Question 2 : </p> Enonc\u00e9Solution 1Solution 2 <ol> <li>On appelle hauteur d\u2019une pile le nombre d\u2019\u00e9l\u00e9ments qu\u2019elle contient. La fonction hauteur_pile prend en param\u00e8tre une pile P et renvoie sa hauteur. Apr\u00e8s appel de cette fonction, la pile P doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.  Exemple : si P est la pile de la question 1 : <code>hauteur_pile(P) = 4</code>. Recopier et compl\u00e9ter sur votre copie le programme Python suivant impl\u00e9mentant la fonction <code>hauteur_pile</code> en rempla\u00e7ant les ??? par les bonnes instructions.</li> </ol> <p>\ud83d\udccb Texte<pre><code>1 def hauteur_pile ( P ):\n2   Q = creer_pile_vide ()\n3   n = 0\n4   while not ( est_vide ( P )):\n5     ???\n6     x = depiler (P )\n7     empiler (Q ,x )\n8   while not ( est_vide ( Q )):\n9     ???\n10    empiler (P , x )\n11  return ???\n</code></pre> 2. Cr\u00e9er une fonction <code>max_pile</code> ayant pour param\u00e8tres une pile P et un entier i. Cette fonction renvoie la position j de l\u2019\u00e9l\u00e9ment maximum parmi les i derniers \u00e9l\u00e9ments empil\u00e9s de la pile P. Apr\u00e8s appel de cette fonction, la pile P devra avoir retrouv\u00e9 son \u00e9tat d\u2019origine. La position du sommet de la pile est 1. Exemple : si P est la pile de la question 1 : <code>max_pile(P, 2) = 1</code></p> <ol> <li>\ud83d\udc0d Script Python<pre><code>def hauteur_pile(P):\n    Q=creer_pile_vide()\n    n=0\n    while not est_vide(P):\n        n+=1\n        x=depiler(P)\n        empiler(Q,x)\n    while not est_vide(Q):\n        x=depiler(Q)\n        empiler(P,x)\n    return n\n</code></pre></li> </ol> <p>Explication </p> <p>\ud83d\udc0d Script Python<pre><code>Q=creer_pile_vide()\nn=0\n</code></pre> On initialise Q est vide et n = 0</p> <p>\ud83d\udc0d Script Python<pre><code>while not est_vide(P):\n    n+=1\n    x=depiler(P)\n    empiler(Q,x)\n</code></pre> </p> <p>Maintenant il faut remettre la pile P \u00e0 l\u2019\u00e9tat initial, d\u2019o\u00f9 la deuxi\u00e8me partie du programme :  </p> \ud83d\udc0d Script Python<pre><code>while not est_vide(Q):\n    x=depiler(Q)\n    empiler(P,x)\n</code></pre> <ol> <li>\ud83d\udc0d Script Python<pre><code>def max_pile(P,i):\n    # si la pile comporte moins de i \u00e9l\u00e9ment ou que i=0 on renvoie 0\n    if i &gt; hauteur_pile(P) or i==0:\n        return 0\n    maxi = depiler(P)\n    Q = creer_pile_vide()\n    empiler(Q,maxi)\n    j = 1\n    indice = 1\n    while j &lt; i:\n        j = j + 1\n        x = depiler(P)\n        if x &gt; maxi:\n            maxi = x\n            indice = j\n        empiler(Q,x)\n    while not est_vide(Q):\n        empiler(P, depiler(Q))\n    return indice\n</code></pre></li> </ol> <p>Question 3 :</p> Enonc\u00e9Solution <p>Cr\u00e9er une fonction <code>retourner</code> ayant pour param\u00e8tres une pile P et un entier j. Cette fonction inverse l\u2019ordre des j derniers \u00e9l\u00e9ments empil\u00e9s et ne renvoie rien. On pourra utiliser deux piles auxiliaires. Exemple : si P est la pile de laquestion 1(a), apr\u00e8s l\u2019appel de retourner(P, 3), l\u2019\u00e9tat de la pile P sera :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def retourner(P,j):\n    Q1 = creer_pile_vide()\n    Q2 = creer_pile_vide()\n    i = 0\n    while not est_vide(P) and i &lt; j:\n        i = i + 1\n        x = depiler(P)\n        empiler(Q1, x)\n    while not est_vide(Q1):\n        x = depiler(Q1)\n        empiler(Q2, x)\n    while not est_vide(Q2):\n        x = depiler(Q2)\n        empiler(P, x)\n</code></pre> <p>Question 4 : </p> Enonc\u00e9Solution <p>L\u2019objectif de cette question est de trier une pile de cr\u00eapes. On mod\u00e9lise une pile de cr\u00eapes par une pile d\u2019entiers repr\u00e9sentant le diam\u00e8tre de chaque cr\u00eape. On souhaite r\u00e9ordonner les cr\u00eapes de la plus grande (plac\u00e9e en bas de la pile) \u00e0 la plus petite (plac\u00e9e en haut de la pile). On dispose uniquement d\u2019une spatule que l\u2019on peut ins\u00e9rer dans la pile de cr\u00eapes de fa\u00e7on \u00e0 retourner l\u2019ensemble des cr\u00eapes qui lui sont au-dessus. Le principe est le suivant :  </p> <ul> <li>On recherche la plus grande cr\u00eape.</li> <li>On retourne la pile \u00e0 partir de cette cr\u00eape de fa\u00e7on \u00e0 mettre cette plus grande cr\u00eape tout en haut de la pile.</li> <li>On retourne l\u2019ensemble de la pile de fa\u00e7on \u00e0 ce que cette plus grande cr\u00eape se retrouve tout en bas.</li> <li>La plus grande cr\u00eape \u00e9tant \u00e0 sa place, on recommence le principe avec le reste de la pile</li> </ul> <p>Exemple : </p> <p></p> <p>Cr\u00e9er la fonction <code>tri_crepes</code> ayant pour param\u00e8tre une pile P. Cette fonction trie la pile P selon la m\u00e9thode du tri cr\u00eapes et ne renvoie rien. On utilisera les fonctions cr\u00e9\u00e9es dans les questions pr\u00e9c\u00e9dentes.</p> <p>Exemple : </p> <p>Si la pile P est  apr\u00e8s l\u2019appel de <code>tri_crepes(P)</code>, la pile P devient </p> \ud83d\udc0d Script Python<pre><code>def tri_crepes(P):\n    N = hauteur_pile(P)\n    i = N\n    while i &gt; 1:\n        j = max_pile(P,i)\n        retourner(P,j)\n        retourner(P,i)\n        i -= 1\n</code></pre>  Sujet M\u00e9tropole 7 Juin 2021 - Exercice 2 <p>Cet exercice traite des notions de piles et de programmation orient\u00e9e objet. </p> <p>On cr\u00e9e une classe Pile qui mod\u00e9lise la structure d'une pile d'entiers.  </p> <p>Le constructeur de la classe initialise une pile vide.  </p> <p>La d\u00e9finition de cette classe sans l\u2019impl\u00e9mentation de ses m\u00e9thodes est donn\u00e9e ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n\"\"\"Initialise la pile comme une pile vide.\"\"\"\n\n    def est_vide(self):\n\"\"\"Renvoie True si la liste est vide, False sinon.\"\"\"\n\n    def empiler(self, e):\n\"\"\"Ajoute l'\u00e9l\u00e9ment e sur le sommet de la pile, ne renvoie rien.\"\"\"\n\n    def depiler(self):\n\"\"\"Retire l\u2019\u00e9l\u00e9ment au sommet de la pile et le renvoie.\"\"\"\n\n    def nb_elements(self):\n\"\"\"Renvoie le nombre d'\u00e9l\u00e9ments de la pile. \"\"\"\n\n    def afficher(self):\n\"\"\"Affiche de gauche \u00e0 droite les \u00e9l\u00e9ments de la pile, du fond\n        de la pile vers son sommet. Le sommet est alors l\u2019\u00e9l\u00e9ment\n        affich\u00e9 le plus \u00e0 droite. Les \u00e9l\u00e9ments sont s\u00e9par\u00e9s par une\n        virgule. Si la pile est vide la m\u00e9thode affiche \u00ab pile\n        vide \u00bb.\"\"\"\n</code></pre> <p>Seules les m\u00e9thodes de la classe ci-dessus doivent \u00eatre utilis\u00e9es pour manipuler les objets Pile. </p> <p>1.a</p> Enonc\u00e9Solution <p>\u00c9crire une suite d\u2019instructions permettant de cr\u00e9er une instance de la classe Pile affect\u00e9e \u00e0 une variable <code>pile1</code> contenant les \u00e9l\u00e9ments 7, 5 et 2 ins\u00e9r\u00e9s dans cet ordre. Ainsi, \u00e0 l\u2019issue de ces instructions, l\u2019instruction <code>pile1.afficher()</code> produit l\u2019affichage : 7, 5, 2. </p> \ud83d\udccb Texte<pre><code>pile1 = Pile()\npile1.empiler(7)\npile1.empiler(5)\npile1.empiler(2)\n</code></pre> <p>1.b</p> Enonc\u00e9Solution <p>Donner l\u2019affichage produit apr\u00e8s l\u2019ex\u00e9cution des instructions suivantes. \ud83d\udccb Texte<pre><code>element1 = pile1.depiler()\npile1.empiler(5)\npile1.empiler(element1)\npile1.afficher()\n</code></pre></p> <p>7,5,5,2</p> <p>2.</p> Enonc\u00e9Solution <p>On donne la fonction mystere suivante :  </p> \ud83d\udc0d Script Python<pre><code>def mystere(pile, element):\n    pile2 = Pile()\n    nb_elements = pile.nb_elements()\n    for i in range(nb_elements):\n        elem = pile.depiler()\n        pile2.empiler(elem)\n        if elem == element:\n            return pile2\n    return pile2 \n</code></pre> <p>a. Dans chacun des quatre cas suivants, quel est l\u2019affichage obtenu dans la console ?  </p> <ul> <li>Cas n\u00b01 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;mystere(pile, 2).afficher()\n</code></pre></li> <li> <p>Cas n\u00b02 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;mystere(pile, 9).afficher()\n</code></pre></p> </li> <li> <p>Cas n\u00b03 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;mystere(pile, 3).afficher()\n</code></pre></p> </li> <li> <p>Cas n\u00b04  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.est_vide()\nTrue\n&gt;&gt;&gt;mystere(pile, 3).afficher() \n</code></pre></p> </li> </ul> <p>b. Expliquer ce que permet d\u2019obtenir la fonction <code>mystere</code>.</p> <p>a) </p> <ul> <li> <p>cas n\u00b01 : 3, 2</p> </li> <li> <p>cas n\u00b02 : 3, 2, 5, 7</p> </li> <li> <p>cas n\u00b03 : 3</p> </li> <li> <p>cas n\u00b04 : pile vide</p> </li> </ul> <p>b) </p> <p>La fonction mystere renvoie une pile qui contiendra tous les \u00e9l\u00e9ments de la pile pass\u00e9e en param\u00e8tre (pile) \u00e0 condition qu\u2019ils soient situ\u00e9s au-dessus de l\u2019\u00e9l\u00e9ment pass\u00e9 en param\u00e8tre (element). L\u2019\u00e9l\u00e9ment element sera lui aussi pr\u00e9sent dans la pile renvoy\u00e9e par la fonction.</p> <p>3.</p> Enonc\u00e9Solution <p>\u00c9crire une fonction <code>etendre(pile1, pile2)</code> qui prend en arguments deux objets Pile appel\u00e9s pile1 et pile2 et qui modifie pile1 en lui ajoutant les \u00e9l\u00e9ments de pile2 rang\u00e9s dans l'ordre inverse. Cette fonction ne renvoie rien. On donne ci-dessous les r\u00e9sultats attendus pour certaines instructions.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile1.afficher()\n7, 5, 2, 3\n&gt;&gt;&gt;pile2.afficher()\n1, 3, 4\n&gt;&gt;&gt;etendre(pile1, pile2)\n&gt;&gt;&gt;pile1.afficher()\n7, 5, 2, 3, 4, 3, 1\n&gt;&gt;&gt;pile2.est_vide()\nTrue \n</code></pre> \ud83d\udc0d Script Python<pre><code>def etendre(pile1, pile2):\n    while not pile2.est_vide():\n        x = pile2.depiler()\n        pile1.empiler(x)\n</code></pre> <p>4.</p> Enonc\u00e9Solution <p>\u00c9crire une fonction supprime_toutes_occurences(pile, element) qui prend en arguments un objet Pile appel\u00e9 pile et un \u00e9l\u00e9ment element et supprime tous les \u00e9l\u00e9ments element de pile. On donne ci-dessous les r\u00e9sultats attendus pour certaines instructions.  </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;pile.afficher()\n7, 5, 2, 3, 5\n&gt;&gt;&gt;supprime_toutes_occurences (pile, 5)\n&gt;&gt;&gt;pile.afficher()\n7, 2, 3\n</code></pre> \ud83d\udc0d Script Python<pre><code>def supprime_toutes_occurences(pile, element):\n    p2 = Pile()\n    while not pile.est_vide():\n        x = pile.depiler()\n        if x != element:\n            p2.empiler(x)\n    while not p2.est_vide():\n        x = p2.depiler()\n        pile.empiler(x)\n</code></pre>  Sujet Centres-Etrangers 2021 - Exercice 5 <p>Notion abord\u00e9e : structures de donn\u00e9es : les piles. </p> <p>Dans cet exercice, on consid\u00e8re une pile d'entiers positifs. On suppose que les quatre fonctions suivantes ont \u00e9t\u00e9 programm\u00e9es pr\u00e9alablement en langage Python : \ud83d\udc0d Script Python<pre><code>        empiler(P, e) : ajoute l'\u00e9l\u00e9ment e sur la pile P ;\n        depiler(P) : enl\u00e8ve le sommet de la pile P et retourne la valeur de ce sommet ;\n        est_vide(P) : retourne True si la pile est vide et False sinon ;\n        creer_pile() : retourne une pile vide.\n</code></pre></p> <p>Dans cet exercice, seule l'utilisation de ces quatre fonctions sur la structure de donn\u00e9es pile est autoris\u00e9e.</p> <p>1.</p> Enonc\u00e9Solution <p>Recopier le sch\u00e9ma ci-dessous et le compl\u00e9ter sur votre copie en ex\u00e9cutant les appels de fonctions donn\u00e9s. On \u00e9crira ce que renvoie la fonction utilis\u00e9e dans chaque cas, et on indiquera None si la fonction ne retourne aucune valeur. </p> <p></p> <p></p> <p>2.</p> Enonc\u00e9Solution <p>On propose la fonction ci-dessous, qui prend en argument une pile P et renvoie un couple de piles :</p> \ud83d\udc0d Script Python<pre><code>    def transforme(P) :\n        Q = creer_pile()\n        while not est_vide(P) :\n            v = depile(P)\n            empile(Q,v)\n        return (P,Q)\n</code></pre> <p>Recopier et compl\u00e9ter sur votre copie le document ci-dessous </p> <p></p> <p></p> <p>3.</p> Enonc\u00e9Solution <p>Ecrire une fonction en langage Python <code>maximum(P)</code> recevant une pile P comme argument et qui renvoie la valeur maximale de cette pile. On ne s\u2019interdit pas qu\u2019apr\u00e8s ex\u00e9cution de la fonction, la pile soit vide.  </p> <p>On souhaite conna\u00eetre le nombre d\u2019\u00e9l\u00e9ments d\u2019une pile \u00e0 l\u2019aide de la fonction <code>taille(P)</code></p> <p></p> \ud83d\udc0d Script Python<pre><code>def maximum(P):\n    m=depiler(P)\n    while not est_vide(P):\n        v = depiler(P)\n        if v &gt; m:\n            m = v\n    return m\n</code></pre> <p>4.</p> Enonc\u00e9Solution aSolution b <p>a. Proposer une strat\u00e9gie \u00e9crite en langage naturel et/ou expliqu\u00e9e \u00e0 l\u2019aide de sch\u00e9mas, qui permette de mettre en place une telle fonction. b. Donner le code Python de cette fonction <code>taille(P)</code> (on pourra utiliser les cinq fonctions d\u00e9j\u00e0 programm\u00e9es).</p> <p>Il suffit de mettre place une boucle qui s'arr\u00eatera quand la pile P sera vide. \u00c0 chaque tour de boucle, on d\u00e9pile P, on empile les valeurs pr\u00e9c\u00e9demment d\u00e9pil\u00e9es dans une pile auxiliaire Q et on incr\u00e9mente un compteur de 1. Une fois la boucle termin\u00e9e, on cr\u00e9e une nouvelle boucle o\u00f9 on d\u00e9pile Q et on empile P avec les valeurs d\u00e9pil\u00e9es (l\u2019id\u00e9e est de retrouver l\u2019\u00e9tat originel de pile. Il suffit ensuite de renvoyer la valeur du compteur.</p> \ud83d\udc0d Script Python<pre><code>def taille(P):\n    cmp = 0\n    Q = creer_pile()\n    while not est_vide(P):\n        v = depiler(P)\n        empiler(Q,v)\n        cmp = cmp + 1\n    while not est_vide(Q):\n        v = depiler(Q)\n        empiler(P,v)\n    return cmp\n</code></pre>"},{"location":"BAC/pile_file/data/TD14_Files%20copy/","title":"Les Files","text":"TD n\u00b014 : Structures de donn\u00e9es - Les Files Th\u00e8me 1 : Structures de donn\u00e9es COURS et EXERCICES <p>Les piles et les files sont deux structures de donn\u00e9es lin\u00e9aires qui permettent, au m\u00eame titre que les listes, de g\u00e9rer des s\u00e9quences d\u2019\u00e9l\u00e9ments. Ainsi, dans une pile et dans une file chaque \u00e9l\u00e9ment est \u00e9ga- lement rep\u00e9r\u00e9 par sa position, il y a un premier, un dernier, chaque \u00e9l\u00e9ment a un successeur (sauf le premier) et un pr\u00e9d\u00e9cesseur (sauf le dernier). Les op\u00e9rations disponibles pour ces deux structures sont assez proches car dans les deux cas, on veut pouvoir : * cr\u00e9er une file vide * conna\u00eetre sa taille * lui ajouter un \u00e9l\u00e9ment * lui retirer un \u00e9l\u00e9ment * acc\u00e9der \u00e0 un \u00e9l\u00e9ment particulier</p> <p>Cependant, la politique d\u2019ajout/retrait des \u00e9l\u00e9ments dans la s\u00e9quence n\u2019est pas la m\u00eame. Le nom des op\u00e9rations diff\u00e8rent \u00e9galement pour mieux distinguer les deux structures.</p>  I. Les files  <p>Il faut se repr\u00e9senter une file comme... une file d'attente ! On ne peut entrer dans la file qu'en derni\u00e8re position et on ne peut la quitter que si on est le premier. L'ajout d'un \u00e9l\u00e9ment dans une file ne peut se faire qu'\u00e0 la fin (en derni\u00e8re position) et le retrait d'un \u00e9l\u00e9ment ne peut se faire qu'au d\u00e9but (en premi\u00e8re position). </p> <p>On dit que les files sont en mode FIFO (First In, First Out qui signifie \u00ab premier entr\u00e9, premier sorti \u00bb).</p> <p></p> <p>\u27a1 Interface d'une file</p> <p>Le jeu d'op\u00e9rations disponibles pour une file est :</p> <ul> <li><code>construire_file()</code> : cr\u00e9e une file vide</li> <li><code>taille(F)</code> : acc\u00e8s au nombre d'\u00e9l\u00e9ments dans la file <code>F</code></li> <li><code>enfiler(F, e)</code> : ajoute l'\u00e9l\u00e9ment <code>e</code> en dernier dans la file <code>F</code>.</li> <li><code>defiler(F)</code> : retire le premier \u00e9l\u00e9ment de la file <code>F</code>. Pr\u00e9condition : <code>F</code> n'est pas vide.</li> <li><code>premier(F)</code> : pour acc\u00e9der (en lecture) au premier \u00e9l\u00e9ment de la file <code>F</code> (sans le retirer de la file). Pr\u00e9condition : <code>F</code> n'est pas vide.</li> </ul> <p>En anglais, l'op\u00e9ration <code>enfiler</code> est souvent not\u00e9e <code>push</code>, l'op\u00e9ration <code>depiler</code> est souvent not\u00e9e <code>pop</code> et l'op\u00e9ration <code>taille</code> est souvent not\u00e9e <code>top</code>.</p> <p>Remarque : Comme pour les piles, on pourrait remplacer l'op\u00e9ration <code>taille</code> par l'op\u00e9ration <code>est_vide</code> et choisir que <code>defiler</code> renvoie \u00e9galement le premier \u00e9l\u00e9ment pour s'\u00e9conomiser l'op\u00e9ration <code>premier</code>.</p>"},{"location":"BAC/pile_file/data/TD14_Files%20copy/#representation-dune-file-et-exemple","title":"\u27a1 Repr\u00e9sentation d'une file et exemple","text":"<p>Une file contenant les \u00e9l\u00e9ments \\(\\text{'a'}\\), \\(\\text{'b'}\\) et \\(\\text{'c'}\\) (\\(\\text{'a'}\\) \u00e9tant le premier et \\(\\text{'c'}\\) le dernier) sera repr\u00e9sent\u00e9e : </p> \\[\\text{&lt;'a', 'b', 'c'&lt;}\\] <p>Exemple :  Voici comment manipuler une file F :</p> Op\u00e9ration Contenu de la file F <code>F = construire_file()</code> \\(\\text{&lt;&lt;}\\) <code>taille(F)</code> renvoie 0 <code>enfiler(F, 'a')</code> \\(\\text{&lt;'a'&lt;}\\) <code>enfiler(F, 'b')</code> \\(\\text{&lt;'a', 'b'&lt;}\\) <code>enfiler(F, 'c')</code> \\(\\text{&lt;'a', 'b', 'c'&lt;}\\) <code>premier(F)</code> renvoie 'a' <code>defiler(F)</code> \\(\\text{&lt;'b', 'c'&lt;}\\) <code>enfiler(F, premier(F))</code> \\(\\text{&lt;'b', 'c', 'b'&lt;}\\)"},{"location":"BAC/pile_file/data/TD14_Files%20copy/#applications-des-files","title":"\u27a1 Applications des files","text":"<p>Les files sont tr\u00e8s utilis\u00e9es en informatique. Leur usage caract\u00e9ristique concerne les files d'attentes :</p> <ul> <li>Un syst\u00e8me d'exploitation g\u00e8re l'ordonnancement des processus par des files (voir Th\u00e8me 3 : Architectures mat\u00e9rielles, syst\u00e8mes d'exploitation et r\u00e9seaux)</li> <li>Une imprimante g\u00e8re les t\u00e2ches d'impression avec des files : chaque nouvelle t\u00e2che est ins\u00e9r\u00e9e dans une file d'attente, et celles-ci sont trait\u00e9es dans l'ordre d'arriv\u00e9e.</li> <li>On peut aussi utiliser une pile pour parcourir (en profondeur) un graphe et m\u00e9moriser les sommets visit\u00e9s. (voir Th\u00e8me 5 : Algorithmique)</li> <li>etc.</li> </ul>  II. Exercices sur les files  Activit\u00e9 1 : Manipulation des files <p>Question 1.</p> <p>On consid\u00e8re la s\u00e9quence d\u2019instructions suivantes. Indiquez le r\u00e9sultat \u00e0 chaque \u00e9tape.  </p> \ud83d\udccb Texte<pre><code>- F = construire_file()  \n- enfiler(F, 1)  \n- enfiler(F, 2)  \n- enfiler(F, 3)  \n- s = premier(F)  \n- defiler(F)  \n- defiler(F)  \n- enfiler(F, s)  \n</code></pre> <p>Question 2.</p> <p>\u00c9crivez la s\u00e9quence d\u2019instructions permettant d\u2019obtenir l\u2019\u00e9volution suivante pour une file F.</p> Etat de la pile P Instructions (\u00e0 compl\u00e9ter) \\(\\text{&lt;&lt;}\\) \\(\\text{&lt;3&lt;}\\) \\(\\text{&lt;3 , 1&lt;}\\) \\(\\text{&lt;3 , 1 , 4&lt;}\\) \\(\\text{&lt;1 , 4&lt;}\\) \\(\\text{&lt;4&lt;}\\) \\(\\text{&lt;&lt;}\\)"},{"location":"BAC/pile_file/data/TD14_Files%20copy/#implementations","title":"\u27a1 Impl\u00e9mentations","text":"<p>Il existe diff\u00e9rentes fa\u00e7ons d'impl\u00e9menter une file, on peut par exemple utiliser :</p> <ul> <li>un tableau (redimensionnable ou non)</li> <li>une liste cha\u00een\u00e9e</li> <li>deux piles</li> </ul> <p>Avec ces impl\u00e9mentations, il faudra en g\u00e9n\u00e9ral faire un compromis sur l'efficacit\u00e9 des op\u00e9rations car celles-ci n\u00e9cessitent de travailler sur les deux extr\u00e9mit\u00e9s de la file (pour enfiler/d\u00e9filer).</p> <ul> <li>Si on utilise un tableau, les op\u00e9rations en d\u00e9but sont co\u00fbteuses et celles \u00e0 la fin ne le sont pas. On peut alors d\u00e9cider d'enfiler en fin de tableau (peu co\u00fbteux) mais il faudra d\u00e9filer en d\u00e9but de tableau (co\u00fbteux). Si on fait le choix inverse, c'est l'op\u00e9ration <code>defiler</code> qui sera peu co\u00fbteuse et l'op\u00e9ration <code>enfiler</code> qui sera co\u00fbteuse.</li> <li>Si on utilise une liste cha\u00een\u00e9e, c'est l'inverse (efficace en t\u00eate et co\u00fbteux en queue) mais le probl\u00e8me reste le m\u00eame : une des deux op\u00e9rations sera moins efficace. </li> </ul> <p>Il existe en r\u00e9alit\u00e9 une impl\u00e9mentation plus efficace mais nous n'en parlerons pas ici.</p>  Activit\u00e9 2 : Premi\u00e8re impl\u00e9mentation d'une file (avec le type `list` de Python) <p>On d\u00e9finit le type abstrait File par les op\u00e9rations :</p> <ul> <li>cr\u00e9ation d\u2019une file vide</li> <li>enfiler : ajout en queue de file</li> <li>defiler : retrait du premier \u00e9lement de la file</li> <li>premier : acc\u00e8s (en lecture) au premier \u00e9l\u00e9ment de la file</li> <li>taille : acc\u00e8s au nombre d\u2019\u00e9l\u00e9ments</li> </ul> <p>L\u2019objectif est d\u2019impl\u00e9menter ce type abstrait en utilisant le type pr\u00e9d\u00e9fini list de Python (tableau dynamique = redimensionnable).  </p> <p>On choisira d\u2019enfiler en fin de list (efficace) et de d\u00e9filer en d\u00e9but de list (co\u00fbteux). On aurait tr\u00e8s bien pu faire l\u2019inverse, mais l\u2019une des deux op\u00e9rations (enfiler ou d\u00e9filer) ne peut pas \u00eatre en temps constant avec le type list.  </p> <p>Pour une \u00e9valuation de la complexit\u00e9 des op\u00e9rations \u00e9l\u00e9mentaires de Python voir le site : Python.org - Time complexity.</p> <p>Question 1 :</p> <p>Consultez les m\u00e9thodes disponibles sur le type list de Python pour trouver comment retirer un \u00e9l\u00e9ment en t\u00eate de liste (vous devriez savoir comment ajouter en fin de liste !). Quelle est la m\u00e9thode \u00e0 utiliser ?</p> <p>Question 2 :</p> Enonc\u00e9Solution <p>Ecrivez une classe <code>File</code> impl\u00e9mentant les op\u00e9rations du type abstrait file avec les <code>list</code> de Python. Vous utiliserez la m\u00e9thode <code>__len__</code> pour renvoyer la longueur d\u2019une file.</p> <p>Exemple : on veut que le code \ud83d\udccb Texte<pre><code>F = File()\nprint(F)\nF.enfiler(1)\nprint(F)\nF.enfiler(2)\nprint(F)\nF.enfiler(3)\nprint(F)\ns = F.premier()\nprint(s)\nF.defiler()\nprint(F)\nF.defiler()\nprint(F)\nF.enfiler(s)\nprint(F)\n</code></pre></p> <p>produise l\u2019affichage</p> \ud83d\udccb Texte<pre><code>&lt;&lt;&gt;\n&lt;1&lt;\n&lt;1,2&lt;\n&lt;1,2,3&lt;\n1\n&lt;2, 3&lt;\n&lt;3&lt;\n&lt;3,1&lt;\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre> \ud83d\udc0d Script Python<pre><code>class File:\n    def __init__(self):\n        self.contenu = []\n\n    def enfiler(self, element):\n        self.contenu.append(element)\n\n    def defiler(self):\n        assert self.taille() != 0, \"on ne peut pas d\u00e9filer une file vide\"\n        self.contenu.pop(0) # ou return self.contenu.pop(0) si l'op\u00e9ration d\u00e9filer doit aussi renvoyer le sommet\n\n    def premier(self):\n        assert self.taille() != 0, \"une file vide n'a pas de premier \u00e9l\u00e9ment\"\n        return self.contenu[0]\n\n    def taille(self):\n        return len(self.contenu)\n\n    __len__ = taille # pour pouvoir \u00e9galement utiliser len pour obtenir la longueur d'une file\n\n    # pour repr\u00e9senter une file\n    def __repr__(self):\n        ch = \"\"\n        for e in self.contenu:\n            ch = ch + str(e) + \",\"\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = \"&lt;\" + ch + \"&lt;\"\n        return ch\n</code></pre> <p>Question 3 :</p> <p>D\u00e9finissez la m\u00e9thode sp\u00e9ciale <code>__repr__</code> pour afficher le contenu d\u2019une file comme unelist de Python.  </p> <p>Attention :</p> <p>la m\u00e9thode <code>__repr__</code> doit renvoyer une cha\u00eene de caract\u00e8res (conversion avec la fonction str)  </p> <p>Exemple : on veut que le code \ud83d\udccb Texte<pre><code>F = File()\nprint(F)\nF.enfiler(1)\nprint(F)\nF.enfiler(2)\nprint(F)\nF.enfiler(3)\nprint(F)\ns = F.premier()\nprint(s)\nF.defiler()\nprint(F)\nF.defiler()\nprint(F)\nF.enfiler(s)\nprint(F)\n</code></pre></p> <p>produise l\u2019affichage</p> \ud83d\udccb Texte<pre><code>&lt;&lt;\n&lt;1&lt;\n&lt;1,2&lt;\n&lt;1,2,3&lt;\n1\n&lt;2, 3&lt;\n&lt;3&lt;\n&lt;3,1&lt;\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre>  Activit\u00e9 3 : Deuxi\u00e8me impl\u00e9mentation d\u2019une file (avec deux piles) <p>On veut r\u00e9aliser une impl\u00e9mentation objet d\u2019une file en utilisant deux piles. Vous utiliserez l\u2019impl\u00e9mentation suivante d\u2019une pile pour travailler</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.contenu = []\n\n    def empiler(self, e):\n        self.contenu.append(e)\n\n    def depiler(self):\n        assert self.taille != 0, \"on ne peut pas d\u00e9piler une pile vide\"\n        self.contenu.pop()\n\n    def sommet(self):\n        assert self.taille != 0, \"une pile vide n\u2019a pas de sommet\"\n        return self.contenu[-1]\n\n    def taille(self):\n        return len(self.contenu)\n\n    # pour repr\u00e9senter la Pile\n    def __repr__(self):\n        ch = ''\n        for e in self.contenu:\n            ch = str(e) + \",\" + ch # ne pas oublier de convertir les \u00e9l\u00e9ments en\u2423chaine de caract\u00e8res\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = '&gt;' + ch+']'\n        return ch\n</code></pre> <p>Pour simplifier, l\u2019op\u00e9ration defiler renverra \u00e9galement le premier \u00e9l\u00e9ment (en plus de le retirer de la file). L\u2019op\u00e9ration premier n\u2019est alors plus n\u00e9cessaire. Vous devez donc impl\u00e9menter une classe File permettant les op\u00e9rations suivantes :  </p> <ul> <li>cr\u00e9ation d\u2019une file vide</li> <li>enfiler : ajout en queue de file</li> <li>defiler : renvoie le premier \u00e9lement de la file et retire cet \u00e9l\u00e9ment de la file</li> <li>len : acc\u00e8s au nombre d\u2019\u00e9l\u00e9ments</li> </ul> <p>Aide :</p> <ul> <li>Op\u00e9ration enfiler (simple) : C\u2019est toujours dans l\u2019une des deux piles (par exemple pA) que l\u2019on empile un nouvel \u00e9l\u00e9ment \u00e0 enfiler.</li> <li>Op\u00e9ration defiler (compliqu\u00e9e) :</li> <li>Si l\u2019autre pile (pB) n\u2019est pas vide, son sommet est le premier \u00e9l\u00e9ment de la file (celui \u00e0 d\u00e9filer)</li> <li>Sinon (si pB est vide), le premier \u00e9l\u00e9ment de la file (celui \u00e0 d\u00e9filer) est au fond de pA. On peut alors \u201cretourner\u201d pA sur pB pour le premier \u00e9l\u00e9ment de la file arrive au sommet de pB.</li> <li>Op\u00e9ration len (simple) : il suffit d\u2019utiliser la m\u00e9thode taille d\u00e9finie dans la classe Pile.</li> </ul> <p>Question :</p> Enonc\u00e9Solution <p>Compl\u00e9tez les m\u00e9thodes enfiler, len et defiler de la classe File suivante qui impl\u00e9mente une file avec deux piles.</p> \ud83d\udc0d Script Python<pre><code>class File:\n\"\"\"File avec deux piles\"\"\"\n    def __init__(self):\n        self.pA = Pile() # pA et pB sont les deux attributs de nos objets de la classe File\n        self.pB = Pile()\n\n    def enfiler(self, e):\n        # \u00e0 compl\u00e9ter\n        pass\n\n    def __len__(self):\n        # \u00e0 compl\u00e9ter\n        pass\n    def defiler(self):\n        if self.pA.taille() == 0 and self.pB.taille() == 0:\n            raise ValueError(\"on ne peut pas d\u00e9filer une file vide\")\n            # \u00e0 compl\u00e9ter\n\n    # La m\u00e9thode __repr__ est d\u00e9finie pour que vous puissiez voir l\u2019\u00e9tat d\u2019une file\n    def __repr__(self):\n        import copy\n        #print(\"pile A : \", repr(self.pA)) # pour voir le contenu des deux piles\n        #print(\"pile B : \", repr(self.pB))\n        lstA = copy.copy(self.pA.contenu) # copie des list Python repr\u00e9sentant nos deux piles\n        lstB = copy.copy(self.pB.contenu) # pour ne pas les modifier\n        lstB.reverse() # on a besoin de renverser lstB pour avoir nos \u00e9l\u00e9ments dans l\u2019ordre d\u2019entr\u00e9e\n        lst = lstB + lstA # et de concat\u00e9ner lstB et lstA dans cet ordre\n        # on construit ensuite la chaine \"&lt;...&lt;\" qui repr\u00e9sente nos files\n        ch = \"\"\n        for e in lst:\n            ch = ch + str(e) + \",\"\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = \"&lt;\" + ch + \"&lt;\"\n        return ch\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.contenu = []\n\n    def empiler(self, e):\n        self.contenu.append(e)\n\n    def depiler(self):\n        assert self.taille != 0, \"on ne peut pas d\u00e9piler une pile vide\"\n        self.contenu.pop()\n\n    def sommet(self):\n        assert self.taille != 0, \"une pile vide n\u2019a pas de sommet\"\n        return self.contenu[-1]\n\n    def taille(self):\n        return len(self.contenu)\n\n    # pour repr\u00e9senter la Pile\n    def __repr__(self):\n    ch = \"\"\n    for e in self.contenu:\n        ch = str(e) + \",\" + ch # ne pas oublier de convertir les \u00e9l\u00e9ments en chaine de caract\u00e8res\n    ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n    ch = \"&gt;\" + ch+']'\n    return ch\n\nclass File:\n\"\"\"File avec deux piles\"\"\"\n    def __init__(self):\n        self.pA = Pile() # pA et pB sont les deux attributs de nos objets de la classe File \n        self.pB = Pile()\n\n    def enfiler(self, e):\n        return self.pA.empiler(e)\n\n    def __len__(self):\n        return self.pA.taille()+self.pB.taille()\n\n    def defiler(self):\n        if self.pA.taille() == 0 and self.pB.taille() == 0:\n            raise ValueError(\"on ne peut pas d\u00e9filer une file vide\")\n        # La m\u00e9thode __repr__ est d\u00e9finie pour que vous puissiez voir l\u2019\u00e9tat d\u2019une file\n        else:\n            if self.pB.taille() == 0:\n                for x in range(self.pA.taille()-1):\n                    self.pB.empiler(self.pA.sommet())\n                    self.pA.depiler()\n                self.pA.depiler()\n                print('pA',self.pA)\n                print('pB1',self.pB)\n            else:\n                self.pB.depiler()\n\n    def __repr__(self):\n        import copy\n        #print(\"pile A : \", repr(self.pA)) # pour voir le contenu des deux piles\n        #print(\"pile B : \", repr(self.pB))\n        lstA = copy.copy(self.pA.contenu) # copie des list Python repr\u00e9sentant nos deux piles\n        lstB = copy.copy(self.pB.contenu) # pour ne pas les modifier\n        lstB.reverse() # on a besoin de renverser lstB pour avoir nos \u00e9l\u00e9ments dans l\u2019ordre d\u2019entr\u00e9e\n        lst = lstB + lstA # et de concat\u00e9ner lstB et lstA dans cet ordre\n\n        # on construit ensuite la chaine \"&lt;...&lt;\" qui repr\u00e9sente nos files\n        ch = \"\"\n        for e in lst:\n            ch = ch + str(e) + \",\"\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = \"&lt;\" + ch + \"&lt;\"\n        return ch\n</code></pre>  III. Sujet BAC sur les files  M\u00e9tropole Juin 2021 - Sujet 2 <p>Cet exercice porte sur les structures de donn\u00e9es lin\u00e9aires </p> <p>Une m\u00e9thode simple pour g\u00e9rer l'ordonnancement des processus est d'ex\u00e9cuter les processus en une seule fois et dans leur ordre d'arriv\u00e9e.</p> <p>Question 1</p> Enonc\u00e9Solution <p>Parmi les propositions suivantes, quelle est la structure de donn\u00e9es la plus appropri\u00e9e pour mettre en \u0153uvre le mode FIFO (First In First Out) ?  </p> <p>a. liste b. dictionnaire c. pile d. file   </p> <p>r\u00e9ponse d une file</p> <p>Question 2</p> Enonc\u00e9Solution <p>On choisit de stocker les donn\u00e9es des processus en attente \u00e0 l'aide d'une liste Python lst. On dispose d\u00e9j\u00e0 d'une fonction <code>retirer(lst)</code> qui renvoie l'\u00e9l\u00e9ment <code>lst[0]</code> puis le supprime de la liste <code>lst</code>. \u00c9crire en Python le code d'une fonction <code>ajouter(lst, proc)</code> qui ajoute \u00e0 la fin de la liste <code>lst</code> le nouveau processus en attente <code>proc</code>. </p> \ud83d\udc0d Script Python<pre><code>def ajouter(lst,proc):\n    lst.append(proc)\n</code></pre> <p>On choisit maintenant d'impl\u00e9menter une file <code>file</code> \u00e0 l'aide d'un couple (<code>p1,p2)</code>o\u00f9 <code>p1</code> et <code>p2</code> sont des piles. Ainsi <code>file[0]</code> et <code>file[1]</code> sont respectivement les piles <code>p1</code> et <code>p2</code>. Pour enfiler un nouvel \u00e9l\u00e9ment <code>elt</code> dans <code>file</code>, on l'empile dans <code>p1</code>. Pour d\u00e9filer <code>file</code>, deux cas se pr\u00e9sentent. </p> <ul> <li>La pile <code>p2</code> n'est pas vide : on d\u00e9pile <code>p2</code>.</li> <li>La pile <code>p2</code> est vide : on d\u00e9pile les \u00e9l\u00e9ments de <code>p1</code> en les empilant dans <code>p2</code> jusqu'\u00e0 ce que <code>p1</code> soit vide, puis on d\u00e9pile <code>p2</code>.</li> </ul> <p></p> <p>Question 3</p> Enonc\u00e9eSolution <p>On consid\u00e8re la situation repr\u00e9sent\u00e9e ci-dessous.  </p> <p></p> <p>On ex\u00e9cute la s\u00e9quence d'instructions suivante :</p> \ud83d\udccb Texte<pre><code>enfiler(file,ps6)\ndefiler(file)\ndefiler(file)\ndefiler(file)\nenfiler(file,ps7)\n</code></pre> <p>Repr\u00e9senter le contenu final des deux piles \u00e0 la suite de ces instructions. </p> <p> </p> <p>Question 4</p> Enonc\u00e9eSolution 4.aSolution 4.bSolution 4.c <p>On dispose des fonctions :</p> <ul> <li><code>empiler(p,elt)</code> qui empile l'\u00e9l\u00e9ment <code>elt</code> dans la pile <code>p</code>,  </li> <li><code>depiler(p)</code> qui renvoie le sommet de la pile <code>p</code> si <code>p</code> n'est pas vide et le supprime,  </li> <li><code>pile_vide(p)</code> qui renvoie <code>True</code> si la pile <code>p</code> est vide, <code>False</code> si la pile <code>p</code> n'est pas vide.   </li> </ul> <p>a. \u00c9crire en Python une fonction est_<code>vide(f)</code> qui prend en argument un couple de piles <code>f</code> et qui renvoie <code>True</code> si la file repr\u00e9sent\u00e9e par <code>f</code> est vide, <code>False</code> sinon. </p> <p>b. \u00c9crire en Python une fonction <code>enfiler(f,elt)</code> qui prend en arguments un couple de piles <code>f</code> et un \u00e9l\u00e9ment <code>elt</code> et qui ajoute <code>elt</code> en queue de la file repr\u00e9sent\u00e9e par <code>f</code>. </p> <p>c. \u00c9crire en Python une fonction <code>defiler(f)</code> qui prend en argument un couple de piles <code>f</code> et qui renvoie l'\u00e9lement en t\u00eate de la file repr\u00e9sent\u00e9e par <code>f</code> en le retirant. </p> \ud83d\udc0d Script Python<pre><code>def est_vide(f):\n    return pile_vide(f[0]) and pile_vide(f[1])\n</code></pre> \ud83d\udc0d Script Python<pre><code>def enfiler(f,elt):\n    empiler(f[0],elt)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def defiler(f):\n    p1 = f[0]\n    p2 = f[1]\n    if pile_vide(p2):\n        while not pile_vide(p1):\n            v = depiler(p1)\n            empiler(p2,v)\n    return depiler(p2)\n</code></pre>  Am\u00e9rique du Nord 2021 - Sujet 2 <p>Cet exercice porte sur la notion de pile, de file et sur la programmation de base en Python.</p> <p>Les interfaces des structures de donn\u00e9es abstraites Pile et File sont propos\u00e9es ci-dessous.</p> <p>On utilisera uniquement les fonctions ci-dessous :</p> <p>Structure de donn\u00e9es abstraite : Pile </p> <p>Utilise : </p> <ul> <li>\u00c9l\u00e9ments, Bool\u00e9en</li> </ul> <p>Op\u00e9rations :  </p> <ul> <li>creer_pile_vide : \u2205 \u2192 Pile     creer_pile_vide() renvoie une pile vide</li> <li>est_vide : Pile \u2192 Bool\u00e9en      est_vide(pile) renvoie True si pile est vide, False sinon</li> <li>empiler : Pile, \u00c9l\u00e9ment \u2192 Rien     empiler(pile, element) ajoute element au sommet de la pile</li> <li>depiler : Pile \u2192 \u00c9l\u00e9ment     depiler(pile) renvoie l\u2019\u00e9l\u00e9ment au sommet de la pile en le retirant de la pile</li> </ul> <p>Structure de donn\u00e9es abstraite : File </p> <p>Utilise : </p> <ul> <li>\u00c9l\u00e9ments, Bool\u00e9en</li> </ul> <p>Op\u00e9rations :  </p> <ul> <li>creer_file_vide : \u2205 \u2192 File     creer_file_vide() renvoie une file vide</li> <li>est_vide : File \u2192 Bool\u00e9en      est_vide(file) renvoie True si file est vide, False sinon</li> <li>empiler : File, \u00c9l\u00e9ment \u2192 Rien     empiler(file, element) ajoute element dans la file</li> <li>depiler : File \u2192 \u00c9l\u00e9ment     depiler(file) renvoie l\u2019\u00e9l\u00e9ment au sommet de la file en le retirant de la file</li> </ul> <p>Question 1</p> Enonc\u00e9Solution 1.aSolution 1.b <p>(a) On consid\u00e8re la file F suivante :  </p> <p></p> <p>Quel sera le contenu de la pile P et de la file F apr\u00e8s l\u2019ex\u00e9cution du programme Python suivant ?</p> \ud83d\udc0d Script Python<pre><code>1 P = creer_pile_vide ()\n2 while not( est_vide (F )):\n3     empiler (P, defiler (F))\n</code></pre> <p>(b) Cr\u00e9er une fonction <code>taille_file</code> qui prend en param\u00e8tre une file <code>F</code> et qui renvoie le nombre d\u2019\u00e9l\u00e9ments qu\u2019elle contient. Apr\u00e8s appel de cette fonction la file <code>F</code> doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.</p> \ud83d\udc0d Script Python<pre><code>1 def taille_file (F):\n2      \"\"\" File -&gt; Int \"\"\"\n</code></pre> <p></p> \ud83d\udc0d Script Python<pre><code>def taille_file(F):\n    t = 0\n    ft = creer_file_vide()\n    while not est_vide(F):\n        t = t + 1\n        enfiler(ft, defiler(F))\n    while not est_vide(ft):\n        enfiler(F, defiler(ft))\n    return t   \n</code></pre> <p>Question 2</p> Enonc\u00e9Solution <p>\u00c9crire une fonction former_pile qui prend en param\u00e8tre une file <code>F</code> et qui renvoie une pile <code>P</code> contenant les m\u00eames \u00e9l\u00e9ments que la file. Le premier \u00e9l\u00e9ment sorti de la file devra se trouver au sommet de la pile ; le deuxi\u00e8me \u00e9l\u00e9ment sorti de la file devra se trouver juste en-dessous du sommet, etc. Exemple :  <code>former_pile(F)</code> va renvoyer la pile P ci-dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def former_pile(F):\n    p = creer_pile_vide()\n    pt = creer_pile_vide()\n    while not est_vide(F):\n        empiler(pt,defiler(F))\n    while not est_vide(pt):\n        empiler(p,depiler(pt))\n    return p\n</code></pre> <p>Question 3</p> Enonc\u00e9Solution <p>\u00c9crire une fonction <code>nb_elements</code> qui prend en param\u00e8tres une file <code>F</code> et un \u00e9l\u00e9ment <code>elt</code> et qui renvoie le nombre de fois o\u00f9 <code>elt</code> est pr\u00e9sent dans la file <code>F</code>.   Apr\u00e8s appel de cette fonction la file <code>F</code> doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.</p> \ud83d\udc0d Script Python<pre><code>def nb_elements(F, ele):\n    nb = 0\n    ft = creer_file_vide()\n    while not est_vide(F):\n        x = defiler(F)\n        if x==ele:\n            nb = nb + 1\n        enfiler(ft, x)\n    while not est_vide(ft):\n        enfiler(F, defiler(ft))\n    return nb\n</code></pre> <p>Question 4</p> Enonc\u00e9Solution <p>\u00c9crire une fonction <code>verifier_contenu</code> qui prend en param\u00e8tres une file F et trois entiers : <code>nb_rouge</code>, <code>nb_vert</code> et <code>nb_jaune</code>. Cette fonction renvoie le bool\u00e9en <code>True</code> si \"rouge\" appara\u00eet au plus <code>nb_rouge</code> fois dans la file <code>F</code>, \"vert\" appara\u00eet au plus <code>nb_vert</code> fois dans la file <code>F</code> et \"jaune\" appara\u00eet au plus <code>nb_jaune</code> fois dans la file <code>F</code>. Elle renvoie <code>False</code> sinon. On pourra utiliser les fonctions pr\u00e9c\u00e9dentes.</p> \ud83d\udc0d Script Python<pre><code>def verifier_contenu(F, nb_rouge, nb_vert, nb_jaune):\n    return nb_elements(F, \"rouge\") &lt;= nb_rouge and nb_elements(F,\"vert\") &lt;= nb_vert and nb_elements(F, \"jaune\") &lt;= nb_jaune\n</code></pre>"},{"location":"BAC/pile_file/data/TD14_Files/","title":"Les Files","text":"TD n\u00b014 : Structures de donn\u00e9es - Les Files Th\u00e8me 1 : Structures de donn\u00e9es COURS et EXERCICES <p>Les piles et les files sont deux structures de donn\u00e9es lin\u00e9aires qui permettent, au m\u00eame titre que les listes, de g\u00e9rer des s\u00e9quences d\u2019\u00e9l\u00e9ments. Ainsi, dans une pile et dans une file chaque \u00e9l\u00e9ment est \u00e9ga- lement rep\u00e9r\u00e9 par sa position, il y a un premier, un dernier, chaque \u00e9l\u00e9ment a un successeur (sauf le premier) et un pr\u00e9d\u00e9cesseur (sauf le dernier). Les op\u00e9rations disponibles pour ces deux structures sont assez proches car dans les deux cas, on veut pouvoir : * cr\u00e9er une file vide * conna\u00eetre sa taille * lui ajouter un \u00e9l\u00e9ment * lui retirer un \u00e9l\u00e9ment * acc\u00e9der \u00e0 un \u00e9l\u00e9ment particulier</p> <p>Cependant, la politique d\u2019ajout/retrait des \u00e9l\u00e9ments dans la s\u00e9quence n\u2019est pas la m\u00eame. Le nom des op\u00e9rations diff\u00e8rent \u00e9galement pour mieux distinguer les deux structures.</p>  I. Les files  <p>Il faut se repr\u00e9senter une file comme... une file d'attente ! On ne peut entrer dans la file qu'en derni\u00e8re position et on ne peut la quitter que si on est le premier. L'ajout d'un \u00e9l\u00e9ment dans une file ne peut se faire qu'\u00e0 la fin (en derni\u00e8re position) et le retrait d'un \u00e9l\u00e9ment ne peut se faire qu'au d\u00e9but (en premi\u00e8re position). </p> <p>On dit que les files sont en mode FIFO (First In, First Out qui signifie \u00ab premier entr\u00e9, premier sorti \u00bb).</p> <p></p> <p>\u27a1 Interface d'une file</p> <p>Le jeu d'op\u00e9rations disponibles pour une file est :</p> <ul> <li><code>construire_file()</code> : cr\u00e9e une file vide</li> <li><code>taille(F)</code> : acc\u00e8s au nombre d'\u00e9l\u00e9ments dans la file <code>F</code></li> <li><code>enfiler(F, e)</code> : ajoute l'\u00e9l\u00e9ment <code>e</code> en dernier dans la file <code>F</code>.</li> <li><code>defiler(F)</code> : retire le premier \u00e9l\u00e9ment de la file <code>F</code>. Pr\u00e9condition : <code>F</code> n'est pas vide.</li> <li><code>premier(F)</code> : pour acc\u00e9der (en lecture) au premier \u00e9l\u00e9ment de la file <code>F</code> (sans le retirer de la file). Pr\u00e9condition : <code>F</code> n'est pas vide.</li> </ul> <p>En anglais, l'op\u00e9ration <code>enfiler</code> est souvent not\u00e9e <code>push</code>, l'op\u00e9ration <code>depiler</code> est souvent not\u00e9e <code>pop</code> et l'op\u00e9ration <code>taille</code> est souvent not\u00e9e <code>top</code>.</p> <p>Remarque : Comme pour les piles, on pourrait remplacer l'op\u00e9ration <code>taille</code> par l'op\u00e9ration <code>est_vide</code> et choisir que <code>defiler</code> renvoie \u00e9galement le premier \u00e9l\u00e9ment pour s'\u00e9conomiser l'op\u00e9ration <code>premier</code>.</p>"},{"location":"BAC/pile_file/data/TD14_Files/#representation-dune-file-et-exemple","title":"\u27a1 Repr\u00e9sentation d'une file et exemple","text":"<p>Une file contenant les \u00e9l\u00e9ments \\(\\text{'a'}\\), \\(\\text{'b'}\\) et \\(\\text{'c'}\\) (\\(\\text{'a'}\\) \u00e9tant le premier et \\(\\text{'c'}\\) le dernier) sera repr\u00e9sent\u00e9e : </p> \\[\\text{&lt;'a', 'b', 'c'&lt;}\\] <p>Exemple :  Voici comment manipuler une file F :</p> Op\u00e9ration Contenu de la file F <code>F = construire_file()</code> \\(\\text{&lt;&lt;}\\) <code>taille(F)</code> renvoie 0 <code>enfiler(F, 'a')</code> \\(\\text{&lt;'a'&lt;}\\) <code>enfiler(F, 'b')</code> \\(\\text{&lt;'a', 'b'&lt;}\\) <code>enfiler(F, 'c')</code> \\(\\text{&lt;'a', 'b', 'c'&lt;}\\) <code>premier(F)</code> renvoie 'a' <code>defiler(F)</code> \\(\\text{&lt;'b', 'c'&lt;}\\) <code>enfiler(F, premier(F))</code> \\(\\text{&lt;'b', 'c', 'b'&lt;}\\)"},{"location":"BAC/pile_file/data/TD14_Files/#applications-des-files","title":"\u27a1 Applications des files","text":"<p>Les files sont tr\u00e8s utilis\u00e9es en informatique. Leur usage caract\u00e9ristique concerne les files d'attentes :</p> <ul> <li>Un syst\u00e8me d'exploitation g\u00e8re l'ordonnancement des processus par des files (voir Th\u00e8me 3 : Architectures mat\u00e9rielles, syst\u00e8mes d'exploitation et r\u00e9seaux)</li> <li>Une imprimante g\u00e8re les t\u00e2ches d'impression avec des files : chaque nouvelle t\u00e2che est ins\u00e9r\u00e9e dans une file d'attente, et celles-ci sont trait\u00e9es dans l'ordre d'arriv\u00e9e.</li> <li>On peut aussi utiliser une pile pour parcourir (en profondeur) un graphe et m\u00e9moriser les sommets visit\u00e9s. (voir Th\u00e8me 5 : Algorithmique)</li> <li>etc.</li> </ul>  II. Exercices sur les files  Activit\u00e9 1 : Manipulation des files <p>Question 1.</p> <p>On consid\u00e8re la s\u00e9quence d\u2019instructions suivantes. Indiquez le r\u00e9sultat \u00e0 chaque \u00e9tape.  </p> \ud83d\udccb Texte<pre><code>- F = construire_file()  \n- enfiler(F, 1)  \n- enfiler(F, 2)  \n- enfiler(F, 3)  \n- s = premier(F)  \n- defiler(F)  \n- defiler(F)  \n- enfiler(F, s)  \n</code></pre> <p>Question 2.</p> <p>\u00c9crivez la s\u00e9quence d\u2019instructions permettant d\u2019obtenir l\u2019\u00e9volution suivante pour une file F.</p> Etat de la pile P Instructions (\u00e0 compl\u00e9ter) \\(\\text{&lt;&lt;}\\) \\(\\text{&lt;3&lt;}\\) \\(\\text{&lt;3 , 1&lt;}\\) \\(\\text{&lt;3 , 1 , 4&lt;}\\) \\(\\text{&lt;1 , 4&lt;}\\) \\(\\text{&lt;4&lt;}\\) \\(\\text{&lt;&lt;}\\)"},{"location":"BAC/pile_file/data/TD14_Files/#implementations","title":"\u27a1 Impl\u00e9mentations","text":"<p>Il existe diff\u00e9rentes fa\u00e7ons d'impl\u00e9menter une file, on peut par exemple utiliser :</p> <ul> <li>un tableau (redimensionnable ou non)</li> <li>une liste cha\u00een\u00e9e</li> <li>deux piles</li> </ul> <p>Avec ces impl\u00e9mentations, il faudra en g\u00e9n\u00e9ral faire un compromis sur l'efficacit\u00e9 des op\u00e9rations car celles-ci n\u00e9cessitent de travailler sur les deux extr\u00e9mit\u00e9s de la file (pour enfiler/d\u00e9filer).</p> <ul> <li>Si on utilise un tableau, les op\u00e9rations en d\u00e9but sont co\u00fbteuses et celles \u00e0 la fin ne le sont pas. On peut alors d\u00e9cider d'enfiler en fin de tableau (peu co\u00fbteux) mais il faudra d\u00e9filer en d\u00e9but de tableau (co\u00fbteux). Si on fait le choix inverse, c'est l'op\u00e9ration <code>defiler</code> qui sera peu co\u00fbteuse et l'op\u00e9ration <code>enfiler</code> qui sera co\u00fbteuse.</li> <li>Si on utilise une liste cha\u00een\u00e9e, c'est l'inverse (efficace en t\u00eate et co\u00fbteux en queue) mais le probl\u00e8me reste le m\u00eame : une des deux op\u00e9rations sera moins efficace. </li> </ul> <p>Il existe en r\u00e9alit\u00e9 une impl\u00e9mentation plus efficace mais nous n'en parlerons pas ici.</p>  Activit\u00e9 2 : Premi\u00e8re impl\u00e9mentation d'une file (avec le type `list` de Python) <p>On d\u00e9finit le type abstrait File par les op\u00e9rations :</p> <ul> <li>cr\u00e9ation d\u2019une file vide</li> <li>enfiler : ajout en queue de file</li> <li>defiler : retrait du premier \u00e9lement de la file</li> <li>premier : acc\u00e8s (en lecture) au premier \u00e9l\u00e9ment de la file</li> <li>taille : acc\u00e8s au nombre d\u2019\u00e9l\u00e9ments</li> </ul> <p>L\u2019objectif est d\u2019impl\u00e9menter ce type abstrait en utilisant le type pr\u00e9d\u00e9fini list de Python (tableau dynamique = redimensionnable).  </p> <p>On choisira d\u2019enfiler en fin de list (efficace) et de d\u00e9filer en d\u00e9but de list (co\u00fbteux). On aurait tr\u00e8s bien pu faire l\u2019inverse, mais l\u2019une des deux op\u00e9rations (enfiler ou d\u00e9filer) ne peut pas \u00eatre en temps constant avec le type list.  </p> <p>Pour une \u00e9valuation de la complexit\u00e9 des op\u00e9rations \u00e9l\u00e9mentaires de Python voir le site : Python.org - Time complexity.</p> <p>Question 1 :</p> <p>Consultez les m\u00e9thodes disponibles sur le type list de Python pour trouver comment retirer un \u00e9l\u00e9ment en t\u00eate de liste (vous devriez savoir comment ajouter en fin de liste !). Quelle est la m\u00e9thode \u00e0 utiliser ?</p> <p>Question 2 :</p> Enonc\u00e9Solution <p>Ecrivez une classe <code>File</code> impl\u00e9mentant les op\u00e9rations du type abstrait file avec les <code>list</code> de Python. Vous utiliserez la m\u00e9thode <code>__len__</code> pour renvoyer la longueur d\u2019une file.</p> <p>Exemple : on veut que le code \ud83d\udccb Texte<pre><code>F = File()\nprint(F)\nF.enfiler(1)\nprint(F)\nF.enfiler(2)\nprint(F)\nF.enfiler(3)\nprint(F)\ns = F.premier()\nprint(s)\nF.defiler()\nprint(F)\nF.defiler()\nprint(F)\nF.enfiler(s)\nprint(F)\n</code></pre></p> <p>produise l\u2019affichage</p> \ud83d\udccb Texte<pre><code>&lt;&lt;&gt;\n&lt;1&lt;\n&lt;1,2&lt;\n&lt;1,2,3&lt;\n1\n&lt;2, 3&lt;\n&lt;3&lt;\n&lt;3,1&lt;\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre> \ud83d\udc0d Script Python<pre><code>class File:\n    def __init__(self):\n        self.contenu = []\n\n    def enfiler(self, element):\n        self.contenu.append(element)\n\n    def defiler(self):\n        assert self.taille() != 0, \"on ne peut pas d\u00e9filer une file vide\"\n        self.contenu.pop(0) # ou return self.contenu.pop(0) si l'op\u00e9ration d\u00e9filer doit aussi renvoyer le sommet\n\n    def premier(self):\n        assert self.taille() != 0, \"une file vide n'a pas de premier \u00e9l\u00e9ment\"\n        return self.contenu[0]\n\n    def taille(self):\n        return len(self.contenu)\n\n    __len__ = taille # pour pouvoir \u00e9galement utiliser len pour obtenir la longueur d'une file\n\n    # pour repr\u00e9senter une file\n    def __repr__(self):\n        ch = \"\"\n        for e in self.contenu:\n            ch = ch + str(e) + \",\"\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = \"&lt;\" + ch + \"&lt;\"\n        return ch\n</code></pre> <p>Question 3 :</p> <p>D\u00e9finissez la m\u00e9thode sp\u00e9ciale <code>__repr__</code> pour afficher le contenu d\u2019une file comme unelist de Python.  </p> <p>Attention :</p> <p>la m\u00e9thode <code>__repr__</code> doit renvoyer une cha\u00eene de caract\u00e8res (conversion avec la fonction str)  </p> <p>Exemple : on veut que le code \ud83d\udccb Texte<pre><code>F = File()\nprint(F)\nF.enfiler(1)\nprint(F)\nF.enfiler(2)\nprint(F)\nF.enfiler(3)\nprint(F)\ns = F.premier()\nprint(s)\nF.defiler()\nprint(F)\nF.defiler()\nprint(F)\nF.enfiler(s)\nprint(F)\n</code></pre></p> <p>produise l\u2019affichage</p> \ud83d\udccb Texte<pre><code>&lt;&lt;\n&lt;1&lt;\n&lt;1,2&lt;\n&lt;1,2,3&lt;\n1\n&lt;2, 3&lt;\n&lt;3&lt;\n&lt;3,1&lt;\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre>  Activit\u00e9 3 : Deuxi\u00e8me impl\u00e9mentation d\u2019une file (avec deux piles) <p>On veut r\u00e9aliser une impl\u00e9mentation objet d\u2019une file en utilisant deux piles. Vous utiliserez l\u2019impl\u00e9mentation suivante d\u2019une pile pour travailler</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.contenu = []\n\n    def empiler(self, e):\n        self.contenu.append(e)\n\n    def depiler(self):\n        assert self.taille != 0, \"on ne peut pas d\u00e9piler une pile vide\"\n        self.contenu.pop()\n\n    def sommet(self):\n        assert self.taille != 0, \"une pile vide n\u2019a pas de sommet\"\n        return self.contenu[-1]\n\n    def taille(self):\n        return len(self.contenu)\n\n    # pour repr\u00e9senter la Pile\n    def __repr__(self):\n        ch = ''\n        for e in self.contenu:\n            ch = str(e) + \",\" + ch # ne pas oublier de convertir les \u00e9l\u00e9ments en\u2423chaine de caract\u00e8res\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = '&gt;' + ch+']'\n        return ch\n</code></pre> <p>Pour simplifier, l\u2019op\u00e9ration defiler renverra \u00e9galement le premier \u00e9l\u00e9ment (en plus de le retirer de la file). L\u2019op\u00e9ration premier n\u2019est alors plus n\u00e9cessaire. Vous devez donc impl\u00e9menter une classe File permettant les op\u00e9rations suivantes :  </p> <ul> <li>cr\u00e9ation d\u2019une file vide</li> <li>enfiler : ajout en queue de file</li> <li>defiler : renvoie le premier \u00e9lement de la file et retire cet \u00e9l\u00e9ment de la file</li> <li>len : acc\u00e8s au nombre d\u2019\u00e9l\u00e9ments</li> </ul> <p>Aide :</p> <ul> <li>Op\u00e9ration enfiler (simple) : C\u2019est toujours dans l\u2019une des deux piles (par exemple pA) que l\u2019on empile un nouvel \u00e9l\u00e9ment \u00e0 enfiler.</li> <li>Op\u00e9ration defiler (compliqu\u00e9e) :</li> <li>Si l\u2019autre pile (pB) n\u2019est pas vide, son sommet est le premier \u00e9l\u00e9ment de la file (celui \u00e0 d\u00e9filer)</li> <li>Sinon (si pB est vide), le premier \u00e9l\u00e9ment de la file (celui \u00e0 d\u00e9filer) est au fond de pA. On peut alors \u201cretourner\u201d pA sur pB pour le premier \u00e9l\u00e9ment de la file arrive au sommet de pB.</li> <li>Op\u00e9ration len (simple) : il suffit d\u2019utiliser la m\u00e9thode taille d\u00e9finie dans la classe Pile.</li> </ul> <p>Question :</p> Enonc\u00e9Solution <p>Compl\u00e9tez les m\u00e9thodes enfiler, len et defiler de la classe File suivante qui impl\u00e9mente une file avec deux piles.</p> \ud83d\udc0d Script Python<pre><code>class File:\n\"\"\"File avec deux piles\"\"\"\n    def __init__(self):\n        self.pA = Pile() # pA et pB sont les deux attributs de nos objets de la classe File\n        self.pB = Pile()\n\n    def enfiler(self, e):\n        # \u00e0 compl\u00e9ter\n        pass\n\n    def __len__(self):\n        # \u00e0 compl\u00e9ter\n        pass\n    def defiler(self):\n        if self.pA.taille() == 0 and self.pB.taille() == 0:\n            raise ValueError(\"on ne peut pas d\u00e9filer une file vide\")\n            # \u00e0 compl\u00e9ter\n\n    # La m\u00e9thode __repr__ est d\u00e9finie pour que vous puissiez voir l\u2019\u00e9tat d\u2019une file\n    def __repr__(self):\n        import copy\n        #print(\"pile A : \", repr(self.pA)) # pour voir le contenu des deux piles\n        #print(\"pile B : \", repr(self.pB))\n        lstA = copy.copy(self.pA.contenu) # copie des list Python repr\u00e9sentant nos deux piles\n        lstB = copy.copy(self.pB.contenu) # pour ne pas les modifier\n        lstB.reverse() # on a besoin de renverser lstB pour avoir nos \u00e9l\u00e9ments dans l\u2019ordre d\u2019entr\u00e9e\n        lst = lstB + lstA # et de concat\u00e9ner lstB et lstA dans cet ordre\n        # on construit ensuite la chaine \"&lt;...&lt;\" qui repr\u00e9sente nos files\n        ch = \"\"\n        for e in lst:\n            ch = ch + str(e) + \",\"\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = \"&lt;\" + ch + \"&lt;\"\n        return ch\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.contenu = []\n\n    def empiler(self, e):\n        self.contenu.append(e)\n\n    def depiler(self):\n        assert self.taille != 0, \"on ne peut pas d\u00e9piler une pile vide\"\n        self.contenu.pop()\n\n    def sommet(self):\n        assert self.taille != 0, \"une pile vide n\u2019a pas de sommet\"\n        return self.contenu[-1]\n\n    def taille(self):\n        return len(self.contenu)\n\n    # pour repr\u00e9senter la Pile\n    def __repr__(self):\n    ch = \"\"\n    for e in self.contenu:\n        ch = str(e) + \",\" + ch # ne pas oublier de convertir les \u00e9l\u00e9ments en chaine de caract\u00e8res\n    ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n    ch = \"&gt;\" + ch+']'\n    return ch\n\nclass File:\n\"\"\"File avec deux piles\"\"\"\n    def __init__(self):\n        self.pA = Pile() # pA et pB sont les deux attributs de nos objets de la classe File \n        self.pB = Pile()\n\n    def enfiler(self, e):\n        return self.pA.empiler(e)\n\n    def __len__(self):\n        return self.pA.taille()+self.pB.taille()\n\n    def defiler(self):\n        if self.pA.taille() == 0 and self.pB.taille() == 0:\n            raise ValueError(\"on ne peut pas d\u00e9filer une file vide\")\n        # La m\u00e9thode __repr__ est d\u00e9finie pour que vous puissiez voir l\u2019\u00e9tat d\u2019une file\n        else:\n            if self.pB.taille() == 0:\n                for x in range(self.pA.taille()-1):\n                    self.pB.empiler(self.pA.sommet())\n                    self.pA.depiler()\n                self.pA.depiler()\n                print('pA',self.pA)\n                print('pB1',self.pB)\n            else:\n                self.pB.depiler()\n\n    def __repr__(self):\n        import copy\n        #print(\"pile A : \", repr(self.pA)) # pour voir le contenu des deux piles\n        #print(\"pile B : \", repr(self.pB))\n        lstA = copy.copy(self.pA.contenu) # copie des list Python repr\u00e9sentant nos deux piles\n        lstB = copy.copy(self.pB.contenu) # pour ne pas les modifier\n        lstB.reverse() # on a besoin de renverser lstB pour avoir nos \u00e9l\u00e9ments dans l\u2019ordre d\u2019entr\u00e9e\n        lst = lstB + lstA # et de concat\u00e9ner lstB et lstA dans cet ordre\n\n        # on construit ensuite la chaine \"&lt;...&lt;\" qui repr\u00e9sente nos files\n        ch = \"\"\n        for e in lst:\n            ch = ch + str(e) + \",\"\n        ch = ch[:-1] # pour enlever la derni\u00e8re virgule\n        ch = \"&lt;\" + ch + \"&lt;\"\n        return ch\n</code></pre>  III. Sujet BAC sur les files  M\u00e9tropole Juin 2021 - Sujet 2 <p>Cet exercice porte sur les structures de donn\u00e9es lin\u00e9aires </p> <p>Une m\u00e9thode simple pour g\u00e9rer l'ordonnancement des processus est d'ex\u00e9cuter les processus en une seule fois et dans leur ordre d'arriv\u00e9e.</p> <p>Question 1</p> Enonc\u00e9Solution <p>Parmi les propositions suivantes, quelle est la structure de donn\u00e9es la plus appropri\u00e9e pour mettre en \u0153uvre le mode FIFO (First In First Out) ?  </p> <p>a. liste b. dictionnaire c. pile d. file   </p> <p>r\u00e9ponse d une file</p> <p>Question 2</p> Enonc\u00e9Solution <p>On choisit de stocker les donn\u00e9es des processus en attente \u00e0 l'aide d'une liste Python lst. On dispose d\u00e9j\u00e0 d'une fonction <code>retirer(lst)</code> qui renvoie l'\u00e9l\u00e9ment <code>lst[0]</code> puis le supprime de la liste <code>lst</code>. \u00c9crire en Python le code d'une fonction <code>ajouter(lst, proc)</code> qui ajoute \u00e0 la fin de la liste <code>lst</code> le nouveau processus en attente <code>proc</code>. </p> \ud83d\udc0d Script Python<pre><code>def ajouter(lst,proc):\n    lst.append(proc)\n</code></pre> <p>On choisit maintenant d'impl\u00e9menter une file <code>file</code> \u00e0 l'aide d'un couple (<code>p1,p2)</code>o\u00f9 <code>p1</code> et <code>p2</code> sont des piles. Ainsi <code>file[0]</code> et <code>file[1]</code> sont respectivement les piles <code>p1</code> et <code>p2</code>. Pour enfiler un nouvel \u00e9l\u00e9ment <code>elt</code> dans <code>file</code>, on l'empile dans <code>p1</code>. Pour d\u00e9filer <code>file</code>, deux cas se pr\u00e9sentent. </p> <ul> <li>La pile <code>p2</code> n'est pas vide : on d\u00e9pile <code>p2</code>.</li> <li>La pile <code>p2</code> est vide : on d\u00e9pile les \u00e9l\u00e9ments de <code>p1</code> en les empilant dans <code>p2</code> jusqu'\u00e0 ce que <code>p1</code> soit vide, puis on d\u00e9pile <code>p2</code>.</li> </ul> <p></p> <p>Question 3</p> Enonc\u00e9eSolution <p>On consid\u00e8re la situation repr\u00e9sent\u00e9e ci-dessous.  </p> <p></p> <p>On ex\u00e9cute la s\u00e9quence d'instructions suivante :</p> \ud83d\udccb Texte<pre><code>enfiler(file,ps6)\ndefiler(file)\ndefiler(file)\ndefiler(file)\nenfiler(file,ps7)\n</code></pre> <p>Repr\u00e9senter le contenu final des deux piles \u00e0 la suite de ces instructions. </p> <p> </p> <p>Question 4</p> Enonc\u00e9eSolution 4.aSolution 4.bSolution 4.c <p>On dispose des fonctions :</p> <ul> <li><code>empiler(p,elt)</code> qui empile l'\u00e9l\u00e9ment <code>elt</code> dans la pile <code>p</code>,  </li> <li><code>depiler(p)</code> qui renvoie le sommet de la pile <code>p</code> si <code>p</code> n'est pas vide et le supprime,  </li> <li><code>pile_vide(p)</code> qui renvoie <code>True</code> si la pile <code>p</code> est vide, <code>False</code> si la pile <code>p</code> n'est pas vide.   </li> </ul> <p>a. \u00c9crire en Python une fonction est_<code>vide(f)</code> qui prend en argument un couple de piles <code>f</code> et qui renvoie <code>True</code> si la file repr\u00e9sent\u00e9e par <code>f</code> est vide, <code>False</code> sinon. </p> <p>b. \u00c9crire en Python une fonction <code>enfiler(f,elt)</code> qui prend en arguments un couple de piles <code>f</code> et un \u00e9l\u00e9ment <code>elt</code> et qui ajoute <code>elt</code> en queue de la file repr\u00e9sent\u00e9e par <code>f</code>. </p> <p>c. \u00c9crire en Python une fonction <code>defiler(f)</code> qui prend en argument un couple de piles <code>f</code> et qui renvoie l'\u00e9lement en t\u00eate de la file repr\u00e9sent\u00e9e par <code>f</code> en le retirant. </p> \ud83d\udc0d Script Python<pre><code>def est_vide(f):\n    return pile_vide(f[0]) and pile_vide(f[1])\n</code></pre> \ud83d\udc0d Script Python<pre><code>def enfiler(f,elt):\n    empiler(f[0],elt)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def defiler(f):\n    p1 = f[0]\n    p2 = f[1]\n    if pile_vide(p2):\n        while not pile_vide(p1):\n            v = depiler(p1)\n            empiler(p2,v)\n    return depiler(p2)\n</code></pre>  Am\u00e9rique du Nord 2021 - Sujet 2 <p>Cet exercice porte sur la notion de pile, de file et sur la programmation de base en Python.</p> <p>Les interfaces des structures de donn\u00e9es abstraites Pile et File sont propos\u00e9es ci-dessous.</p> <p>On utilisera uniquement les fonctions ci-dessous :</p> <p>Structure de donn\u00e9es abstraite : Pile </p> <p>Utilise : </p> <ul> <li>\u00c9l\u00e9ments, Bool\u00e9en</li> </ul> <p>Op\u00e9rations :  </p> <ul> <li>creer_pile_vide : \u2205 \u2192 Pile     creer_pile_vide() renvoie une pile vide</li> <li>est_vide : Pile \u2192 Bool\u00e9en      est_vide(pile) renvoie True si pile est vide, False sinon</li> <li>empiler : Pile, \u00c9l\u00e9ment \u2192 Rien     empiler(pile, element) ajoute element au sommet de la pile</li> <li>depiler : Pile \u2192 \u00c9l\u00e9ment     depiler(pile) renvoie l\u2019\u00e9l\u00e9ment au sommet de la pile en le retirant de la pile</li> </ul> <p>Structure de donn\u00e9es abstraite : File </p> <p>Utilise : </p> <ul> <li>\u00c9l\u00e9ments, Bool\u00e9en</li> </ul> <p>Op\u00e9rations :  </p> <ul> <li>creer_file_vide : \u2205 \u2192 File     creer_file_vide() renvoie une file vide</li> <li>est_vide : File \u2192 Bool\u00e9en      est_vide(file) renvoie True si file est vide, False sinon</li> <li>empiler : File, \u00c9l\u00e9ment \u2192 Rien     empiler(file, element) ajoute element dans la file</li> <li>depiler : File \u2192 \u00c9l\u00e9ment     depiler(file) renvoie l\u2019\u00e9l\u00e9ment au sommet de la file en le retirant de la file</li> </ul> <p>Question 1</p> Enonc\u00e9Solution 1.aSolution 1.b <p>(a) On consid\u00e8re la file F suivante :  </p> <p></p> <p>Quel sera le contenu de la pile P et de la file F apr\u00e8s l\u2019ex\u00e9cution du programme Python suivant ?</p> \ud83d\udc0d Script Python<pre><code>1 P = creer_pile_vide ()\n2 while not( est_vide (F )):\n3     empiler (P, defiler (F))\n</code></pre> <p>(b) Cr\u00e9er une fonction <code>taille_file</code> qui prend en param\u00e8tre une file <code>F</code> et qui renvoie le nombre d\u2019\u00e9l\u00e9ments qu\u2019elle contient. Apr\u00e8s appel de cette fonction la file <code>F</code> doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.</p> \ud83d\udc0d Script Python<pre><code>1 def taille_file (F):\n2      \"\"\" File -&gt; Int \"\"\"\n</code></pre> <p></p> \ud83d\udc0d Script Python<pre><code>def taille_file(F):\n    t = 0\n    ft = creer_file_vide()\n    while not est_vide(F):\n        t = t + 1\n        enfiler(ft, defiler(F))\n    while not est_vide(ft):\n        enfiler(F, defiler(ft))\n    return t   \n</code></pre> <p>Question 2</p> Enonc\u00e9Solution <p>\u00c9crire une fonction former_pile qui prend en param\u00e8tre une file <code>F</code> et qui renvoie une pile <code>P</code> contenant les m\u00eames \u00e9l\u00e9ments que la file. Le premier \u00e9l\u00e9ment sorti de la file devra se trouver au sommet de la pile ; le deuxi\u00e8me \u00e9l\u00e9ment sorti de la file devra se trouver juste en-dessous du sommet, etc. Exemple :  <code>former_pile(F)</code> va renvoyer la pile P ci-dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def former_pile(F):\n    p = creer_pile_vide()\n    pt = creer_pile_vide()\n    while not est_vide(F):\n        empiler(pt,defiler(F))\n    while not est_vide(pt):\n        empiler(p,depiler(pt))\n    return p\n</code></pre> <p>Question 3</p> Enonc\u00e9Solution <p>\u00c9crire une fonction <code>nb_elements</code> qui prend en param\u00e8tres une file <code>F</code> et un \u00e9l\u00e9ment <code>elt</code> et qui renvoie le nombre de fois o\u00f9 <code>elt</code> est pr\u00e9sent dans la file <code>F</code>.   Apr\u00e8s appel de cette fonction la file <code>F</code> doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.</p> \ud83d\udc0d Script Python<pre><code>def nb_elements(F, ele):\n    nb = 0\n    ft = creer_file_vide()\n    while not est_vide(F):\n        x = defiler(F)\n        if x==ele:\n            nb = nb + 1\n        enfiler(ft, x)\n    while not est_vide(ft):\n        enfiler(F, defiler(ft))\n    return nb\n</code></pre> <p>Question 4</p> Enonc\u00e9Solution <p>\u00c9crire une fonction <code>verifier_contenu</code> qui prend en param\u00e8tres une file F et trois entiers : <code>nb_rouge</code>, <code>nb_vert</code> et <code>nb_jaune</code>. Cette fonction renvoie le bool\u00e9en <code>True</code> si \"rouge\" appara\u00eet au plus <code>nb_rouge</code> fois dans la file <code>F</code>, \"vert\" appara\u00eet au plus <code>nb_vert</code> fois dans la file <code>F</code> et \"jaune\" appara\u00eet au plus <code>nb_jaune</code> fois dans la file <code>F</code>. Elle renvoie <code>False</code> sinon. On pourra utiliser les fonctions pr\u00e9c\u00e9dentes.</p> \ud83d\udc0d Script Python<pre><code>def verifier_contenu(F, nb_rouge, nb_vert, nb_jaune):\n    return nb_elements(F, \"rouge\") &lt;= nb_rouge and nb_elements(F,\"vert\") &lt;= nb_vert and nb_elements(F, \"jaune\") &lt;= nb_jaune\n</code></pre>"},{"location":"BAC/programmation/compilation_programmation/","title":"Sujet BAC 17 :  \u00a0 Programmation - Tableaux","text":""},{"location":"BAC/programmation/compilation_programmation/#cours","title":"Cours","text":"<p>Vous pouvez t\u00e9l\u00e9charger une copie au format pdf du diaporama de synth\u00e8se de cours :</p> <p>Diaporama de cours </p> <p>Attention</p> <p>Ce diaporama n'est qu'une synth\u00e8se de cours et ne donne que quelques points de rep\u00e8res pour de vos r\u00e9visions.</p>"},{"location":"BAC/programmation/compilation_programmation/#amerique-du-nord-2021-j1","title":"Am\u00e9rique du Nord 2021 J1","text":"<p>Tableaux et Programmation</p> <p>On rappelle que len est une fonction qui prend un tableau en param\u00e8tre et renvoie sa longueur. C\u2019est-\u00e0-dire le nombre d\u2019\u00e9l\u00e9ments pr\u00e9sents dans le tableau.  </p> <p>Exemple : <code>len([12, 54, 34, 57])</code> vaut 4.</p> <p>Le but de cet exercice est de programmer diff\u00e9rentes r\u00e9ductions pour un site de vente de v\u00eatements en ligne. On rappelle que si le prix d\u2019un article avant r\u00e9duction est de x euros,  </p> <ul> <li>son prix vaut 0, 5x si on lui applique une r\u00e9duction de 50%,  </li> <li>son prix vaut 0, 6x si on lui applique une r\u00e9duction de 40%,  </li> <li>son prix vaut 0, 7x si on lui applique une r\u00e9duction de 30%,  </li> <li>son prix vaut 0, 8x si on lui applique une r\u00e9duction de 20%,  </li> <li>son prix vaut 0, 9x si on lui applique une r\u00e9duction de 10%.  </li> </ul> <p>Dans le syst\u00e8me informatique du site de vente, l\u2019ensemble des articles qu\u2019un client veut acheter, appel\u00e9 panier, est mod\u00e9lis\u00e9 par un tableau de flottants. Par exemple, si un client veut acheter un pantalon \u00e0 30,50 euros, un tee-shirt \u00e0 15 euros, une paire de chaussettes \u00e0 6 euros, une jupe \u00e0 20 euros, une paire de  collants \u00e0 5 euros, une robe \u00e0 35 euros et un short \u00e0 10,50 euros, le syst\u00e8me informatique aura le tableau suivant :  </p> \ud83d\udc0d Script Python<pre><code>tab = [30.5, 15.0, 6.0, 20.0, 5.0, 35.0, 10.5]\n</code></pre> <p>Question 1. (a)</p> <p>\u00c9crire une fonction Python total_hors_reduction ayant pour argument le tableau des prix des articles du panier d\u2019un client et renvoyant le total des prix de ces articles. </p> <p>Question  1. (b)</p> <p>Le site de vente propose la promotion suivante comme offre de bienvenue : 20% de r\u00e9duction sur le premier article de la liste, 30% de r\u00e9duction sur le deuxi\u00e8me article de la liste (s\u2019il y a au moins deux articles) et aucune r\u00e9duction sur le reste des articles (s\u2019il y en a). Recopier sur la copie et compl\u00e9ter la fonction Python offre_bienvenue prenant en param\u00e8tre le tableau tab des prix des articles du panier d\u2019un client et renvoyant le total \u00e0 payer lorsqu\u2019on leur applique l\u2019offre de bienvenue.  </p> \ud83d\udc0d Script Python<pre><code>def offre_bienvenue (tab ):\n\"\"\" tableau -&gt; float \"\"\"\n    somme =0\n    longueur =len(tab )\n    if longueur &gt; 0 :\n        somme =tab [0]*...\n    if longueur &gt; 1 :\n        somme = somme + ...\n    if longueur &gt; 2 :\n        for i in range (2, longueur ):\n            somme =...\n    return ...\n</code></pre> <p>Pour toute la suite de l\u2019exercice, on pourra utiliser la fonction total_hors_reduction m\u00eame si la question 1 n\u2019a pas \u00e9t\u00e9 trait\u00e9e.</p> <p>Question 2.</p> <p>Lors de la p\u00e9riode des soldes, le site de vente propose les r\u00e9ductions suivantes :  </p> <ul> <li>si le panier contient 5 articles ou plus, une r\u00e9duction globale de 50%,  </li> <li>si le panier contient 4 articles, une r\u00e9duction globale de 40%,  </li> <li>si le panier contient 3 articles, une r\u00e9duction globale de 30%,  </li> <li>si le panier contient 2 articles, une r\u00e9duction globale de 20%,  </li> <li>si le panier contient 1 article, une r\u00e9duction globale de 10%.  </li> </ul> <p>Proposer une fonction Python prix_solde ayant pour argument le tableau tab des prix des articles du panier d\u2019un client et renvoyant le total des prix de ces articles lorsqu\u2019on leur applique la r\u00e9duction des soldes.</p> <p>Question 3. (a)</p> <p>\u00c9crire une fonction minimum qui prend en param\u00e8tre un tableau tab de nombres et renvoie la valeur minimum pr\u00e9sente dans le tableau.</p> <p>Question 3. (b)</p> <p>Pour ses bons clients, le site de vente propose une offre promotionnelle, \u00e0 partir de 2 articles achet\u00e9s, l\u2019article le moins cher des articles command\u00e9s est  offert. \u00c9crire une fonction Python offre_bon_client ayant pour param\u00e8tre le tableau des prix des articles du panier d\u2019un client et renvoyant le total \u00e0 payer lorsqu\u2019on leur applique l\u2019offre bon client.</p> <p>Question 4. Afin de diminuer le stock de ses articles dans ses entrep\u00f4ts, l\u2019entreprise imagine faire l\u2019offre suivante \u00e0 ses clients : en suivant l\u2019ordre des articles dans le panier du client, elle consid\u00e8re les 3 premiers articles et offre le moins cher, puis les 3 suivants et offre le moins cher et ainsi de suite jusqu\u2019\u00e0 ce qu\u2019il reste au plus 2 articles qui n\u2019ont alors droit \u00e0 aucune r\u00e9duction. Exemple : Si le panier du client contient un pantalon \u00e0 30,50 euros, un tee-shirt \u00e0 15 euros, une paire de chaussettes \u00e0 6 euros, une jupe \u00e0 20 euros, une paire de collants \u00e0 5 euros, une robe \u00e0 35 euros et un short \u00e0 10,50 euros, ce panier est repr\u00e9sent\u00e9 par le tableau suivant : \ud83d\udc0d Script Python<pre><code>tab = [30.5, 15.0, 6.0, 20.0, 5.0, 35.0, 10.5]\n</code></pre>  Pour le premier groupe (le pantalon \u00e0 30,50 euros, le tee-shirt \u00e0 15 euros, la paire de chaussettes \u00e0 6 euros), l\u2019article le moins cher, la paire de chaussettes \u00e0 6 euros, est offert. Pour le second groupe (la jupe \u00e0 20 euros, la paire de collants \u00e0 5 euros, la robe \u00e0 35 euros), la paire de collants \u00e0 5 euros est offerte.  Donc le total apr\u00e8s promotion de d\u00e9stockage est 111 euros.  On constate que le prix apr\u00e8s promotion de d\u00e9stockage d\u00e9pend de l\u2019ordre dans lequel se pr\u00e9sentent les articles dans le panier.</p> <p>Question 4.(a)</p> <p>Proposer un panier contenant les m\u00eames articles que ceux de l\u2019exemple mais ayant un prix apr\u00e8s promotion de d\u00e9stockage diff\u00e9rent de 111 euros.</p> <p>Question 4. (b)</p> <p>Proposer un panier contenant les m\u00eames articles mais ayant le prix apr\u00e8s promotion de d\u00e9stockage le plus bas possible.</p> <p>Question 4. (c)</p> <p>Une fois ses articles choisis, quel algorithme le client peut-il utiliser pour modifier son panier afin de s\u2019assurer qu\u2019il obtiendra le prix apr\u00e8s promotion de d\u00e9stockage le plus bas possible ? On ne demande pas d\u2019\u00e9crire cet algorithme.</p> R\u00e9ponse <ol> <li> <p>a. \ud83d\udc0d Script Python<pre><code>def total_hors_reduction(tab):\n'''Calcul la somme des \u00e9l\u00e9ments de tab'''\n    assert type(tab)==list, \"L'argument doit \u00eatre une liste\"\n    thr = 0\n    for prix in tab:\n        assert type(prix)==int or type(prix)==float,\"Les prix doivent \u00eatre de types num\u00e9riques\"\n        thr += prix\n    return thr\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def offre_bienvenue(tab):\n\"\"\" tableau -&gt; float \"\"\"\n    somme =0\n    longueur = len(tab)\n    if longueur &gt; 0:\n        somme = tab[0]* 0,8\n    if longueur &gt; 1:\n        somme = somme + tab[1] * 0,7\n    if longueur &gt; 2:\n        for i in range(2,longueur):\n            somme = somme + tab[i]\n    return somme\n</code></pre></p> </li> <li> \ud83d\udc0d Script Python<pre><code>def prix_solde(tab):\n    if len(tab)&gt;=5:\n        return total_hors_reduction(tab)*0.5\n    elif len(tab)==4:\n        return total_hors_reduction(tab)*0.6\n    elif len(tab)==3:\n        return total_hors_reduction(tab)*0.7\n    elif len(tab)==2:\n        return total_hors_reduction(tab)*0.8\n    else:\n        return total_hors_reduction(tab)*0.9\n</code></pre> </li> <li> <p>a. \ud83d\udc0d Script Python<pre><code>def minimum(tab):\n    min_courant = tab[0]\n    for elt in tab:\n        if elt&lt;min_courant:\n            min_courant = elt\n    return min_courant\n</code></pre></p> <p>b. \ud83d\udc0d Script Python<pre><code>def offre_bon_client(tab):\n    if len(tab)&gt;=2:\n        return total_hors_reduction(tab)-minimum(tab)\n    else:\n        return total_hors_reduction(tab)\n</code></pre></p> </li> <li> <p>a. \ud83d\udc0d Script Python<pre><code>tab = [35.0,30.5,20.0,15.0,10.5,5.0,6.0]\n</code></pre></p> <p>Le total des prix du panier est de \\(35 + 30,5 + 20 + 15 + 10.5 + 6 + 5=122\\). Compte tenu de l'ordre des articles les articles coutant 20 \u20ac et 5 \u20ac seront offerts. Et donc le prix \u00e0 payer sera 97 \u20ac.</p> <p>b. \ud83d\udc0d Script Python<pre><code>tab = [35.0,30.5,20.0,15.0,10.5,6.0,5.0]\n</code></pre> Le prix total a payer est de 96 euros.</p> <p>c. Il faut trier les objets par ordre d\u00e9croissant de prix.</p> </li> </ol>"},{"location":"BAC/programmation/compilation_programmation/#france-2021-j1-21-nsij1me2","title":"France 2021 J1 (21-NSIJ1ME2)","text":"<p>!!!\u00a0exo</p>"},{"location":"BAC/programmation/compilation_programmation/#partie-a-representation-dun-labyrinthe","title":"Partie A : Repr\u00e9sentation d\u2019un labyrinthe","text":"<p>On mod\u00e9lise un labyrinthe par un tableau \u00e0 deux dimensions \u00e0 \u074a\\(n\\) lignes et \u0749\\(m\\) colonnes avec \u074a\\(n\\) et \u0749\\(m\\) des entiers strictement positifs. Les lignes sont num\u00e9rot\u00e9es de 0 \u00e0 \u074a\\(n-1\\) et les colonnes de 0 \u00e0 \\(m-1\\). La case en haut \u00e0 gauche est rep\u00e9r\u00e9e par \\((0,0)\\) et la case en bas \u00e0 droite par \\((n-1,m-1)\\).  </p> <p>Dans ce tableau :  </p> <ul> <li>0 repr\u00e9sente une case vide, hors case de d\u00e9part et arriv\u00e9e,  </li> <li>1 repr\u00e9sente un mur,  </li> <li>2 repr\u00e9sente le d\u00e9part du labyrinthe,  </li> <li>3 repr\u00e9sente l'arriv\u00e9e du labyrinthe.  </li> </ul> <p>Ainsi, en Python, le labyrinthe ci-dessous est repr\u00e9sent\u00e9e par le tableau de tableaux <code>lab1</code>.  </p> <p></p> <p>Question A.1.</p> <p>Le labyrinthe ci-dessous est cens\u00e9 \u00eatre repr\u00e9sent\u00e9 par le tableau de tableaux lab2.  Cependant, dans ce tableau, un mur se trouve \u00e0 la place du d\u00e9part du labyrinthe. Donner une instruction permettant de placer le d\u00e9part au bon endroit dans lab2.</p> <p></p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>lab2[1][0] = 2\n</code></pre> <p>Question A.2.</p> <p>\u00c9crire une fonction <code>est_valide(i, j, n, m)</code> qui renvoie <code>True</code> si le couple \\((i,j)\\) correspond \u00e0 des coordonn\u00e9es valides pour un labyrinthe de taille \\((n,m)\\), et <code>False</code> sinon. On donne ci-dessous des exemples d'appels.  </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_valide(5, 2, 10, 10)\nTrue\n&gt;&gt;&gt; est_valide(-3, 4, 10, 10)\nFalse\n</code></pre> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def est_valide(i,j,n,m):\n    return i&gt;=0 and j&gt;=0 and i&lt;n and j&lt;m\n</code></pre> <p>Question A.3.</p> <p>On suppose que le d\u00e9part d'un labyrinthe est toujours indiqu\u00e9, mais on ne fait aucune supposition sur son emplacement. Compl\u00e9ter la fonction depart(lab)ci-dessous de sorte qu'elle renvoie, sous la forme d'un tuple, les coordonn\u00e9es du d\u00e9part d'un labyrinthe (repr\u00e9sent\u00e9 par le param\u00e8tre lab).  Par exemple, l'appel depart(lab1) doit renvoyer le tuple (5, 0).  </p> \ud83d\udc0d Script Python<pre><code>def depart(lab) :\n    n = len(lab)\n    m = len(lab[0])\n    ...\n</code></pre> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def depart(lab):\n    n = len(lab)\n    m = len(lab[0])\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j]==2:\n                return (i,j)\n</code></pre> <p>Question A.4.</p> <p>\u00c9crire une fonction nb_cases_vides(lab) qui renvoie le nombre de cases vides d'un labyrinthe (comprenant donc l'arriv\u00e9e et le d\u00e9part). Par exemple, l'appel nb_cases_vides(lab2) doit renvoyer la valeur 19.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def nb_cases_vides(lab):\n    n = len(lab)\n    m = len(lab[0])\n    compt = 0\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j]==2 or lab[i][j]==3 or lab[i][j]==0:\n                compt = compt + 1\n    return compt\n</code></pre>"},{"location":"BAC/programmation/compilation_programmation/#partie-b-recherche-dune-solution-dans-un-labyrinthe","title":"Partie B : Recherche d\u2019une solution dans un labyrinthe","text":"<p>On suppose dans cette partie que les labyrinthes poss\u00e8dent un unique chemin allant du d\u00e9part \u00e0 l\u2019arriv\u00e9e sans repasser par la m\u00eame case. Dans la suite, c\u2019est ce chemin que l\u2019on appellera solution du labyrinthe. Pour d\u00e9terminer la solution d'un labyrinthe, on parcourt les cases vides de proche en proche. Lors d\u2019un tel parcours, afin d\u2019\u00e9viter de tourner en rond, on choisit de marquer les cases visit\u00e9es. Pour cela, on remplace la valeur d'une case visit\u00e9e dans le tableau repr\u00e9sentant le labyrinthe par la valeur 4.  </p> <p>Question B.1.</p> <p>On dit que deux cases d'un labyrinthe sont voisines si elles ont un c\u00f4t\u00e9 commun. On consid\u00e8re une fonction <code>voisines(i, j, lab)</code> qui prend en arguments deux entiers \u0745\\(i\\) et \u0746\\(j\\) repr\u00e9sentant les coordonn\u00e9es d\u2019une case et un tableau <code>lab</code> qui repr\u00e9sente un labyrinthe. Cette fonction renvoie la liste des coordonn\u00e9es des cases voisines de la case de coordonn\u00e9es \\((i,j)\\) qui sont valides, non visit\u00e9es et qui ne sont pas des murs. L'ordre des \u00e9l\u00e9ments de cette liste n'importe pas. Ainsi, l'appel <code>voisines(1, 1, [[1, 1, 1], [4, 0, 0], [1, 0, 1]])</code> renvoie la liste <code>[(2, 1), (1, 2)]</code>. Que renvoie l'appel <code>voisines(1, 2, [[1, 1, 4], [0, 0, 0], [1, 1, 0]])</code> ?</p> r\u00e9ponse <p>L\u2019appel de la fonction renvoie : [(2, 2), (1, 1)]</p> <p>Question 2. On souhaite stocker la solution dans une liste chemin. Cette liste contiendra les coordonn\u00e9es des cases de la solution, dans l'ordre. Pour cela, on proc\u00e8de de la fa\u00e7on suivante.  </p> <ul> <li>Initialement :<ul> <li>d\u00e9terminer les coordonn\u00e9es du d\u00e9part : c'est la premi\u00e8re case \u00e0 visiter ;</li> <li>ajouter les coordonn\u00e9es de la case d\u00e9part \u00e0 la liste chemin.</li> </ul> </li> <li>Tant que l'arriv\u00e9e n'a pas \u00e9t\u00e9 atteinte :<ul> <li>on marque la case visit\u00e9e avec la valeur 4 ;</li> <li>si la case visit\u00e9e poss\u00e8de une case voisine libre, la premi\u00e8re case de la liste renvoy\u00e9e par la fonction <code>voisines</code> devient la prochaine case \u00e0 visiter et on ajoute \u00e0 la liste chemin ;  </li> <li>sinon, il s'agit d'une impasse. On supprime alors la derni\u00e8re case dans la liste chemin. La prochaine case \u00e0 visiter est celle qui est d\u00e9sormais en derni\u00e8re position de la liste chemin. </li> </ul> </li> </ul> <p>Question B.2. a.</p> <p>Le tableau de tableaux lab3 ci-dessous repr\u00e9sente un labyrinthe.  </p> \ud83d\udc0d Script Python<pre><code>lab3 =  [[1, 1, 1, 1, 1, 1],\n        [2, 0, 0, 0, 0, 3],\n        [1, 0, 1, 0, 1, 1],\n        [1, 1, 1, 0, 0, 1]]\n</code></pre> <p>La suite d'instructions ci-dessous simule le d\u00e9but des modifications subies par la liste chemin lorsque l'on applique la m\u00e9thode pr\u00e9sent\u00e9e. \ud83d\udc0d Script Python<pre><code># entr\u00e9e: (1, 0), sortie (1, 5)\nchemin = [(1, 0)]\nchemin.append((1, 1))\nchemin.append((2, 1))\nchemin.pop()\nchemin.append((1, 2))\nchemin.append((1, 3))\nchemin.append((2, 3))\n</code></pre></p> <p>Compl\u00e9ter cette suite d'instructions jusqu'\u00e0 ce que la liste chemin repr\u00e9sente la solution. Rappel : la m\u00e9thode pop supprime le dernier \u00e9l\u00e9ment d'une liste et renvoie cet \u00e9l\u00e9ment.</p> <p>Question B.2. b.</p> <p>Recopier et compl\u00e9ter la fonction solution(lab) donn\u00e9e ci-dessous de sorte qu'elle renvoie le chemin solution du labyrinthe repr\u00e9sent\u00e9 par le param\u00e8tre lab.  </p> <p>On pourra pour cela utiliser la fonction voisines.</p> \ud83d\udc0d Script Python<pre><code>def solution(lab):\n    chemin = [depart(lab)]\n    case = chemin[0]\n    i = case[0]\n    j = case[1]\n    ---\n</code></pre> <p>Par exemple, l 'appel <code>solution(lab2)</code> doit renvoyer <code>[(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5)]</code>. </p> r\u00e9ponse <p>Question 2.a </p> \ud83d\udc0d Script Python<pre><code># entr\u00e9e: (1, 0), sortie (1, 5)\nchemin = [(1, 0)]\nchemin.append((1,1))\nchemin.append((2,1))\nchemin.pop()\nchemin.append((1,2))\nchemin.append((1,3))\nchemin.append((2,3))\nchemin.append((3,3))\nchemin.append((3,4))\nchemin.pop()\nchemin.pop()\nchemin.pop()\nchemin.append((1,4))\nchemin.append((1,5))\n</code></pre> <p>Question B.2.b.</p> \ud83d\udc0d Script Python<pre><code>def solution(lab):\n    chemin = [depart(lab)]\n    case = chemin[0]\n    i = case[0]\n    j = case[1]\n    while lab[i][j] != 3:\n        lab[i][j]=4\n        v = voisines(i,j,lab)\n        if len(v) != 0 :\n            prochaine = v.pop()\n            chemin.append(prochaine)\n            i = prochaine[0]\n            j = prochaine[1]\n        else :\n            chemin.pop()\n            n = len(chemin)\n            i = chemin[n-1][0]\n            j = chemin[n-1][1]\n    return chemin\n</code></pre>"},{"location":"BAC/programmation/compilation_programmation/#centres-etrangers-2021-j2-21-nsij2g11","title":"Centres Etrangers 2021 J2 (21-NSIJ2G11)","text":"<p>Exo</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>programmation Python</li> <li>tuples  </li> <li>listes.</li> </ul> <p>L\u2019objectif de cet exercice est de mettre en place une mod\u00e9lisation d\u2019un jeu de labyrinthe en langage Python.  </p> <p>On d\u00e9cide de repr\u00e9senter un labyrinthe par un tableau carr\u00e9 de taille n, dans lequel les cases seront des 0 si l\u2019on peut s\u2019y d\u00e9placer et des 1 s\u2019il s\u2019agit d\u2019un mur.   Voici un exemple de repr\u00e9sentation d\u2019un labyrinthe : </p> <p></p> <p>L\u2019entr\u00e9e du labyrinthe se situe \u00e0 la premi\u00e8re case du tableau (celle en haut \u00e0 gauche) et la sortie du labyrinthe se trouve \u00e0 la derni\u00e8re case (celle en bas \u00e0 droite).</p> <p>Question 1.</p> <p>Proposer, en langage Python, une fonction mur, prenant en param\u00e8tre un tableau repr\u00e9sentant un labyrinthe et deux entiers \\(i\\) et \\(j\\) compris entre 0 et <code>n1</code> et qui renvoie un bool\u00e9en indiquant la pr\u00e9sence ou non d\u2019un mur. Par exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;mur(laby, 2, 3)\nTrue\n&gt;&gt;mur(laby, 1, 8)\nFalse\n</code></pre></p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def mur(laby,lig,col):\n    return laby[lig][col]==\"1\"\n</code></pre> <p>Note</p> <p>La version ci-dessous est \u00e9quivalente, mais on teste si un bool\u00e9en vaut <code>True</code> et dans ce cas on renvoie <code>True</code>, sinon on renvoie <code>False</code>. Renvoyer directement le bool\u00e9en (c'est \u00e0 dire le r\u00e9sultat du test <code>laby[lig][col]==\"1\"</code> est plus concis). \ud83d\udc0d Script Python<pre><code>    def mur(laby,lig,col):\n    if laby[lig][col]==\"1\":\n        return True\n    else:\n        return False\n</code></pre></p> <p>Un parcours dans le labyrinthe va \u00eatre repr\u00e9sent\u00e9 par une liste de cases. Il s\u2019agit de couples (i,j) o\u00f9 i et j correspondent respectivement aux num\u00e9ros de ligne et de colonne des cases successivement visit\u00e9es au long du parcours. Ainsi, la liste suivante  <code>[(1,4),(1,5),(1,6),(2,6),(3,6),(3,5),(3,4)]</code> correspond au parcours rep\u00e9r\u00e9 par des \u00e9toiles ci-dessous : </p> <p></p> <p>La liste <code>[(0,0),(1,0),(1,1),(5,1),(6,1)]</code> ne peut correspondre au parcours d\u2019un labyrinthe car toutes les cases parcourues successivement ne sont pas adjacentes.  </p> <p>Question 2.</p> <p>On consid\u00e8re la fonction voisine ci-dessous, \u00e9crite en langage Python, qui prend en param\u00e8tres deux cases donn\u00e9es sous forme de couple. \ud83d\udc0d Script Python<pre><code>def voisine(case1, case2) :\n    l1, c1 = case1\n    l2, c2 = case2\n    # on vous rappelle que **2 signifie puissance 2\n    d = (l1-l2)**2 + (c1-c2)**2\n    return (d == 1)\n</code></pre></p> <p>2.a. Apr\u00e8s avoir remarqu\u00e9 que les quantit\u00e9s l1-l2 et c1-c2 sont des entiers, expliquer pourquoi la fonction voisine indique si deux cases donn\u00e9es sous forme de tuples <code>(l,c)</code> sont adjacentes. 2.b. En d\u00e9duire une fonction adjacentes qui re\u00e7oit une liste de cases et renvoie un bool\u00e9en indiquant si la liste des cases forme une cha\u00eene de cases adjacentes. </p> r\u00e9ponse <p>Solution 2.a Deux cases du labyrinthe sont adjacentes lorsqu'elles sont situ\u00e9es sur la m\u00eame ligne et la diff\u00e9rence entre les colonnes est de 1 ou alors lorsqu'elles sont situ\u00e9es sur la m\u00eame colonne et la diff\u00e9rence entre les lignes est 1. On peut donc calculer <code>d = (l1-l2)**2 + (c1-c2)**2</code>, si les cases sont adjacentes l'un des deux termes de cette somme vaut 0 et l'autre 1 (si la diff\u00e9rence est \\(-1\\), <code>d</code> vaut 1 \u00e0 cause de du carr\u00e9). Le test <code>d==1</code> permet donc de savoir si deux cases sont adjacentes.</p> <p>Solution 2.b \ud83d\udc0d Script Python<pre><code>def adjacentes(liste_cases):\n    for i in range(len(liste_cases)-1):\n        if not voisine(liste_cases[i],liste_cases[i+1]):\n            return False\n    return True\n</code></pre></p> <p>Question 3.</p> <p>Justifier que la boucle de la fonction pr\u00e9c\u00e9dente se termine.</p> r\u00e9ponse <p>On rentre dans la boucle lorsque <code>i &lt; len(cases)</code>, l'indice <code>i</code> est incr\u00e9ment\u00e9 dans la boucle et donc finira par \u00eatre plus grand que la longueur du tableau <code>cases</code>.</p> <p>Note</p> <p>On rappelle que la m\u00e9thode rigoureuse pour montrer la terminaison d'un boucle est d'exhiber un variant de boucle c'est \u00e0 dire une quantit\u00e9 \\(v\\) enti\u00e8re positive qui d\u00e9cro\u00eet \u00e0 chaque passage dans la boucle. La propri\u00e9t\u00e9 math\u00e9matique  :</p> <p>Il n'existe pas de suite d'entiers positif strictement d\u00e9croissante permet alors de conclure \u00e0 la terminaison de la boucle (sinon les valeurs successives prises par \\(v\\) formeraient une suite d'entiers positif d\u00e9croissante, ce qui est impossible).</p> <p>Question 4.</p> <p>En d\u00e9duire une fonction <code>echappe(cases, laby)</code> qui indique par un bool\u00e9en si le chemin cases permet d\u2019aller de l\u2019entr\u00e9e \u00e0 la sortie du labyrinthe <code>laby</code>. </p> r\u00e9ponse <p>D'apr\u00e8s l'\u00e9nonc\u00e9, le labyrinthe est carr\u00e9, on r\u00e9cup\u00e8re sa taille <code>n</code> puis on teste que les trois conditions suivantes sont r\u00e9unies :  </p> <ul> <li>On d\u00e9marre bien de l'entr\u00e9e du labyrinthe (case <code>(0,0)</code>)  </li> <li>On finit bien sur la sortie du labyritnhe (case <code>(n-1,n-1)</code>)  </li> <li>Les cases de la liste sont adjacentes et non mur\u00e9es.  </li> </ul> \ud83d\udc0d Script Python<pre><code>def echappe(cases,laby):\n    n = len(laby)\n    return cases[0]==0 and cases[-1]==(n-1,n-1) and teste(cases,laby):     \n</code></pre> <p>Adaptation en TP : Lien vers TP Capytale</p>"},{"location":"BAC/programmation/compilation_programmation/#france-2021-j2-21-nsij2me2","title":"France 2021 J2 (21-NSIJ2ME2)","text":"<p>Exo</p> <p>\u00c9tant donn\u00e9 un tableau non vide de nombres entiers relatifs, on appelle sous-s\u00e9quence une suite non vide d'\u00e9l\u00e9ments voisins de ce tableau. On cherche dans cet  exercice \u00e0 d\u00e9terminer la plus grande somme possible obtenue en additionnant les \u00e9l\u00e9ments d'une sous-s\u00e9quence.  </p> <p>Par exemple, pour le tableau ci-dessous, la somme maximale vaut 18. Elle est obtenue en additionnant les \u00e9l\u00e9ments de la sous-s\u00e9quence encadr\u00e9e en gras ci-dessous (6 ; 8 ; -6 ; 10).</p> <p></p> <p>Question 1. a.</p> <p>Quelle est la solution du probl\u00e8me si les \u00e9l\u00e9ments du tableau sont tous positifs ?  </p> r\u00e9ponse <p>Si les \u00e9l\u00e9ments du tableau sont tous positifs, il suffit d\u2019additionner tous les \u00e9l\u00e9ments du tableau pour obtenir la somme maximale (la sous-s\u00e9quence correspond \u00e0 l\u2019ensemble du tableau).</p> <p>Question 1. b.</p> <p>Quelle est la solution du probl\u00e8me si tous les \u00e9l\u00e9ments sont n\u00e9gatifs ?</p> r\u00e9ponse <p>Si les \u00e9l\u00e9ments du tableau sont tous n\u00e9gatifs, il suffit de prendre l\u2019\u00e9l\u00e9ment le plus grand du tableau (la sous-s\u00e9quence est r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment)</p> <p>Dans cette question, on examine toutes les sous-s\u00e9quences possibles.</p> <p>Question 2. a.</p> <p>\u00c9crire le code Python d'une fonction <code>somme_sous_sequence(lst, i, j)</code> qui prend en argument une liste et deux entiers <code>i, j</code> et renvoie la somme de la sous-s\u00e9quence d\u00e9limit\u00e9e par les indices i et j (inclus).</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def somme_sous_sequence(lst, i, j):\n    somme = 0\n    for ind in range(i,j+1):\n        somme = somme + lst[ind]\n    return somme\n</code></pre> <p>Question 2. b.</p> <p>La fonction <code>pgsp</code> ci-dessous permet de d\u00e9terminer la plus grande des  sommes obtenues en additionnant les \u00e9l\u00e9ments de toutes les sous-s\u00e9quences possibles du tableau lst.</p> <p>\ud83d\udc0d Script Python<pre><code>def pgsp(lst):\n    n = len(lst)\n    somme_max = lst[0]\n    for i in range(n):\n        for j in range(i, n):\n            s = somme_sous_sequence(lst, i, j)\n            if s &gt; somme_max :\n                somme_max = s\n    return somme_max\n</code></pre> Parmi les quatre choix suivants, quel est le nombre de comparaisons effectu\u00e9es par cette fonction si le tableau lst pass\u00e9 en param\u00e8tre contient 10 \u00e9l\u00e9ments ?  </p> <ul> <li>10  </li> <li>55  </li> <li>100  </li> <li>1055  </li> </ul> r\u00e9ponse <p>Pour un tableau de 10 \u00e9l\u00e9ments, nous avons 55 comparaisons \\((10+9+8+7+6+5+4+3+2+1=55)\\).</p> <p>Question 2. c.</p> <p>Recopier et modifier la fonction pgsp pour qu'elle renvoie un tuple contenant la somme maximale et les indices qui d\u00e9limitent la sous-s\u00e9quence correspondant \u00e0 cette somme maximale.</p> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def pgsp(lst):\n    n = len(lst)\n    somme_max = lst[0]\n    i_max = 0\n    j_max = 0\n    for i in range(n):\n        for j in range(i,n):\n            s = somme_sous_sequence(lst,i,j)\n            if s &gt; somme_max:\n                somme_max = s\n                i_max = i\n                j_max = j\n    return (somme_max, i_max, j_max)\n</code></pre> <p>Question 3. On consid\u00e8re dans cette question une approche plus \u00e9labor\u00e9e. Son principe consiste, pour toutes les valeurs possibles de l\u2019indice \u0745, \u00e0 d\u00e9terminer la somme maximale \u0735(\u0745) des sous-s\u00e9quences qui se terminent \u00e0 l'indice \u0745. En d\u00e9signant par <code>lst[\u0745]</code> l\u2019\u00e9l\u00e9ment de lst d\u2019indice \u0745, on peut v\u00e9rifier que </p> <ul> <li>S(0) = lst[0]</li> <li>et pour \u0745\\(i \\geq 1\\) : <ul> <li>\\(S\u0735(i) = lst[\u0745i]\\) si \u0735\\((\u0745i- 1) \u2264 0\\) ;</li> <li>\\(i = lst[\u0745i] + \u0735S(\u0745i-1)\\) si \u0735\\(S(\u0745i-1) &gt; 0\\).  </li> </ul> </li> </ul> <p>Question 3. a.</p> <p>Recopier et compl\u00e9ter le tableau ci-dessous avec les valeurs de \u0735\\(S(\u0745i)\\) pour la liste consid\u00e9r\u00e9e en exemple.</p> <p></p> r\u00e9ponse <p></p> <p>Question 3. b.</p> <p>La solution au probl\u00e8me \u00e9tant la plus grande valeur des \u0735\\(S(\u0745i)\\), on demande de compl\u00e9ter la fonction <code>pgsp2</code> ci-dessous, de sorte que la variable sommes_max contienne la liste des valeurs \u0735\\(S(\u0745i)\\).  </p> \ud83d\udc0d Script Python<pre><code>def pgsp2(lst):\n    sommes_max = [lst[0]]\n    for i in range(1, len(lst)):\n        # \u00e0 compl\u00e9ter\n\nreturn max(sommes_max)\n</code></pre> r\u00e9ponse \ud83d\udc0d Script Python<pre><code>def pgsp2(lst):\n    somme_max = [lst[0]]\n    for i in range (1,len(lst)):\n        if somme_max[i-1] &lt;= 0:\n            somme_max.append(lst[i])\n        else :\n            somme_max.append(lst[i]+somme_max[i-1])\n    return max(somme_max)\n</code></pre> <p>Question 3. c.</p> <p>En quoi la solution obtenue par cette approche est-elle plus avantageuse que celle de la question 2.b. ? </p> r\u00e9ponse <p>Cette solution est plus avantageuse, car la complexit\u00e9 en temps de l\u2019algorithme est en \\(O(n)\\) alors que dans le cas pr\u00e9c\u00e9dent il \u00e9tait en \\(O(n^2)\\).</p>"},{"location":"BAC/programmation/compilation_programmation/#amerique-du-nord-2022-j1-21-nsij1an1","title":"Am\u00e9rique du Nord 2022 J1 (21-NSIJ1AN1)","text":"<p>Programamtion</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>Programamtion  </li> <li>cha\u00eenes de caract\u00e8res  </li> <li>tablaux  </li> <li>parcours.</li> </ul> <p>On appelle palindrome un texte dont l'ordre des lettres reste le m\u00eame, qu'on le lise de la droite vers la gauche ou de la gauche vers la droite. Par exemple, un mot \u00e0 une lettre est un palindrome, \"BOB\" est un palindrome, tout comme \"LAVAL\". Le mot <code>\"\"</code> est consid\u00e9r\u00e9 comme un palindrome. On souhaite programmer une fonction <code>palindrome</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>txt</code>. Cette fonction renvoie <code>True</code> si la cha\u00eene de caract\u00e8res <code>txt</code> est un palindrome, <code>False</code> sinon. </p> <p>Question 1.</p> <p>On donne ci-dessous une impl\u00e9mentation r\u00e9cursive incompl\u00e8te pour la fonction palindrome. L'op\u00e9ration+ \u00e0 la ligne 8 permet de concat\u00e9ner deux cha\u00eenes de caract\u00e8res. Exemple : Si <code>txt1 = \"bon\"</code> et <code>txt2 = \"jour\"</code>, l'instruction <code>txt1 + txt2</code> renvoie la cha\u00eene de caract\u00e8res \"bonjour\"</p> \ud83d\udc0d Script Python<pre><code>def palindrome(txt):\n\"\"\" Str -&gt; Boll \"\"\"\n    ...:\n    ...\n    taille=len(txt)\n    interieur = \"\"\n    for i in range(1, taille -1):\n        interieur = interieur + txt[i]\n    return (txt[0] == txt[taille - 1]) and (palindrome(interieur))\n</code></pre> <p>(a) Choisir parmie les propositions ci-dessous celle qui convient pour compl\u00e9ter la fonction palindrome (ligne 3 et 4)</p> <ul> <li> <p>Proposition 1 \ud83d\udc0d Script Python<pre><code>if len(txt)&lt;=2:\n    return True\n</code></pre></p> </li> <li> <p>Proposition 2 \ud83d\udc0d Script Python<pre><code>if len(txt)&lt;2:\n    return False\n</code></pre></p> </li> <li> <p>Proposition 3  \ud83d\udc0d Script Python<pre><code>if len(txt)&lt;2:\n    return True\n</code></pre></p> </li> <li> <p>Proposition 4 \ud83d\udc0d Script Python<pre><code>if len(txt)&lt;=2:\n    return False\n</code></pre></p> </li> </ul> <p>(b)  Lors de l'appel de <code>palindrome(\"bonjour\")</code>, indiquer les valeurs, \u00e0 la ligne 9, de : <code>txt[O]</code> , <code>txt[taille - 1]</code> et <code>interieur</code>. </p> <p>Question 2.</p> <p>Proposer deux tests pour cette fonction qui permettent de tester deux cas de figure diff\u00e9rents en justifiant ce choix.</p> <p>Question 3.</p> <p>Ecrire une version non r\u00e9cursive de la fonction <code>palindrome</code>. </p> <p>Question 4.</p> <p>On \u00e9tudie dans cet exercice des chaines de caract\u00e8res utilisant uniquement les lettres \"A\", \"T\", \"C\" et \"G\". Exemple \"AA\", \"CAT\" et \"CCGATACG\" On associe \u00e0 chacune de ces lettres une autre lettre appel\u00e9e lettre compl\u00e9mentaire selon le tableau suivant : </p> Lettre \"A\" \"T\" \"G\" \"C\" Lettre compl\u00e9mentaire \"T\" \"A\" \"C\" \"G <p>On obtient le compl\u00e9mentaire d'un mot en rempla\u00e7ant chacune de ses lettres par sa lettre compl\u00e9mentaire. Exemple : Le compl\u00e9mentaire \u00e0 \"GAATTC\" est \"CTTAAG\". </p> <p>(a) \u00c9crire une fonction en Python, nomm\u00e9e <code>complementaire</code>, qui prend en param\u00e8tre une  cha\u00eene de caract\u00e8res <code>txt</code> \u00e9crite uniquement avec les lettres \"A\", \"C\", \"G\" et \"T\"? Cette fonction renvoie la cha\u00eene de caract\u00e8res compl\u00e9mentaire de <code>txt</code> Exemple : l'appel <code>complementaire(\"GAATTC\")</code> renvoie \"CTTAAG\"  </p> <p>(b) Une cha\u00eene de caract\u00e8res <code>txt</code> est dite pal\u00ecndromique si la concat\u00e9nation de <code>txt</code> avec son compl\u00e9mentaire est un palindrome. Exemples: <code>\"GAATTC\"</code> est palindromique car <code>\"GAATTC\" + \"CTTAAG\" = \"GAATTCCTTAAG\"</code> est un palindrome. <code>\"GAAT\"</code> n'est pas palindromique car <code>\"GAAT\" + \"CTTA\" = \"GAATCTTA\"</code> n'est pas un palin drome. D\u00e9terminer si la cha\u00eene de caract\u00e8res \"GATCGT\" est palindromique.</p> <p>(c) Ecrire une fonction <code>est_palindromique</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>txt</code>. Cette fonction doit renvoyer <code>True</code> s'il agit d'une s\u00e9quence palindromique, <code>False</code> sinon. </p>"},{"location":"BAC/recursivite/compile_recursivite/","title":"Sujet BAC 16 :  \u00a0 R\u00e9cursivit\u00e9","text":""},{"location":"BAC/recursivite/compile_recursivite/#cours","title":"Cours","text":"<p>Vous pouvez t\u00e9l\u00e9charger une copie au format pdf du diaporama de synth\u00e8se de cours :</p> <p>Diaporama de cours </p> <p>Attention</p> <p>Ce diaporama n'est qu'une synth\u00e8se de cours et ne donne que quelques points de rep\u00e8res pour de vos r\u00e9visions.</p>"},{"location":"BAC/recursivite/compile_recursivite/#france-septembre-2022-session-de-remplacement","title":"France Septembre 2022 : Session de remplacement.","text":"<p>Soci\u00e9t\u00e9 immobili\u00e9re</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>Notions de classes  </li> <li>It\u00e9ration  </li> <li>R\u00e9cursivit\u00e9</li> </ul> <p>Une petite soci\u00e9t\u00e9 immobili\u00e8re ne voulant pas investir dans une base de donn\u00e9es n\u00e9cessitant une mise en place longue et fastidieuse a cr\u00e9 un fichier .csv pour stocker ses annonces. La consultation et la mise en place de ce fichier ne seront pas \u00e9tudi\u00e9es ici. Pour limiter notre \u00e9tude, nous consid\u00e9rerons que les donn\u00e9es sont stock\u00e9es temporairement dans une liste v dont voici la structure simplifi\u00e9e : </p> \ud83d\udc0d Script Python<pre><code>#pieces\nclass Piece:\n    def __init__(self,a,b):\n        self.nom = a  #nom\n        self.sup = b # superficie de la piece\n\n    def sup(self):\n        return self.sup\n\n#villas\nclass Villa:\n    def __init__(self,a,b,c,d,e):\n        self.nom = a #nom de la villa\n        self.sejour = b #caracteristiques sejour\n        self.ch1 = c  #caracteristiques de la 1ere chambre\n        self.ch2 = d #caracteristiques de la chambre 2\n        self.eqCuis = e  # equipement de la cuisine 'eq' ou 'non eq'\n\n    def nom(self):\n        return self.nom\n\n    def surface(self):\n        return ... ...\n\n    def equip(self):\n        return self.eqCuis\n\n#Programme principal\nv=[]\nv.append(Villa(\"Les quatre vents\" , Piece(\"s\u00e9jour\",40),Piece(\"ch1\",10),Piece(\"ch2\",20),\"eq\"))\nv.append(Villa(\"Les go\u00e9lands\" , Piece(\"s\u00e9jour\",50),Piece(\"ch1\",15),Piece(\"ch2\",15),\"eq\"))\nv.append(Villa(\"R\u00eave d'\u00e9t\u00e9\" , Piece(\"s\u00e9jour\",30),Piece(\"ch1\",15),Piece(\"ch2\",20),\"non eq\"))\nv.append(Villa(\"Les oliviers\" , Piece(\"s\u00e9jour\",30),Piece(\"ch1\",10),Piece(\"ch2\",20),\"eq\"))\nv.append(Villa(\"Bellevue\" , Piece(\"s\u00e9jour\",30),Piece(\"ch1\",10),Piece(\"ch2\",20),\"non eq\"))\n</code></pre> <p>Bug</p> <ul> <li>Le code propos\u00e9 d\u00e9finit pour un objet de la classe <code>Villa</code> un attribut <code>nom</code> ainsi qu'une m\u00e9thode <code>nom</code>, ce qui n'est pas possible. La m\u00e9thode est un getter qu'on pourrait renommer par exemple en get_nom.</li> <li>L'attribut \u00a0<code>eqCuis</code> ne prend que deux valeurs <code>\"eq\"</code> ou <code>\"noneq\"</code>, il serait donc plus judicieux d'en faire un bool\u00e9en.</li> </ul> <p>La structure de donn\u00e9es retenue pour l'exercice est d\u00e9finie par la classe Villa.</p>"},{"location":"BAC/recursivite/compile_recursivite/#partie-a-analyse-du-code-et-completion","title":"Partie A : analyse du code et compl\u00e9tion","text":"<p>Question 1</p> <p>1.a Combien d'\u00e9l\u00e9ments contient la liste <code>v</code> ? 1.b Que retourne l'instruction <code>v[1]  .nom()</code> ? Pour acc\u00e9der \u00e0 l'information de la surface habitable du logement, le developpeur souhaite ajouter la m\u00e9thode <code>surface()</code> qui renvoie cette surface. 1.c Compl\u00e9ter sur votre copie la m\u00e9thode <code>surface()</code> \ud83d\udc0d Script Python<pre><code>def surface(self):\n    return ... ...\n</code></pre></p> <p>L'agent immobilier veut pouvoir consulter les villas qui disposent d'une cuisine \u00e9quip\u00e9e. Pour cela vous devez \u00e9crire la portion du programme qui affichera la liste des villas \u00e9quip\u00e9es. Elle devra parcourir s\u00e9quentiellement la liste et afficher \u00e0 l'\u00e9cran le nom de chaque villa \u00e9quip\u00e9e.  </p> <p>Question 2</p> <p>R\u00e9digez sur votre copie la portion de programme r\u00e9alissant cette s\u00e9lection.  </p>"},{"location":"BAC/recursivite/compile_recursivite/#partie-b-recursivite","title":"Partie B : R\u00e9cursivit\u00e9","text":"<p>L'agent immobilier veut r\u00e9pondre \u00e0 une demande de client : \"Quelle est votre villa la plus grande ?\". Pour cela, il souhaite disposer d'une fonction <code>max_surface()</code> qui va extraire de la liste <code>v</code>,  la villa d\u00e9sir\u00e9e. Nous avons d\u00e9cid\u00e9 d'\u00e9crire cette fonction de fa\u00e7on r\u00e9cursive.  </p> <p>Question 3</p> <p>Recopiez parmi les propositions suivantes celle qui caract\u00e8rise un appel r\u00e9cursif. - appel d'une fonction par elle-m\u00eame - appel dont l'ex\u00e9cution est un prpocessus it\u00e9ratif. - appel d'une fonction comportant une boucle.  </p> <p>L'agorithme suivant a \u00e9t\u00e9 choisi : </p> <p>Il faut partir d'une liste de villas : - si cette liste contient un seul \u00e9l\u00e8ment, c'est le r\u00e9sultat; - si la liste en continet plusieurs, il faut analyser les deux premiers \u00e9l\u00e8ments, \u00e9limier la villa de plus petite surface, et recommencer avec la liste tronqu\u00e9e.</p> <p>A la fin du processus, une seule villa est renvoy\u00e9e.  </p> <p>Pour \u00e9crire cette fonction, dans un premier temps, nous alloons donc distinguer deux cas  :  </p> <ul> <li>celui \u00e0\u00f9 la liste des villas ne contient qu'un villa :  \ud83d\udccb Texte<pre><code>il faut renvoyer la villa  \n</code></pre></li> <li>celui o\u00f9 la liste en contient au moins deux : \ud83d\udccb Texte<pre><code>si la surface de la villa v[0] est inf\u00e9rieure \u00e0 celle de la villa v[1]\n    il faut supprimer v[0] de la liste\nsinopn\n    il faut supprimer v[1] de la liste\n</code></pre></li> </ul> <p>Question 4</p> <p>Ecrivez sur votre copie le code de cette fonction en Python. \ud83d\udc0d Script Python<pre><code>def max_surface(v):\n    ...\n</code></pre></p> Reponse <ol> <li> <p>a. La liste <code>v</code> contient 5 \u00e9l\u00e9ments (elle \u00e9tait initialement vide et on y ajout\u00e9 5 \u00e9l\u00e9ments \u00e0 l'aide de 5 <code>append</code>)</p> <p>b. <code>v[1]</code> est le deuxi\u00e8me \u00e9l\u00e9ment de la liste <code>v</code> c'est \u00e0 dire un objet de la classe <code>Villa</code> sa m\u00e9thode <code>self.nom</code> renvoie l'attribut <code>nom</code> c'est \u00e0 dire <code>\"Les go\u00e9lands\"</code>.</p> <p>c.  Le calcul de la surface s'effectue naturellement en sommant la surface de chacune des pi\u00e8ces de la villa : \ud83d\udc0d Script Python<pre><code>def surface(self):\n    return self.sejour.sup() + self.ch1.sup() + self.ch2.sup()\n</code></pre></p> </li> <li> <p>On parcours la liste <code>v</code> des villas et on affiche les noms de celles ayant une cuisine \u00e9quip\u00e9e (la m\u00e9thode <code>equip</code> renvoie <code>\"eq\"</code> lorsque la cuisine est \u00e9quip\u00e9e). \ud83d\udc0d Script Python<pre><code>for villa in v:\n    if villa.equip()==\"eq\":\n        print(villa.nom())\n</code></pre></p> </li> <li> <p>Un appel r\u00e9cursif est caract\u00e9ris\u00e9 par appel d'une fonction par elle-m\u00eame</p> </li> <li> \ud83d\udc0d Script Python<pre><code>def max_surface(v):\n    if len(v)==1:\n        return v.nom()\n    if v[0].surface() &gt; v[1].surface():\n        v.pop(1)\n    else:\n        v.pop(0)\n    return max_surface(v)\n</code></pre> </li> </ol> <p>Remarque</p> <p>Le type <code>list</code> \u00e9tant mutable, la fonction ci-dessous vide en m\u00eame temps la liste <code>v</code> qui contiendra \u00e0 la fin un unique \u00e9l\u00e9ment (celui ayant la surface maximale)</p>"},{"location":"BAC/recursivite/compile_recursivite/#sujet-b-2023","title":"Sujet B 2023","text":"<p>Fonctions r\u00e9cursives</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>R\u00e9cursivit\u00e9  </li> <li>Cet exercice est consacr\u00e9 \u00e0 l'analyse et \u00e0 l'\u00e9criture de programmes r\u00e9cursifs.</li> </ul> <p>Question 1</p> <p>1.a) Expliquer en quelques mots ce qu'est une fonction r\u00e9cursive.</p> R\u00e9ponse <p>Une fonction r\u00e9cursive est une fonction qui poss\u00e8de un appel \u00e0 elle-m\u00eame dans son code source.</p> <p>1.b) On consid\u00e8re la fonction Python suivante :</p> \ud83d\udc0d Script Python<pre><code>def compte_rebours(n):\n\"\"\" n est un entier positif ou nul \"\"\"\n    if n &gt;= 0:\n        print(n)\n        compte_rebours(n - 1)\n</code></pre> <p>L'appel <code>compte_rebours(3)</code> affiche successivement les nombres <code>3</code>, <code>2</code>, <code>1</code> et <code>0</code>. Expliquer pourquoi le programme s'arr\u00eate apr\u00e8s l'affichage du nombre <code>0</code>.</p> R\u00e9ponse <p>Une fois l'affichage de <code>0</code> effectu\u00e9, il y a un appel r\u00e9cursif <code>compte_rebours(0 - 1)</code>.</p> <p>Lors de cet appel r\u00e9cursif, <code>n</code> vaut <code>-1</code>, on ne rentre pas donc dans la structure conditionnelle.</p> <p>La pile d'appel r\u00e9cursif se vide sans qu'il ait d'autres instructions effectu\u00e9es.</p> <p>Ainsi le programme s'arr\u00eate apr\u00e8s avoir affich\u00e9 <code>0</code> et vid\u00e9 la pile d'appels r\u00e9cursifs.</p> <p>Question 2</p> <p>2. En math\u00e9matiques, la factorielle d'un entier naturel \\(n\\) est le produit des nombres entiers strictement positifs inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\). Par convention, la factorielle de \\(0\\) est \\(1\\). Par exemple :</p> <ul> <li>la factorielle de \\(1\\) est \\(1\\)</li> <li>la factorielle de \\(2\\) est \\(2 \u00d7 1 = 2\\)</li> <li>la factorielle de \\(3\\) est \\(3 \u00d7 2 \u00d7 1 = 6\\)</li> <li>la factorielle de \\(4\\) est \\(4 \u00d7 3 \u00d7 2 \u00d7 1 = 24\\)</li> </ul> <p>Recopier et compl\u00e9ter sur votre copie le programme donn\u00e9 ci-dessous afin que la fonction r\u00e9cursive <code>fact</code> renvoie la factorielle de l'entier pass\u00e9 en param\u00e8tre de cette fonction. </p> <p>Exemple : <code>fact(4)</code> renvoie <code>24</code>.</p> \ud83d\udc0d Script Python<pre><code>def fact(n):\n\"\"\" Renvoie le produit des entiers strictement positifs\n        et inf\u00e9rieurs ou \u00e9gaux \u00e0 n.\n    \"\"\"\n    if n == 0:\n        return ...  # \u00c0 compl\u00e9ter\n    else:\n        return ...  # \u00c0 compl\u00e9ter\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def fact(n):\n\"\"\" Renvoie le produit des entiers strictement positifs\n        et inf\u00e9rieurs ou \u00e9gaux \u00e0 n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n - 1)\n</code></pre> <p>Question 3</p> <p>3. La fonction <code>somme_entiers_rec</code> ci-dessous permet de calculer la somme des entiers, de <code>0</code> \u00e0 l'entier naturel <code>n</code> pass\u00e9 en param\u00e8tre.</p> <p>Par exemple :</p> <ul> <li>Pour <code>n = 0</code>, la fonction renvoie la valeur <code>0</code>.</li> <li>Pour <code>n = 1</code>, la fonction renvoie la valeur <code>0 + 1 = 1</code>.</li> <li>...</li> <li>Pour <code>n = 4</code>, la fonction renvoie la valeur <code>0 + 1 + 2 + 3 + 4 = 10</code>.</li> </ul> \ud83d\udc0d Script Python<pre><code>def somme_entiers_rec(n):\n\"\"\" Renvoie, de mani\u00e8re r\u00e9cursive,\n    la somme des entiers de 0 \u00e0 l'entier naturel n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        print(n)  # pour v\u00e9rification\n        return n + somme_entiers(n - 1)\n</code></pre> <p>L'instruction <code>print(n)</code> de la ligne 7 dans le code pr\u00e9c\u00e9dent a \u00e9t\u00e9 ins\u00e9r\u00e9e afin de mettre en \u00e9vidence le m\u00e9canisme en \u0153uvre au niveau des appels r\u00e9cursifs.</p> <p>3.a) \u00c9crire ce qui sera affich\u00e9 dans la console apr\u00e8s l'ex\u00e9cution de la ligne suivante : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; res = somme_entiers_rec(3)\n</code></pre> R\u00e9ponse \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; res = somme_entiers_rec(3)\n3\n2\n1\n&gt;&gt;&gt;\n</code></pre> <ul> <li>L'appel <code>somme_entiers_rec(3)</code> affiche <code>3</code> puis appelle <code>somme_entiers_rec(2)</code></li> <li>L'appel <code>somme_entiers_rec(2)</code> affiche <code>2</code> puis appelle <code>somme_entiers_rec(1)</code></li> <li>L'appel <code>somme_entiers_rec(1)</code> affiche <code>3</code> puis appelle <code>somme_entiers_rec(0)</code></li> <li>L'appel <code>somme_entiers_rec(0)</code> n'affiche rien.</li> </ul> <p>3.b) Quelle valeur sera alors affect\u00e9e \u00e0 la variable <code>res</code> ?</p> R\u00e9ponse \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; res = somme_entiers_rec(3)\n3\n2\n1\n&gt;&gt;&gt; res\n6\n</code></pre> <p>La valeur <code>6</code> est affect\u00e9e \u00e0 la variable <code>res</code>, la somme \\(3+2+1+0\\).</p> <p>Question 4</p> <p>4. \u00c9crire en Python une fonction <code>somme_entiers</code> non r\u00e9cursive : cette fonction devra prendre en argument un entier naturel <code>n</code> et renvoyer la somme des entiers de <code>0</code> \u00e0 <code>n</code> compris. Elle devra donc renvoyer le m\u00eame r\u00e9sultat que la fonction <code>somme_entiers_rec</code> d\u00e9finie \u00e0 la question 3.</p> <p>Exemple : <code>somme_entiers(4)</code> renvoie <code>10</code>.</p> R\u00e9ponse <p>Il y a plusieurs solutions, par exemple :</p> \ud83d\udc0d Script Python<pre><code>def somme_entiers(n):\n    # style it\u00e9ratif\n    somme = 0\n    for x in range(n + 1):\n        somme += x\n    return somme\n</code></pre> \ud83d\udc0d Script Python<pre><code>def somme_entiers(n):\n    # style fonctionnel\n    return sum(range(n + 1))\n</code></pre>"},{"location":"BAC/recursivite/compile_recursivite/#centres-etrangers-j2-2022","title":"Centres Etrangers J2 2022","text":"<p>Produit de chaines de caract\u00e8res par un entier</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>Programmation  </li> <li>R\u00e9cursivit\u00e9 </li> </ul> <p>Question 1</p> <p>1. Voici une fonction cod\u00e9e en Python :</p> \ud83d\udc0d Script Python<pre><code>def f(n):\n    if n == 0:\n        print(\"Partez !\")\n    else:\n        print(n)\n        f(n-1)\n</code></pre> <p>1.a. Qu'affiche la commande <code>f(5)</code> ?</p> R\u00e9ponse <p><code>f(5)</code> affiche</p> \ud83d\udccb Texte<pre><code>5\n4\n3\n2\n1\nPartez !\n</code></pre> <p>1.b. Pourquoi dit-on de cette fonction qu'elle est r\u00e9cursive ?</p> R\u00e9ponse <p>Le code source de <code>f</code> contient un appel \u00e0 elle-m\u00eame, c'est donc une fonction r\u00e9cursive.</p> <p>Question 2</p> <p>2. On rappelle qu'en python l'op\u00e9rateur <code>+</code> a le comportement suivant sur les chaines de caract\u00e8res :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; S = 'a' + 'bc'\n&gt;&gt;&gt; S\n'abc'\n</code></pre> <p>Et le comportement suivant sur les listes :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; L = ['a'] + ['b', 'c']\n&gt;&gt;&gt; L\n['a', 'b', 'c']\n</code></pre> <p>On a besoin pour les questions suivantes de pouvoir ajouter une chaine de caract\u00e8res <code>s</code> en pr\u00e9fixe \u00e0 chaque chaine de caract\u00e8res de la liste <code>chaines</code>.</p> <p>On appellera cette fonction <code>ajouter</code>.</p> <p>Par exemple, <code>ajouter(\"a\", [\"b\", \"c\"])</code> doit renvoyer <code>[\"ab\", \"ac\"]</code>.</p> <p>2.a. Recopiez le code suivant et compl\u00e9tez <code>...</code> sur votre copie :</p> \ud83d\udc0d Script Python<pre><code>def ajouter(s, chaines):\n    resultat = []\n    for mot in chaines:\n        resultat ...\n    return resultat\n</code></pre> R\u00e9ponses \ud83d\udc0d Script Python<pre><code>def ajouter(s, chaines):\n    resultat = []\n    for mot in chaines:\n        resultat.append(s + mot)\n    return resultat\n</code></pre> <p>2.b. Que renvoie la commande <code>ajouter(\"b\", [\"a\", \"b\", \"c\"])</code> ?</p> R\u00e9ponse <p><code>ajouter(\"b\", [\"a\", \"b\", \"c\"])</code> renvoie <code>[\"ba\", \"bb\", \"bc\"]</code>.</p> <p>2.c. Que renvoie la commande <code>ajouter(\"a\", [\"\"])</code> ?</p> R\u00e9ponse <p><code>ajouter(\"a\", [\"\"])</code> renvoie <code>[\"a\"]</code>.</p> <p>Question 3</p> <p>3. On s'int\u00e9resse ici \u00e0 la fonction suivante \u00e9crite en Python o\u00f9 <code>s</code> est une chaine de caract\u00e8res et <code>n</code> un entier naturel.</p> \ud83d\udc0d Script Python<pre><code>def produit(s, n):\n    if n == 0:\n        return [\"\"]\n    else:\n        resultat = []\n        for c in s:\n            resultat = resultat + ajouter(c, produit(s, n - 1))\n        return resultat\n</code></pre> <p>3.a. Que renvoie la commande <code>produit(\"ab\", 0)</code> ? Le r\u00e9sultat est-il une liste vide ?</p> R\u00e9ponse <p><code>produit(\"ab\", 0)</code> utilise le param\u00e8tre <code>n</code> \u00e9gal \u00e0 <code>0</code>, donc elle renvoie <code>[\"\"]</code>. (L'affichage en console sera <code>['']</code>)</p> <p><code>[\"\"]</code> n'est pas une liste vide, c'est une liste qui contient un \u00e9l\u00e9ment : la chaine de caract\u00e8res vide.</p> <p>3.b. Que renvoie la commande <code>produit(\"ab\", 1)</code> ?</p> R\u00e9ponse <p><code>produit(\"ab\", 1)</code> fait une boucle <code>for</code> avec deux tours :</p> <ul> <li>Premier tour, avec <code>c = 'a'</code>, <code>resultat</code> devient <code>[\"a\"]</code>.</li> <li>Second tour, avec <code>c = 'b'</code>,  <code>resultat</code> devient <code>[\"a\"] + [\"b\"]</code>.</li> </ul> <p><code>['a', 'b']</code> est renvoy\u00e9.</p> <p>3.c. Que renvoie la commande <code>produit(\"ab\", 2)</code> ?</p> R\u00e9ponse <p><code>produit(\"ab\", 2)</code> fait une boucle <code>for</code> avec deux tours :</p> <ul> <li>Premier tour, avec <code>c = 'a'</code>, <code>resultat</code> devient <code>[\"aa\", \"ab\"]</code>.</li> <li>Second tour, avec <code>c = 'b'</code>,  <code>resultat</code> devient <code>[\"aa\", \"ab\"] + [\"ba\", \"bb\"]</code>.</li> </ul> <p><code>['aa', 'ab', 'ba', 'bb']</code> est renvoy\u00e9.</p>"},{"location":"BAC/recursivite/compile_recursivite/#polynesie-j1-2022","title":"Polyn\u00e9sie J1 2022","text":"<p>Construction r\u00e9cursive de chaine de caract\u00e8res</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>Programmation  </li> <li>R\u00e9cursivit\u00e9  </li> </ul> <p>On rappelle qu'une chaine de caract\u00e8res peut \u00eatre repr\u00e9sent\u00e9e en Python par un texte entre guillemets <code>\"\"</code> et que :</p> <ul> <li>la fonction <code>len</code> renvoie la longueur de la chaine de caract\u00e8res pass\u00e9e en param\u00e8tre ;</li> <li>si une variable <code>ch</code> d\u00e9signe une chaine de caract\u00e8res, alors <code>ch[0]</code> renvoie son premier caract\u00e8re, <code>ch[1]</code> le deuxi\u00e8me, etc ;</li> <li>l'op\u00e9rateur <code>+</code> permet de concat\u00e9ner deux chaines de caract\u00e8res.</li> </ul> <p>Exemples</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; texte = \"bricot\"\n&gt;&gt;&gt; len(texte)\n6\n&gt;&gt;&gt; texte[0]\n\"b\"\n&gt;&gt;&gt; texte[1]\n\"r\"\n&gt;&gt;&gt; \"a\" + texte\n\"abricot\"\n</code></pre> <p>On s'int\u00e9resse dans cet exercice \u00e0 la construction de chaines de caract\u00e8res suivant certaines r\u00e8gles de construction.</p> <p>R\u00e8gle A</p> <p>Une chaine est construite suivant la r\u00e8gle A dans les deux cas suivants :</p> <ul> <li>soit elle est \u00e9gale \u00e0 <code>\"a\"</code> ;</li> <li>soit elle est de la forme <code>\"a\" + chaine + \"a\"</code>, o\u00f9 <code>chaine</code> est une chaine de caract\u00e8res construite suivant la r\u00e8gle A.</li> </ul> <p>R\u00e8gle B</p> <p>Une chaine est construite suivant la r\u00e8gle B dans les deux cas suivants :</p> <ul> <li>soit elle est de la forme <code>\"b\" + chaine + \"b\"</code>, o\u00f9 <code>chaine</code> est une chaine de caract\u00e8res construite suivant la r\u00e8gle A ;</li> <li>soit elle est de la forme <code>\"b\" + chaine + \"b\"</code>, o\u00f9 <code>chaine</code> est une chaine de caract\u00e8res construite suivant la r\u00e8gle B.</li> </ul> <p>Fonction <code>choice</code> du module <code>random</code></p> <p>On a reproduit ci-dessous l'aide de la fonction <code>choice</code> du module <code>random</code>.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; from random import choice\n&gt;&gt;&gt; help(choice)\nHelp on method choice in module random:\nchoice(seq) method of random.Random instance\nChoose a random element from a non-empty sequence.\n</code></pre> <p><code>choice(seq)</code> renvoie un \u00e9l\u00e9ment de <code>seq</code> (qui peut \u00eatre une liste) de fa\u00e7on pseudo-al\u00e9atoire.</p> <p>La fonction <code>A</code> ci-dessous renvoie une chaine de caract\u00e8res construite suivant la r\u00e8gle A, en choisissant al\u00e9atoirement entre les deux cas de figure de cette r\u00e8gle.</p> \ud83d\udc0d Script Python<pre><code>def A():\n    if choice([True, False]):\n        return \"a\"\n    else:\n        return \"a\" + A() + \"a\"\n</code></pre> <p>Question 1</p> <p>1.a. Cette fonction est-elle r\u00e9cursive ? Justifier.</p> R\u00e9ponse <p>La fonction <code>A</code> s'appelle elle-m\u00eame, donc <code>A</code> est une fonction r\u00e9cursive.</p> <p>1.b. La fonction <code>choice([True, False])</code> peut renvoyer <code>False</code> un tr\u00e8s grand nombre de fois cons\u00e9cutives. Expliquer pourquoi ce cas de figure am\u00e8nerait \u00e0 une erreur d'ex\u00e9cution.</p> R\u00e9ponse <p>Si <code>choice([True, False])</code> renvoie <code>False</code> cons\u00e9cutivement un nombre de fois sup\u00e9rieur \u00e0 la limite de profondeur de r\u00e9cursion autoris\u00e9e (1000 par d\u00e9faut avec Python), dans ce cas une erreur d'ex\u00e9cution se produit.</p> <p>Pour aller plus loin</p> <p>On pourrait modifier cette limite \u00e0 \\(10^6\\) avec le code suivant</p> \ud83d\udc0d Script Python<pre><code>import sys\nsys.setrecursionlimit(10**6)\n</code></pre> <p>Dans la suite, on consid\u00e8re une deuxi\u00e8me version de la fonction <code>A</code>. \u00c0 pr\u00e9sent, la fonction prend en param\u00e8tre un entier <code>n</code> tel que,</p> <ul> <li>si la valeur de <code>n</code> est n\u00e9gative ou nulle, la fonction renvoie <code>\"a\"</code> ;</li> <li>si la valeur de <code>n</code> est strictement positive, elle renvoie une chaine de caract\u00e8res construite suivant la r\u00e8gle A avec un <code>n</code> d\u00e9cr\u00e9ment\u00e9 de 1, en choisissant al\u00e9atoirement entre les deux cas de figure de cette r\u00e8gle.</li> </ul> \ud83d\udc0d Script Python<pre><code>def A(n):\n    if ... or choice([True, False]) :\n        return \"a\"\n    else:\n        return \"a\" + ... + \"a\"\n</code></pre> <p>Question 2</p> <p>2.a. Recopier sur la copie et compl\u00e9ter aux emplacements des points de suspension <code>...</code> le code de cette nouvelle fonction <code>A</code>.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def A(n):\n    if (n &lt;= 0) or choice([True, False]) :\n        return \"a\"\n    else:\n        return \"a\" + A(n - 1) + \"a\"\n</code></pre> <p>2.b. Justifier le fait qu'un appel de la forme <code>A(n)</code> avec <code>n</code> un nombre entier positif inf\u00e9rieur \u00e0 50, termine toujours.</p> R\u00e9ponse <p>Pour \\(n &gt; 0\\), l'appel \u00e0 <code>A(n)</code> provoque ou bien un arr\u00eat de la fonction, ou bien un appel r\u00e9cursif avec le param\u00e8tre <code>n - 1</code>.</p> <p>Un appel \u00e0 <code>A(50)</code> pourrait provoquer dans le pire des cas 50 appels r\u00e9cursifs pour arriver \u00e0 <code>A(0)</code> qui termine, ou alors terminer avant !</p> <p>On donne ci-apr\u00e8s le code de la fonction r\u00e9cursive B qui prend en param\u00e8tre un entier <code>n</code> et qui renvoie une chaine de caract\u00e8res construite suivant la r\u00e8gle B.</p> \ud83d\udc0d Script Python<pre><code>def B(n):\n    if (n &lt;= 0) or choice([True, False]):\n        return \"b\" + A(n - 1) + \"b\"\n    else:\n        return \"b\" + B(n - 1) + \"b\"\n</code></pre> <p>On admet que :</p> <ul> <li>les appels <code>A(-1)</code> et <code>A(0)</code> renvoient la chaine <code>\"a\"</code> ;</li> <li>l'appel <code>A(1)</code> renvoie la chaine <code>\"a\"</code> ou la chaine <code>\"aaa\"</code> ;</li> <li>l'appel <code>A(2)</code> renvoie la chaine <code>\"a\"</code>, la chaine <code>\"aaa\"</code> ou la chaine <code>\"aaaaa\"</code>.</li> </ul> <p>Question 3</p> <p>3. Donner toutes les chaines possibles renvoy\u00e9es par les appels <code>B(0)</code>, <code>B(1)</code> et <code>B(2)</code>.</p> R\u00e9ponse <ul> <li><code>B(0)</code> renvoie <code>\"bab\"</code></li> <li><code>B(1)</code> renvoie <code>\"bab\"</code> ou <code>\"bbabb\"</code>.</li> <li><code>B(2)</code> renvoie <code>\"bab\"</code>, <code>\"baaab\"</code>, <code>\"bbabb\"</code> ou <code>\"bbbabbb\"</code>.</li> </ul> <p>On suppose maintenant qu'on dispose d'une fonction <code>raccourcir</code> qui prend comme param\u00e8tre une chaine de caract\u00e8res de longueur sup\u00e9rieure ou \u00e9gale \u00e0 2, et renvoie la chaine de caract\u00e8res obtenue \u00e0 partir de la chaine initiale en lui \u00f4tant le premier et le dernier caract\u00e8re.</p> <p>Par exemple :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; raccourcir(\"abricot\")\n\"brico\"\n&gt;&gt;&gt; raccourcir(\"ab\")\n\"\"\n</code></pre> <p>Question 4</p> <p>4.a. Recopier sur la copie et compl\u00e9ter les points de suspension <code>...</code> du code de la fonction <code>regle_A</code> ci-dessous pour qu'elle renvoie <code>True</code> si la chaine pass\u00e9e en param\u00e8tre est construite suivant la r\u00e8gle A, et <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>def regle_A(chaine):\n    n = len(chaine)\n    if n &gt;= 2:\n        return (chaine[0] == \"a\") and (chaine[n - 1] == \"a\") and regle_A(...)\n    else:\n        return chaine == ...\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def regle_A(chaine):\n    n = len(chaine)\n    if n &gt;= 2:\n        return (chaine[0] == \"a\") and (chaine[n - 1] == \"a\") and regle_A(raccourcir(chaine))\n    else:\n        return chaine == \"a\"\n</code></pre> <p>4.b. \u00c9crire le code d'une fonction <code>regle_B</code>, prenant en param\u00e8tre une chaine de caract\u00e8res et renvoyant <code>True</code> si la chaine est construite suivant la r\u00e8gle B, et <code>False</code> sinon.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def regle_B(chaine):\n    n = len(chaine)\n    if n &gt;= 2:\n        return (chaine[0] == \"b\") and (chaine[n - 1] == \"b\") and (\n            regle_A(raccourcir(chaine)) or regle_B(raccourcir(chaine))\n        )\n    else:\n        return False\n</code></pre>"},{"location":"BAC/recursivite/compile_recursivite/#france-j2-2021-candidat-libre","title":"France J2 2021 - Candidat libre","text":"<p>M\u00e9lange d'une liste</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>Programmation  </li> <li>R\u00e9cursivit\u00e9  </li> </ul> <p>On s'int\u00e9resse dans cet exercice \u00e0 un algorithme de m\u00e9lange des \u00e9l\u00e9ments d'une liste.</p> <p>Question 1</p> <p>1. Pour la suite, il sera utile de disposer d'une fonction <code>echange</code> qui permet d'\u00e9changer dans une liste <code>valeurs</code> les \u00e9l\u00e9ments d'indice <code>i</code> et <code>j</code>.</p> <p>Expliquer pourquoi le code Python ci-dessous ne r\u00e9alise pas cet \u00e9change et en proposer une modification.</p> \ud83d\udc0d Script Python<pre><code>def echange(valeurs, i, j):\n    valeurs[j] = valeurs[i]\n    valeurs[i] = valeurs[j]\n</code></pre> R\u00e9ponse <p>On perd la valeur initiale de <code>list[j]</code> d\u00e8s la premi\u00e8re instruction.</p> <p>On peut proc\u00e9der de deux fa\u00e7ons diff\u00e9rentes :</p> <ul> <li>Avec une variable temporaire :</li> </ul> \ud83d\udc0d Script Python<pre><code>def echange(valeurs, i, j):\n    temp = valeurs[j]\n    valeurs[j] = valeurs[i]\n    valeurs[i] = temp\n</code></pre> <ul> <li>En utilisant l'affectation multiple :</li> </ul> \ud83d\udc0d Script Python<pre><code>def echange(valeurs, i, j):\n    valeurs[i], valeurs[j] = valeurs[j], valeurs[i]\n</code></pre> <p>Question 2</p> <p>2. La documentation du module <code>random</code> de Python fournit les informations ci-dessous concernant la fonction <code>randint</code> :</p> <p><code>randint(a, b)</code></p> <p>Renvoie un entier al\u00e9atoire <code>N</code> tel que <code>a &lt;= N &lt;= b</code>. Alias pour <code>randrange(a, b + 1)</code>.</p> <p>Parmi les valeurs ci-dessous, quelles sont celles qui peuvent \u00eatre renvoy\u00e9es par l'appel <code>randint(0, 10)</code> ?</p> <ul> <li><code>0</code></li> <li><code>1</code></li> <li><code>3.5</code></li> <li><code>9</code></li> <li><code>10</code></li> <li><code>11</code></li> </ul> R\u00e9ponse <p>L'appel <code>randint(0, 10)</code> renvoie une valeur enti\u00e8re entre <code>0</code> et <code>10</code> inclus l'un et l'autres.</p> <p>Donc <code>0</code>, <code>1</code>, <code>9</code> et <code>10</code> sont des valeurs possibles.</p> <p>Question 3</p> <p>3. Le m\u00e9lange de Fischer-Yates est un algorithme permettant de permuter al\u00e9atoirement les \u00e9l\u00e9ments d'une liste. On donne ci-dessous une mise en \u0153uvre r\u00e9cursive de cet algorithme en Python.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef melange(valeurs, i):\n    print(valeurs)\n    if i &gt; 0:\n        j = randint(0, i)\n        echange(valeurs, i, j)\n        melange(valeurs, i - 1)\n</code></pre> <p>3.a. Expliquer pourquoi la fonction <code>melange</code> se termine toujours.</p> R\u00e9ponse <p>On suppose que <code>i</code> est un entier positif compris entre <code>0</code> et l'indice du dernier \u00e9l\u00e9ment de la liste (<code>len(valeurs) - 1</code>).</p> <p>Lors des appels r\u00e9cursifs, on d\u00e9cr\u00e9mente la valeur de <code>i</code> et ces appels n'ont lieu que si cette valeur est strictement positive. Donc la fonction s'arr\u00eatera toujours.</p> <p>3.b. Lors de l'appel de la fonction <code>melange</code>, la valeur du param\u00e8tre <code>i</code> doit \u00eatre \u00e9gal au plus grand indice possible de la liste <code>valeurs</code>.</p> <p>Pour une liste de longueur \\(n\\), quel est le nombre d'appels r\u00e9cursifs de la fonction <code>melange</code> effectu\u00e9s, sans compter l'appel initial ?</p> R\u00e9ponse <p>Pour une liste de longueur \\(n\\), on appelle tout d'abord <code>melange(valeurs, n - 1)</code>.</p> <p>Le premier appel r\u00e9cursif est donc <code>melange(valeurs, i - 2)</code>. Il est suivi d'appels r\u00e9cursifs correspondants aux diff\u00e9rents indices de <code>valeurs</code> jusqu'au dernier appel <code>melange(valeurs, 0)</code>. </p> <p>Donc il y a \\(n-1\\) appels r\u00e9cursifs.</p> <p>3.c. On consid\u00e8re le script ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>valeurs = [x for x in range(5)]\nmelange(valeurs, 4)\n</code></pre> <p>On suppose que les valeurs successivement renvoy\u00e9es par la fonction <code>randint</code> sont <code>2</code>, <code>1</code>, <code>2</code> et <code>0</code>.</p> <p>Les deux premiers affichages produits par l'instruction <code>print(valeurs)</code> de la fonction <code>melange</code> sont :</p> <ul> <li>Premier affichage : <code>[0, 1, 2, 3, 4]</code>,</li> <li>Deuxi\u00e8me affichage : <code>[0, 1, 4, 3, 2]</code>.</li> </ul> <p>Donner les affichages suivants produits par la fonction <code>melange</code>.</p> R\u00e9ponse <p>On a les \u00e9tapes suivantes :</p> Valeur de <code>ind</code> Valeur de <code>valeurs</code> affich\u00e9e Valeur renvoy\u00e9e par <code>randint</code> <code>ind = 4</code> <code>[0, 1, 2, 3, 4]</code> <code>2</code> <code>ind = 3</code> <code>[0, 1, 4, 3, 2]</code> <code>1</code> <code>ind = 2</code> <code>[0, 3, 4, 1, 2]</code> <code>2</code> <code>ind = 1</code> <code>[0, 3, 4, 1, 2]</code> <code>0</code> <code>ind = 0</code> <code>[3, 0, 4, 1, 2]</code> <p>3.d. Proposer une version it\u00e9rative du m\u00e9lange de Fischer-Yates.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef melange(valeurs):\n    indice_dernier = len(valeurs) - 1\n    for i in range(indice_dernier, 0, -1):\n        j = randint(0, i)\n        echange(valeurs, i, j)\n</code></pre>"},{"location":"BAC/recursivite/compile_recursivite/#france-septembre-2021-j1","title":"France Septembre 2021 J1","text":"<p>Exo</p> <p>Th\u00e8mes abord\u00e9s</p> <ul> <li>Algorithmique (recherche dichotomique)  </li> <li>R\u00e9cursivit\u00e9  </li> <li>Variant de boucle  </li> <li>Complexit\u00e9</li> </ul>"},{"location":"BAC/recursivite/compile_recursivite/#partie-a-la-recherche-dichotomique","title":"Partie A : La recherche dichotomique","text":"<p>Question 1</p> <p>La recherche d\u2019un \u00e9l\u00e9ment dans un tableau avec une m\u00e9thode dichotomique ne peut se faire que si le tableau est tri\u00e9. a) Vrai b) Faux  </p> R\u00e9ponse <p>Vrai</p> <p>Question 2</p> <p>Le co\u00fbt d\u2019un algorithme de recherche dichotomique est : a) Constant : Complexit\u00e9 O(1) b) Lin\u00e9aire : Complexit\u00e9 O(n) c) Logarithmique : Complexit\u00e9 O(log(n))  </p> R\u00e9ponse <p>c) Logarithmique</p> <p>Question 3</p> <p>Justifier pourquoi l\u2019entier fin - deb est un variant de boucle qui montre la terminaison du programme de recherche dichotomique de l\u2019annexe. </p> R\u00e9ponse <p>\u00c0 chaque \u00e9tape, si on net rouve pas l\u2019\u00e9l\u00e9ment :  </p> <ul> <li>Si <code>liste[m]&gt;elem</code> alors \\(fin_{k+1} = m - 1\\) et \\(debut_{k+1} = debut_k\\) or \\(m\u2264fin_k\\) donc \\(fin_{k+1}&lt;fin_k\\) et ainsi \\(fin_{k+1} - debut_{k+1} &lt; fin_k - debut_k\\) </li> <li>Si <code>liste[m] &lt; elem</code> alors \\(fin_{k+1} =fin_k\\) et \\(debut_{k+1} = m+1\\) or \\(m \u2265debut_k\\) donc \\(debut_{k+1} &lt; fin_k\\) et ainsi \\(fin_{k+1}-debut_{k+1} &lt;fin_ - debut_k\\)  On a donc toujours \\(fin_{k+1}-debut_{k+1} &lt; fin_k -debut_k\\), c\u2019est bien un variant de boucle. Il existe donc un \\(p\\) tel que \\(fin_p &lt; debut_p\\) et l\u2019algorithme se termine.  </li> </ul>"},{"location":"BAC/recursivite/compile_recursivite/#partie-b-la-recherche-dichotomique-iterative","title":"Partie B : La recherche dichotomique it\u00e9rative","text":"<p>Le programme de recherche dichotomique de l\u2019annexe est utilis\u00e9 pour effectuer des recherches dans une liste. Dans l\u2019ensemble de cette partie, on consid\u00e8re la liste :  \ud83d\udc0d Script Python<pre><code>Lnoms = [\"alice\", \"bob\", \"etienne\", \"hector\", \"lea\", \"nathan\", \"paul\"]\n</code></pre></p> <p>Question 1</p> <p>Expliquer pourquoi en ligne 2, on a \u00abfin = len(liste)-1\u00bb plut\u00f4t que \u00abfin = 6\u00bb.  </p> R\u00e9ponse <p>Le programme s\u2019adapte \u00e0 la longueur de la liste</p> <p>Question 2</p> <p>En Python, l\u2019op\u00e9rateur // donne le quotient de la division euclidienne de deux nombres entiers. Proposer un algorithme pour obtenir ce quotient.  </p> R\u00e9ponse <p>Si on cherche le quotient de a par b : \ud83d\udc0d Script Python<pre><code>c = a - b\nq = 0 \nwhile c &gt; 0: \n    q = q + 1 \n    c = c- b\n</code></pre></p> <p>Question 3</p> <p>Donner la trace compl\u00e8te de l\u2019ex\u00e9cution <code>rechercheDicho(\"lea\", Lnoms)</code> en compl\u00e9tant le tableau ci-dessous sur votre copie :  </p> Variables Condition Valeur renvoy\u00e9e deb fin M deb &lt;= fin R\u00e9ponse Variables Condition Valeur renvoy\u00e9e deb fin M deb &lt;= fin 0 6 3 True 4 6 5 True 4 4 4 True True <p>Question 4</p> <p>Sur votre copie, modifier le code du corps de la fonction <code>rechercheDicho()</code> pour qu\u2019elle renvoie aussi la position (indice) de l\u2019\u00e9l\u00e9ment cherch\u00e9 ou -1 si l\u2019\u00e9l\u00e9ment n\u2019est pas trouv\u00e9. On pourra indiquer sur la copie le num\u00e9ro des lignes modifi\u00e9es, \u00e0 supprimer ou \u00e0 ins\u00e9rer s\u2019il y a lieu. </p> R\u00e9ponse <p>\u00c0 la ligne 6 : <code>return True, m</code> \u00c0 la ligne 12 : <code>return False,-1</code></p>"},{"location":"BAC/recursivite/compile_recursivite/#partie-c-la-recherche-dichotomique-recursive","title":"Partie C : La recherche dichotomique r\u00e9cursive","text":"<p>Question 1</p> <p>Donner la d\u00e9finition d\u2019une fonction r\u00e9cursive en programmation.</p> R\u00e9ponse <p>Une fonction est r\u00e9curssive si elle s\u2019appelle elle-m\u00eame.</p> <p>Question 2</p> <p>\u00c9crire en langage naturel ou en python, l\u2019algorithme de recherche dichotomique d\u2019un \u00e9l\u00e9ment dans une liste, tri\u00e9e de fa\u00e7on croissante, en utilisant une m\u00e9thode r\u00e9cursive. Il renverra <code>True</code> si l\u2019objet a \u00e9t\u00e9 trouv\u00e9, <code>False</code> sinon.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def dichoRecu(elem, liste, deb = None, fin = None): \n    if deb is None: \n        deb = 0 \n    if fin is None: \n        fin = len(liste)- 1 \n    if deb &gt; fin: \n        return False\n    m = (deb + fin) // 2 \n    if liste[m] &gt; elem: \n        return dichoRecu(elem, liste, deb, m-1) \n    else: \n        return dichoRecu(elem, liste, m+1, fin)\n</code></pre> <p>ANNEXE </p> <p>On consid\u00e8re la fonction de recherche dichotomique suivante : </p> \ud83d\udc0d Script Python<pre><code>def rechercheDicho (elem, liste):  \n\"\"\" Cette fonction indique si un \u00e9l\u00e9ment se trouve dans un tableau. \n    Elle utilise la m\u00e9thode de recherche dichotomique. \n    Elle prend en arguments : \n    - elem : \u00e9l\u00e9ment \u00e0 rechercher de type string\n    - liste : liste d'\u00e9l\u00e9ments de type string tri\u00e9e par ordre croissant \n    Elle renvoie un bool\u00e9en correspondant \u00e0 la pr\u00e9sence ou non de l'\u00e9l\u00e9ment \n    \"\"\" \n    deb = 0\n    fin = len(liste)-1\n    m = (deb+fin)//2\n    while deb &lt;= fin : \n        if liste[m] == elem : \n            return True \n        elif liste[m] &gt; elem : \n            fin = m-1 \n        else : \n            deb = m+1 \n        m = (deb+fin)//2 \n    return False \n</code></pre>"},{"location":"BasesDonnees/Cours_TP_SQL/","title":"Cours TP SQL","text":"Th\u00e8me 2 - Base de donn\u00e9es                           02              Cours et TP : Langage SQL <p>Programme Terminale</p> Contenus Capacit\u00e9s attendues Commentaires Langage SQL : requ\u00eate d'interrogation et de mise \u00e0 jour d'une base de donn\u00e9es Identifier les composants d'une requ\u00eate.  Construire des requ\u00eates 'interrogation \u00e0 l'aide des clauses du langage SQL :   <code>SELECT, FROM, WHERE, JOIN</code>  Construire des requ\u00eates d'insertion et de mise \u00e0 jour \u00e0 l'aide de : <code>UPDATE, INSERT, DELETE</code> On peut utiliser <code>DISTINCT, ORDER BY</code> ou les fonctions d'agr\u00e9gation sans utiliser <code>GROUP BY et HAVING</code> In\u00a0[17]: Copied! <pre>DROP TABLE IF EXISTS LIVRES;  CREATE TABLE LIVRES\n(code INT, titre TEXT, auteur TEXT, ann_publi INT, note INT, PRIMARY KEY (code));\n</pre> DROP TABLE IF EXISTS LIVRES;   CREATE TABLE LIVRES (code INT, titre TEXT, auteur TEXT, ann_publi INT, note INT, PRIMARY KEY (code));  In\u00a0[18]: Copied! <pre>INSERT INTO LIVRES\n(code,titre,auteur,ann_publi,note)\nVALUES\n(1,'1984','Orwell',1949,10),\n(2,'Dune','Herbert',1965,8),\n(3,'Fondation','Asimov',1951,9),\n(4,'Le meilleur des mondes','Huxley',1931,7),\n(5,'Fahrenheit 451','Bradbury',1953,7),\n(6,'Ubik','K.Dick',1969,9),\n(7,'Chroniques martiennes','Bradbury',1950,8),\n(8,'La nuit des temps','Barjavel',1968,7),\n(9,'Blade Runner','K.Dick',1968,8),\n(10,'Les Robots','Asimov',1950,9),\n(11,'La Plan\u00e8te des singes','Boulle',1963,8),\n(12,'Ravage','Barjavel',1943,8),\n(13,'Le Ma\u00eetre du Haut Ch\u00e2teau','K.Dick',1962,8),\n(14,'Le monde des \u0100','Van Vogt',1945,7),\n(15,'La Fin de l\u2019\u00e9ternit\u00e9','Asimov',1955,8),\n(16,'De la Terre \u00e0 la Lune','Verne',1865,10);\n</pre> INSERT INTO LIVRES (code,titre,auteur,ann_publi,note) VALUES (1,'1984','Orwell',1949,10), (2,'Dune','Herbert',1965,8), (3,'Fondation','Asimov',1951,9), (4,'Le meilleur des mondes','Huxley',1931,7), (5,'Fahrenheit 451','Bradbury',1953,7), (6,'Ubik','K.Dick',1969,9), (7,'Chroniques martiennes','Bradbury',1950,8), (8,'La nuit des temps','Barjavel',1968,7), (9,'Blade Runner','K.Dick',1968,8), (10,'Les Robots','Asimov',1950,9), (11,'La Plan\u00e8te des singes','Boulle',1963,8), (12,'Ravage','Barjavel',1943,8), (13,'Le Ma\u00eetre du Haut Ch\u00e2teau','K.Dick',1962,8), (14,'Le monde des \u0100','Van Vogt',1945,7), (15,'La Fin de l\u2019\u00e9ternit\u00e9','Asimov',1955,8), (16,'De la Terre \u00e0 la Lune','Verne',1865,10); In\u00a0[7]: Copied! <pre>DROP TABLE IF EXISTS AUTEURS;  CREATE TABLE AUTEURS\n(id INT, nom TEXT, prenom TEXT, ann_naissance INT, langue_ecriture TEXT, PRIMARY KEY (id)\n);\n</pre> DROP TABLE IF EXISTS AUTEURS;   CREATE TABLE AUTEURS (id INT, nom TEXT, prenom TEXT, ann_naissance INT, langue_ecriture TEXT, PRIMARY KEY (id) ); In\u00a0[8]: Copied! <pre>INSERT INTO AUTEURS\n(id,nom,prenom,ann_naissance,langue_ecriture)\nVALUES\n(1,'Orwell','George',1903,'anglais'),\n(2,'Herbert','Frank',1920,'anglais'),\n(3,'Asimov','Isaac',1920,'anglais'),\n(4,'Huxley','Aldous',1894,'anglais'),\n(5,'Bradbury','Ray',1920,'anglais'),\n(6,'K.Dick','Philip',1928,'anglais'),\n(7,'Barjavel','Ren\u00e9',1911,'fran\u00e7ais'),\n(8,'Boulle','Pierre',1912,'fran\u00e7ais'),\n(9,'Van Vogt','Alfred Elton',1912,'anglais'),\n(10,'Verne','Jules',1828,'fran\u00e7ais');\n</pre> INSERT INTO AUTEURS (id,nom,prenom,ann_naissance,langue_ecriture) VALUES (1,'Orwell','George',1903,'anglais'), (2,'Herbert','Frank',1920,'anglais'), (3,'Asimov','Isaac',1920,'anglais'), (4,'Huxley','Aldous',1894,'anglais'), (5,'Bradbury','Ray',1920,'anglais'), (6,'K.Dick','Philip',1928,'anglais'), (7,'Barjavel','Ren\u00e9',1911,'fran\u00e7ais'), (8,'Boulle','Pierre',1912,'fran\u00e7ais'), (9,'Van Vogt','Alfred Elton',1912,'anglais'), (10,'Verne','Jules',1828,'fran\u00e7ais'); <p></p>   S\u00e9lection de donn\u00e9es  In\u00a0[9]: Copied! <pre>SELECT * FROM LIVRES\n</pre> SELECT *  FROM LIVRES Out[9]: codetitreid_auteurann_publinote1198411949102Dune2196583Fondation3195194Le meilleur des mondes4193175Fahrenheit 4515195376Ubik6196997Chroniques martiennes5195088La nuit des temps7196879Blade Runner61968810Les Robots31950911La Plan\u00e8te des singes81963812Ravage71943813Le Ma\u00eetre du Haut Ch\u00e2teau61962814Le monde des \u010091945715La Fin de l\u2019\u00e9ternit\u00e931955816De la Terre \u00e0 la Lune10186510 In\u00a0[19]: Copied! <pre>SELECT titre, auteur, note\nFROM LIVRES\n</pre> SELECT titre, auteur, note FROM LIVRES Out[19]: titreauteurnote1984Orwell10DuneHerbert8FondationAsimov9Le meilleur des mondesHuxley7Fahrenheit 451Bradbury7UbikK.Dick9Chroniques martiennesBradbury8La nuit des tempsBarjavel7Blade RunnerK.Dick8Les RobotsAsimov9La Plan\u00e8te des singesBoulle8RavageBarjavel8Le Ma\u00eetre du Haut Ch\u00e2teauK.Dick8Le monde des \u0100Van Vogt7La Fin de l\u2019\u00e9ternit\u00e9Asimov8De la Terre \u00e0 la LuneVerne10 \ud83d\udcbb       Question 1 :  <p>Ecrivez une requ\u00eate permettant d'afficher le nom des auteurs ainsi que leur ann\u00e9e de naissance</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[20]: Copied! <pre>SELECT titre, ann_publi\nFROM LIVRES\nWHERE auteur='Asimov'\n</pre> SELECT titre, ann_publi FROM LIVRES WHERE auteur='Asimov' Out[20]: titreann_publiFondation1951Les Robots1950La Fin de l\u2019\u00e9ternit\u00e91955 In\u00a0[21]: Copied! <pre>SELECT *\nFROM LIVRES\nWHERE auteur='Asimov'\n</pre> SELECT * FROM LIVRES WHERE auteur='Asimov' Out[21]: codetitreauteurann_publinote3FondationAsimov1951910Les RobotsAsimov1950915La Fin de l\u2019\u00e9ternit\u00e9Asimov19558 In\u00a0[22]: Copied! <pre>SELECT auteur,titre, ann_publi\nFROM LIVRES\nWHERE auteur='Asimov' AND note&gt;=9\n</pre> SELECT auteur,titre, ann_publi FROM LIVRES WHERE auteur='Asimov' AND note&gt;=9 Out[22]: auteurtitreann_publiAsimovFondation1951AsimovLes Robots1950 \ud83d\udcbb       Question 2 :  <p>\u00c9crivez et testez une requ\u00eate permettant d\u2019obtenir uniquement les titres des livres \u00e9crits par Philip K.Dick.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> \ud83d\udcbb       Question 4 :  <p>\u00c9crivez et testez une requ\u00eate permettant d\u2019obtenir uniquement les titres des livres ayant obtenus une note strictement sup\u00e9rieure \u00e0 8.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> \ud83d\udcbb       Question 5 :  <p>\u00c9crire une requ\u00eate permettant d\u2019obtenir les titres livres publi\u00e9s apr\u00e8s 1945 qui ont une note sup\u00e9rieure ou \u00e9gale \u00e0 9.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> \ud83d\udcbb       Question 5 :  <p>\u00c9crire une requ\u00eate permettant d\u2019obtenir les auteurs fran\u00e7ais ayant \u00e9crient apr\u00e8s 1920.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[20]: Copied! <pre>SELECT titre,auteur,ann_publi AS publication FROM livres WHERE ann_publi &gt;= 1945;\n</pre> SELECT titre,auteur,ann_publi AS publication  FROM livres  WHERE ann_publi &gt;= 1945; Out[20]: titreauteurpublication1984Orwell1949DuneHerbert1965FondationAsimov1951Fahrenheit 451Bradbury1953UbikK.Dick1969Chroniques martiennesBradbury1950La nuit des tempsBarjavel1968Blade RunnerK.Dick1968Les RobotsAsimov1950La Plan\u00e8te des singesBoulle1963Le Ma\u00eetre du Haut Ch\u00e2teauK.Dick1962Le monde des \u0100Van Vogt1945La Fin de l\u2019\u00e9ternit\u00e9Asimov1955 In\u00a0[21]: Copied! <pre>SELECT titre\nFROM LIVRES\nWHERE auteur='K.Dick' ORDER BY ann_publi\n</pre> SELECT titre FROM LIVRES WHERE auteur='K.Dick' ORDER BY ann_publi Out[21]: titreLe Ma\u00eetre du Haut Ch\u00e2teauBlade RunnerUbik \ud83d\udcbb       Question 6 :  <p>\u00c9crire une requ\u00eate permettant d\u2019obtenir les livres class\u00e9s en fonction de leur note de la plus base \u00e0 la plus haute.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> \ud83d\udcbb       Question 7 :  <p>\u00c9crire une requ\u00eate permettant d\u2019obtenir les auteurs fran\u00e7ais class\u00e9s en fonction de leur ann\u00e9e de naissance.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> \ud83d\udcbb       Question 8 :  <p>\u00c9crire une requ\u00eate permettant d\u2019obtenir les auteurs fran\u00e7ais dans l\u2019ordre alphab\u00e9tique.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Remarques :</p> <ul> <li>Comportement par d\u00e9faut : Si le param\u00e8tre ASC ou DESC est omis, le classement se fait par ordre croissant (donc ASC est le param\u00e8tre par d\u00e9faut).</li> </ul> In\u00a0[28]: Copied! <pre>SELECT auteur\nFROM LIVRES\n</pre> SELECT auteur FROM LIVRES Out[28]: auteurOrwellHerbertAsimovHuxleyBradburyK.DickBradburyBarjavelK.DickAsimovBoulleBarjavelK.DickVan VogtAsimovVerne In\u00a0[29]: Copied! <pre>SELECT DISTINCT auteur\nFROM LIVRES\n</pre> SELECT DISTINCT auteur FROM LIVRES Out[29]: auteurOrwellHerbertAsimovHuxleyBradburyK.DickBarjavelBoulleVan VogtVerne In\u00a0[31]: Copied! <pre>SELECT titre FROM livres WHERE titre LIKE 'F%';\n</pre>  SELECT titre   FROM livres   WHERE titre LIKE 'F%'; Out[31]: titreFondationFahrenheit 451 In\u00a0[32]: Copied! <pre>SELECT titre FROM livres WHERE titre LIKE '%s';\n</pre> SELECT titre  FROM livres  WHERE titre LIKE '%s'; Out[32]: titreLe meilleur des mondesChroniques martiennesLa nuit des tempsLes RobotsLa Plan\u00e8te des singes \ud83d\udcbb       Question 9 :  <p>Ecrire une requ\u00eate permettant d'obtenir les auteurs commen\u00e7ant par V</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p></p>   Op\u00e9rations sur les donn\u00e9es : s\u00e9lection avec agr\u00e9gation   <p>Les requ\u00eates effectu\u00e9es jusqu'ici ont juste s\u00e9lectionn\u00e9 des donn\u00e9es gr\u00e2ce \u00e0 diff\u00e9rents filtres : aucune action \u00e0 partir de ces donn\u00e9es n'a \u00e9t\u00e9 effectu\u00e9e.</p> <p>Nous allons maintenant effectuer des op\u00e9rations \u00e0 partir des donn\u00e9es s\u00e9lectionn\u00e9es.</p> <p>On appelle ces op\u00e9rations des op\u00e9rations d'agr\u00e9gation.</p> In\u00a0[35]: Copied! <pre>SELECT COUNT(*) AS total FROM livres\nWHERE ann_publi=1968;\n</pre>  SELECT COUNT(*) AS total   FROM livres  WHERE ann_publi=1968; Out[35]: total2 \ud83d\udcbb       Question 10 :  <p>Ecrire une requ\u00eate permettant d'obtenir le nombre d'auteurs n\u00e9s en 1920</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> \ud83d\udcbb       Question 11 :  <p>Ecrire un requ\u00eate permettant d'obtenir le nombre de livres ayant eu une note sup\u00e9rieure \u00e0 9.</p> In\u00a0[36]: Copied! <pre>\n</pre> Out[36]: total5 In\u00a0[40]: Copied! <pre>SELECT SUM(ann_publi) AS somme FROM livres\nWHERE titre LIKE \"F%\";\n</pre> SELECT SUM(ann_publi) AS somme  FROM livres WHERE titre LIKE \"F%\"; Out[40]: somme3904 In\u00a0[42]: Copied! <pre>SELECT AVG(note) AS moyenne FROM livres\nWHERE auteur=\"Bradbury\";\n</pre> SELECT AVG(note) AS moyenne  FROM livres WHERE auteur=\"Bradbury\"; Out[42]: moyenne7.5 In\u00a0[44]: Copied! <pre>SELECT auteur, titre,MIN(note) AS minimum FROM livres;\n</pre> SELECT auteur, titre,MIN(note) AS minimum  FROM livres; Out[44]: auteurtitreminimumHuxleyLe meilleur des mondes7 <p></p>  Des recherches crois\u00e9es sur les tables : les jointures   <p>Nous avons 2 tables, gr\u00e2ce aux jointures nous allons pouvoir associer ces 2 tables dans une m\u00eame requ\u00eate.</p> <p>Repartons sur la bases LIVRES l\u00e9g\u00e8rement modifi\u00e9es.</p> In\u00a0[23]: Copied! <pre>DROP TABLE IF EXISTS LIVRES;  CREATE TABLE LIVRES\n(code INT, titre TEXT, id_auteur TEXT, ann_publi INT, note INT, PRIMARY KEY (code,id_auteur));\n</pre> DROP TABLE IF EXISTS LIVRES;   CREATE TABLE LIVRES (code INT, titre TEXT, id_auteur TEXT, ann_publi INT, note INT, PRIMARY KEY (code,id_auteur)); In\u00a0[24]: Copied! <pre>INSERT INTO LIVRES\n(code,titre,id_auteur,ann_publi,note)\nVALUES\n(1,'1984',1,1949,10),\n(2,'Dune',2,1965,8),\n(3,'Fondation',3,1951,9),\n(4,'Le meilleur des mondes',4,1931,7),\n(5,'Fahrenheit 451',5,1953,7),\n(6,'Ubik',6,1969,9),\n(7,'Chroniques martiennes',5,1950,8),\n(8,'La nuit des temps',7,1968,7),\n(9,'Blade Runner',6,1968,8),\n(10,'Les Robots',3,1950,9),\n(11,'La Plan\u00e8te des singes',8,1963,8),\n(12,'Ravage',7,1943,8),\n(13,'Le Ma\u00eetre du Haut Ch\u00e2teau',6,1962,8),\n(14,'Le monde des \u0100',9,1945,7),\n(15,'La Fin de l\u2019\u00e9ternit\u00e9',3,1955,8),\n(16,'De la Terre \u00e0 la Lune',10,1865,10);\n</pre> INSERT INTO LIVRES (code,titre,id_auteur,ann_publi,note) VALUES (1,'1984',1,1949,10), (2,'Dune',2,1965,8), (3,'Fondation',3,1951,9), (4,'Le meilleur des mondes',4,1931,7), (5,'Fahrenheit 451',5,1953,7), (6,'Ubik',6,1969,9), (7,'Chroniques martiennes',5,1950,8), (8,'La nuit des temps',7,1968,7), (9,'Blade Runner',6,1968,8), (10,'Les Robots',3,1950,9), (11,'La Plan\u00e8te des singes',8,1963,8), (12,'Ravage',7,1943,8), (13,'Le Ma\u00eetre du Haut Ch\u00e2teau',6,1962,8), (14,'Le monde des \u0100',9,1945,7), (15,'La Fin de l\u2019\u00e9ternit\u00e9',3,1955,8), (16,'De la Terre \u00e0 la Lune',10,1865,10); In\u00a0[25]: Copied! <pre>SELECT *\nFROM LIVRES\nINNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id\n</pre> SELECT * FROM LIVRES INNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id Out[25]: codetitreid_auteurann_publinoteidnomprenomann_naissancelangue_ecriture1198411949101OrwellGeorge1903anglais2Dune2196582HerbertFrank1920anglais3Fondation3195193AsimovIsaac1920anglais4Le meilleur des mondes4193174HuxleyAldous1894anglais5Fahrenheit 4515195375BradburyRay1920anglais6Ubik6196996K.DickPhilip1928anglais7Chroniques martiennes5195085BradburyRay1920anglais8La nuit des temps7196877BarjavelRen\u00e91911fran\u00e7ais9Blade Runner6196886K.DickPhilip1928anglais10Les Robots3195093AsimovIsaac1920anglais11La Plan\u00e8te des singes8196388BoullePierre1912fran\u00e7ais12Ravage7194387BarjavelRen\u00e91911fran\u00e7ais13Le Ma\u00eetre du Haut Ch\u00e2teau6196286K.DickPhilip1928anglais14Le monde des \u01009194579Van VogtAlfred Elton1912anglais15La Fin de l\u2019\u00e9ternit\u00e93195583AsimovIsaac1920anglais16De la Terre \u00e0 la Lune1018651010VerneJules1828fran\u00e7ais <p>Des informations (id et id_auteur) sont en double. On peut \u00eatre plus pr\u00e9cis.</p> In\u00a0[32]: Copied! <pre>SELECT AUTEURS.nom,LIVRES.titre,LIVRES.note,AUTEURS.ann_naissance AS Naissance, LIVRES.ann_publi AS Publication, AUTEURS.langue_ecriture AS Langue\nFROM LIVRES\nINNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id\nORDER BY AUTEURS.nom\n</pre> SELECT AUTEURS.nom,LIVRES.titre,LIVRES.note,AUTEURS.ann_naissance AS Naissance, LIVRES.ann_publi AS Publication, AUTEURS.langue_ecriture AS Langue FROM LIVRES INNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id ORDER BY AUTEURS.nom Out[32]: nomtitrenoteNaissancePublicationLangueAsimovFondation919201951anglaisAsimovLes Robots919201950anglaisAsimovLa Fin de l\u2019\u00e9ternit\u00e9819201955anglaisBarjavelLa nuit des temps719111968fran\u00e7aisBarjavelRavage819111943fran\u00e7aisBoulleLa Plan\u00e8te des singes819121963fran\u00e7aisBradburyFahrenheit 451719201953anglaisBradburyChroniques martiennes819201950anglaisHerbertDune819201965anglaisHuxleyLe meilleur des mondes718941931anglaisK.DickUbik919281969anglaisK.DickBlade Runner819281968anglaisK.DickLe Ma\u00eetre du Haut Ch\u00e2teau819281962anglaisOrwell19841019031949anglaisVan VogtLe monde des \u0100719121945anglaisVerneDe la Terre \u00e0 la Lune1018281865fran\u00e7ais <p></p>  Modifications d'une base   In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>UPDATE LIVRES\nSET note=7\nWHERE titre = 'Hyp\u00e9rion'\n</pre> UPDATE LIVRES SET note=7 WHERE titre = 'Hyp\u00e9rion' In\u00a0[\u00a0]: Copied! <pre>DELETE FROM LIVRES\nWHERE titre='Hyp\u00e9rion'\n</pre> DELETE FROM LIVRES WHERE titre='Hyp\u00e9rion'"},{"location":"BasesDonnees/Cours_TP_SQL/#du-modele-relationnel-au-sgbd","title":"Du mod\u00e8le relationnel au SGBD\u00b6","text":"<p>Nous allons maintenant d'aborder la partie logicielle : les SGBD (Syst\u00e8mes de Gestion de Bases de Donn\u00e9es).</p> <p>Les SGBD jouent le r\u00f4le d'interface entre l'\u00eatre humain et la base de donn\u00e9es. Par l'interm\u00e9diaire de requ\u00eates, l'utilisateur va consulter ou modifier la base de donn\u00e9es. Le SGBD est garant de l'int\u00e9grit\u00e9 de cette base, et pr\u00e9vient notamment que les modifications ne soient pas pr\u00e9judiciables \u00e0 la base de donn\u00e9es.</p> <p>Le langage utilis\u00e9 pour communiquer avec le SGBD est le langage SQL, pour Structured  Query Langage (pour langage de requ\u00eates structur\u00e9es).</p> <p>Les SGBD les plus utilis\u00e9s sont bas\u00e9s sur le mod\u00e8le relationnel. Parmi eux, citons Oracle, MySQL, Microsoft SQL Server, PostgreSQL, Microsoft Access, SQLite, MariaDB...</p> <p>Mais de plus en plus de SGBD non-relationnels sont utilis\u00e9s, sp\u00e9cialement adapt\u00e9s \u00e0 des donn\u00e9es plus diverses et moins structur\u00e9es. On les retrouve sous l'appelation NoSQL  (pour Not only SQL). Citons parmi eux MongoDB, Cassandra (Facebook), BigTable (Google)...</p> <p>La quasi-totalit\u00e9 de ces SGBD fonctionnent avec un mod\u00e8le client-serveur.</p> <p>Nous allons travailler principalement avec le langage SQLite peut lui s'utiliser directement sans d\u00e9marrer un serveur : la base de donn\u00e9es est enti\u00e8rement repr\u00e9sent\u00e9e dans le logiciel utilisant SQLite.</p>"},{"location":"BasesDonnees/Cours_TP_SQL/#creation-de-tables","title":"Cr\u00e9ation de tables\u00b6","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#creation-de-la-tables-livres","title":"Cr\u00e9ation de la tables LIVRES\u00b6","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#creation-de-la-table-auteurs","title":"Cr\u00e9ation de la table AUTEURS\u00b6","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#requete-basique-select-from","title":"\u2712  Requ\u00eate basique : SELECT, FROM\u00b6","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#requete-basique-select-from-where","title":"\u2712  Requ\u00eate basique : SELECT, FROM, WHERE\u00b6","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#renommage-as","title":"\u2712  Renommage : AS\u00b6","text":"<p>Pour rendre l'affichage plus \"lisible\" on peut renommer les colonnes : AS</p> <ul> <li>Commande :</li> </ul> <pre>SELECT titre,auteur,ann_publi AS publication FROM LIVRES WHERE ann_publi &gt;= 1945;\n</pre> <ul> <li>Traduction : Lors de l'affichage du r\u00e9sulats et dans la suite de la requ\u00eate (important), la colonne \"ann_publi\" est renomm\u00e9e \"publication\".</li> </ul>"},{"location":"BasesDonnees/Cours_TP_SQL/#mettre-dans-lordre-les-reponses-la-clause-order-by","title":"\u2712  Mettre dans l\u2019ordre les r\u00e9ponses la clause ORDER BY\u00b6","text":"<p>Il est aussi possible de rajouter la clause SQL ORDER BY afin d\u2019obtenir les r\u00e9sultats class\u00e9s dans un ordre pr\u00e9cis.</p>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-distinct","title":"\u2712  La clause DISTINCT\u00b6","text":"<p>Il est possible d\u2019\u00e9viter les doublons gr\u00e2ce \u00e0 la clause DISTINCT</p>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-like","title":"\u2712  La clause LIKE\u00b6","text":"<p>On veut les titres de la table \u00ablivre\u00bb dont le titre contient la cha\u00eene de caract\u00e8res \"Ast\u00e9rix\". Le symbole <code>%</code> est un joker qui peut symboliser n'importe quelle cha\u00eene de caract\u00e8res.</p> <pre>SELECT titre FROM livres WHERE titre LIKE 'F%';\n</pre> <p>permet d'obtenir les titres de livres commen\u00e7ant par F</p> <pre>SELECT titre FROM livres WHERE titre LIKE '%s';\n</pre> <p>permet d'obtenir les titres de livres finissant par s</p>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-count","title":"\u2712  La clause COUNT\u00b6","text":"<p>On veut compter le nombre d'enregistrements de la tables livres publi\u00e9s en 1968.</p>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-sum-additionner","title":"\u2712  La clause  : SUM  - Additionner\u00b6","text":"<ul> <li>Commande :</li> </ul> <pre>SELECT SUM(ann_publi) AS somme FROM livres\nWHERE auteur LIKE \"F%\";\n``` - **Traduction :** On veut additionner les ann\u00e9es des livres de la tables livres commen\u00e7ant par F. Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e \u00absomme\u00bb.\n*Attention : dans notre cas pr\u00e9cis, ce calcul n'a aucun sens...*\n</pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-avg-moyenne","title":"\u2712  La clause  : AVG  - Moyenne\"\u00b6","text":"<p>On veut calculer la moyenne des notes des livres de la table livres de l'auteur \"Bradbury\". Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e \u00abmoyenne\u00bb.</p> <pre>SELECT AVG(note) AS note moyenne FROM livres\nWHERE auteur=\"Bradbury\";\n</pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-min-max-trouver-les-extremums","title":"\u2712  La clause  : MIN, MAX - Trouver les extremums:\u00b6","text":"<ul> <li>Commande :</li> </ul> <pre>SELECT MIN(note) AS minimum FROM livres;\n</pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#jointures-simples","title":"\u2712 Jointures simples\u00b6","text":"<p>En g\u00e9n\u00e9ral, les jointures consistent \u00e0 associer des lignes de 2 tables. Elles permettent d\u2019\u00e9tablir un lien entre 2 tables.</p> <ul> <li>Commande :</li> </ul> <pre>SELECT *\nFROM LIVRES\nINNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id\n</pre> <ul> <li>Traduction : Comme plusieurs tables sont appel\u00e9es, nous pr\u00e9fixons chaque colonne avec le nom de la table.</li> </ul>"},{"location":"BasesDonnees/Cours_TP_SQL/#insert","title":"\u2712 INSERT\u00b6","text":"<p>Ins\u00e9rer les donn\u00e9es suivantes dans la base Auteurs:</p> <pre>(17,'Hyp\u00e9rion','Simmons',1989,8)\n</pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#update","title":"\u2712 UPDATE\u00b6","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#delete","title":"\u2712 DELETE\u00b6","text":""},{"location":"BasesDonnees/Cours_TP_SQL/","title":"Langage SQL : R\u00e9sum\u00e9","text":"Th\u00e8me 2 : Base de donn\u00e9es              02              R\u00e9sum\u00e9 cours : Langage SQL <p> Programme Terminale </p> Contenus Capacit\u00e9s attendues Commentaires Langage SQL : requ\u00eate d'interrogation et de mise \u00e0 jour d'une base de donn\u00e9es Identifier les composants d'une requ\u00eate.  Construire des requ\u00eates 'interrogation \u00e0 l'aide des clauses du langage SQL :   <code>SELECT, FROM, WHERE, JOIN</code>  Construire des requ\u00eates d'insertion et de mise \u00e0 jour \u00e0 l'aide de : <code>UPDATE, INSERT, DELETE</code> On peut utiliser <code>DISTINCT, ORDER BY</code> ou les fonctions d'agr\u00e9gation sans utiliser <code>GROUP BY et HAVING</code> <p>Voir TP sur Capytal</p>"},{"location":"BasesDonnees/Cours_TP_SQL/#du-modele-relationnel-au-sgbd","title":"Du mod\u00e8le relationnel au SGBD","text":"<p>Nous allons maintenant d'aborder la partie logicielle : les SGBD (Syst\u00e8mes de Gestion de Bases de Donn\u00e9es).</p> <p>Les SGBD jouent le r\u00f4le d'interface entre l'\u00eatre humain et la base de donn\u00e9es. Par l'interm\u00e9diaire de requ\u00eates, l'utilisateur va consulter ou modifier la base de donn\u00e9es. Le SGBD est garant de l'int\u00e9grit\u00e9 de cette base, et pr\u00e9vient notamment que les modifications ne soient pas pr\u00e9judiciables \u00e0 la base de donn\u00e9es.</p> <p>Le langage utilis\u00e9 pour communiquer avec le SGBD est le langage SQL, pour Structured  Query Langage (pour langage de requ\u00eates structur\u00e9es).</p> <p>Les SGBD les plus utilis\u00e9s sont bas\u00e9s sur le mod\u00e8le relationnel. Parmi eux, citons Oracle, MySQL, Microsoft SQL Server, PostgreSQL, Microsoft Access, SQLite, MariaDB...</p> <p>Mais de plus en plus de SGBD non-relationnels sont utilis\u00e9s, sp\u00e9cialement adapt\u00e9s \u00e0 des donn\u00e9es plus diverses et moins structur\u00e9es. On les retrouve sous l'appelation NoSQL  (pour Not only SQL). Citons parmi eux MongoDB, Cassandra (Facebook), BigTable (Google)...</p> <p>La quasi-totalit\u00e9 de ces SGBD fonctionnent avec un mod\u00e8le client-serveur. </p> <p>Nous allons travailler principalement avec le langage SQLite peut lui s'utiliser directement sans d\u00e9marrer un serveur : la base de donn\u00e9es est enti\u00e8rement repr\u00e9sent\u00e9e dans le logiciel utilisant SQLite.   </p>"},{"location":"BasesDonnees/Cours_TP_SQL/#creation-de-tables","title":"Cr\u00e9ation de tables","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DROP TABLE IF EXISTS LIVRES;  CREATE TABLE LIVRES\n(code INT, titre TEXT, auteur TEXT, ann_publi INT, note INT, PRIMARY KEY (code));\n</code></pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#creation-de-la-tables-livres","title":"Cr\u00e9ation de la tables LIVRES","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO LIVRES\n(code,titre,auteur,ann_publi,note)\nVALUES\n(1,'1984','Orwell',1949,10),\n(2,'Dune','Herbert',1965,8),\n(3,'Fondation','Asimov',1951,9),\n(4,'Le meilleur des mondes','Huxley',1931,7),\n(5,'Fahrenheit 451','Bradbury',1953,7),\n(6,'Ubik','K.Dick',1969,9),\n(7,'Chroniques martiennes','Bradbury',1950,8),\n(8,'La nuit des temps','Barjavel',1968,7),\n(9,'Blade Runner','K.Dick',1968,8),\n(10,'Les Robots','Asimov',1950,9),\n(11,'La Plan\u00e8te des singes','Boulle',1963,8),\n(12,'Ravage','Barjavel',1943,8),\n(13,'Le Ma\u00eetre du Haut Ch\u00e2teau','K.Dick',1962,8),\n(14,'Le monde des \u0100','Van Vogt',1945,7),\n(15,'La Fin de l\u2019\u00e9ternit\u00e9','Asimov',1955,8),\n(16,'De la Terre \u00e0 la Lune','Verne',1865,10);\n</code></pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#creation-de-la-table-auteurs","title":"Cr\u00e9ation de la table AUTEURS","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DROP TABLE IF EXISTS AUTEURS;  CREATE TABLE AUTEURS\n(id INT, nom TEXT, prenom TEXT, ann_naissance INT, langue_ecriture TEXT, PRIMARY KEY (id)\n);\n</code></pre> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO AUTEURS\n(id,nom,prenom,ann_naissance,langue_ecriture)\nVALUES\n(1,'Orwell','George',1903,'anglais'),\n(2,'Herbert','Frank',1920,'anglais'),\n(3,'Asimov','Isaac',1920,'anglais'),\n(4,'Huxley','Aldous',1894,'anglais'),\n(5,'Bradbury','Ray',1920,'anglais'),\n(6,'K.Dick','Philip',1928,'anglais'),\n(7,'Barjavel','Ren\u00e9',1911,'fran\u00e7ais'),\n(8,'Boulle','Pierre',1912,'fran\u00e7ais'),\n(9,'Van Vogt','Alfred Elton',1912,'anglais'),\n(10,'Verne','Jules',1828,'fran\u00e7ais');\n</code></pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#selection-de-donnees","title":"S\u00e9lection de donn\u00e9es","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#requete-basique-select-from","title":"\u2712  Requ\u00eate basique : SELECT, FROM","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT * FROM LIVRES\n</code></pre> codetitreid_auteurann_publinote1198411949102Dune2196583Fondation3195194Le meilleur des mondes4193175Fahrenheit 4515195376Ubik6196997Chroniques martiennes5195088La nuit des temps7196879Blade Runner61968810Les Robots31950911La Plan\u00e8te des singes81963812Ravage71943813Le Ma\u00eetre du Haut Ch\u00e2teau61962814Le monde des \u010091945715La Fin de l\u2019\u00e9ternit\u00e931955816De la Terre \u00e0 la Lune10186510 \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, auteur, note\nFROM LIVRES\n</code></pre> titreauteurnote1984Orwell10DuneHerbert8FondationAsimov9Le meilleur des mondesHuxley7Fahrenheit 451Bradbury7UbikK.Dick9Chroniques martiennesBradbury8La nuit des tempsBarjavel7Blade RunnerK.Dick8Les RobotsAsimov9La Plan\u00e8te des singesBoulle8RavageBarjavel8Le Ma\u00eetre du Haut Ch\u00e2teauK.Dick8Le monde des \u0100Van Vogt7La Fin de l\u2019\u00e9ternit\u00e9Asimov8De la Terre \u00e0 la LuneVerne10"},{"location":"BasesDonnees/Cours_TP_SQL/#requete-basique-select-from-where","title":"\u2712  Requ\u00eate basique : SELECT, FROM, WHERE","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, ann_publi\nFROM LIVRES\nWHERE auteur='Asimov'\n</code></pre> titreann_publiFondation1951Les Robots1950La Fin de l\u2019\u00e9ternit\u00e91955 \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT *\nFROM LIVRES\nWHERE auteur='Asimov'\n</code></pre> codetitreauteurann_publinote3FondationAsimov1951910Les RobotsAsimov1950915La Fin de l\u2019\u00e9ternit\u00e9Asimov19558 \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT auteur,titre, ann_publi\nFROM LIVRES\nWHERE auteur='Asimov' AND note&gt;=9\n</code></pre> auteurtitreann_publiAsimovFondation1951AsimovLes Robots1950"},{"location":"BasesDonnees/Cours_TP_SQL/#renommage-as","title":"\u2712  Renommage : AS","text":"<p>Pour rendre l'affichage plus \"lisible\" on peut renommer les colonnes : AS</p> <ul> <li>Commande : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre,auteur,ann_publi AS publication FROM LIVRES WHERE ann_publi &gt;= 1945;\n</code></pre></li> <li>Traduction : Lors de l'affichage du r\u00e9sulats et dans la suite de la requ\u00eate (important), la colonne \"ann_publi\" est renomm\u00e9e \"publication\".</li> </ul> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre,auteur,ann_publi AS publication FROM livres WHERE ann_publi &gt;= 1945;\n</code></pre> titreauteurpublication1984Orwell1949DuneHerbert1965FondationAsimov1951Fahrenheit 451Bradbury1953UbikK.Dick1969Chroniques martiennesBradbury1950La nuit des tempsBarjavel1968Blade RunnerK.Dick1968Les RobotsAsimov1950La Plan\u00e8te des singesBoulle1963Le Ma\u00eetre du Haut Ch\u00e2teauK.Dick1962Le monde des \u0100Van Vogt1945La Fin de l\u2019\u00e9ternit\u00e9Asimov1955"},{"location":"BasesDonnees/Cours_TP_SQL/#mettre-dans-lordre-les-reponses-la-clause-order-by","title":"\u2712  Mettre dans l\u2019ordre les r\u00e9ponses la clause ORDER BY","text":"<p>Il est aussi possible de rajouter la clause SQL ORDER BY afin d\u2019obtenir les r\u00e9sultats class\u00e9s dans un ordre pr\u00e9cis.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM LIVRES\nWHERE auteur='K.Dick' ORDER BY ann_publi\n</code></pre> titreLe Ma\u00eetre du Haut Ch\u00e2teauBlade RunnerUbik <p>Remarques :</p> <ul> <li>Comportement par d\u00e9faut : Si le param\u00e8tre ASC ou DESC est omis, le classement se fait par ordre croissant (donc ASC est le param\u00e8tre par d\u00e9faut).</li> </ul>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-distinct","title":"\u2712  La clause DISTINCT","text":"<p>Il est possible d\u2019\u00e9viter les doublons gr\u00e2ce \u00e0 la clause DISTINCT</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT auteur\nFROM LIVRES\n</code></pre> auteurOrwellHerbertAsimovHuxleyBradburyK.DickBradburyBarjavelK.DickAsimovBoulleBarjavelK.DickVan VogtAsimovVerne \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT auteur\nFROM LIVRES\n</code></pre> auteurOrwellHerbertAsimovHuxleyBradburyK.DickBarjavelBoulleVan VogtVerne"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-like","title":"\u2712  La clause LIKE","text":"<p>On veut les titres de la table \u00ablivre\u00bb dont le titre contient la cha\u00eene de caract\u00e8res \"Ast\u00e9rix\".  Le symbole <code>%</code> est un joker qui peut symboliser n'importe quelle cha\u00eene de caract\u00e8res. </p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre FROM livres WHERE titre LIKE 'F%';\n</code></pre> permet d'obtenir les titres de livres commen\u00e7ant par F</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre FROM livres WHERE titre LIKE '%s';\n</code></pre> permet d'obtenir les titres de livres finissant par s</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code> SELECT titre FROM livres WHERE titre LIKE 'F%';\n</code></pre> titreFondationFahrenheit 451 \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre FROM livres WHERE titre LIKE '%s';\n</code></pre> titreLe meilleur des mondesChroniques martiennesLa nuit des tempsLes RobotsLa Plan\u00e8te des singes"},{"location":"BasesDonnees/Cours_TP_SQL/#operations-sur-les-donnees-selection-avec-agregation","title":"Op\u00e9rations sur les donn\u00e9es : s\u00e9lection avec agr\u00e9gation","text":"<p>Les requ\u00eates effectu\u00e9es jusqu'ici ont juste s\u00e9lectionn\u00e9 des donn\u00e9es gr\u00e2ce \u00e0 diff\u00e9rents filtres : aucune action \u00e0 partir de ces donn\u00e9es n'a \u00e9t\u00e9 effectu\u00e9e.   </p> <p>Nous allons maintenant effectuer des op\u00e9rations \u00e0 partir des donn\u00e9es s\u00e9lectionn\u00e9es.  </p> <p>On appelle ces op\u00e9rations des op\u00e9rations d'agr\u00e9gation.</p>"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-count","title":"\u2712  La clause COUNT","text":"<p>On veut compter le nombre d'enregistrements de la tables livres publi\u00e9s en 1968.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code> SELECT COUNT(*) AS total FROM livres\nWHERE ann_publi=1968;\n</code></pre> total2"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-sum-additionner","title":"\u2712  La clause  : SUM  - Additionner","text":"<ul> <li>Commande : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT SUM(ann_publi) AS somme FROM livres\nWHERE auteur LIKE \"F%\";\n</code></pre></li> <li>Traduction : </li> </ul> <p>On veut additionner les ann\u00e9es des livres de la tables livres commen\u00e7ant par F.  Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e \u00absomme\u00bb. Attention : dans notre cas pr\u00e9cis, ce calcul n'a aucun sens...</p> somme3904"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-avg-moyenne","title":"\u2712  La clause  : AVG  - Moyenne\"","text":"<p>On veut calculer la moyenne des notes des livres de la table livres de l'auteur \"Bradbury\". Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e \u00abmoyenne\u00bb.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT AVG(note) AS note moyenne FROM livres\nWHERE auteur=\"Bradbury\";\n</code></pre> moyenne7.5"},{"location":"BasesDonnees/Cours_TP_SQL/#la-clause-min-max-trouver-les-extremums","title":"\u2712  La clause  : MIN, MAX - Trouver les extremums:","text":"<ul> <li>Commande : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT MIN(note) AS minimum FROM livres;\n</code></pre></li> </ul> auteurtitreminimumHuxleyLe meilleur des mondes7"},{"location":"BasesDonnees/Cours_TP_SQL/#des-recherches-croisees-sur-les-tables-les-jointures","title":"Des recherches crois\u00e9es sur les tables : les jointures","text":"<p>Nous avons 2 tables, gr\u00e2ce aux jointures nous allons pouvoir associer ces 2 tables dans une m\u00eame requ\u00eate.</p> <p>Repartons sur la bases LIVRES l\u00e9g\u00e8rement modifi\u00e9es.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DROP TABLE IF EXISTS LIVRES;  CREATE TABLE LIVRES\n(code INT, titre TEXT, id_auteur TEXT, ann_publi INT, note INT, PRIMARY KEY (code,id_auteur));\n</code></pre> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO LIVRES\n(code,titre,id_auteur,ann_publi,note)\nVALUES\n(1,'1984',1,1949,10),\n(2,'Dune',2,1965,8),\n(3,'Fondation',3,1951,9),\n(4,'Le meilleur des mondes',4,1931,7),\n(5,'Fahrenheit 451',5,1953,7),\n(6,'Ubik',6,1969,9),\n(7,'Chroniques martiennes',5,1950,8),\n(8,'La nuit des temps',7,1968,7),\n(9,'Blade Runner',6,1968,8),\n(10,'Les Robots',3,1950,9),\n(11,'La Plan\u00e8te des singes',8,1963,8),\n(12,'Ravage',7,1943,8),\n(13,'Le Ma\u00eetre du Haut Ch\u00e2teau',6,1962,8),\n(14,'Le monde des \u0100',9,1945,7),\n(15,'La Fin de l\u2019\u00e9ternit\u00e9',3,1955,8),\n(16,'De la Terre \u00e0 la Lune',10,1865,10);\n</code></pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#jointures-simples","title":"\u2712 Jointures simples","text":"<p>En g\u00e9n\u00e9ral, les jointures consistent \u00e0 associer des lignes de 2 tables. Elles permettent d\u2019\u00e9tablir un lien entre 2 tables.</p> <ul> <li>Commande : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT *\nFROM LIVRES\nINNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id\n</code></pre></li> <li>Traduction :  Comme plusieurs tables sont appel\u00e9es, nous pr\u00e9fixons chaque colonne avec le nom de la table. </li> </ul> codetitreid_auteurann_publinoteidnomprenomann_naissancelangue_ecriture1198411949101OrwellGeorge1903anglais2Dune2196582HerbertFrank1920anglais3Fondation3195193AsimovIsaac1920anglais4Le meilleur des mondes4193174HuxleyAldous1894anglais5Fahrenheit 4515195375BradburyRay1920anglais6Ubik6196996K.DickPhilip1928anglais7Chroniques martiennes5195085BradburyRay1920anglais8La nuit des temps7196877BarjavelRen\u00e91911fran\u00e7ais9Blade Runner6196886K.DickPhilip1928anglais10Les Robots3195093AsimovIsaac1920anglais11La Plan\u00e8te des singes8196388BoullePierre1912fran\u00e7ais12Ravage7194387BarjavelRen\u00e91911fran\u00e7ais13Le Ma\u00eetre du Haut Ch\u00e2teau6196286K.DickPhilip1928anglais14Le monde des \u01009194579Van VogtAlfred Elton1912anglais15La Fin de l\u2019\u00e9ternit\u00e93195583AsimovIsaac1920anglais16De la Terre \u00e0 la Lune1018651010VerneJules1828fran\u00e7ais <p>Des informations (id et id_auteur) sont en double. On peut \u00eatre plus pr\u00e9cis.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT AUTEURS.nom,LIVRES.titre,LIVRES.note,AUTEURS.ann_naissance AS Naissance, LIVRES.ann_publi AS Publication, AUTEURS.langue_ecriture AS Langue\nFROM LIVRES\nINNER JOIN AUTEURS ON LIVRES.id_auteur = AUTEURS.id\nORDER BY AUTEURS.nom\n</code></pre> nomtitrenoteNaissancePublicationLangueAsimovFondation919201951anglaisAsimovLes Robots919201950anglaisAsimovLa Fin de l\u2019\u00e9ternit\u00e9819201955anglaisBarjavelLa nuit des temps719111968fran\u00e7aisBarjavelRavage819111943fran\u00e7aisBoulleLa Plan\u00e8te des singes819121963fran\u00e7aisBradburyFahrenheit 451719201953anglaisBradburyChroniques martiennes819201950anglaisHerbertDune819201965anglaisHuxleyLe meilleur des mondes718941931anglaisK.DickUbik919281969anglaisK.DickBlade Runner819281968anglaisK.DickLe Ma\u00eetre du Haut Ch\u00e2teau819281962anglaisOrwell19841019031949anglaisVan VogtLe monde des \u0100719121945anglaisVerneDe la Terre \u00e0 la Lune1018281865fran\u00e7ais"},{"location":"BasesDonnees/Cours_TP_SQL/#modifications-dune-base","title":"Modifications d'une base","text":""},{"location":"BasesDonnees/Cours_TP_SQL/#insert","title":"\u2712 INSERT","text":"<p>Ins\u00e9rer les donn\u00e9es suivantes dans la base Auteurs: \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO LIVRES\n(code,titre,id_auteur,ann_publi,note)\nVALUES\n(17,'Hyp\u00e9rion','Simmons',1989,8)\n</code></pre></p>"},{"location":"BasesDonnees/Cours_TP_SQL/#update","title":"\u2712 UPDATE","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE LIVRES\nSET note=7\nWHERE titre = 'Hyp\u00e9rion'\n</code></pre>"},{"location":"BasesDonnees/Cours_TP_SQL/#delete","title":"\u2712 DELETE","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELETE FROM LIVRES\nWHERE titre='Hyp\u00e9rion'\n</code></pre>"},{"location":"BasesDonnees/SQL_BAC/","title":"SQL : Exercices BAC","text":"Th\u00e8me 2 : Base de donn\u00e9es              BAC              Langage SQL"},{"location":"BasesDonnees/SQL_BAC/#exercice-n1-metropole-j1-base-de-donnees-cinematographique","title":"Exercice n\u00b01 : M\u00e9tropole J1 : Base de donn\u00e9es cin\u00e9matographique","text":"<p>SQL </p> <ul> <li>3 relations dans une base de donn\u00e9es sur le cin\u00e9ma</li> <li>2 tables : <code>individu</code> et <code>realisation</code></li> </ul> <p>On pourra utiliser les mots cl\u00e9s SQL suivants : <code>SELECT,  FROM,  WHERE,  JOIN,  ON,  INSERT,  INTO,  VALUES,  UPDATE,  SET,  AND</code>. </p> <p>Nous allons \u00e9tudier une base de donn\u00e9es traitant du cin\u00e9ma dont voici le sch\u00e9ma relationnel qui comporte 3 relations :</p> <ul> <li>la relation <code>individu (id_ind, nom, prenom, naissance)</code></li> <li>la relation <code>realisation (id_rea, titre, annee, type)</code></li> <li>la relation <code>emploi (id_emp, description, #id_ind, #id_rea)</code></li> </ul> <p>Les cl\u00e9s primaires sont soulign\u00e9es et les cl\u00e9s \u00e9trang\u00e8res sont pr\u00e9c\u00e9d\u00e9es d'un <code>#</code>. Ainsi <code>emploi.id_ind</code> est une cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 <code>individu.id_ind</code>. </p> <p>Voici un extrait des tables <code>individu</code> et <code>realisation</code> :</p> <ul> <li>Extrait de <code>individu</code></li> </ul> <code>id_ind</code> <code>nom</code> <code>prenom</code> <code>naissance</code> <code>105</code> <code>'Hulka'</code> <code>'Daniel'</code> <code>'01-06-1968'</code> <code>403</code> <code>'Travis'</code> <code>'Daniel'</code> <code>'10-03-1968'</code> <code>688</code> <code>'Crog'</code> <code>'Daniel'</code> <code>'07-07-1968'</code> <code>695</code> <code>'Pollock'</code> <code>'Daniel'</code> <code>'24-08-1968'</code> <p>-Extrait de <code>realisation</code></p> <code>id_rea</code> <code>titre</code> <code>annee</code> <code>type</code> <code>105</code> <code>'Casino Imperial'</code> <code>2006</code> <code>'action'</code> <code>325</code> <code>'Ciel tombant'</code> <code>2012</code> <code>'action'</code> <code>655</code> <code>'Fant\u00f4me'</code> <code>2015</code> <code>'action'</code> <code>950</code> <code>'Mourir pour attendre'</code> <code>2021</code> <code>'action'</code> <p>1. On s'int\u00e9resse ici \u00e0 la r\u00e9cup\u00e9ration de donn\u00e9es dans une relation.</p> <p>1.a. D\u00e9crire ce que renvoie la requ\u00eate ci-dessous :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom, naissance\nFROM individu\nWHERE nom = 'Crog';\n</code></pre> <p>1.b. Fournir une requ\u00eate SQL permettant de r\u00e9cup\u00e9rer le titre et la cl\u00e9 primaire de chaque film dont la date de sortie est strictement sup\u00e9rieure \u00e0 2020.</p> <p>2. Cette question traite de la modification de relations.</p> <p>2.a. Dire s'il faut utiliser la requ\u00eate 1 ou la requ\u00eate 2 propos\u00e9es ci-dessous pour modifier la date de naissance de Daniel Crog. Justifier votre r\u00e9ponse en expliquant pourquoi la requ\u00eate refus\u00e9e ne pourra pas fonctionner.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL 1<pre><code>UPDATE individu\nSET naissance = '02-03-1968'\nWHERE id_ind = 688 AND nom = 'Crog' AND prenom = 'Daniel';\n</code></pre> \ud83d\uddc2\ufe0f Requ\u00eate SQL 2<pre><code>INSERT INTO individu\nVALUES (688, 'Crog', 'Daniel', '02-03-1968');\n</code></pre> <p>2.b. Expliquer si la relation <code>individu</code> peut accepter (ou pas) deux individus portant le m\u00eame nom, le m\u00eame pr\u00e9nom et la m\u00eame date de naissance.</p> <p>3. Cette question porte sur la notion de cl\u00e9s \u00e9trang\u00e8res.</p> <p>3.a. Recopier sur votre copie les demandes ci-dessous, dans leur int\u00e9gralit\u00e9, et les compl\u00e9ter correctement pour qu'elles ajoutent dans la relation emploi les r\u00f4les de Daniel Crog en tant que James Bond dans le film nomm\u00e9 <code>'Casino Imp\u00e9rial'</code> puis dans le film <code>'Ciel tombant'</code>.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO emploi\nVALUES (5400, 'Acteur(James Bond)', ... , ... );\n\nINSERT INTO emploi\nVALUES (5401, 'Acteur(James Bond)', ... , ...);\n</code></pre> <p>3.b. On d\u00e9sire rajouter un nouvel emploi de Daniel Crog en tant que James Bond dans le film <code>'Docteur Yes'</code>. Expliquer si l'on doit d'abord cr\u00e9er l'enregistrement du film dans la relation <code>realisation</code> ou si l'on doit d'abord cr\u00e9er le r\u00f4le dans la relation <code>emploi</code>.</p> <p>4. Cette question traite des jointures.</p> <p>4.a. Recopier sur votre copie la requ\u00eate SQL ci-dessous, dans son int\u00e9gralit\u00e9, et la compl\u00e9ter de fa\u00e7on \u00e0 ce qu'elle renvoie le nom de l'acteur, le titre du film et l'ann\u00e9e de sortie du film, \u00e0 partir de tous les enregistrements de la relation <code>emploi</code> pour lesquels la description de l'emploi est <code>'Acteur(James Bond)'</code>.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT ...\nFROM emploi\nJOIN individu ON ...\nJOIN realisation ON ...\nWHERE emploi.description = 'Acteur(James Bond)';\n</code></pre> <p>4.b. Fournir une requ\u00eate SQL permettant de trouver toutes les descriptions des emplois de Denis Johnson (Denis est son pr\u00e9nom et Johnson est son nom). On veillera \u00e0 n'afficher que la description des emplois et non les films associ\u00e9s \u00e0 ces emplois.</p>"},{"location":"BasesDonnees/SQL_BAC/#exercice-n2-dapres-2022-metropole-j2","title":"Exercice n\u00b02 : D'apr\u00e8s 2022, M\u00e9tropole, J2","text":"<p>SQL</p> <ul> <li>2 relations dans une base de donn\u00e9es sur la musique</li> <li>2 tables : <code>morceaux</code> et <code>interpretes</code></li> </ul> <p>On pourra utiliser les mots cl\u00e9s SQL suivants : <code>SELECT,  FROM,  WHERE,  JOIN,  ON,  INSERT,  INTO,  VALUES,  UPDATE,  SET,  AND</code>. </p> <p>La clause <code>ORDER BY</code> suivie d'un attribut permet de trier les r\u00e9sultats par ordre croissant de l'attribut. L'instruction <code>COUNT(*)</code> renvoie le nombre de lignes d'une requ\u00eate.</p> <p>Un musicien souhaite cr\u00e9er une base de donn\u00e9es relationnelle contenant ses morceaux et interpr\u00e8tes pr\u00e9f\u00e9r\u00e9s. Pour cela il utilise le langage SQL.</p> <p>Il cr\u00e9e une table <code>morceaux</code> qui contient entre autres attributs les titres des morceaux et leur ann\u00e9e de sortie :</p> <ul> <li>Table <code>morceaux</code></li> </ul> <code>id_morceau</code> <code>titre</code> <code>annee</code> <code>id_interprete</code> 1 Like a Rolling Stone 1965 1 2 Respect 1967 2 3 Imagine 1970 3 4 Hey Jude 1968 4 5 Smells Like Teen Spirit 1991 5 6 I Want To hold Your Hand 1963 4 <p>Il cr\u00e9e la table <code>interpretes</code> qui contient les interpr\u00e8tes et leur pays d'origine :</p> <ul> <li>Table <code>interpretes</code></li> </ul> <code>id_interprete</code> <code>nom</code> <code>pays</code> 1 Bob Dylan \u00c9tats-Unis 2 Aretha Franklin \u00c9tats-Unis 3 John Lennon Angleterre 4 The Beatles Angleterre 5 Nirvana \u00c9tats-Unis <p><code>id_morceau</code> de la table <code>morceaux</code> et <code>id_interprete</code> de la table <code>interpretes</code> sont des cl\u00e9s primaires.</p> <p>L'attribut <code>id_interprete</code> de la table <code>morceaux</code> fait directement r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire de la table <code>interpretes</code>.</p> <p>1.a. \u00c9crire le r\u00e9sultat de la requ\u00eate suivante :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM morceaux\nWHERE id_interprete = 4;\n</code></pre> <p>1.b. \u00c9crire une requ\u00eate permettant d'afficher les noms des interpr\u00e8tes originaires d'Angleterre.</p> <p>1.c. \u00c9crire le r\u00e9sultat de la requ\u00eate suivante :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, annee\nFROM morceaux\nORDER BY annee;\n</code></pre> <p>1.d. \u00c9crire une requ\u00eate permettant de calculer le nombre de morceaux dans la table <code>morceaux</code>.</p> <p>1.e. \u00c9crire une requ\u00eate affichant les titres des morceaux par ordre alphab\u00e9tique.</p> <p>2.a. Citer, en justifiant, la cl\u00e9 \u00e9trang\u00e8re de la table <code>morceaux</code>.</p> <p>2.b. \u00c9crire un sch\u00e9ma relationnel des tables <code>interpretes</code> et <code>morceaux</code>.</p> <p>2.c. Expliquer pourquoi la requ\u00eate suivante produit une erreur :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO interpretes\nVALUES (1, 'Trust', 'France');\n</code></pre> <p>3.a. Une erreur de saisie a \u00e9t\u00e9 faite. \u00c9crire une requ\u00eate SQL permettant de changer l'ann\u00e9e du titre \u00ab Imagine \u00bb en 1971.</p> <p>3.b. \u00c9crire une requ\u00eate SQL permettant d'ajouter l'interpr\u00e8te \u00ab The Who \u00bb venant d'Angleterre \u00e0 la table <code>interpretes</code>. On lui donnera un <code>id_interprete</code> \u00e9gal \u00e0 6.</p> <p>3.c. \u00c9crire une requ\u00eate SQL permettant d'ajouter le titre \u00ab My Generation \u00bb de \u00ab The Who \u00bb \u00e0 la table <code>morceaux</code>. Ce titre est sorti en 1965 et on lui donnera un <code>id_morceau</code> de 7 ainsi que l'<code>id_interprete</code> qui conviendra.</p> <p>4. \u00c9crire une requ\u00eate permettant de lister les titres des interpr\u00e8tes venant des \u00c9tats-Unis.</p>"},{"location":"BasesDonnees/SQL_BAC/#exercice-n3-metropole-candidats-libres-j2-2021","title":"Exercice n\u00b03 : M\u00e9tropole, Candidats libres, J2 2021","text":"<p>SQL</p> <ul> <li>2 relations dans une base de donn\u00e9es sur un CDI</li> <li>3 tables : <code>Livres</code>, <code>Emprunts</code> et <code>Eleves</code></li> </ul> <p>L'\u00e9nonc\u00e9 de cet exercice utilise les mots du langage SQL suivants : <code>SELECT FROM, WHERE, JOIN ON, INSERT INTO VALUES, UPDATE, SET, DELETE, COUNT, AND, OR</code>. On consid\u00e8re dans cet exercice une gestion simplifi\u00e9e des emprunts des ouvrages d'un CDI. La base de donn\u00e9es utilis\u00e9e sera constitu\u00e9e de trois relations (ou tables) nomm\u00e9es <code>Eleves</code>, <code>Livres</code> et <code>Emprunts</code> selon le sch\u00e9ma relationnel suivant :  </p> <ul> <li><code>Livres (isbn (CHAR 13), titre (CHAR), auteur (CHAR))</code> </li> <li><code>Emprunts (idEmprunt (INT), #idEleve (INT), #isbn (CHAR 13), dateEmprunt (DATE), dateRetour (Date))</code> </li> <li><code>Eleves (idEleve (INT), nom (CHAR), prenom (CHAR), classe (CHAR))</code> </li> </ul> <p>Dans ce sch\u00e9ma relationnel, un attribut soulign\u00e9 indique qu'il s'agit d'une cl\u00e9 primaire.</p> <p>Le symbole # devant un attribut indique qu'il s'agit d'une cl\u00e9 \u00e9trang\u00e8re. Ainsi, l'attribut <code>idEleve</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>idEleve</code> de la relation <code>Eleves</code>. De m\u00eame l'attribut <code>isbn</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>isbn</code> de la relationcompl\u00e9ter <code>Livres</code>.</p> <p>1. Expliquer pourquoi le code <code>SQL</code> ci-dessous provoque une erreur.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Eleves VALUES (128, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (200, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (128, 'Dubois', 'Jean', 'T2') ;\n</code></pre> <p>2. Dans la d\u00e9finition de la relation <code>Emprunts</code>, qu'est-ce qui assure qu'on ne peut pas enregistrer un emprunt pour un \u00e9l\u00e8ve qui n'a pas encore \u00e9t\u00e9 inscrit dans la relation <code>Eleves</code> ?</p> <p>3. \u00c9crire une requ\u00eate <code>SQL</code> qui renvoie les titres des ouvrages de Moli\u00e8re d\u00e9tenus par le CDI.</p> <p>4. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*)\nFROM Eleves\nWHERE classe = 'T2' ;\n</code></pre> <p>5. Camille a emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb. Le code ci-dessous a permis d'enregistrer cet emprunt.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Emprunts\nVALUES (640, 192, '9782070409228', '2020-09-15', NULL);\n</code></pre> <p>Camille a restitu\u00e9 le livre le 30 septembre 2020. Recopier et compl\u00e9ter la requ\u00eate ci-dessous de mani\u00e8re \u00e0 mettre \u00e0 jour la date de retour dans la base de donn\u00e9es.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Emprunts SET ........................ WHERE ........................ ;\n</code></pre> <p>6. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT nom, prenom\nFROM Eleves, Emprunts\nWHERE Eleves.idEleve = Emprunts.idEleve\nAND Eleves.classe = 'T2' ;\n</code></pre> <p>7. \u00c9crire une requ\u00eate SQL qui permet de lister les noms et pr\u00e9noms des \u00e9l\u00e8ves qui ont emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb.</p>"},{"location":"BasesDonnees/SQL_BAC_correction/","title":"Sujet BAC 3 :  \u00a0 Langage SQL","text":""},{"location":"BasesDonnees/SQL_BAC_correction/#metropole-j1-base-de-donnees-cinematographique","title":"M\u00e9tropole J1 : Base de donn\u00e9es cin\u00e9matographique","text":"<p>M\u00e9tropole J1 : Base de donn\u00e9es cin\u00e9matographique</p> <ul> <li>3 relations dans une base de donn\u00e9es sur le cin\u00e9ma</li> <li>2 tables : <code>individu</code> et <code>realisation</code></li> </ul> <p>On pourra utiliser les mots cl\u00e9s SQL suivants : <code>SELECT,  FROM,  WHERE,  JOIN,  ON,  INSERT,  INTO,  VALUES,  UPDATE,  SET,  AND</code>. </p> <p>Nous allons \u00e9tudier une base de donn\u00e9es traitant du cin\u00e9ma dont voici le sch\u00e9ma relationnel qui comporte 3 relations :</p> <ul> <li>la relation <code>individu (id_ind, nom, prenom, naissance)</code></li> <li>la relation <code>realisation (id_rea, titre, annee, type)</code></li> <li>la relation <code>emploi (id_emp, description, #id_ind, #id_rea)</code></li> </ul> <p>Les cl\u00e9s primaires sont soulign\u00e9es et les cl\u00e9s \u00e9trang\u00e8res sont pr\u00e9c\u00e9d\u00e9es d'un <code>#</code>. Ainsi <code>emploi.id_ind</code> est une cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 <code>individu.id_ind</code>. </p> <p>Voici un extrait des tables <code>individu</code> et <code>realisation</code> :</p> <p>Extrait de <code>individu</code></p> <code>id_ind</code> <code>nom</code> <code>prenom</code> <code>naissance</code> <code>105</code> <code>'Hulka'</code> <code>'Daniel'</code> <code>'01-06-1968'</code> <code>403</code> <code>'Travis'</code> <code>'Daniel'</code> <code>'10-03-1968'</code> <code>688</code> <code>'Crog'</code> <code>'Daniel'</code> <code>'07-07-1968'</code> <code>695</code> <code>'Pollock'</code> <code>'Daniel'</code> <code>'24-08-1968'</code> <p>Extrait de <code>realisation</code></p> <code>id_rea</code> <code>titre</code> <code>annee</code> <code>type</code> <code>105</code> <code>'Casino Imperial'</code> <code>2006</code> <code>'action'</code> <code>325</code> <code>'Ciel tombant'</code> <code>2012</code> <code>'action'</code> <code>655</code> <code>'Fant\u00f4me'</code> <code>2015</code> <code>'action'</code> <code>950</code> <code>'Mourir pour attendre'</code> <code>2021</code> <code>'action'</code> <p>1. On s'int\u00e9resse ici \u00e0 la r\u00e9cup\u00e9ration de donn\u00e9es dans une relation.</p> <p>1.a. D\u00e9crire ce que renvoie la requ\u00eate ci-dessous :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom, naissance\nFROM individu\nWHERE nom = 'Crog';\n</code></pre> R\u00e9ponse <p>La requ\u00eate renvoie les nom, pr\u00e9nom et date de naissance de tous les individus qui portent Crog comme nom de famille. Dans la mesure o\u00f9 l'on ne fournit que des extraits des tables, on ne peut pas fournir le r\u00e9sultat de cette requ\u00eate de fa\u00e7on certaine.</p> <p>1.b. Fournir une requ\u00eate SQL permettant de r\u00e9cup\u00e9rer le titre et la cl\u00e9 primaire de chaque film dont la date de sortie est strictement sup\u00e9rieure \u00e0 2020.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, id_rea\nFROM realisation\nWHERE annee &gt; 2020;\n</code></pre> <p>2. Cette question traite de la modification de relations.</p> <p>2.a. Dire s'il faut utiliser la requ\u00eate 1 ou la requ\u00eate 2 propos\u00e9es ci-dessous pour modifier la date de naissance de Daniel Crog. Justifier votre r\u00e9ponse en expliquant pourquoi la requ\u00eate refus\u00e9e ne pourra pas fonctionner.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL 1<pre><code>UPDATE individu\nSET naissance = '02-03-1968'\nWHERE id_ind = 688 AND nom = 'Crog' AND prenom = 'Daniel';\n</code></pre> \ud83d\uddc2\ufe0f Requ\u00eate SQL 2<pre><code>INSERT INTO individu\nVALUES (688, 'Crog', 'Daniel', '02-03-1968');\n</code></pre> R\u00e9ponse <p>Compte tenu de l'extrait fourni de la table <code>individu</code>, l'identifiant <code>688</code> est d\u00e9j\u00e0 utilis\u00e9 pour un enregistrement et il ne peut pas y avoir de doublon pour les cl\u00e9s primaires, ainsi la requ\u00eate 2 provoquera une erreur.</p> <p>La requ\u00eate 1 est correcte.</p> <p>Bien que valide cette requ\u00eate peut \u00eatre simplifi\u00e9e en n'utilisant que la cl\u00e9 primaire de la table :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL 1<pre><code>UPDATE individu\nSET naissance = '02-03-1968'\nWHERE id_ind = 688;\n</code></pre> <p>2.b. Expliquer si la relation <code>individu</code> peut accepter (ou pas) deux individus portant le m\u00eame nom, le m\u00eame pr\u00e9nom et la m\u00eame date de naissance.</p> R\u00e9ponse <p>Aucun des champs correspondant ne poss\u00e8de la contrainte <code>UNIQUE</code> (hypoth\u00e8se r\u00e9aliste). Les deux individus n'auront donc pas le m\u00eame identifiant ! Ainsi, oui, la relation <code>individu</code> peut accepter deux tels individus.</p> <p>3. Cette question porte sur la notion de cl\u00e9s \u00e9trang\u00e8res.</p> <p>3.a. Recopier sur votre copie les demandes ci-dessous, dans leur int\u00e9gralit\u00e9, et les compl\u00e9ter correctement pour qu'elles ajoutent dans la relation emploi les r\u00f4les de Daniel Crog en tant que James Bond dans le film nomm\u00e9 <code>'Casino Imp\u00e9rial'</code> puis dans le film <code>'Ciel tombant'</code>.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO emploi\nVALUES (5400, 'Acteur(James Bond)', ... , ... );\n\nINSERT INTO emploi\nVALUES (5401, 'Acteur(James Bond)', ... , ...);\n</code></pre> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO emploi\nVALUES (5400, 'Acteur(James Bond)', 688, 105);\n\nINSERT INTO emploi\nVALUES (5401, 'Acteur(James Bond)', 688, 325);\n</code></pre> <p>3.b. On d\u00e9sire rajouter un nouvel emploi de Daniel Crog en tant que James Bond dans le film <code>'Docteur Yes'</code>. Expliquer si l'on doit d'abord cr\u00e9er l'enregistrement du film dans la relation <code>realisation</code> ou si l'on doit d'abord cr\u00e9er le r\u00f4le dans la relation <code>emploi</code>.</p> R\u00e9ponse <p>Il faut d'abord cr\u00e9er l'enregistrement du film dans la relation <code>realisation</code>, car l'identifiant du film doit \u00eatre connu afin d'\u00eatre utilis\u00e9 comme cl\u00e9 \u00e9trang\u00e8re dans la relation <code>emploi</code>.</p> <p>4. Cette question traite des jointures.</p> <p>4.a. Recopier sur votre copie la requ\u00eate SQL ci-dessous, dans son int\u00e9gralit\u00e9, et la compl\u00e9ter de fa\u00e7on \u00e0 ce qu'elle renvoie le nom de l'acteur, le titre du film et l'ann\u00e9e de sortie du film, \u00e0 partir de tous les enregistrements de la relation <code>emploi</code> pour lesquels la description de l'emploi est <code>'Acteur(James Bond)'</code>.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT ...\nFROM emploi\nJOIN individu ON ...\nJOIN realisation ON ...\nWHERE emploi.description = 'Acteur(James Bond)';\n</code></pre> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, titre, annee\nFROM emploi\nJOIN individu ON emploi.id_ind = individu.id_ind\nJOIN realisation ON emploi.id_rea = realisation.id_rea\nWHERE emploi.description = 'Acteur(James Bond)';\n</code></pre> <p>4.b. Fournir une requ\u00eate SQL permettant de trouver toutes les descriptions des emplois de Denis Johnson (Denis est son pr\u00e9nom et Johnson est son nom). On veillera \u00e0 n'afficher que la description des emplois et non les films associ\u00e9s \u00e0 ces emplois.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT description\nFROM emploi\nJOIN individu ON emploi.id_ind = individu.id_ind\nWHERE prenom = 'Denis' AND nom = 'Johnson';\n</code></pre> <p>## D'apr\u00e8s 2022, M\u00e9tropole, J2</p> <p>!!! exo D'apr\u00e8s 2022, M\u00e9tropole, J2\"</p> \ud83d\udccb Texte<pre><code>- 2 relations dans une base de donn\u00e9es sur la musique\n- 2 tables : **`morceaux`** et **`interpretes`**\n</code></pre> <p>On pourra utiliser les mots cl\u00e9s SQL suivants : <code>SELECT,  FROM,  WHERE,  JOIN,  ON,  INSERT,  INTO,  VALUES,  UPDATE,  SET,  AND</code>. </p> <p>La clause <code>ORDER BY</code> suivie d'un attribut permet de trier les r\u00e9sultats par ordre croissant de l'attribut. L'instruction <code>COUNT(*)</code> renvoie le nombre de lignes d'une requ\u00eate.</p> <p>Un musicien souhaite cr\u00e9er une base de donn\u00e9es relationnelle contenant ses morceaux et interpr\u00e8tes pr\u00e9f\u00e9r\u00e9s. Pour cela il utilise le langage SQL.</p> <p>Il cr\u00e9e une table <code>morceaux</code> qui contient entre autres attributs les titres des morceaux et leur ann\u00e9e de sortie :</p> <p>Table <code>morceaux</code></p> <code>id_morceau</code> <code>titre</code> <code>annee</code> <code>id_interprete</code> 1 Like a Rolling Stone 1965 1 2 Respect 1967 2 3 Imagine 1970 3 4 Hey Jude 1968 4 5 Smells Like Teen Spirit 1991 5 6 I Want To hold Your Hand 1963 4 <p>Il cr\u00e9e la table <code>interpretes</code> qui contient les interpr\u00e8tes et leur pays d'origine :</p> <p>Table <code>interpretes</code></p> <code>id_interprete</code> <code>nom</code> <code>pays</code> 1 Bob Dylan \u00c9tats-Unis 2 Aretha Franklin \u00c9tats-Unis 3 John Lennon Angleterre 4 The Beatles Angleterre 5 Nirvana \u00c9tats-Unis <p><code>id_morceau</code> de la table <code>morceaux</code> et <code>id_interprete</code> de la table <code>interpretes</code> sont des cl\u00e9s primaires.</p> <p>L'attribut <code>id_interprete</code> de la table <code>morceaux</code> fait directement r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire de la table <code>interpretes</code>.</p> <p>1.a. \u00c9crire le r\u00e9sultat de la requ\u00eate suivante :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM morceaux\nWHERE id_interprete = 4;\n</code></pre> R\u00e9ponse <p>On obtient les titres <code>'Hey Jude'</code> et <code>'I Want To hold Your Hand'</code>.</p> <p>1.b. \u00c9crire une requ\u00eate permettant d'afficher les noms des interpr\u00e8tes originaires d'Angleterre.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom FROM interpretes\nWHERE pays = 'Angleterre';\n</code></pre> <p>1.c. \u00c9crire le r\u00e9sultat de la requ\u00eate suivante :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre, annee\nFROM morceaux\nORDER BY annee;\n</code></pre> R\u00e9ponse <p>On obtient :</p> <code>titre</code> <code>annee</code> I Want To hold Your Hand 1963 Like a Rolling Stone 1965 Respect 1967 Hey Jude 1968 Imagine 1970 Smells Like Teen Spirit 1991 <p>1.d. \u00c9crire une requ\u00eate permettant de calculer le nombre de morceaux dans la table <code>morceaux</code>.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*) FROM morceaux;\n</code></pre> <p>1.e. \u00c9crire une requ\u00eate affichant les titres des morceaux par ordre alphab\u00e9tique.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM morceaux\nORDER BY titre;\n</code></pre> <p>2.a. Citer, en justifiant, la cl\u00e9 \u00e9trang\u00e8re de la table <code>morceaux</code>.</p> R\u00e9ponse <p>La cl\u00e9 \u00e9trang\u00e8re est <code>id_interprete</code> qui fait r\u00e9f\u00e9rence \u00e0 un attribut de la table <code>interpretes</code>.</p> <p>2.b. \u00c9crire un sch\u00e9ma relationnel des tables <code>interpretes</code> et <code>morceaux</code>.</p> R\u00e9ponse <p>On propose :</p> <ul> <li><code>morceaux (id_morceau, titre, annee, #id_interprete)</code></li> <li><code>interpretes (id_interprete, nom, pays)</code></li> </ul> <p>Les cl\u00e9s primaires sont soulign\u00e9es (<code>id_morceau</code> et <code>id_interprete</code>). Dans la table <code>morceaux</code>, l'attribut <code>id_interprete</code> est pr\u00e9c\u00e9d\u00e9 d'un # : c'est une cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 l'attribut <code>id_interprete</code> de la table <code>interpretes</code>.</p> <p>2.c. Expliquer pourquoi la requ\u00eate suivante produit une erreur :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO interpretes\nVALUES (1, 'Trust', 'France');\n</code></pre> R\u00e9ponse <p>La table contient d\u00e9j\u00e0 une entr\u00e9e dont l'attribut <code>id_interprete</code> vaut <code>1</code>. Comme il s'agit de la cl\u00e9 primaire cela provoque une erreur.</p> <p>3.a. Une erreur de saisie a \u00e9t\u00e9 faite. \u00c9crire une requ\u00eate SQL permettant de changer l'ann\u00e9e du titre \u00ab Imagine \u00bb en 1971.</p> R\u00e9ponse <p>On utilise la cl\u00e9 primaire du morceau afin d'\u00e9viter toute m\u00e9prise : </p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE morceaux\nSET annee = 1971\nWHERE id_morceau = 3;\n</code></pre> <p>Si l'on consid\u00e8re que les tables fournies repr\u00e9sentent l'ensemble des donn\u00e9es (le sujet est ambigu \u00e0 ce titre), on peut aussi se contenter de :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE morceaux\nSET annee = 1971\nWHERE titre = 'Imagine';\n</code></pre> <p>3.b. \u00c9crire une requ\u00eate SQL permettant d'ajouter l'interpr\u00e8te \u00ab The Who \u00bb venant d'Angleterre \u00e0 la table <code>interpretes</code>. On lui donnera un <code>id_interprete</code> \u00e9gal \u00e0 6.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO interpretes\nVALUES (6, 'The Who', 'Angleterre');\n</code></pre> <p>3.c. \u00c9crire une requ\u00eate SQL permettant d'ajouter le titre \u00ab My Generation \u00bb de \u00ab The Who \u00bb \u00e0 la table <code>morceaux</code>. Ce titre est sorti en 1965 et on lui donnera un <code>id_morceau</code> de 7 ainsi que l'<code>id_interprete</code> qui conviendra.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO morceaux\nVALUES (7, 'My Generation', 1965, 6);\n</code></pre> <p>4. \u00c9crire une requ\u00eate permettant de lister les titres des interpr\u00e8tes venant des \u00c9tats-Unis.</p> R\u00e9ponse <p>On utilise une jointure :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM morceaux\nJOIN interpretes ON interpretes.id_interprete = morceaux.id_interprete\nWHERE interpretes.pays = '\u00c9tats-Unis';\n</code></pre>"},{"location":"BasesDonnees/SQL_BAC_correction/#metropole-candidats-libres-j2-2021","title":"M\u00e9tropole, Candidats libres, J2 2021","text":"<p>Exercice n\u00b03 : M\u00e9tropole, Candidats libres, J2 2021</p> <ul> <li>2 relations dans une base de donn\u00e9es sur un CDI</li> <li>3 tables : <code>Livres</code>, <code>Emprunts</code> et <code>Eleves</code></li> </ul> <p>L'\u00e9nonc\u00e9 de cet exercice utilise les mots du langage SQL suivants : <code>SELECT FROM, WHERE, JOIN ON, INSERT INTO VALUES, UPDATE, SET, DELETE, COUNT, AND, OR</code>. On consid\u00e8re dans cet exercice une gestion simplifi\u00e9e des emprunts des ouvrages d'un CDI. La base de donn\u00e9es utilis\u00e9e sera constitu\u00e9e de trois relations (ou tables) nomm\u00e9es <code>Eleves</code>, <code>Livres</code> et <code>Emprunts</code> selon le sch\u00e9ma relationnel suivant :  </p> <ul> <li><code>Livres (isbn (CHAR 13), titre (CHAR), auteur (CHAR))</code> </li> <li><code>Emprunts (idEmprunt (INT), #idEleve (INT), #isbn (CHAR 13), dateEmprunt (DATE), dateRetour (Date))</code> </li> <li><code>Eleves (idEleve (INT), nom (CHAR), prenom (CHAR), classe (CHAR))</code> </li> </ul> <p>Dans ce sch\u00e9ma relationnel, un attribut soulign\u00e9 indique qu'il s'agit d'une cl\u00e9 primaire.</p> <p>Le symbole # devant un attribut indique qu'il s'agit d'une cl\u00e9 \u00e9trang\u00e8re. Ainsi, l'attribut <code>idEleve</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>idEleve</code> de la relation <code>Eleves</code>. De m\u00eame l'attribut <code>isbn</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>isbn</code> de la relationcompl\u00e9ter <code>Livres</code>.</p> <p>1. Expliquer pourquoi le code <code>SQL</code> ci-dessous provoque une erreur.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Eleves VALUES (128, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (200, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (128, 'Dubois', 'Jean', 'T2') ;\n</code></pre> R\u00e9ponse <p>On ins\u00e8re deux entr\u00e9es dans lesquelles l'attribut <code>idEleve</code> est \u00e9gal \u00e0 <code>128</code>. Or cet attribut est la cl\u00e9 primaire de la table, il ne peut pas exister en doublon.</p> <p>2. Dans la d\u00e9finition de la relation <code>Emprunts</code>, qu'est-ce qui assure qu'on ne peut pas enregistrer un emprunt pour un \u00e9l\u00e8ve qui n'a pas encore \u00e9t\u00e9 inscrit dans la relation <code>Eleves</code> ?</p> R\u00e9ponse <p>Il s'agit de la cl\u00e9 \u00e9trang\u00e8re <code>idEleve</code> qui doit respecter la contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle.</p> <p>3. \u00c9crire une requ\u00eate <code>SQL</code> qui renvoie les titres des ouvrages de Moli\u00e8re d\u00e9tenus par le CDI.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM Livres\nWHERE auteur = 'Moli\u00e8re'\n</code></pre> <p>4. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*)\nFROM Eleves\nWHERE classe = 'T2' ;\n</code></pre> R\u00e9ponse <p>On compte les \u00e9l\u00e8ves de la table <code>Eleves</code> dont la classe est la <code>'T2'</code>.</p> <p>5. Camille a emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb. Le code ci-dessous a permis d'enregistrer cet emprunt.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Emprunts\nVALUES (640, 192, '9782070409228', '2020-09-15', NULL);\n</code></pre> <p>Camille a restitu\u00e9 le livre le 30 septembre 2020. Recopier et compl\u00e9ter la requ\u00eate ci-dessous de mani\u00e8re \u00e0 mettre \u00e0 jour la date de retour dans la base de donn\u00e9es.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Emprunts SET ........................ WHERE ........................ ;\n</code></pre> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Emprunts\nSET dateRetour = '2020-09-30'\nWHERE idEmprunt = 640\n</code></pre> <p>6. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT nom, prenom\nFROM Eleves, Emprunts\nWHERE Eleves.idEleve = Emprunts.idEleve\nAND Eleves.classe = 'T2' ;\n</code></pre> R\u00e9ponse <p>On r\u00e9cup\u00e8re les noms et pr\u00e9noms des \u00e9l\u00e8ves de la classe <code>'T2'</code> qui ont d\u00e9j\u00e0 emprunt\u00e9 un livre.</p> <p>7. \u00c9crire une requ\u00eate SQL qui permet de lister les noms et pr\u00e9noms des \u00e9l\u00e8ves qui ont emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb.</p> R\u00e9ponse <p>On propose (en utilisant l'ISBN cit\u00e9 dans la question 5):</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Eleves\nJOIN Emprunts ON Eleves.idEleves = Emprunts.idEleves\nWHERE Emprunts.isbn = 192\n</code></pre> Sans l'ISBN :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Eleves\nJOIN Emprunts ON Eleves.idEleves = Emprunts.idEleves\nJOIN Livres ON Livres.isbn = Emprunts.isbn\nWHERE Livres.titre = 'Les Mis\u00e9rables'\n</code></pre>"},{"location":"BasesDonnees/TD18_Revision_SQL_BAC/","title":"TD18 Revision SQL BAC","text":"TD n\u00b018 : Retour sur le langage SQL - Sujet BAC Th\u00e8me  : Bases de donn\u00e9es FRANCE Sujet 2 - Juin 2021 SUJET BAC <p>Une restauratrice a mis en place un site Web pour g\u00e9rer ses r\u00e9servations en ligne. Chaque client peut s\u2019inscrire en saisissant ses identifiants. Une fois connect\u00e9, il peut effectuer une r\u00e9servation en renseignant le jour et l\u2019heure. Il peut \u00e9galement commander son menu en ligne et \u00e9crire un avis sur le restaurant. Le gestionnaire du site Web a cr\u00e9\u00e9 une base de donn\u00e9es associ\u00e9e au site nomm\u00e9e restaurant, contenant les quatre relations du sch\u00e9ma relationnel ci-dessous :  </p> <p></p> <p>Dans le sch\u00e9ma relationnel pr\u00e9c\u00e9dent, un attribut soulign\u00e9 indique qu\u2019il s\u2019agit d\u2019une cl\u00e9 primaire. Un attibut pr\u00e9c\u00e9d\u00e9 du symbole # indique qu\u2019il s\u2019agit d\u2019une cl\u00e9 \u00e9trang\u00e8re et la fl\u00e8che associ\u00e9e indique l\u2019attribut r\u00e9f\u00e9renc\u00e9. Ainsi, par exemple, l'attribut idPlat de la relation Commande est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 l'attribut idPlat de la relation Plat. Dans la suite, les mots cl\u00e9s suivants du langage SQL pourront \u00eatre utilis\u00e9s dans les requ\u00eates :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT, FROM, WHERE, JOIN, ON, DELETE, UPDATE, SET, INSERT INTO, AND, OR.\n</code></pre> <p>Question 1</p> <p>Parmi les trois requ\u00eates suivantes, \u00e9crites dans le langage SQL, laquelle renvoie les valeurs de tous les attributs des plats de la cat\u00e9gorie 'entr\u00e9e' :  </p> <ul> <li> <p>R1 : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prix\nFROM Plat\nWHERE categorie = 'entr\u00e9e';\n</code></pre></p> </li> <li> <p>R2 : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT *\nFROM Plat\nWHERE categorie = 'entr\u00e9e';\n</code></pre></p> </li> <li> <p>R3 : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>R3 : UPDATE Plat\nSET categorie = 'entr\u00e9e'\nWHERE 1;\n</code></pre></p> </li> </ul> <p>Question 2</p> <p>\u00c9crire, dans le langage SQL, des requ\u00eates d\u2019interrogation sur la base de donn\u00e9es restaurant permettant de r\u00e9aliser les t\u00e2ches suivantes :  </p> <p>a. Afficher les noms et les avis des clients ayant effectu\u00e9 une r\u00e9servation pour la date du '2021-06-05' \u00e0 l\u2019heure '19:30:00'. b. Afficher le nom des plats des cat\u00e9gories 'plat principal' et 'dessert', correspondant aux commandes de la date '2021-04-12'.</p> <p>Question 3</p> <p>Que r\u00e9alise la requ\u00eate SQL suivante ?  </p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Plat\nVALUES(58,'P\u00eache Melba', 'dessert', 'P\u00eaches et glace vanille', 6.5);\n</code></pre> <p>Question 4</p> <p>\u00c9crire des requ\u00eates SQL permettant de r\u00e9aliser les t\u00e2ches suivantes :  </p> <p>a. Supprimer les commandes ayant comme idReservation la valeur 2047. b. Augmenter de 5% tous les prix de la relation plat strictement inf\u00e9rieurs \u00e0 20.00.  </p>"},{"location":"BasesDonnees/TP17_JO/","title":"TP17 JO","text":"TP n\u00b017 : Retour sur le langage SQL - Les JO Londres 2012 Th\u00e8me  : Bases de donn\u00e9es EXERCICES <p>Nous allons travailler sur une base de donn\u00e9es li\u00e9e aux Jeux Olympiques de Londres qui ont eu lieu en 2012.</p>"},{"location":"BasesDonnees/TP17_JO/#partie-1-etude-du-schema-relationnel","title":"Partie 1 : \u00c9tude du sch\u00e9ma relationnel","text":"<p>Avec un *\u00e9diteur de texte tout simple* (type Notepad, Notepad++)</p> <ul> <li>ouvrir le fichier create_JO.sql;</li> <li>regarder les lignes qui d\u00e9finissent les diff\u00e9rentes tables de la BDD et sur une feuille de papier ou sur un  document num\u00e9rique, donner sous forme \u00e9crite son sch\u00e9ma relationnel en soulignant cl\u00e9s primaires (en trait plein) et cl\u00e9s \u00e9trang\u00e8re (en pointill\u00e9s).</li> <li>Pour savoir ce qu'est une cl\u00e9 primaire ou \u00e9trang\u00e8re, renseignez vous aupr\u00e8s du cours.</li> </ul>"},{"location":"BasesDonnees/TP17_JO/#partie-2-requetes-sql","title":"Partie 2 : Requ\u00eates SQL","text":"<p>Ex\u00e9cuter les bonnes requ\u00eates SQL pour obtenir les donn\u00e9es suivantes.</p>"},{"location":"BasesDonnees/TP17_JO/#requetes-sans-jointures","title":"Requ\u00eates sans jointures","text":"<p>Q1.</p> <p>Afficher le nom et pr\u00e9nom des sportifs.</p> \ud83d\udccb Texte <p>Q2.</p> <p>Afficher les codes des pays dont viennent les sportifs par ordre alphab\u00e9tique en \u00e9liminant les doublons.</p> \ud83d\udccb Texte <p>Q3.</p> <p>Afficher la liste des sportifs fran\u00e7ais (utiliser <code>cio = \u2019France\u2019</code>).</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q4.</p> <p>Afficher la liste des 301 disciplines tri\u00e9es par l\u2019identifiant du sport auxquelles elles se rapportent.</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q5.</p> <p>Afficher les noms des 86 pays situ\u00e9s apr\u00e8s la France et avant la Russie (Russia) par ordre alphab\u00e9tique.</p> <p>Utiliser les op\u00e9rateurs <code>&lt;</code> et <code>&gt;</code>. </p> <p>Remarquer que l\u2019op\u00e9rateur <code>BETWEEN</code> ne produit pas le r\u00e9sultat attendu (88 pays).</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q6.</p> <p>Afficher les 98 identifiants de discipline dont au moins une \u00e9preuve a eu lieu entre le 27 et le 31 juillet 2012 inclus.</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q7.</p> <p>Afficher les noms des 61 sportifs qui sont soit fran\u00e7ais (FRA) soit britanniques (GBR).</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q8.</p> <p>Afficher les intitul\u00e9s des 131 disciplines contenant la cha\u00eene de caract\u00e8res \u00ab WOMEN \u00bb.</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q9.</p> <p>Donner les 3 pays (CIO, nom) dont on ne conna\u00eet pas le code ISO2 ou ISO3 (utiliser le crit\u00e8re <code>IS NULL</code>).</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q10.</p> <p>Donner les noms et pr\u00e9noms des 2 sportifs dont le sexe est mentionn\u00e9 dans la BDD.</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q11.</p> <p>\u00c0 l\u2019aide de la fonction <code>COUNT</code>, donner le nombre de sports (pas la liste).</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q12.</p> <p>Donner le nombre de discipline(s) du sport d\u2019identifiant 1 (pas la liste).</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q13.</p> <p>Combien de noms de familles diff\u00e9rents sont port\u00e9s par les sportifs ?</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q14.</p> <p>Donner le nombre de pays n\u2019ont pas d\u2019ISO2.</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q15.</p> <p>Donner le nombre de m\u00e9dailles d\u2019or attribu\u00e9s lors de ces JO.</p> \ud83d\udccb Texte<pre><code>\n</code></pre> <p>Q16.</p> <p>Afficher en une table le premier et le dernier \u00e9v\u00e8nement sportif de ces JO.</p> \ud83d\udccb Texte<pre><code>\n</code></pre>"},{"location":"BasesDonnees/TP17_JO/#requetes-avec-jointures","title":"Requ\u00eates avec jointures","text":"<p>Q17.</p> <p>Afficher la listes des noms et pr\u00e9noms des sportifs europ\u00e9ens.</p> \ud83d\udccb Texte <p>Q18.</p> <p>Afficher la liste des disciplines d\u00e9pendant de l\u2019athl\u00e9tisme.</p> \ud83d\udccb Texte <p>Q19.</p> <p>Afficher toutes jours pendant lesquels un \u00e9v\u00e8nement li\u00e9 \u00e0 l\u2019athl\u00e9tisme eu lieu.</p> \ud83d\udccb Texte <p>Q20.</p> <p>Afficher les noms, pr\u00e9noms et m\u00e9dailles gagn\u00e9es par des sportifs dont le sexe figure dans la BDD.</p> \ud83d\udccb Texte <p>Q21.</p> <p>Afficher la liste des Fran\u00e7ais m\u00e9daill\u00e9s d\u2019or.</p> \ud83d\udccb Texte <p>Q22.</p> <p>Afficher les noms, pr\u00e9noms, sports et disciplines des sportifs ayant obtenu une m\u00e9daille d\u2019or.</p> \ud83d\udccb Texte"},{"location":"Evaluations/BDD_Devoir/","title":"SQL : Devoir n\u00b01","text":"Th\u00e8me 2 : Base de donn\u00e9es              Eval.              Langage SQL"},{"location":"Evaluations/BDD_Devoir/#dapres-2021-france-j2","title":"D'apr\u00e8s 2021, France, J2,","text":"<p>L'\u00e9nonc\u00e9 de cet exercice utilise les mots du langage SQL suivants : <code>SELECT FROM, WHERE, JOIN ON, INSERT INTO VALUES, UPDATE, SET, DELETE, COUNT, AND, OR</code>. On consid\u00e8re dans cet exercice une gestion simplifi\u00e9e des emprunts des ouvrages d'un CDI. La base de donn\u00e9es utilis\u00e9e sera constitu\u00e9e de trois relations (ou tables) nomm\u00e9es <code>Eleves</code>, <code>Livres</code> et <code>Emprunts</code> selon le sch\u00e9ma relationnel suivant :  </p> <ul> <li><code>Livres (isbn (CHAR 13), titre (CHAR), auteur (CHAR))</code> </li> <li><code>Emprunts (idEmprunt (INT), #idEleve (INT), #isbn (CHAR 13), dateEmprunt (DATE), dateRetour (Date))</code> </li> <li><code>Eleves (idEleve (INT), nom (CHAR), prenom (CHAR), classe (CHAR))</code> </li> </ul> <p>Dans ce sch\u00e9ma relationnel, un attribut soulign\u00e9 indique qu'il s'agit d'une cl\u00e9 primaire.  </p> <p>Le symbole # devant un attribut indique qu'il s'agit d'une cl\u00e9 \u00e9trang\u00e8re. Ainsi, l'attribut <code>idEleve</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>idEleve</code> de la relation <code>Eleves</code>. De m\u00eame l'attribut <code>isbn</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>isbn</code> de la relationcompl\u00e9ter <code>Livres</code>.  </p> <p>1. Expliquer pourquoi le code <code>SQL</code> ci-dessous provoque une erreur.  </p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Eleves VALUES (128, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (200, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (128, 'Dubois', 'Jean', 'T2') ;\n</code></pre> <p>2. Dans la d\u00e9finition de la relation <code>Emprunts</code>, qu'est-ce qui assure qu'on ne peut pas enregistrer un emprunt pour un \u00e9l\u00e8ve qui n'a pas encore \u00e9t\u00e9 inscrit dans la relation <code>Eleves</code> ?</p> <p>3. \u00c9crire une requ\u00eate <code>SQL</code> qui renvoie les titres des ouvrages de Moli\u00e8re d\u00e9tenus par le CDI.</p> <p>4. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*)\nFROM Eleves\nWHERE classe = 'T2' ;\n</code></pre> <p>5. Camille a emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb. Le code ci-dessous a permis d'enregistrer cet emprunt.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Emprunts\nVALUES (640, 192, '9782070409228', '2020-09-15', NULL);\n</code></pre> <p>Camille a restitu\u00e9 le livre le 30 septembre 2020. Recopier et compl\u00e9ter la requ\u00eate ci-dessous de mani\u00e8re \u00e0 mettre \u00e0 jour la date de retour dans la base de donn\u00e9es.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Emprunts SET ........................ WHERE ........................ ;\n</code></pre> <p>6. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT nom, prenom\nFROM Eleves, Emprunts\nWHERE Eleves.idEleve = Emprunts.idEleve\nAND Eleves.classe = 'T2' ;\n</code></pre> <p>7. \u00c9crire une requ\u00eate SQL qui permet de lister les noms et pr\u00e9noms des \u00e9l\u00e8ves qui ont emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb.</p>"},{"location":"Evaluations/BDD_Devoir_Corrige/","title":"Devoir 1 :   Langage SQL","text":""},{"location":"Evaluations/BDD_Devoir_Corrige/#dapres-2021-metropole-j2","title":"D'apr\u00e8s 2021, M\u00e9tropole , J2,","text":"<p>L'\u00e9nonc\u00e9 de cet exercice utilise les mots du langage SQL suivants : <code>SELECT FROM, WHERE, JOIN ON, INSERT INTO VALUES, UPDATE, SET, DELETE, COUNT, AND, OR</code>. On consid\u00e8re dans cet exercice une gestion simplifi\u00e9e des emprunts des ouvrages d'un CDI. La base de donn\u00e9es utilis\u00e9e sera constitu\u00e9e de trois relations (ou tables) nomm\u00e9es <code>Eleves</code>, <code>Livres</code> et <code>Emprunts</code> selon le sch\u00e9ma relationnel suivant :</p> <ul> <li><code>Livres (isbn (CHAR 13), titre (CHAR), auteur (CHAR))</code></li> <li><code>Emprunts (idEmprunt (INT), #idEleve (INT), #isbn (CHAR 13), dateEmprunt (DATE), dateRetour (Date))</code></li> <li><code>Eleves (idEleve (INT), nom (CHAR), prenom (CHAR), classe (CHAR))</code></li> </ul> <p>Dans ce sch\u00e9ma relationnel, un attribut soulign\u00e9 indique qu'il s'agit d'une cl\u00e9 primaire.</p> <p>Le symbole # devant un attribut indique qu'il s'agit d'une cl\u00e9 \u00e9trang\u00e8re. Ainsi, l'attribut <code>idEleve</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>idEleve</code> de la relation <code>Eleves</code>. De m\u00eame l'attribut <code>isbn</code> de la relation <code>Emprunts</code> est une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>isbn</code> de la relationcompl\u00e9ter <code>Livres</code>.</p> <p>1. Expliquer pourquoi le code <code>SQL</code> ci-dessous provoque une erreur.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Eleves VALUES (128, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (200, 'Dupont', 'Jean', 'T1') ;\nINSERT INTO Eleves VALUES (128, 'Dubois', 'Jean', 'T2') ;\n</code></pre> R\u00e9ponse <p>On ins\u00e8re deux entr\u00e9es dans lesquelles l'attribut <code>idEleve</code> est \u00e9gal \u00e0 <code>128</code>. Or cet attribut est la cl\u00e9 primaire de la table, il ne peut pas exister en doublon.</p> <p>2. Dans la d\u00e9finition de la relation <code>Emprunts</code>, qu'est-ce qui assure qu'on ne peut pas enregistrer un emprunt pour un \u00e9l\u00e8ve qui n'a pas encore \u00e9t\u00e9 inscrit dans la relation <code>Eleves</code> ?</p> R\u00e9ponse <p>Il s'agit de la cl\u00e9 \u00e9trang\u00e8re <code>idEleve</code> qui doit respecter la contrainte d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle.</p> <p>3. \u00c9crire une requ\u00eate <code>SQL</code> qui renvoie les titres des ouvrages de Moli\u00e8re d\u00e9tenus par le CDI.</p> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT titre\nFROM Livres\nWHERE auteur = 'Moli\u00e8re'\n</code></pre> <p>4. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT COUNT(*)\nFROM Eleves\nWHERE classe = 'T2' ;\n</code></pre> R\u00e9ponse <p>On compte les \u00e9l\u00e8ves de la table <code>Eleves</code> dont la classe est la <code>'T2'</code>.</p> <p>5. Camille a emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb. Le code ci-dessous a permis d'enregistrer cet emprunt.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>INSERT INTO Emprunts\nVALUES (640, 192, '9782070409228', '2020-09-15', NULL);\n</code></pre> <p>Camille a restitu\u00e9 le livre le 30 septembre 2020. Recopier et compl\u00e9ter la requ\u00eate ci-dessous de mani\u00e8re \u00e0 mettre \u00e0 jour la date de retour dans la base de donn\u00e9es.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Emprunts SET ........................ WHERE ........................ ;\n</code></pre> R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>UPDATE Emprunts\nSET dateRetour = '2020-09-30'\nWHERE idEmprunt = 640\n</code></pre> <p>6. D\u00e9crire le r\u00e9sultat renvoy\u00e9 par la requ\u00eate ci-dessous.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT DISTINCT nom, prenom\nFROM Eleves, Emprunts\nWHERE Eleves.idEleve = Emprunts.idEleve\nAND Eleves.classe = 'T2' ;\n</code></pre> R\u00e9ponse <p>On r\u00e9cup\u00e8re les noms et pr\u00e9noms des \u00e9l\u00e8ves de la classe <code>'T2'</code> qui ont d\u00e9j\u00e0 emprunt\u00e9 un livre.</p> <p>7. \u00c9crire une requ\u00eate SQL qui permet de lister les noms et pr\u00e9noms des \u00e9l\u00e8ves qui ont emprunt\u00e9 le livre \u00ab Les mis\u00e9rables \u00bb.</p> R\u00e9ponse <p>On propose (en utilisant l'ISBN cit\u00e9 dans la question 5):</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Eleves\nJOIN Emprunts ON Eleves.idEleves = Emprunts.idEleves\nWHERE Emprunts.isbn = 192\n</code></pre> Sans l'ISBN :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT nom, prenom\nFROM Eleves\nJOIN Emprunts ON Eleves.idEleves = Emprunts.idEleves\nJOIN Livres ON Livres.isbn = Emprunts.isbn\nWHERE Livres.titre = 'Les Mis\u00e9rables'\n</code></pre>"},{"location":"Evaluations/DS0100bis/","title":"Devoir 4 :   Les tris - Diviser pour r\u00e9gner","text":""},{"location":"Evaluations/DS0100bis/#qcm","title":"Q.C.M.","text":"<p>Exo</p> <p>1. On applique l'algorithme du tri par s\u00e9lection \u00e0 la liste <code>[8,12,6,19]</code>, apr\u00e8s la premi\u00e8re \u00e9tape, le contenu de la liste sera :</p> <ul> <li> a) <code>[12,8,6,19]</code></li> <li> b) <code>[6,12,8,19]</code></li> <li> c) <code>[19,12,6,9]</code></li> <li> d) Aucune des propositions ci-dessus</li> </ul> <p>2. On applique l'algorithme du tri par insertion \u00e0 la liste <code>[9,11,7,16]</code>, quel sera le contenu de la liste apr\u00e8s le premier \u00e9change ?</p> <ul> <li> a) <code>[11,9,7,16]</code></li> <li> b) <code>[9,11,16,7]</code></li> <li> c) <code>[9,7,11,16]</code></li> <li> d) Aucune des propositions ci-dessus</li> </ul> <p>3. L'algorithme du tri par s\u00e9lection a une complexit\u00e9 :</p> <ul> <li> a) logarithmique</li> <li> b) lin\u00e9aire</li> <li> c) quadratique</li> <li> d) exponentielle</li> </ul> <p>4. Un programme de tri par insertion prend environ 1/10 seconde pour trier une liste de \\(1\\,000\\) \u00e9l\u00e9ments, combien de temps prendra-t-il environ pour trier une liste de \\(100\\,000\\) \u00e9l\u00e9ments ?</p> <ul> <li> a) 1 seconde</li> <li> b) 10 secondes</li> <li> c) 100 secondes</li> <li> d) 1000 secondes</li> </ul>"},{"location":"Evaluations/DS0100bis/#dapres-exercice-bac","title":"D'apr\u00e9s exercice BAC","text":"<p>Exo</p> <p>Cet exercice traite de manipulation de tableaux, de r\u00e9cursivit\u00e9 et du paradigme \u00ab diviser pour r\u00e9gner \u00bb. </p> <p>Dans un tableau Python d'entiers tab, on dit que le couple d\u2019indices (\u0745,\u0746) forme une inversion lorsque \u0745 &lt; \u0746 et tab[i] &gt; tab[j]. On donne ci-dessous quelques exemples.  </p> <ul> <li>Dans le tableau [1, 5, 3, 7], le couple d\u2019indices (1,2) forme une inversion car 5&gt; 3. Par contre, le couple (1,3) ne forme pas d'inversion car 5&lt;7. Il n\u2019y a qu\u2019une inversion dans ce tableau.  </li> <li>Il y a trois inversions dans le tableau [1, 6, 2, 7, 3], \u00e0 savoir les couples d'indices (1, 2), (1, 4) et (3, 4).  </li> <li>On peut compter six inversions dans le tableau [7, 6, 5, 3] : les couples d'indices (0, 1), (0, 2), (0, 3), (1, 2), (1, 3) et (2, 3).  </li> </ul> <p>On se propose dans cet exercice de d\u00e9terminer le nombre d\u2019inversions dans un tableau quelconque.  </p> <p>Questions pr\u00e9liminaires  </p> <p>Question 1</p> Enonc\u00e9 <p>Expliquer pourquoi le couple (1, 3) est une inversion dans le tableau [4, 8, 3, 7].</p> <p>Question2</p> Enonc\u00e9 <p>Justifier que le couple (2, 3) n\u2019en est pas une.</p>"},{"location":"Evaluations/DS0100bis/#partie-a-methode-iterative","title":"Partie A : M\u00e9thode it\u00e9rative","text":"<p>Le but de cette partie est d\u2019\u00e9crire une fonction it\u00e9rative nombre_inversion qui renvoie le nombre d\u2019inversions dans un tableau. Pour cela, on commence par \u00e9crire une fonction fonction1 qui sera ensuite utilis\u00e9e pour \u00e9crire la fonction nombre_inversion.</p> <p>Question A.1</p> Enonc\u00e9 <p>On donne la fonction suivante. \ud83d\udc0d Script Python<pre><code>def fonction1(tab, i):\n    nb_elem = len(tab)\n    cpt = 0\n    for j in range(i+1, nb_elem):\n        if tab[j] &lt; tab[i]:\n            cpt += 1\n    return cpt\n</code></pre></p> <p>a. Indiquer ce que renvoie la fonction1(tab, i) dans les cas suivants.  </p> <ul> <li>Cas n\u00b01 : tab = [1, 5, 3, 7] et i = 0.  </li> <li>Cas n\u00b02 : tab = [1, 5, 3, 7] et i = 1.  </li> <li>Cas n\u00b03 : tab = [1, 5, 2, 6, 4] et i = 1.  </li> </ul> <p>b. Expliquer ce que permet de d\u00e9terminer cette fonction. </p> <p>Question A.2</p> Enonc\u00e9 <p>En utilisant la fonction pr\u00e9c\u00e9dente, \u00e9crire une fonction nombre_inversion(tab) qui prend en argument un tableau et renvoie le nombre d\u2019inversions dans ce tableau. On donne ci-dessous les r\u00e9sultats attendus pour certains appels. \ud83d\udccb Texte<pre><code>&gt;&gt;&gt; nombre_inversions([1, 5, 7])\n0\n&gt;&gt;&gt; nombre_inversions([1, 6, 2, 7, 3])\n3\n&gt;&gt;&gt; nombre_inversions([7, 6, 5, 3])\n6\n</code></pre></p> <p>Question A.3</p> Enonc\u00e9 <p>Quelle est l\u2019ordre de grandeur de la complexit\u00e9 en temps de l'algorithme obtenu ? Aucune justification n'est attendue.</p>"},{"location":"Evaluations/DS0100bis/#partie-b-methode-recursive","title":"Partie B : M\u00e9thode r\u00e9cursive","text":"<p>Le but de cette partie est de concevoir une version r\u00e9cursive de la fonction nombre_inversion. On d\u00e9finit pour cela des fonctions auxiliaires.</p> <p>Question B.1</p> Enonc\u00e9 <p>Donner le nom d\u2019un algorithme de tri ayant une complexit\u00e9 meilleure que quadratique. Dans la suite de cet exercice, on suppose qu\u2019on dispose d'une fonction tri(tab) qui prend en argument un tableau et renvoie un tableau contenant les m\u00eames \u00e9l\u00e9ments rang\u00e9s dans l'ordre croissant.  </p> <p>Question B.2</p> Enonc\u00e9 <p>\u00c9crire une fonction moitie_gauche(tab) qui prend en argument un tableau tab et renvoie un nouveau tableau contenant la moiti\u00e9 gauche de tab. Si le nombre d'\u00e9l\u00e9ments de tab est impair, l'\u00e9l\u00e9ment du centre se trouve dans cette partie gauche. On donne ci-dessous les r\u00e9sultats attendus pour certains appels. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moitie_gauche([])\n[]\n&gt;&gt;&gt; moitie_gauche([4, 8, 3])\n[4, 8]\n&gt;&gt;&gt; moitie_gauche ([4, 8, 3, 7])\n[4, 8]\n</code></pre></p> <p>Dans la suite, on suppose qu\u2019on dispose de la fonction moitie_droite(tab) qui renvoie la moiti\u00e9 droite sans l\u2019\u00e9l\u00e9ment du milieu. </p> <p>Question B.3</p> Enonc\u00e9 <p>On suppose qu\u2019une fonction nb_inv_tab(tab1, tab2)a \u00e9t\u00e9 \u00e9crite. Cette fonction renvoie le nombre d\u2019inversions du tableau obtenu en mettant bout \u00e0 bout les tableaux tab1 et tab2, \u00e0 condition que tab1 et tab2 soient tri\u00e9s dans l\u2019ordre croissant. On donne ci-dessous deux exemples d\u2019appel de cette fonction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_inv_tab([3, 7, 9], [2, 10])\n3\n&gt;&gt;&gt; nb_inv_tab([7, 9, 13], [7, 10, 14])\n3\n</code></pre></p> <p>En utilisant la fonction nb_inv_tab et les questions pr\u00e9c\u00e9dentes, \u00e9crire une fonction r\u00e9cursive nb_inversions_rec(tab) qui permet de calculer le nombre d'inversions dans un tableau. * Cette fonction renverra le m\u00eame nombre que nombre_inversions(tab) de la partie A. On proc\u00e9dera de la fa\u00e7on suivante :  </p> <ul> <li>S\u00e9parer le tableau en deux tableaux de tailles \u00e9gales (\u00e0 une unit\u00e9 pr\u00e8s).</li> <li>Appeler r\u00e9cursivement la fonction nb_inversions_rec pour compter le nombre d\u2019inversions dans chacun des deux tableaux.  </li> <li>Trier les deux tableaux (on rappelle qu'une fonction de tri est d\u00e9j\u00e0 d\u00e9finie).  </li> <li>Ajouter au nombre d'inversions pr\u00e9c\u00e9demment compt\u00e9es le nombre renvoy\u00e9 par la fonction nb_inv_tab avec pour arguments les deux tableaux tri\u00e9s.  </li> </ul>"},{"location":"Evaluations/DS0110/","title":"Devoir 6 :   Gestion Processus","text":""},{"location":"Evaluations/DS0110/#exercice-1","title":"Exercice 1","text":""},{"location":"Evaluations/DS0110/#ordonnancement-de-processus","title":"Ordonnancement de processus","text":"<p>D'apr\u00e8s 2021, M\u00e9tropole, Candidats Libres, J2, Ex. 2</p> <p>Question 1</p> <p>Les \u00e9tats possibles d'un processus sont : \u00ab pr\u00eat \u00bb, \u00ab \u00e9lu \u00bb, \u00ab termin\u00e9 \u00bb et \u00ab bloqu\u00e9 \u00bb.</p> <p>1.a. Expliquer \u00e0 quoi correspond l'\u00e9tat \u00ab \u00e9lu \u00bb.</p> <p>1.b. Proposer un sch\u00e9ma illustrant les passages entre les diff\u00e9rents \u00e9tats.</p> <p>Question 2</p> <p>On suppose que quatre processus C\u2081, C\u2082, C\u2083 et C\u2084 sont cr\u00e9\u00e9s sur un ordinateur, et qu'aucun autre processus n'est lanc\u00e9 sur celui-ci, ni pr\u00e9alablement ni pendant l'ex\u00e9cution des quatre processus.</p> <p>L'ordonnanceur, pour ex\u00e9cuter les diff\u00e9rents processus pr\u00eats, les place dans une structure de donn\u00e9es de type file. Un processus pr\u00eat est enfil\u00e9 et un processus \u00e9lu est d\u00e9fil\u00e9.</p> <p>2.a. Parmi les propositions suivantes, recopier celle qui d\u00e9crit le fonctionnement des entr\u00e9es/sorties dans une file :</p> <ul> <li>Premier entr\u00e9, dernier sorti  </li> <li>Premier entr\u00e9, premier sorti  </li> <li>Dernier entr\u00e9, premier sorti  </li> </ul> <p>2.b. On suppose que les quatre processus arrivent dans la file et y sont plac\u00e9s dans l'ordre C\u2081, C\u2082, C\u2083 et C\u2084.</p> <ul> <li>Les temps d'ex\u00e9cution totaux de C\u2081, C\u2082, C\u2083 et C\u2084 sont respectivement 100 ms, 150 ms, 80 ms et 60 ms ;  </li> <li>Apr\u00e8s 40 ms d'ex\u00e9cution, le processus C\u2081 demande une op\u00e9ration d'\u00e9criture disque, op\u00e9ration qui dure 200 ms. Pendant cette op\u00e9ration d'\u00e9criture, le processus C\u2081 passe \u00e0 l'\u00e9tat bloqu\u00e9 ;   </li> <li>Apr\u00e8s 20 ms d'ex\u00e9cution, le processus C\u2083 demande une op\u00e9ration d'\u00e9criture disque, op\u00e9ration qui dure 10 ms. Pendant cette op\u00e9ration d'\u00e9criture, le processus C\u2083 passe \u00e0 l'\u00e9tat bloqu\u00e9.  </li> </ul> <p>Sur la frise chronologique ci-dessous, les \u00e9tats du processus C\u2082 sont donn\u00e9s. Compl\u00e9ter la frise avec les \u00e9tats des processus C\u2081, C\u2083 et C\u2084.</p> <p></p> <p>Question 3</p> <p>On trouvera ci- dessous deux programmes r\u00e9dig\u00e9s en pseudo-code.</p> <p>Verrouiller un fichier signifie que le programme demande un acc\u00e8s exclusif au fichier et l'obtient si le fichier est disponible.</p> Programme 1 Programme 2 Verrouiller fichier_1 Verrouiller fichier_2 Calculs sur fichier_1 Verrouiller fichier_1 Verrouiller fichier_2 Calculs sur fichier_1 Calculs sur fichier_1 Calculs sur fichier_2 Calculs sur fichier_2 D\u00e9verrouiller fichier_1 Calculs sur fichier_1 D\u00e9verrouiller fichier_2 D\u00e9verrouiller fichier_2 D\u00e9verrouiller fichier_1 <p>3.a. En supposant que les processus correspondant \u00e0 ces programmes s'ex\u00e9cutent simultan\u00e9ment (ex\u00e9cution concurrente), expliquer le probl\u00e8me qui peut \u00eatre rencontr\u00e9.</p> <p>3.b. Proposer une modification du programme 2 permettant d'\u00e9viter ce probl\u00e8me.</p> Corrige <p>1.a Un processus \u00e9lu est en cours d'ex\u00e9cution par le processeur actuellement.</p> <p>1.b. </p> <pre><code>flowchart LR\n    A(pr\u00eat) --&gt; B(\u00e9lu)\n    B --&gt; A\n    B --&gt; C(bloqu\u00e9)\n    C --&gt; A\n    B ---&gt; D(termin\u00e9)</code></pre> <p>2.a La file correspond au paradigme \" Premier entr\u00e9, premier sorti \".</p> <p>2.b. </p> <p></p> <p>3.a. Il s'agit d'un probl\u00e8me d'interblocage car les deux processus verrouillent simultan\u00e9ment les fichiers 1 et 2.</p> <p>3.b. On \u00e9change simplement les deux premi\u00e8res lignes du programme 2 :</p> Programme 1 Programme 2 Verrouiller fichier_1 Verrouiller fichier_1 Calculs sur fichier_1 Verrouiller fichier_2 Verrouiller fichier_2 Calculs sur fichier_1 Calculs sur fichier_1 Calculs sur fichier_2 Calculs sur fichier_2 D\u00e9verrouiller fichier_1 Calculs sur fichier_1 D\u00e9verrouiller fichier_2 D\u00e9verrouiller fichier_2 D\u00e9verrouiller fichier_1"},{"location":"Evaluations/DS0110/#exercice-2","title":"Exercice 2 :","text":"<p>D'apr\u00e8s 2022, Am\u00e9rique du Sude, J1, Ex. 3 </p> <p>Exo</p> <p>Les parties A et B peuvent \u00eatre trait\u00e9es ind\u00e9pendamment.  </p>"},{"location":"Evaluations/DS0110/#a-ordonnancement-des-processus","title":"A. Ordonnancement des processus","text":"<p>Dans le laboratoire d'analyse m\u00e9dicale d'un h\u00f4pital, plusieurs processus peuvent demander l'allocation du processeur simultan\u00e9ment.   </p> <p>Le tableau ci-dessous donne les demandes d'ex\u00e9cution de quatre processus et indique :  </p> <ul> <li>le temps d'ex\u00e9cution du processus (en unit\u00e9 de temps) ;  </li> <li>l'instant d'arriv\u00e9e du processus sur le processeur (en unit\u00e9 de temps) ;  </li> <li>le num\u00e9ro de priorit\u00e9 du processus (class\u00e9 de 1 \u00e0 10).  </li> </ul> <p>Plus la priorit\u00e9 est grande plus le num\u00e9ro de priorit\u00e9 est petit. Ainsi le processus P3, du tableau ci-dessous, est plus prioritaire que le processus P1. L'ordonnancement est de type pr\u00e9emptif, ce qui signifie qu'\u00e0 chaque unit\u00e9 de temps, le processeur choisit d'ex\u00e9cuter le processus ayant le plus petit num\u00e9ro de priorit\u00e9 (un seul processus \u00e0 la fois). Ceci peut provoquer la suspension d'un autre processus qui reprendra lorsqu'il deviendra le plus prioritaire dans la file d'attente. </p> Processus Temps  d'ex\u00e9cution Instant  d'arriv\u00e9e Num\u00e9ro de  priorit\u00e9 P1 3 0 4 P2 4 2 2 P3 3 3 1 P4 4 5 3 <p>Question 1</p> <p>1.a Reproduire le diagramme ci-dessous, sur votre copie, et indiquer dans chacune des cases le processus ex\u00e9cut\u00e9 par le processeur entre deux unit\u00e9s de temps (il peut y avoir des cases vides).   </p> <p></p> <p>1.b Donnez le diagramme de Gantt pour l'ex\u00e9cution de ces diff\u00e9rents processus</p> <p>Question 2</p> <p>Recopier et compl\u00e9ter les temps de s\u00e9jour ainsi que les temps d'attente de chacun des processus (toujours en unit\u00e9s de temps).  Temps de s\u00e9jour= instant de terminaison - instant d'arriv\u00e9e Temps d'attente = temps de s\u00e9jour - temps d'ex\u00e9cution </p> Processus Temps  d'ex\u00e9cution Instant d'arriv\u00e9e Temps de s\u00e9jours Temps d'attente P1 3 0 14-0=14 14-3=11 P2 4 2 P3 3 3 P4 4 5 <p>Question 3</p> <p>\u00c0 quelles conditions le temps d'attente d'un processus peut-il \u00eatre nul ? </p> Corrige <p>Partie A : Ordonnancement des processus</p> <ol> <li> <p></p> </li> <li> <p></p> </li> </ol> Processus Temps d'ex\u00e9cution Instant d'arriv\u00e9e Temps de s\u00e9jour Temps d'attente P1 \\(3\\) \\(0\\) \\(14-0=14\\) \\(14 - 3 = 11\\) P2 \\(4\\) \\(2\\) \\(9-2=7\\) \\(7 - 4 = 3\\) P3 \\(3\\) \\(3\\) \\(6-3=3\\) \\(3 - 3 = 0\\) P4 \\(4\\) \\(5\\) \\(13-5=8\\) \\(8 - 4 = 4\\) <ol> <li>Le temps d'attente d'un processus est nul lorsque le temps de s\u00e9jour est \u00e9gal au temps d'ex\u00e9cution. C'est \u00e0 dire lorsque le processus \u00e9tait le plus prioritaire durant la totalit\u00e9 de son temps d'ex\u00e9cution.</li> </ol>"},{"location":"Evaluations/DS_Arbres/","title":"Devoir 5 :   Les arbres binaires","text":""},{"location":"Evaluations/DS_Arbres/#question-de-cours","title":"Question de cours","text":"<p>Exo</p> <p>Question de cours</p> <p>On note h la hauteur d'un arbre binaire et n sa taille. En utilisant vos connaissances de cours, prouver que \\(h \\leqslant n \\leqslant 2^h -1\\).</p> R\u00e9ponse <p>On \u00e9tudie les deux cas de figure \"extr\u00e8me\" :</p> <ul> <li> <p>Cas minimaliste : arbre filiforme <pre><code>graph TD\n    A(\" \") --&gt; B(\" \") \n    B --&gt; C(\" \")\n    B --&gt; D(\" \")\n    C --&gt; E(\" \")\n    C --&gt; C1(\" \")\n    E --&gt; E1(\" \")\n    E --&gt; E2(\" \")\n    C1 --&gt; C2(\" \")\n    C1 --&gt; C3(\" \")\n    A --&gt; F(\" \")\n    F --&gt; J(\" \")\n    F --&gt; K(\" \")\n    J --&gt; L(\" \")\n    J --&gt; N(\" \")\n    K --&gt; M(\" \")\n    style F opacity:0;\n    style D opacity:0;\n    style C1 opacity:0;\n    style C2 opacity:0;\n    style C3 opacity:0;\n    style E2 opacity:0;\n    style J opacity:0;\n    style K opacity:0;\n    style L opacity:0;\n    style N opacity:0;\n    style M opacity:0;\n    linkStyle 2 stroke-width:0px;\n    linkStyle 4 stroke-width:0px;\n    linkStyle 6 stroke-width:0px;\n    linkStyle 7 stroke-width:0px;\n    linkStyle 8 stroke-width:0px;\n    linkStyle 9 stroke-width:0px;\n    linkStyle 10 stroke-width:0px;\n    linkStyle 11 stroke-width:0px;\n    linkStyle 12 stroke-width:0px;\n    linkStyle 13 stroke-width:0px;\n    linkStyle 14 stroke-width:0px;</code></pre> On a alors  \\(h = n\\), on en d\u00e9duit l'in\u00e9galit\u00e9 :  \\(h \\leqslant n\\)</p> </li> <li> <p>Cas maximaliste : arbre complet <pre><code>graph TD\n    A(\" \") --&gt; B(\" \") \n    B --&gt; C(\" \")\n    B --&gt; D(\" \")\n    C --&gt; E(\" \")\n    C --&gt; C1(\" \")\n    E --&gt; E1(\" \")\n    E --&gt; E2(\" \")\n    C1 --&gt; C2(\" \")\n    C1 --&gt; C3(\" \")\n    A --&gt; F(\" \")\n    F --&gt; J(\" \")\n    F --&gt; K(\" \")\n    J --&gt; L(\" \")\n    J --&gt; N(\" \")\n    D --&gt; D1(\" \")\n    D --&gt; D2(\" \")\n    D1 --&gt; D3(\" \")\n    D1 --&gt; D4(\" \")\n    D2 --&gt; D5(\" \")\n    D2 --&gt; D6(\" \")\n    L --&gt; L3(\" \")\n    L --&gt; L4(\" \")\n    N --&gt; N1(\" \")\n    N --&gt; N2(\" \")\n    K --&gt; K1(\" \")\n    K --&gt; K2(\" \")\n    K1 --&gt; K3(\" \")\n    K1 --&gt; K4(\" \")\n    K2 --&gt; K5(\" \")\n    K2 --&gt; K6(\" \") </code></pre> Chaque niveau a \\(2^{h-1}\\) noeuds donc le nombre total de noeuds est donn\u00e9e par \\(1 + 2 + 2^2 + 2^3 + ... + 2^{h-1} = 1 \\times \\dfrac{1-2^h}{1-2}=2^h - 1\\).</p> </li> <li> <p>On obtient alors les in\u00e9galit\u00e9s demand\u00e9es : \\(h \\leqslant n \\leqslant 2^h -1\\)</p> </li> </ul>"},{"location":"Evaluations/DS_Arbres/#dapres-exercice-bac","title":"D'apr\u00e9s exercice BAC","text":"<p>Exo</p> <p>Cet exercice porte sur le th\u00e8me \"Algorithmique\", les arbes bianires de recherche et leurs parcours </p> <p>Rappel : Un arbre binaire de recherche (ABR) est un arbre binaire \u00e9tiquet\u00e9 avec des cl\u00e9s tel que :  </p> <ul> <li>Les cl\u00e9s du sous-arbre gauche sont inf\u00e9rieures ou \u00e9gales \u00e0 celle de la racine;</li> <li>Les cl\u00e9s du sous-arbre droit sont strictement sup\u00e9rieures \u00e0 celle de la racine;</li> <li>Les deux sous-arbres sont eux-m\u00eames des arbres binaires de recherche.</li> </ul>"},{"location":"Evaluations/DS_Arbres/#partie-a-preambule","title":"Partie A : Pr\u00e9ambule","text":"<p>Question A.1</p> <p>Recopier sur votre copie le ou les num\u00e9ro(s) correspondant aux arbres binaires de recherche parmi les arbres suivants : </p> <p>Arbre 1</p> <pre><code>graph TD\n    A(3) --&gt; B(2) \n    B --&gt; D(1)\n    B --&gt; E(3)\n    A --&gt; C(4)\n    C --&gt; F(4)\n    C --&gt; G(5)</code></pre> <p>Arbre 2</p> <pre><code>graph TD\n    A(4) --&gt; B(2) \n    B --&gt; D(1)\n    B --&gt; E(3)\n    A --&gt; C(4)\n    C --&gt; F(4)\n    C --&gt; G(5)</code></pre> <p>Arbre 3</p> <pre><code>graph TD\n    A(3) --&gt; B(2) \n    B --&gt; D(1)\n    B --&gt; E(1)\n    A --&gt; C(4)\n    C --&gt; F(3)\n    C --&gt; G(5)</code></pre> R\u00e9ponse <p>Seul l'arbre 1 est un arbre binaire de recherche. En effet, dans l'arbre 2 la cl\u00e9 4 appara\u00eet dans le sous arbre droit de la racine de cl\u00e9 4, or les cl\u00e9 du sous arbre droit doivent \u00eatre strictement sup\u00e9rieurs \u00e0 la racine. Pour la m\u00eame raison, l'arbre 3 n'est pas non plus un arbre binaire de recherche, la valeur 1 figure dans le sous arbre droit du noeud d'\u00e9tiquette 2.</p>"},{"location":"Evaluations/DS_Arbres/#partie-b-analyse","title":"Partie B : Analyse","text":"<p>On consid\u00e8re la structure de donn\u00e9es abstraites ABR (Arbre Binaire de Recherche) que l'on munit des op\u00e9rations suivantes : </p> <p>Strucutres de donn\u00e9es ABR</p> <p>Utilise : Booleen, Element Op\u00e9rations :     - <code>creer_arbre()</code> : renvoie un arbre vide     - <code>est_vide(a)</code> : renvoie <code>True</code> si l'arbre a est vide et <code>False</code> sinon     - <code>racine(a)</code> : renvoie la cl\u00e9 de la racine de l'arbre non vide a.     - <code>sous_arbre_gauche(a)</code> : renvoie le sous-arbre gauche de l'arbre non vide a.     - <code>sous_arbre_droit(a)</code> : renvoie le sous-arbre droit de l'arbre non vie a.     - <code>\u00ecnserer(a,e)</code> ins\u00e8re la cl\u00e9 e dans l'arbre a.  </p> <p>Question B.2.a</p> <p>Dans un ABR, o\u00f9 se trouve le plus petit \u00e9l\u00e9ment ? Justifier</p> R\u00e9ponse <p>Le plus petit \u00e9l\u00e9ment se trouve sur la feuille la plus \u00e0 gauche de l'arbre. En effet en descendant r\u00e9cursivement \u00e0 gauche, on trouve \u00e0 chaque \u00e9tape une valeur inf\u00e9rieure \u00e0 toutes celles se trouvant \u00e0 droite.</p> <p>Attention</p> <p>La question demande le plus petit \u00e9l\u00e9ment, or les valeurs pr\u00e9sentes dans un arbre binaire de recherche ne sont pas forc\u00e9ment uniques. A titre d'exemple, dans l'arbre binaire de recherche suivant, la plus petite valeur appara\u00eet 2 fois : <pre><code>graph TD\nS5(5) --&gt; S6(5)\nS5 --&gt; S8(8)</code></pre></p> <p>Pour rechercher une cl\u00e9 dans un ABR, il faut comparer la cl\u00e9 donn\u00e9e avec la cl\u00e9 situ\u00e9e \u00e0 la racine. Si cette cl\u00e9 est \u00e7 la racine, la fonction renvoie vrai sinon il faut proc\u00e9der r\u00e9cursivement sur les sous-arbres \u00e0 gauche ou \u00e0 droite.   </p> <p>Question B.2.b</p> <p>En utilisant les fonctions ci-dessus, \u00e9crire une fonction r\u00e9cursive <code>RechercheValeur</code> prenant en arguments la cl\u00e9 recherch\u00e9e et l'arbre ABR consid\u00e8r\u00e9. Cette fonction retourne un bool\u00e9en (vrai ou faux) indiquant si la cl\u00e9 est pr\u00e9sente dans l'arbre ou non..</p> R\u00e9ponse <p>Si l'arbre est vide alors il ne contient pas la cle cherch\u00e9e. Sinon trois cas se pr\u00e9sente : la cl\u00e9 cherch\u00e9e est la racine et on renvoie <code>True</code>, la cl\u00e9 cherch\u00e9e est inf\u00e9rieure \u00e0 la racine et on relance la recherche dans le sous arbre gauche (l\u00e0 ou se trouve les valeurs inf\u00e9rieures \u00e0 la racine), la cl\u00e9 cherch\u00e9e est sup\u00e9rieure \u00e0 la racine et on relance la recherche dans le sous arbre droit.  </p> \ud83d\udc0d Script Python<pre><code>def RechercheValeur(cle,abr):\n    if est_vide(abr):\n        return False\n    if racine(abr)==cle:\n        return True\n    elif racine(abr)&gt;cle:\n        return RechercheValeur(cle,sous_arbre_gauche(a))\n    else:\n        return RechercheValeur(cle,sous_arbre_droit(a))\n</code></pre> <p>Question B.3</p> <p>On consid\u00e8re l'arbre ABR suivant : </p> <p><pre><code>graph TD\n    A(7) --&gt; B(2) \n    B --&gt; D(1)\n    D --&gt; D1(\" \")\n    D --&gt; D2(\" \")\n    B --&gt; E(5)\n    E --&gt; H(3)\n    E --&gt; I(6)\n    A --&gt; C(10)\n    C --&gt; F(8)\n    C --&gt; G(\" \")\n    F --&gt; F1(\" \")\n    F --&gt; F2(9)\n    G --&gt; G1(\" \")\n    G --&gt; G2(\" \")\n    linkStyle 2 stroke-width:0px;\n    style D1 opacity:0;\n    linkStyle 3 stroke-width:0px;\n    style D2 opacity:0;\n    linkStyle 9 stroke-width:0px;\n    style G opacity:0;\n    linkStyle 10 stroke-width:0px;\n    style F1 opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style G1 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style G2 opacity:0;</code></pre> a. Donner le parcours infixe de cette arbre. b. Donner le parcours suffixe de cette arbre. c. Donner le parcours pr\u00e9fixe de cette arbre. d. Donner le parcours en largeur d'abord de cette arbre.</p> R\u00e9ponse <p>a. En parcours en profondeur infixe, on liste de fa\u00e7on r\u00e9cursive les cl\u00e9 du sous arbre gauche, puis la racine, puis les cl\u00e9 du sous arbre droit. On obtient donc : \\(1 - 2 - 3 - 5 - 6 - 7 - 8 - 9 - 10\\)</p> <p>b. En parcours suffixe, on liste r\u00e9cursivement les noeuds du sous arbre gauche, ceux du sous arbre droit et enfin la racine. Ici, on obtient : \\(1 - 3 - 6 - 5 - 2 - 9 - 8 - 10 - 7\\).</p> <p>c. En parcours pr\u00e9fixe, on liste r\u00e9cursivement la racine puis les noeuds du sous arbre gauche puis ceux du sous arbre droit. On obtient donc : \\(7 - 2 - 1 - 5 - 3 - 6 - 10 - 8 - 9\\).  </p> <p>d. Le parcours en largeur corresponda \u00e0 l'ordre de la lecture (de gauche \u00e0 droite et de haut en bas). Ici on obtient : \\(7 - 2 - 10 - 1 - 5 - 8 - 3 - 6 - 9\\).</p>"},{"location":"Evaluations/DS_Arbres/#dapres-bac","title":"D'apr\u00e9s BAC","text":"<p>Club d'Informatique</p> <p>D'apr\u00e8s 2022, Nouvelle-Cal\u00e9donie, J1, Ex. 4</p> <p>Un club de passionn\u00e9\u22c5e\u22c5s d'informatique fonctionne de la fa\u00e7on suivante : pour \u00eatre membre du club, \u00e0 l'exception du fondateur ou de la fondatrice, il faut \u00eatre parrain\u00e9\u22c5e. De plus, chaque membre peut parrainer au maximum deux personnes.</p> <p>Dans ce club, on distingue trois profils de membres :</p> <ul> <li>membre or : le membre a parrain\u00e9 deux personnes ;</li> <li>membre argent : le membre a parrain\u00e9 une seule personne ;</li> <li>membre bronze : le membre n'a parrain\u00e9 personne.</li> </ul> <p>On peut mod\u00e9liser ce fonctionnement de parrainage \u00e0 l'aide d'un arbre binaire dont les \u00e9tiquettes sont les pseudonymes des membres du club. Lorsque deux personnes ont \u00e9t\u00e9 parrain\u00e9es, celle qui a \u00e9t\u00e9 parrain\u00e9e en premier apparait comme racine du sous-arbre \u00e0 gauche tandis que l'autre est racine du sous-arbre \u00e0 droite.</p> <p>On donne ci-dessous l'arbre \\(P\\) repr\u00e9sentant les membres du club issus des parrainages de AnneB, fondatrice du club. Par exemple, Sophia a parrain\u00e9 Malik2 avant AstridM.</p> <pre><code>graph TD\n    A(\"AnneB\") --&gt; B(\"Pedro\") \n    B --&gt; D(\"FredB\")\n    B --&gt; E(\" \")\n    A --&gt; H(\"Sophia\")\n    H --&gt; I(\"Malik2\")\n    H --&gt; J(\"AstridM\")\n    I --&gt; K(\"Marc\")\n    I --&gt; L(\" \")\n    J --&gt; N(\"KevinH\")\n    J --&gt; M(\"Nico\")\n    linkStyle 2 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style L opacity:0;</code></pre> <p>On munit la structure de donn\u00e9es <code>ArbreBinaire</code> des op\u00e9rations suivantes :</p> <p>Interface de la structure <code>ArbreBinaire</code></p> \ud83d\udc0d Script Python<pre><code>def est_vide(arbre: ArbreBinaire) -&gt; bool:\n\"\"\"renvoie True si arbre est vide, False sinon\"\"\"\n\ndef racine(arbre: ArbreBinaire) -&gt; str:\n\"\"\"renvoie l'\u00e9tiquette du n\u0153ud racine de arbre\"\"\"\n\ndef gauche(arbre: ArbreBinaire) -&gt; ArbreBinaire:\n\"\"\"renvoie le sous-arbre \u00e0 gauche de arbre\"\"\"\n\ndef droite(arbre: ArbreBinaire) -&gt; ArbreBinaire:\n\"\"\"renvoie le sous-arbre \u00e0 droite de arbre\"\"\"\n</code></pre> <p>Question 1</p> <p>On appelle feuille, un n\u0153ud qui ne poss\u00e8de pas de successeurs ou dit autrement dont l'arbre dont il est la racine poss\u00e8de deux sous-arbres vides. On d\u00e9finit la hauteur d'un arbre binaire non vide comme la longueur (en nombre de n\u0153uds) du plus long chemin allant de la racine \u00e0 une feuille. Un arbre vide a une hauteur \u00e9gale \u00e0 \\(0\\). </p> <p>a) Indiquer la hauteur de l'arbre \\(P\\) b) Recopier et compl\u00e9ter la d\u00e9finition de la fonction r\u00e9cursive <code>hauteur</code> qui prend un <code>arbre</code> binaire en param\u00e8tre et renvoie la hauteur de cet <code>arbre</code>. On pourra utiliser la fonction <code>max</code> renvoyant la valeur maximale entre deux valeurs.</p> <p>hauteur<pre><code>def hauteur(arbre):\n    if ...... :\n        return 0\n    else:\n        hauteur_a_gauche = hauteur(gauche(arbre))\n        hauteur_a_droite = ......\n        return 1 + ......\n</code></pre> c) Indiquer le type de la valeur renvoy\u00e9e par la fonction <code>hauteur</code></p> R\u00e9ponse a <p>L'arbre binaire \\(P\\) a une hauteur de \\(4\\) (par exemple en consid\u00e9rant le chemin qui va de la racine <code>'AnneB'</code> jusqu'\u00e0 la feuille <code>'Marc'</code>, on d\u00e9nombre bien \\(4\\) n\u0153uds, aucun autre chemin en d\u00e9nombre plus).</p> R\u00e9ponse b hauteur<pre><code>def hauteur(arbre):\n    if est_vide(arbre) :\n        return 0\n    else:\n        hauteur_a_gauche = hauteur(gauche(arbre))\n        hauteur_a_droite = hauteur(droite(arbre))\n        return 1 + max(hauteur_a_gauche, hauteur_a_droite)\n</code></pre> R\u00e9ponse c <p>Il s'agit d'un entier (type <code>int</code>)</p> <p>Question 2</p> <p>La fonction <code>membres</code> ci-dessous prend un <code>arbre</code> binaire et une <code>liste_membres</code> en param\u00e8tres et ajoute, dans un certain ordre, les \u00e9tiquettes de l'<code>arbre</code> \u00e0 la <code>liste_membres</code>.</p> membres<pre><code>def membres(arbre, liste_membres):\n    if not est_vide(arbre):\n        liste_membres.append(racine(arbre))\n        membres(gauche(arbre), liste_membres)\n        membres(droite(arbre), liste_membres)\n</code></pre> <p>a) En supposant la liste <code>membres_p</code> initialement vide, \u00e9crire la valeur de cette liste apr\u00e8s l'appel <code>membres(arbre_p, membres_p)</code> o\u00f9 <code>arbre_p</code> r\u00e9f\u00e9rence l'arbre \\(P\\).</p> <p>b) Indiquer le nom du type de parcours d'arbre binaire r\u00e9alis\u00e9 par la fonction <code>membres</code>.</p> R\u00e9ponse a \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; membres_p\n['AnneB', 'Pedro', 'FredB', 'Sophia', 'Malik2', 'Marc', 'AstridM', 'KevinH', 'Nico']\n</code></pre> R\u00e9ponse b <p>Il s'agit d'un parcours pr\u00e9fixe (on traite la racine avant de traiter les sous-arbres \u00e0 gauche et \u00e0 droite).</p> <p>Question 3</p> <p>Dans cette question, on s'int\u00e9resse aux profils des membres (or, argent ou bronze).</p> <p>a) Indiquer les \u00e9tiquettes des feuilles de l'arbre \\(P\\). b) \u00c0 partir des propositions suivantes, indiquer le profil des membres dont les pseudonymes sont les \u00e9tiquettes des feuilles.</p> <ul> <li>R\u00e9ponse A : membre or</li> <li>R\u00e9ponse B : membre argent</li> <li>R\u00e9ponse C : membre bronze</li> <li>R\u00e9ponse D : on ne peut pas savoir</li> </ul> <p>c) \u00c9crire la fonction <code>profil</code> qui prend un <code>arbre</code> binaire non vide en param\u00e8tre et renvoie le profil du membre dont le pseudonyme est l'\u00e9tiquette de la racine de l'<code>arbre</code> sous la forme d'une chaine de caract\u00e8res : <code>'or'</code>, <code>'argent'</code> ou <code>'bronze'</code>. Par exemple, l'appel <code>profil(arbre_p)</code> doit renvoyer <code>'or'</code>qui correspond au profil du membre <code>'AnneB'</code>, racine de \\(P\\).</p> R\u00e9ponse a <p>Les feuilles sont : <code>'FredB'</code>, <code>'Marc'</code>, <code>'KevinH'</code> et <code>'Nico'</code></p> R\u00e9ponse b <p>Puisqu'il s'agit des feuilles, cela signifie que ces n\u0153uds n'ont pas de successeurs et donc que les membres associ\u00e9s n'ont parrain\u00e9 personne. La bonne r\u00e9ponse est donc la C : membre bronze.</p> R\u00e9ponse c profil<pre><code>def profil(arbre):\n    if est_vide(gauche(arbre)) and est_vide(droite(arbre)):\n        return 'bronze'\n    elif est_vide(gauche(arbre)) or est_vide(droite(arbre)):\n        return 'argent'\n    else:\n        return 'or'\n</code></pre> <p>Question 4</p> <p>Afin d'obtenir un tableau dont chaque \u00e9l\u00e9ment est un tuple contenant le pseudonyme d'un membre et son profil, on propose la fonction <code>membres_profils</code> d\u00e9finie ci-dessous :</p> membres_profils<pre><code>def membres_profils(arbre, liste_membres_profils):\n    if not est_vide(arbre):\n        liste_membres_profils.append((racine(arbre), profil(arbre))\n        membres_profils(gauche(arbre), liste_membres_profils)\n        membres_profils(droite(arbre), liste_membres_profils)\n</code></pre> <p>On appelle cette fonction sur un arbre <code>arbre_2</code> et on obtient ceci :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; liste_2 = []\n&gt;&gt;&gt; membres_profils(arbre_2, liste_2)\n&gt;&gt;&gt; liste_2\n[('LeaC', 'or'), ('Ali', 'bronze'), ('Tom45', 'argent'), ('Vero', 'bronze')]\n</code></pre> <p>Dessiner un arbre possible pouvant correspondre \u00e0 l'<code>arbre_2</code>.</p> R\u00e9ponse <p>Comme pour la question 2b, on a \u00e0 faire \u00e0 un parcours pr\u00e9fixe donc <code>'LeaC'</code> est la racine de l'<code>arbre_2</code>. Ensuite \u00e0 gauche on a <code>'Ali'</code> qui est une feuille (membre bronze). \u00c0 droite on tombe sur <code>'Tom45'</code> qui a parrain\u00e9 un seul membre : <code>'Vero'</code>.</p> <pre><code>graph TD\n    A(\"LeaC\") --&gt; B(\"Ali\") \n    B --&gt; D(\" \")\n    B --&gt; E(\" \")\n    A --&gt; H(\"Tom45\")\n    H --&gt; I(\"Vero\")\n    H --&gt; J(\" \")\n    linkStyle 2 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 1 stroke-width:0px;\n    style D opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style J opacity:0;</code></pre> <p>Question 5</p> <p>Chaque ann\u00e9e, les membres versent une cotisation en fonction de leur profil.</p> <ul> <li>membre or : cotisation de 20\u20ac</li> <li>membre argent : cotisation de 30\u20ac</li> <li>membre bronze : cotisation de 40\u20ac</li> </ul> <p>\u00c9crire une fonction <code>cotisation</code> qui prend un <code>arbre</code> binaire et renvoie le total des cotisations re\u00e7ues par le club dont <code>arbre</code> mod\u00e9lise les relations de parrainage. On pourra utiliser la fonction <code>membres_profils</code> de la question pr\u00e9c\u00e9dente.</p> R\u00e9ponse <p>On commence par d\u00e9finir un dictionnaire des tarifs de cotisation :</p> \ud83d\udc0d Script Python<pre><code>tarifs = {'or': 20, 'argent': 30, 'bronze': 40}\n</code></pre> cotisation<pre><code>def cotisation(arbre):\n    if est_vide(arbre):\n        return 0\n    else:\n        arbre_gauche = cotisations(gauche(arbre))\n        arbre_droit = cotisations(droite(arbre))\n        return tarifs[profil(arbre)] + arbre_gauche + arbre_droit\n</code></pre> <p>ou  </p> cotisation<pre><code>def cotisations2(arbre):\n    a=[]\n    membres_profils(arbre,a)\n    print(a)\n    prixtotal=0\n    for i in range(len(a)):\n        if a[i][1]=='or':\n            prixtotal+=20\n        elif a[i][1]=='argent':\n            prixtotal+=30\n        else:\n            prixtotal+=40\n    return prixtotal\n</code></pre>"},{"location":"Evaluations/DS_Arbres/#dapres-bac_1","title":"D'apr\u00e9s BAC","text":"<p>Insertion et valeurs sup\u00e9rieures dans un ABR</p> <p>D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 1</p> <p>Dans cet exercice, la taille d'un arbre est le nombre de n\u0153uds qu'il contient. Sa hauteur est le nombre de n\u0153uds du plus long chemin qui joint le n\u0153ud racine \u00e0 l'une des feuilles (n\u0153uds sans sous-arbres). On convient que la hauteur d'un arbre ne contenant qu'un n\u0153ud vaut 1 et la hauteur de l'arbre vide vaut 0.</p> <p>On consid\u00e8re l'arbre binaire repr\u00e9sent\u00e9 ci-dessous :</p> <pre><code>graph\nN0((15)) --- N1((13))\nN0 --- N2((21))\nN1 --- N3((11))\nN1 --- N4((14))\nN2 --- N5((18))\nN2 --- N6((27))\nN5 --- N7(( ))\nlinkStyle 6 stroke-width:0px;\nstyle N7 opacity:0;\nN5 --- N8((20))</code></pre> <p>Question 1</p> <p>1.a. Donner la taille de cet arbre. 1.b. Donner la hauteur de cet arbre. 1.c. Repr\u00e9senter sur la copie le sous-arbre \u00e0 droite du n\u0153ud de valeur 15. 1.d. Justifier que l'arbre de la figure 1 est un arbre binaire de recherche. 1.e. On ins\u00e8re la valeur 17 dans l'arbre de la figure 1 de telle sorte que 17 soit une nouvelle feuille de l'arbre et que le nouvel arbre obtenu soit encore un arbre binaire de recherche. Repr\u00e9senter sur la copie ce nouvel arbre.</p> R\u00e9ponse 1.a <p>La taille vaut 8.</p> R\u00e9ponse 1.b <p>La hauteur vaut 4.</p> R\u00e9ponse 1.c <pre><code>graph\nN2((21)) --- N5((18))\nN2 --- N6((27))\nN5 --- N7(( ))\nlinkStyle 2 stroke-width:0px;\nstyle N7 opacity:0;\nN5 --- N8((20))</code></pre> R\u00e9ponse 1.d <p>Un arbre binaire de recherche est un arbre tel que, pour tout n\u0153ud \\(n\\), les valeurs associ\u00e9es \u00e0 tous les n\u0153uds du sous-arbre \u00e0 gauche sont inf\u00e9rieures \u00e0 la valeur de \\(n\\), et les valeurs associ\u00e9es \u00e0 tous les n\u0153uds du sous-arbre \u00e0 droite sont sup\u00e9rieures \u00e0 la valeur associ\u00e9e \u00e0 \\(n\\).</p> <p>On v\u00e9rifie donc :</p> <ul> <li>15 &gt; 13</li> <li>13 &gt; 11</li> <li>13 &lt; 14</li> <li>15 &lt; 21</li> <li>21 &gt; 18</li> <li>18 &lt; 20</li> <li>21 &lt; 27</li> </ul> <p>Cette propri\u00e9t\u00e9 \u00e9tant r\u00e9cursive, on doit aussi v\u00e9rifier que l'on a :</p> <ul> <li>15 &gt; 14</li> <li>15 &lt; 18</li> <li>15 &lt; 17</li> <li>21 &gt; 20</li> </ul> <p>Remarque : Il est inutile de v\u00e9rifier que l'on a 15 &gt; 11 car on a v\u00e9rifi\u00e9 15 &gt; 13 et 13 &gt; 11. De la m\u00eame fa\u00e7on, la v\u00e9rification 15 &lt; 27 est inutile.</p> R\u00e9ponse 1.e <pre><code>graph\nN0((15)) --- N1((13))\nN0 --- N2((21))\nN1 --- N3((11))\nN1 --- N4((14))\nN2 --- N5((18))\nN2 --- N6((27))\nN5 --- N7((17))\nN5 --- N8((20))</code></pre> <p>On consid\u00e8re l'arbre la classe <code>Noeud</code> d\u00e9finie de la fa\u00e7on suivante en Python :</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, gauche, valeur, droite):\n        self.gauche = gauche\n        self.valeur = valeur\n        self.droite = droite\n</code></pre> <p>Question 2</p> <p>2.a. Parmi les trois instructions (A), (B) et (C) suivantes, \u00e9crire sur la copie la lettre correspondant \u00e0 celle qui construit et stocke dans la variable <code>abr</code> l'arbre repr\u00e9sent\u00e9 ci-dessous.</p> <pre><code>graph\nN0((15)) --- N1((13))\nN0 --- N2((21))</code></pre> <ul> <li>(A) <code>abr = Noeud(Noeud(Noeud(None, 13, None), 15, None), 21, None)</code> </li> <li>(B) <code>abr = Noeud(None, 13, Noeud(Noeud(None, 15, None), 21, None))</code> </li> <li>(C) <code>abr = Noeud(Noeud(None, 13, None), 15, Noeud(None, 21, None))</code> </li> </ul> <p>2.b. Recopier et compl\u00e9ter la ligne 7 du code de la fonction <code>inserer</code> ci-dessous qui prend en param\u00e8tres une valeur <code>v</code> et un arbre binaire de recherche <code>abr</code> et qui renvoie l'arbre obtenu suite \u00e0 l'insertion de la valeur v dans l'arbre <code>abr</code>. Les lignes 8 et 9 permettent de ne pas ins\u00e9rer la valeur <code>v</code> si celle-ci est d\u00e9j\u00e0 pr\u00e9sente dans <code>abr</code>.</p> \ud83d\udc0d Script Python<pre><code>def inserer(v, abr):\n    if abr is None:\n        return Noeud(None, v, None)\n    if v &gt; abr.valeur:\n        return Noeud(abr.gauche, abr.valeur, inserer(v, abr.droite))\n    elif v &lt; abr.valeur:\n        return ...\n    else:\n        return abr\n</code></pre> R\u00e9ponse 2.a <p>On utilise l'instruction (C) :</p> \ud83d\udc0d Script Python<pre><code>abr = Noeud(\n        Noeud(None, 13, None),\n        15,\n        Noeud(None, 21, None)\n)\n</code></pre> R\u00e9ponse 2.b <p>On propose :</p> \ud83d\udc0d Script Python<pre><code>def inserer(v, abr):\n    if abr is None:\n        return Noeud(None, v, None)\n    if v &gt; abr.valeur:\n        return Noeud(abr.gauche, abr.valeur, inserer(v, abr.droite))\n    elif v &lt; abr.valeur:\n        return Noeud(inserer(v, abr.gauche), abr.valeur, abr.droite)\n    else:\n        return abr\n</code></pre> <p>3. La fonction <code>nb_sup</code> prend en param\u00e8tres une valeur <code>v</code> et un arbre binaire de recherche <code>abr</code> et renvoie le nombre de valeurs sup\u00e9rieures ou \u00e9gales \u00e0 la valeur <code>v</code> dans l'arbre <code>abr</code>. </p> <p>Le code de cette fonction <code>nb_sup</code> est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def nb_sup(v, abr):\n    if abr is None:\n        return 0\n    elif abr.valeur &gt;= v:\n        return 1+nb_sup(v, abr.gauche)+nb_sup(v, abr.droite)\n    else:\n        return nb_sup(v, abr.gauche)+nb_sup(v, abr.droite)\n</code></pre> <p>Question 3</p> <p>3.a. On ex\u00e9cute l'instruction <code>nb_sup(16, abr)</code> dans laquelle <code>abr</code> est l'arbre initial de la question 1.. D\u00e9terminer le nombre d'appels \u00e0 la fonction <code>nb_sup</code>. 3.b. L'arbre pass\u00e9 en param\u00e8tre \u00e9tant un arbre binaire de recherche, on peut am\u00e9liorer la fonction <code>nb_sup</code> pr\u00e9c\u00e9dente afin de r\u00e9duire ce nombre d'appels. \u00c9crire sur la copie le code modifi\u00e9 de cette fonction.</p> R\u00e9ponse 3.a <p>La fonction va faire autant d'appel que l'arbre compte de sous-arbres y compris les sous-arbres vides. En comptant l'appel initial cela fait donc 17 appels.</p> R\u00e9ponse 3.b <p>Dans la mesure o\u00f9 l'on souhaite compter les valeurs sup\u00e9rieures, il est inutile d'explorer le sous-arbre \u00e0 gauche si la valeur d'un n\u0153ud est inf\u00e9rieure \u00e0 la valeur pass\u00e9e en argument.</p> <p>On peut donc faire :</p> \ud83d\udc0d Script Python<pre><code>def nb_sup(v, abr):\n    if abr is None:\n        return 0\n    elif abr.valeur &gt;= v:\n        return nb_sup(v, abr.gauche) + 1 + nb_sup(v, abr.droite)\n    else:\n        return nb_sup(v, abr.droite)\n</code></pre>"},{"location":"Evaluations/DS_Diviser_pour_regner_tris/","title":"Devoir 4 :   Les tris - Diviser pour r\u00e9gner","text":""},{"location":"Evaluations/DS_Diviser_pour_regner_tris/#qcm","title":"Q.C.M.","text":"<p>Exo</p> <p>1. On applique l'algorithme du tri par s\u00e9lection \u00e0 la liste <code>[8,12,6,19]</code>, apr\u00e8s la premi\u00e8re \u00e9tape, le contenu de la liste sera :</p> <ul> <li> a) <code>[12,8,6,19]</code></li> <li> b) <code>[6,12,8,19]</code></li> <li> c) <code>[19,12,6,9]</code></li> <li> d) Aucune des propositions ci-dessus</li> </ul> <p>2. On applique l'algorithme du tri par insertion \u00e0 la liste <code>[9,11,7,16]</code>, quel sera le contenu de la liste apr\u00e8s le premier \u00e9change ?</p> <ul> <li> a) <code>[11,9,7,16]</code></li> <li> b) <code>[9,11,16,7]</code></li> <li> c) <code>[9,7,11,16]</code></li> <li> d) Aucune des propositions ci-dessus</li> </ul> <p>3. L'algorithme du tri par s\u00e9lection a une complexit\u00e9 :</p> <ul> <li> a) logarithmique</li> <li> b) lin\u00e9aire</li> <li> c) quadratique</li> <li> d) exponentielle</li> </ul> <p>4. Un programme de tri par insertion prend environ 1/10 seconde pour trier une liste de \\(1\\,000\\) \u00e9l\u00e9ments, combien de temps prendra-t-il environ pour trier une liste de \\(100\\,000\\) \u00e9l\u00e9ments ?</p> <ul> <li> a) 1 seconde</li> <li> b) 10 secondes</li> <li> c) 100 secondes</li> <li> d) 1000 secondes</li> </ul>"},{"location":"Evaluations/DS_Diviser_pour_regner_tris/#dapres-exercice-bac","title":"D'apr\u00e9s exercice BAC","text":"<p>Exo</p>"},{"location":"Evaluations/DS_Diviser_pour_regner_tris/#partie-a-generalites-cours","title":"Partie A : G\u00e9n\u00e9ralit\u00e9s - Cours","text":"<p>Question A.1</p> <p>Quel est l\u2019ordre de grandeur du co\u00fbt, en nombre de comparaisons, de l\u2019algorithme de tri fusion pour une liste de longueur \\(n\\) ?  </p> R\u00e9ponse <p>\\(O(nlog_2(n))\\) </p> <p>Question A.2</p> <p>Citer le nom d\u2019un autre algorithme de tri. Donner l\u2019ordre de grandeur de son co\u00fbt, en nombre de comparaisons, pour une liste de longueur . Comparer ce co\u00fbt \u00e0 celui du tri fusion.   </p> R\u00e9ponse <p>L\u2019algorithme de tri par insertion a une complexit\u00e9 en temps dans le pire des cas en \\(O(n^2)\\). L\u2019algorithme du tri par insertion est moins efficace que l\u2019algorithme de tri fusion.  </p>"},{"location":"Evaluations/DS_Diviser_pour_regner_tris/#partie-b-tri-fusion","title":"Partie B : Tri fusion","text":"<p>L\u2019algorithme de tri fusion utilise deux fonctions <code>moitie_gauche</code> et <code>moitie_droite</code> qui prennent en argument une liste L et renvoient respectivement : </p> <ul> <li>la sous-liste de L form\u00e9e des \u00e9l\u00e9ments d\u2019indice strictement inf\u00e9rieur \u00e0 <code>len(L)//2</code> ;  </li> <li>la sous-liste de L form\u00e9e des \u00e9l\u00e9ments d\u2019indice sup\u00e9rieur ou \u00e9gal \u00e0 <code>len(L)//2</code>.  </li> </ul> <p>On rappelle que la syntaxe a//b d\u00e9signe la division enti\u00e8re de a par b.  </p> <p>Par exemple, \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; L = [3, 5, 2, 7, 1, 9, 0]\n&gt;&gt;&gt; moitie_gauche(L)\n[3, 5, 2]\n&gt;&gt;&gt; moitie_droite(L)\n[7, 1, 9, 0]\n&gt;&gt;&gt; M = [4, 1, 11, 7]\n&gt;&gt;&gt; moitie_gauche(M)\n[4, 1]\n&gt;&gt;&gt; moitie_droite(M)\n[11, 7]\n</code></pre></p> <p>L\u2019algorithme utilise aussi une fonction <code>fusion</code> qui prend en argument deux listes tri\u00e9es <code>L1</code> et <code>L2</code> et renvoie une liste <code>L</code> tri\u00e9e et compos\u00e9e des \u00e9l\u00e9ments de <code>L1</code> et <code>L2</code>. On donne ci-dessous le code python d\u2019une fonction r\u00e9cursive <code>tri_fusion</code> qui prend en argument une liste <code>L</code> et renvoie une nouvelle liste tri\u00e9e form\u00e9e des \u00e9l\u00e9ments de <code>L</code>.</p> \ud83d\udc0d Script Python<pre><code>def tri_fusion(L):\n    n = len(L)\n    if n&lt;=1 :\n        return L\n    print(L)\n    mg = moitie_gauche(L)\n    md = moitie_droite(L)\n    L1 = tri_fusion(mg)\n    L2 = tri_fusion(md)\n    return fusion(L1, L2)\n</code></pre> <p>Question B.1</p> <p>Donner la liste des affichages produits par l\u2019appel suivant. \ud83d\udc0d Script Python<pre><code>tri_fusion([9, 5, 3, 1, 7, 6, 10, 3])\n</code></pre></p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>[9, 5, 3, 1, 7, 6, 10, 3]\n[9, 5, 3, 1]\n[9, 5]\n[3, 1]\n[7, 6, 10, 3]\n[7, 6]\n[10, 3]  \n</code></pre> <p>On s\u2019int\u00e9resse d\u00e9sormais \u00e0 diff\u00e9rentes fonctions appel\u00e9es par <code>tri_fusion</code>, \u00e0 savoir <code>moitie_gauche</code> et <code>fusion</code>.  </p> <p>Question B.2</p> <p>\u00c9crire une fonction <code>moitie_gauche(tab)</code> qui prend en argument un tableau <code>tab</code> et renvoie un nouveau tableau contenant la moiti\u00e9 gauche de <code>tab</code>.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def moitie_gauche(L):\n    n = len(L)\n    fin = n//2\n    tab = []\n    for i in range(fin):\n        tab.append(L[i])\n    return tab\n</code></pre> <p>Question B.3</p> <p>On donne ci-dessous une version incompl\u00e8te de la fonction <code>fusion</code>.  </p> <p>\ud83d\udc0d Script Python<pre><code>def fusion(L1, L2):\n    L = []\n    n1 = len(L1)\n    n2 = len(L2)\n    i1 = 0\n    i2 = 0\n    while .... :\n        if i1 &gt;= n1:\n            ...\n            ...\n        elif i2 &gt;= n2:\n            L.append(L1[i1])\n            i1 = i1 + 1\n        else:\n            e1 = L1[i1]\n            e2 = L2[i2]\n\n\n\n\n\n\n\n    return L\n</code></pre> Dans cette fonction, les entiers i1 et i2 repr\u00e9sentent respectivement les indices des \u00e9l\u00e9ments des listes L1 et L2 que l\u2019on souhaite comparer :  </p> <ul> <li>Si aucun des deux indices n\u2019est valide, la boucle while est interrompue ;  </li> <li>Si i1 n\u2019est plus un indice valide, on va ajouter \u00e0 L les \u00e9l\u00e9ments de L2 \u00e0 partir de l\u2019indice i2 ;  </li> <li>Si i2 n\u2019est plus un indice valide, on va ajouter \u00e0 L les \u00e9l\u00e9ments de L1 \u00e0 partir de l\u2019indice i1 ;  </li> <li>Sinon, le plus petit \u00e9l\u00e9ment non encore trait\u00e9 est ajout\u00e9 \u00e0 L et on d\u00e9cale l\u2019indice correspondant.  </li> </ul> <p>\u00c9crire sur la copie les instructions manquantes de la ligne 7, des lignes 9 \u00e0 10 puis des lignes de 17 \u00e0 22.. </p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def fusion(L1, L2):\n    L=[]\n    n1 = len(L1)\n    n2 = len(L2)\n    i1 = 0\n    i2 = 0\nwhile i1&lt;n1 or i2&lt;n2:\nif i1&gt;=n1:\nL.append(L2[i2])\ni2 = i2+1\nelif i2&gt;=n2:\n            L.append(L1[i1])\n            i1=i1+1\n        else :\n            e1 = L1[i1]\n            e2 = L2[i2]\nif e1 &gt; e2:\nL.append(e2)\ni2 = i2 + 1\nelse :\nL.append(e1)\ni1 = i1 + 1\nreturn L\n</code></pre>"},{"location":"Evaluations/DS_Diviser_pour_regner_tris/#partie-c-tri-par-insertion","title":"Partie C : Tri par insertion","text":"<p>Le tri par insertion est un algorithme efficace qui s'inspire de la fa\u00e7on dont on peut trier une poign\u00e9e de cartes. On commence avec une seule carte dans la main gauche (les autres cartes sont en tas sur la table) puis on pioche la carte suivante et on l'ins\u00e8re au bon endroit dans la main gauche.</p> <p>Question C.1</p> <p>Voici une impl\u00e9mentation en Python de cet algorithme. Recopier et compl\u00e9ter les lignes 6 et 7 surlign\u00e9es (uniquement celles-ci). \ud83d\udc0d Script Python<pre><code>def tri_insertion(liste):\n\"\"\" trie par insertion la liste en param\u00e8tre \"\"\"\n    for indice_courant in range(1,len(liste)):\n        element_a_inserer = liste[indice_courant]\n        i = indice_courant - 1\n        while i &gt;= 0 and liste[i] &gt; ................................ :\n            liste[...........] = liste[...........]\n            i = i - 1\n            liste[i + 1] = element_a_inserer\n</code></pre></p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def tri_insertion(liste):\nfor indice_courant in range(1, len(liste)):\n    element_a_inserer = liste[indice_courant]\n    i = indice_courant - 1\n    while i &gt;= 0 and liste[i] &gt; element_a_inserer:\n        liste[i+1] = liste[i]\n        i=i-1\n    liste[i + 1] = element_a_inserer\n</code></pre> <p>On a \u00e9crit dans la console les instructions suivantes : \ud83d\udc0d Script Python<pre><code>notes = [8, 7, 18, 14, 12, 9, 17, 3]\ntri_insertion(notes)\nprint(notes)\n</code></pre> On a obtenu l'affichage suivant :  \ud83d\udc0d Script Python<pre><code>[3, 7, 8, 9, 12, 14, 17, 18]\n</code></pre></p> <p>On s'interroge sur ce qui s\u2019est pass\u00e9 lors de l\u2019ex\u00e9cution de <code>tri_insertion(notes)</code>.  </p> <p>Question C.2</p> <p>Donner le contenu de la liste notes apr\u00e8s le premier passage dans la boucle <code>for</code>.</p> R\u00e9ponse <p><code>Passage 1 : [7, 8, 18, 14, 12, 9, 17, 3]</code></p> <p>Question C.3</p> <p>Donner le contenu de la liste notes apr\u00e8s le troisi\u00e8me passage dans la boucle <code>for</code>.</p> R\u00e9ponse <p><code>Passage 3 : [7, 8, 14, 18, 12, 9, 17, 3]</code></p> <p>Question C.4</p> <p>Donner le contenu de la liste notes \u00e9tape par \u00e9tape lors de l'\u00e9xecution de la fontion <code>tri_insertion</code>.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>Passage 1 : [7, 8, 18, 14, 12, 9, 17, 3]\nPassage 2 : [7, 8, 18, 14, 12, 9, 17, 3]\nPassage 3 : [7, 8, 14, 18, 12, 9, 17, 3]\nPassage 4 : [7, 8, 12, 14, 18, 9, 17, 3]\nPassage 5 : [7, 8, 9, 12, 14, 18, 17, 3]\nPassage 6 : [7, 8, 9, 12, 14, 17, 18, 3]\nPassage 7 : [3, 7, 8, 9, 12, 14, 17, 18]\n</code></pre>"},{"location":"Evaluations/DS_EP1/","title":"Th\u00e8me  - Epreuve pratique","text":"01              Epreuve Pratique"},{"location":"Evaluations/DS_EP1/#exercice-1","title":"Exercice 1","text":"<p>Exo</p> Enonc\u00e9Solution <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui trie ce tableau en place (c'est-\u00e0-dire que le tableau est modifi\u00e9) par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on parcours le tableau de gauche \u00e0 droite :  <ul> <li>on recherche le minimum du tableau entre cette position courante et la fin du tableau.</li> <li>on \u00e9change alors les 2 valeurs.</li> </ul> </li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [1, 52, 6, -9, 12]\n&gt;&gt;&gt; tri_selection(tab)\n&gt;&gt;&gt; tab\n[-9, 1, 6, 12, 52]\n&gt;&gt;&gt; tab_vide = []\n&gt;&gt;&gt; tri_selection(tab_vide)\n&gt;&gt;&gt; tab_vide\n[]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"Evaluations/DS_EP1/#exercice-2","title":"Exercice 2","text":"<p>Exo</p> Enonc\u00e9Solution <p>Chaque soir, les auditeurs d\u2019une radio votent en ligne pour leur artiste favori. Ces votes sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>Urne = ['Oreilles sales', 'Oreilles sales', 'Oreilles sales', 'Extra Vomit',\n'Lady Baba', 'Extra Vomit', 'Lady Baba', 'Extra Vomit', 'Lady Baba', 'Extra Vomit']\n</code></pre> <p>La fonction depouille doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction depouille et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo.</p> <p>Compl\u00e9ter les fonctions depouille et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['Oreilles sales', 'Oreilles sales', 'Oreilles sales',\n    'Extra Vomit', 'Lady Baba', 'Extra Vomit', 'Lady Baba',\n    'Extra Vomit', 'Lady Baba', 'Extra Vomit']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = ...\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> \ud83d\udc0d Script Python<pre><code>def depouille(urne):\nresultat = {}\nfor bulletin in urne:\nif bulletin in resultat:\nresultat[bulletin] = resultat[bulletin] + 1\nelse:\nresultat[bulletin] = 1\nreturn resultat\n\ndef vainqueur(election):\n    nmax = 0\n    for candidat in election:\nif election[candidat] &gt; nmax:\nnmax = election[candidat]\nliste_finale = [nom for nom in election if election[nom] == nmax]\nreturn liste_finale\n</code></pre>"},{"location":"Evaluations/DS_EP2/","title":"Th\u00e8me  - Epreuve pratique","text":"02              Epreuve Pratique"},{"location":"Evaluations/DS_EP2/#exercice-1","title":"Exercice 1","text":"<p>Exo</p> Enonc\u00e9Solution 1Solution 2 : avec la m\u00e9thode <code>items</code> <p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}\n</code></pre> <p>\u00c9crire une fonction <code>top_like</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire likes non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;  </li> <li>Renvoie un tuple dont :  <ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ; en cas d'\u00e9galit\u00e9 sur plusieurs cl\u00e9s, on choisira la plus petite suivant l'ordre alphab\u00e9tique  </li> <li>La seconde valeur est la valeur maximale pr\u00e9sente dans le dictionnaire.  </li> </ul> </li> </ul> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; top_like({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; top_like({'Alan': 222, 'Ada': 201, 'Eve': 222, 'Tim': 50})\n('Alan', 222)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def top_like(likes):\n    top_pseudo = None\n    top_nb_likes = 0\n    for pseudo in likes:\n        nb_likes = likes[pseudo]\n        if nb_likes &gt; top_nb_likes or nb_likes == top_nb_likes and pseudo &lt; top_pseudo:\n            top_pseudo = pseudo\n            top_nb_likes = nb_likes\n    return top_pseudo, top_nb_likes\n</code></pre> \ud83d\udc0d Script Python<pre><code>    def top_like(likes):\n        top_pseudo = None\n        top_nb_likes = 0\n        for pseudo, nb_likes in likes.items():\n            if nb_likes &gt; top_nb_likes or nb_likes == top_nb_likes and pseudo &lt; top_pseudo:\n                top_pseudo = pseudo\n                top_nb_likes = nb_likes\n        return top_pseudo, top_nb_likes\n</code></pre>"},{"location":"Evaluations/DS_EP2/#exercice-2","title":"Exercice 2","text":"<p>Exo</p> Enonc\u00e9Solution <p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = ...\n    fin = ...\n    while debut &lt;= fin:\n        milieu = ...\n        if x == tab[milieu]:\n            return ...\n        if x &gt; ...:\n            debut = ...\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\ndebut = 0\nfin = len(tab) - 1\nwhile debut &lt;= fin:\nmilieu = (debut + fin) // 2\nif x == tab[milieu]:\nreturn True\nif x &gt; tab[milieu]:\ndebut = milieu + 1\nelse:\nfin = milieu - 1\nreturn False\n</code></pre>"},{"location":"Evaluations/DS_EP3/","title":"Th\u00e8me  - Epreuve pratique","text":"03              Epreuve Pratique"},{"location":"Evaluations/DS_EP3/#exercice-1","title":"Exercice 1","text":"<p>Exo</p> <p>L\u2019occurrence d\u2019un caract\u00e8re dans un phrase est le nombre de fois o\u00f9 ce caract\u00e8re est pr\u00e9sent.</p> <p>Exemples :</p> <ul> <li>l\u2019occurrence du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>\u00c9crire une fonction <code>occurence_lettres</code> prenant comme param\u00e8tre une variable <code>phrase</code> de type <code>str</code>. Cette fonction doit renvoyer un dictionnaire de type constitu\u00e9 des occurrences des caract\u00e8res pr\u00e9sents dans la phrase.</p> <p>Exo</p> <p>La fonction <code>fusion</code> prend deux listes <code>L1</code>, <code>L2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>L12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction est</p> \ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        L12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return L12\n</code></pre>"},{"location":"Evaluations/DS_EP4/","title":"Th\u00e8me  - Epreuve pratique","text":"04              Epreuve Pratique"},{"location":"Evaluations/DS_EP4/#exercice-1","title":"Exercice 1","text":"<p>Exo</p> <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre et <code>tab</code> un tableau de nombres, et qui renvoie le tableau des indices de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et le tableau vide <code>[]</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(3, [3, 2, 1, 3, 2, 1])\n[0, 3]\n&gt;&gt;&gt; recherche(4, [1, 2, 3])\n[]\n</code></pre></p>"},{"location":"Evaluations/DS_EP4/#exercice-2","title":"Exercice 2","text":"<p>Exo</p> <p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;  </li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction moyenne qui prend en param\u00e8tre le nom d\u2019un de ces \u00e9l\u00e8ves et lui renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ... in notes...:\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"Evaluations/DS_EP5/","title":"Th\u00e8me  - Epreuve pratique","text":"05              Epreuve Pratique"},{"location":"Evaluations/DS_EP5/#exercice-1","title":"Exercice 1","text":"<p>Exo</p> <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code>   (type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide et affiche 'erreur' si le tableau est vide.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n'erreur'\n</code></pre></p>"},{"location":"Evaluations/DS_EP5/#exercice-2","title":"Exercice 2","text":"<p>Exo</p> <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (type <code>list</code> dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri,le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> Zone de 0Zone non tri\u00e9eZone de 1 <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;  </li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.  </li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = ...\n    j = ...\n    while i != j :\n        if tab[i]== 0:\n            i = ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre>"},{"location":"Evaluations/DS_EP6/","title":"Th\u00e8me  - Epreuve pratique","text":"06              Epreuve Pratique"},{"location":"Evaluations/DS_EP6/#exercice-1","title":"Exercice 1","text":"<p>Exo</p> <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p>"},{"location":"Evaluations/DS_EP6/#exercice-2","title":"Exercice 2","text":"<p>Exo</p> <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction ins\u00e8re la valeur <code>a</code> dans le tableau et renvoie le nouveau tableau. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes python.</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= ...:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre>"},{"location":"Evaluations/DS_EP7/","title":"Th\u00e8me  - Epreuve pratique","text":"07              Epreuve Pratique"},{"location":"Evaluations/DS_EP7/#exercice-1","title":"Exercice 1","text":"<p>Exo</p> <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p>"},{"location":"Evaluations/DS_EP7/#exercice-2","title":"Exercice 2","text":"<p>Exo</p> <p>La fonction <code>recherche</code> prend en param\u00e8tres deux chaines de caract\u00e8res <code>gene</code> et <code>seq_adn</code> et renvoie <code>True</code> si on retrouve <code>gene</code> dans <code>seq_adn</code> et <code>False</code> sinon. Compl\u00e9ter le code Python ci-dessous pour qu\u2019il impl\u00e9mente la fonction <code>recherche</code>.  </p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(\"AATC\", \"GTACAAATCTTGCC\")\nTrue\n&gt;&gt;&gt; recherche(\"AGTC\", \"GTACAAATCTTGCC\")\nFalse\n</code></pre>"},{"location":"Evaluations/DS_Pile_File_Routage/","title":"Devoir 3 :   Pile-File et Protocole de Routage","text":"<p>Pile - File</p> <p>On rappelle qu\u2019une pile est une structure de donn\u00e9es abstraite fond\u00e9e sur le principe \u00abdernier arriv\u00e9, premier sorti\u00bb :  </p> <p></p> <p>On munit la structure de donn\u00e9es Pile de quatre fonctions primitives d\u00e9finies dans le tableau ci-dessous :</p> <p>Structure de donn\u00e9es abstraite : Pile</p> <p>Op\u00e9rations :</p> <ul> <li><code>creer_pile_vide</code> :  \\(\\varnothing\\) \\(\\rightarrow\\) Pile<ul> <li><code>creer_pile_vide()</code> renvoie une file vide</li> </ul> </li> <li><code>est_vide</code> : Pile \\(\\rightarrow\\) Bool\u00e9en<ul> <li><code>est_vide(pile)</code> renvoie True si pile est vide, False sinon</li> </ul> </li> <li><code>empiler</code> : Pile, \u00c9l\u00e9ment \\(\\rightarrow\\) Rien<ul> <li><code>empiler(pile, element)</code> ajoute element au sommet de la pile</li> </ul> </li> <li><code>depiler</code> : Pile \\(\\rightarrow\\) \u00c9l\u00e9ment<ul> <li><code>depiler(pile)</code> renvoie l\u2019\u00e9l\u00e9ment eau sommet de la pile en le retirant de la pile</li> </ul> </li> </ul> <ol> <li> <p>On suppose dans cette question que le contenu de la pile P est le suivant  (les \u00e9l\u00e8ments \u00e9tant empil\u00e9s par le haut) :  </p> <p> 4258 </p> <p>Quel serait le contenu de la pile Q apr\u00e9s l'ex\u00e9cution de la suite d'instruction suivante ?</p> \ud83d\udc0d Script Python<pre><code>Q=creer_pile_vide()\nwhile not est_vide(P):\n    empiler(Q, depiler(P))\n</code></pre> </li> <li> <ol> <li> <p>On appelle hauteur d\u2019une pile le nombre d\u2019\u00e9l\u00e9ments qu\u2019elle contient. La fonction <code>hauteur_pile</code> prend en param\u00e8tre une pile P et renvoie sa hauteur.  Apr\u00e8s appel de cette fonction, la pile P doit avoir retrouv\u00e9 son \u00e9tat d\u2019origine.</p> <p>Exemple : si P est la pile de la question 1 : <code>hauteur_pile(P)</code> = 4.</p> <p>Recopier et compl\u00e9ter sur votre copie le programme Python suivant impl\u00e9mentant la fonction <code>hauteur_pile</code> en rempla\u00e7ant les ??? par les bonnes instructions.</p> \ud83d\udc0d Script Python<pre><code>def hauteur_pile(P):\n    Q = creer_pile_vide ()\n    n = 0\n    while not (est_vide (P)):\n        ???\n        x = depiler(P)\n        empiler(Q,x)\n    while not (est_vide(Q)):\n        ???\n        empiler(P,x)\n    return ???\n</code></pre> </li> <li> <p>Cr\u00e9er une fonction <code>max_pile</code> ayant pour param\u00e8tre une pile P et un entier i. Cette fonction renvoie la position j de l\u2019\u00e9l\u00e9ment maximum de la pile P.</p> <p>Apr\u00e8s appel de cette fonction, la pile P devra avoir retrouv\u00e9 son \u00e9tat d\u2019origine.  La position du sommet de la pile est 1.  </p> <p>Exemple :  si P est la pile de la question 1 : <code>max_pile(P,2)</code> = 1.</p> </li> </ol> </li> <li> <p>Cr\u00e9er une fonction <code>retourner</code> ayant pour param\u00e8tres une pile P et un entier j. Cette fonction inverse l\u2019ordre des j derniers \u00e9l\u00e9ments empil\u00e9s et ne renvoie rien. On pourra utiliser deux piles auxiliaires.  </p> <p>Exemple : si P est la pile de la question 1(a), apr\u00e8s l\u2019appel de <code>retourner(P, 3)</code>, l\u2019\u00e9tat de la pile P sera :</p> <p> 5248 </p> </li> <li> <p>L\u2019objectif de cette question est de trier une pile de cr\u00eapes. On mod\u00e9lise une pile de cr\u00eapes par une pile d\u2019entiers repr\u00e9sentant le diam\u00e8tre de chaque cr\u00eape. On souhaite r\u00e9ordonner les cr\u00eapes de la plus grande (plac\u00e9e en bas de la pile) \u00e0 la plus petite (plac\u00e9e en haut de la pile).     On dispose uniquement d\u2019une spatule que l\u2019on peut ins\u00e9rer dans la pile de cr\u00eapes de fa\u00e7on \u00e0 retourner l\u2019ensemble des cr\u00eapes qui lui sont au-dessus.     Le principe est le suivant :  </p> <ul> <li>On recherche la plus grande cr\u00eape.  </li> <li>On retourne la pile \u00e0 partir de cette cr\u00eape de fa\u00e7on \u00e0 mettre cette plus grande cr\u00eape tout en haut de la pile.  </li> <li>On retourne l\u2019ensemble de la pile de fa\u00e7on \u00e0 ce que cette plus grande cr\u00eape se retrouve tout en bas.  </li> <li>La plus grande cr\u00eape \u00e9tant \u00e0 sa place, on recommence le principe avec le reste de la pile.</li> </ul> <p>Exemple : </p> <p>Cr\u00e9er la fonction <code>tri_crepes</code> ayant pour param\u00e8tre une pile P. Cette fonction trie la pile P selon la m\u00e9thode du tri cr\u00eapes et ne renvoie rien.  </p> <p>On utilisera les fonctions cr\u00e9\u00e9es dans les questions pr\u00e9c\u00e9dentes.   </p> <p>Exemple : Si la pile P est   7141258 ,apr\u00e8s l\u2019appel de <code>tri_crepes(P)</code>, la pile P devient   5781214.</p> </li> </ol> <p>Routage</p> <p>On consid\u00e8re le r\u00e9seau suivant compos\u00e9 de sept routeurs.</p> <p></p> <p>On donne les tables de routage pr\u00e9alablement construites ci-dessous avec le protocole RIP (Routing Information Protocole). Le protocole RIP permet de construire les tables de routage des diff\u00e9rents routeurs, en indiquant pour chaque routeur, la distance, en nombr de sauts, qui le s\u00e9pare d'un autre routeur.  </p> <p>Voir ANNEXE</p> <ol> <li> <p>Le routeur R2 doit envoyer un paquet de donn\u00e9es au routeur R7 qui accuse r\u00e9ception.     D\u00e9terminer le chemin parcouru par le paquet de donn\u00e9es ainsi que celui parcouru par l'\u00e9accus\u00e9 de r\u00e9ception.  </p> </li> <li> <p>a.  Indiquer la faiblesse que repr\u00e9sente ce r\u00e9seau en cas de panne du routeur R4.     b. Proposer une solution pour y rem\u00e9dier.  </p> </li> <li> <p>Dans cette question uniquement, on d\u00e9cide de rajouter un routeur R8 qui sera reli\u00e9 aux routeurs R2 et R6.     a. Donner la table de routage pour R8 qui minimise le nombre de saut.     b. Donner une nouvelle table de routage pour R2.  </p> </li> <li> <p>Pour la suite de l'exercice on consid\u00e8re le r\u00e9seau sans le routeur R8.     Il a \u00e9t\u00e9 d\u00e9cid\u00e9 de modifier les r\u00e8gles de routage de ce r\u00e9seau en appliquant le protocole de routage OSPF qui pren en compte la bande passante.     Ce protocole attribue un co\u00fbt \u00e0 chaque liaison afin de privil\u00e9gier le choix de certaines routes plus rapide. Plus le co\u00fbt est faible, plus le lien est int\u00e9ressant.     Le co\u00fbt d'une liaison est calcul\u00e9 par la formule : \\(co\u00fbt=\\dfrac{10^8\\text{ bit/s}}{\\text{ bande passante du lien en bit/s}}\\)</p> <p>Voici le tableau r\u00e9f\u00e9ren\u00e7ant les co\u00fbts des liaisons en fonction du type de liaison entre deux routeurs :  </p> Type de laiison bande passante Co\u00fbt FastEthernet (FE) ? 1 Ethernet (E) 10 Mb/s ? (E1) 2,048 Mb/s 49 (T1) 1.544 Mb/s 65 <p>On rappelle que 1 Mb/s = 1 000 kb/s = \\(10^6\\) bit/s.</p> <ol> <li>D\u00e9terminer la bande passante di FastEthernet (FE) et justifier que le co\u00fbt du r\u00e9seau de type Ethernet (E) est de 10.  </li> <li>On pr\u00e9cise sur le graphe ci-dessous les types de liaison dans notre r\u00e9seau :  </li> </ol> <p> </p> <p>Le co\u00fbt d'un chemin est la somme des co\u00fbts des liaisons rencontr\u00e9s. Donner en justifiant le chemin le moins co\u00fbteux pour relier R2 \u00e0 R5. Pr\u00e9ciser le co\u00fbt.</p> </li> </ol> <p>ANNEXE :  </p> <p></p>"},{"location":"Evaluations/POO_Devoir/","title":"P.O.O : Devoir n\u00b02","text":"Th\u00e8me 1 - Structure de donn\u00e9es              Eval.              P.O.O"},{"location":"Evaluations/POO_Devoir/#dapres-2021-centres-etrangers-j1-ex-1","title":"D'apr\u00e8s 2021, Centres \u00e9trangers, J1, Ex. 1","text":"<p>Dans cet exercice, on \u00e9tudie une m\u00e9thode de chiffrement de chaines de caract\u00e8res alphab\u00e9tiques. Pour des raisons historiques, cette m\u00e9thode de chiffrement est appel\u00e9e \u00ab\u00a0code de C\u00e9sar\u00a0\u00bb. On consid\u00e8re que les messages ne contiennent que les lettres capitales de l\u2019alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" et la m\u00e9thode de chiffrement utilise un nombre entier fix\u00e9 appel\u00e9 la cl\u00e9 de chiffrement.</p> <p>1. Soit la classe <code>CodeCesar</code> d\u00e9finie ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>class CodeCesar:\n    def __init__(self, cle):\n        self.cle = cle\n\n    def decale(self, lettre):\n        indice_1 = indice_capitale(lettre)\n        indice_2 = indice_1 + self.cle\n        if indice_2 &gt;= 26:\n            indice_2 = indice_2 - 26\n        if indice_2 &lt; 0:\n            indice_2 = indice_2 + 26\n        nouvelle_lettre = lettre_capitale(indice_2)\n        return nouvelle_lettre\n</code></pre> On dispose aussi des fonctions <code>indice_capitale(indice)</code> et <code>lettre_capitale(lettre)</code> qui renvoient la lettre majuscule correspondant \u00e0 un indice donn\u00e9 et l'indice (la position d'une lettre) dans l'alphabet latin usuel.</p> <p>Passer d'un indice \u00e0 une lettre</p> <p>Les fonctions <code>indice_lettre(indice)</code> et <code>lettre_indice (lettre)</code> peuvent \u00eatre d\u00e9finies par</p> \ud83d\udc0d Script Python<pre><code>def indice_capitale(indice: int) -&gt; str:\n    assert 0 &lt;= indice &lt; 26, \"L'indice doit \u00eatre entre 0 et 25\"\n    return chr(ord('A') + indice)\n\ndef lettre_capitale(lettre: str) -&gt; int:\n    assert lettre in [chr(i + ord('A')) for i in range(26)], \"La lettre doit \u00eatre dans l'alphabet latin capital\"\n    return ord(lettre) - ord('A')\n</code></pre> <p>Repr\u00e9senter le r\u00e9sultat d\u2019ex\u00e9cution du code Python suivant :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; code = CodeCesar(3)\n&gt;&gt;&gt; code.decale('A')\n...\n&gt;&gt;&gt; code.decale('X')\n...\n</code></pre> <p>2. La m\u00e9thode de chiffrement du \u00ab\u00a0code de C\u00e9sar\u00a0\u00bb consiste \u00e0 d\u00e9caler les lettres du message dans l\u2019alphabet d'un nombre de rangs fix\u00e9 par la cl\u00e9. Par exemple, avec la cl\u00e9 3, toutes les lettres sont d\u00e9cal\u00e9es de 3 rangs vers la droite : le A devient le D, le B devient le E, etc.</p> <p>Ajouter une m\u00e9thode <code>chiffre(self, texte)</code> dans la classe <code>CodeCesar</code> d\u00e9finie \u00e0 la question pr\u00e9c\u00e9dente, qui re\u00e7oit en param\u00e8tre une cha\u00eene de caract\u00e8res (le message \u00e0 chiffrer) et qui renvoie une cha\u00eene de caract\u00e8res (le message chiffr\u00e9).</p> <p>Cette m\u00e9thode <code>chiffre(self, texte)</code> doit chiffrer la cha\u00eene <code>texte</code> avec la cl\u00e9 de l'objet de la classe <code>CodeCesar</code> qui a \u00e9t\u00e9 instanci\u00e9e.</p> <p>Exemple : \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; code = CodeCesar(3)\n&gt;&gt;&gt; code.chiffre(\"NSI\")\n'QVL'\n</code></pre></p> <p>3. \u00c9crire une fonction qui : * prend en argument la clef de chiffrement et le message \u00e0 chiffrer ; * instancie un objet de la classe <code>CodeCesar</code> ; * renvoie le texte chiffr\u00e9.</p> <p>4. On ajoute la m\u00e9thode <code>transforme(texte)</code> \u00e0 la classe <code>CodeCesar</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>def transforme(self, texte):\n    self.cle = -self.cle\n    message = self.cryptage(texte)\n    self.cle = -self.cle\n    return message\n</code></pre> On ex\u00e9cute la ligne suivante dans une console <code>CodeCesar(10).transforme(\"PSX\")</code></p> <p>Que va-t-il s'afficher ? Expliquer votre r\u00e9ponse.</p>"},{"location":"Evaluations/POO_Devoir/#dapres-2022-centres-etrangers-j2-ex-4","title":"D'apr\u00e8s 2022, Centres \u00e9trangers, J2, Ex. 4","text":"<p>Simon souhaite cr\u00e9er en Python le jeu de cartes \u00ab la bataille \u00bb pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu.</p> <p>R\u00e8gles du jeu de la bataille</p> <p>Pr\u00e9paration</p> <ul> <li>Distribuer toutes les cartes aux deux joueurs.</li> <li>Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cach\u00e9e devant eux.</li> </ul> <p>D\u00e9roulement</p> <ul> <li>\u00c0 chaque tour, chaque joueur d\u00e9voile la carte du haut de son tas.</li> <li>Le joueur qui pr\u00e9sente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.</li> <li>Les valeurs des cartes sont : dans l-ordre de la plus forte \u00e0 la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible)</li> </ul> <p>Si deux cartes sont de m\u00eame valeur, il y a \u00ab bataille \u00bb.</p> <ul> <li>Chaque joueur pose alors une carte face cach\u00e9e, suivie d'une carte face visible sur la carte d\u00e9voil\u00e9e pr\u00e9c\u00e9demment.</li> <li>On recommence l'op\u00e9ration s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.</li> </ul> <p>Lorsque l'un des joueurs poss\u00e8de toutes les cartes du jeu, la partie s'arr\u00eate et ce dernier gagne.</p> <p>Pour cela Simon cr\u00e9e une classe Python <code>Carte</code>. Chaque instance de la classe a deux attributs : un pour sa <code>valeur</code> et un pour sa <code>couleur</code>. Il donne au valet la valeur \\(11\\), \u00e0 la dame la valeur \\(12\\), au roi la valeur \\(13\\) et \u00e0 l'as la valeur \\(14\\). La couleur est une chaine de caract\u00e8res : <code>\"trefle\"</code>, <code>\"carreau\",</code> <code>\"coeur\"</code> ou <code>\"pique\"</code>.</p> <p>1. Simon a \u00e9crit la classe Python <code>Carte</code> suivante, ayant deux attributs <code>valeur</code> et <code>couleur</code>, et dont le constructeur prend deux arguments : <code>val</code> et <code>coul</code>.</p> <p>1.a. Recopier et compl\u00e9ter les <code>...</code> des lignes 3 et 4 ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        ... .valeur = ...\n        ... = coul\n</code></pre> <p>1.b. Parmi les propositions ci-dessous quelle instruction permet de cr\u00e9er l'objet \u00ab 7 de c\u0153ur \u00bb sous le nom <code>c7</code> ?</p> <ul> <li><code>c7.__init__(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(7, \"coeur\")</code></li> <li><code>from Carte import 7, \"coeur\"</code></li> </ul> <p>2. On souhaite cr\u00e9er le jeu de cartes. Pour cela, on \u00e9crit une fonction <code>initialiser</code> :</p> <ul> <li>sans param\u00e8tre</li> <li>qui renvoie une liste de 52 objets de la classe <code>Carte</code> repr\u00e9sentant les 52 cartes du jeu.</li> </ul> <p>Voici une proposition de code. Recopier et compl\u00e9ter les lignes suivantes pour que la fonction r\u00e9ponde \u00e0 la demande :</p> \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(...):\n        carte_cree = ...\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> <p>3. On rappelle que dans une partie de bataille, les deux joueurs tirent chacun une carte du dessus de leur tas, et celui qui tire la carte la plus forte remporte les deux cartes et les place en dessous de son tas.</p> <p>Parmi les structures lin\u00e9aires de donn\u00e9es suivantes : Tableau, File, Pile, quelle est celle qui mod\u00e9lise le mieux un tas de cartes dans ce jeu de la bataille ? Justifier votre choix.</p> <p>4. \u00c9crire une fonction <code>comparer</code> qui prend en param\u00e8tres deux objets de la classe Carte : <code>carte_1, carte_2</code>. Cette fonction renvoie :</p> <ul> <li>\\(0\\) si la valeur des deux cartes est identique ;</li> <li>\\(1\\) si la carte <code>carte_1</code> a une valeur strictement plus forte que celle de <code>carte_2</code> ;</li> <li>\\(-1\\) si la carte <code>carte_2</code> a une valeur strictement plus forte que celle de <code>carte_1</code>.</li> </ul>"},{"location":"Evaluations/POO_Devoir_Correction/","title":"P.O.O : Devoir n\u00b02","text":"Th\u00e8me 1 - Structure de donn\u00e9es              Eval.              P.O.O"},{"location":"Evaluations/POO_Devoir_Correction/#dapres-2021-centres-etrangers-j1-ex-1","title":"D'apr\u00e8s 2021, Centres \u00e9trangers, J1, Ex. 1","text":"<p>Dans cet exercice, on \u00e9tudie une m\u00e9thode de chiffrement de chaines de caract\u00e8res alphab\u00e9tiques. Pour des raisons historiques, cette m\u00e9thode de chiffrement est appel\u00e9e \u00ab\u00a0code de C\u00e9sar\u00a0\u00bb. On consid\u00e8re que les messages ne contiennent que les lettres capitales de l\u2019alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" et la m\u00e9thode de chiffrement utilise un nombre entier fix\u00e9 appel\u00e9 la cl\u00e9 de chiffrement.</p> <p>1. Soit la classe <code>CodeCesar</code> d\u00e9finie ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>class CodeCesar:\n    def __init__(self, cle):\n        self.cle = cle\n\n    def decale(self, lettre):\n        indice_1 = indice_capitale(lettre)\n        indice_2 = indice_1 + self.cle\n        if indice_2 &gt;= 26:\n            indice_2 = indice_2 - 26\n        if indice_2 &lt; 0:\n            indice_2 = indice_2 + 26\n        nouvelle_lettre = lettre_capitale(indice_2)\n        return nouvelle_lettre\n</code></pre> On dispose aussi des fonctions <code>indice_capitale(indice)</code> et <code>lettre_capitale(lettre)</code> qui renvoient la lettre majuscule correspondant \u00e0 un indice donn\u00e9 et l'indice (la position d'une lettre) dans l'alphabet latin usuel.</p> <p>Passer d'un indice \u00e0 une lettre</p> <p>Les fonctions <code>indice_lettre(indice)</code> et <code>lettre_indice (lettre)</code> peuvent \u00eatre d\u00e9finies par</p> \ud83d\udc0d Script Python<pre><code>def lettre_capitale(indice: int) -&gt; str:\n    assert 0 &lt;= indice &lt; 26, \"L'indice doit \u00eatre entre 0 et 25\"\n    return chr(ord('A') + indice)\n\ndef indice_capitale(lettre: str) -&gt; int:\n    assert lettre in [chr(i + ord('A')) for i in range(26)], \"La lettre doit \u00eatre dans l'alphabet latin capital\"\n    return ord(lettre) - ord('A')\n</code></pre> <p>Repr\u00e9senter le r\u00e9sultat d\u2019ex\u00e9cution du code Python suivant :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; code = CodeCesar(3)\n&gt;&gt;&gt; code.decale('A')\n...\n&gt;&gt;&gt; code.decale('X')\n...\n</code></pre> R\u00e9ponse <p>La premi\u00e8re instruction permet d'initialiser un objet <code>CodeCesar</code> correspondant \u00e0 un d\u00e9calage de 3 caract\u00e8res. Ainsi <code>A</code>, en position 0 devient la lettre en position 3, c'est \u00e0 dire <code>D</code>. Pour le <code>X</code>, si on applique le m\u00eame d\u00e9calage, on obtiendrai la lettre en position 23+3 = 26, ce qui ferait \u00e9chouer la fonction <code>lettre_indice()</code>. On soustrait donc 26 pour trouver <code>A</code>.</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; code = CodeCesar(3)\n&gt;&gt;&gt; code.decale('A')\nD\n&gt;&gt;&gt; code.decale('X')\nA\n</code></pre> <p>2. La m\u00e9thode de chiffrement du \u00ab\u00a0code de C\u00e9sar\u00a0\u00bb consiste \u00e0 d\u00e9caler les lettres du message dans l\u2019alphabet d'un nombre de rangs fix\u00e9 par la cl\u00e9. Par exemple, avec la cl\u00e9 3, toutes les lettres sont d\u00e9cal\u00e9es de 3 rangs vers la droite : le A devient le D, le B devient le E, etc.</p> <p>Ajouter une m\u00e9thode <code>chiffre(self, texte)</code> dans la classe <code>CodeCesar</code> d\u00e9finie \u00e0 la question pr\u00e9c\u00e9dente, qui re\u00e7oit en param\u00e8tre une cha\u00eene de caract\u00e8res (le message \u00e0 chiffrer) et qui renvoie une cha\u00eene de caract\u00e8res (le message chiffr\u00e9).</p> <p>Cette m\u00e9thode <code>chiffre(self, texte)</code> doit chiffrer la cha\u00eene <code>texte</code> avec la cl\u00e9 de l'objet de la classe <code>CodeCesar</code> qui a \u00e9t\u00e9 instanci\u00e9e.</p> <p>Exemple : \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; code = CodeCesar(3)\n&gt;&gt;&gt; code.chiffre(\"NSI\")\n'QVL'\n</code></pre></p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def chiffre(self, texte):\n    chaine = \"\"\n    for caractere in texte:\n        chaine = chaine + self.decale(caractere)\n    return chaine\n</code></pre> <p>3. \u00c9crire une fonction qui : * prend en argument la clef de chiffrement et le message \u00e0 chiffrer ; * instancie un objet de la classe <code>CodeCesar</code> ; * renvoie le texte chiffr\u00e9.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def chiffre_texte(clef, texte):\n    return CodeCesar(clef).chiffre(texte)\n</code></pre> <p>4. On ajoute la m\u00e9thode <code>transforme(texte)</code> \u00e0 la classe <code>CodeCesar</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>def transforme(self, texte):\n    self.cle = -self.cle\n    message = self.cryptage(texte)\n    self.cle = -self.cle\n    return message\n</code></pre> On ex\u00e9cute la ligne suivante dans une console <code>CodeCesar(10).transforme(\"PSX\")</code></p> <p>Que va-t-il s'afficher ? Expliquer votre r\u00e9ponse.</p> R\u00e9ponse <p>Le message <code>'FIN'</code> va s'afficher sur la console.</p> <p>La m\u00e9thode propos\u00e9e permet de d\u00e9chiffrer le message en appliquant la transformation oppos\u00e9e.</p>"},{"location":"Evaluations/POO_Devoir_Correction/#dapres-2022-centres-etrangers-j2-ex-4","title":"D'apr\u00e8s 2022, Centres \u00e9trangers, J2, Ex. 4","text":"<p>Simon souhaite cr\u00e9er en Python le jeu de cartes \u00ab la bataille \u00bb pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu.</p> <p>R\u00e8gles du jeu de la bataille</p> <p>Pr\u00e9paration</p> <ul> <li>Distribuer toutes les cartes aux deux joueurs.</li> <li>Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cach\u00e9e devant eux.</li> </ul> <p>D\u00e9roulement</p> <ul> <li>\u00c0 chaque tour, chaque joueur d\u00e9voile la carte du haut de son tas.</li> <li>Le joueur qui pr\u00e9sente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.</li> <li>Les valeurs des cartes sont : dans l-ordre de la plus forte \u00e0 la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible)</li> </ul> <p>Si deux cartes sont de m\u00eame valeur, il y a \u00ab bataille \u00bb.</p> <ul> <li>Chaque joueur pose alors une carte face cach\u00e9e, suivie d'une carte face visible sur la carte d\u00e9voil\u00e9e pr\u00e9c\u00e9demment.</li> <li>On recommence l'op\u00e9ration s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.</li> </ul> <p>Lorsque l'un des joueurs poss\u00e8de toutes les cartes du jeu, la partie s'arr\u00eate et ce dernier gagne.</p> <p>Pour cela Simon cr\u00e9e une classe Python <code>Carte</code>. Chaque instance de la classe a deux attributs : un pour sa <code>valeur</code> et un pour sa <code>couleur</code>. Il donne au valet la valeur \\(11\\), \u00e0 la dame la valeur \\(12\\), au roi la valeur \\(13\\) et \u00e0 l'as la valeur \\(14\\). La couleur est une chaine de caract\u00e8res : <code>\"trefle\"</code>, <code>\"carreau\",</code> <code>\"coeur\"</code> ou <code>\"pique\"</code>.</p> <p>1. Simon a \u00e9crit la classe Python <code>Carte</code> suivante, ayant deux attributs <code>valeur</code> et <code>couleur</code>, et dont le constructeur prend deux arguments : <code>val</code> et <code>coul</code>.</p> <p>1.a. Recopier et compl\u00e9ter les <code>...</code> des lignes 3 et 4 ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        ... .valeur = ...\n        ... = coul\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        self.valeur = val\n        self.couleur = coul\n</code></pre> <p>1.b. Parmi les propositions ci-dessous quelle instruction permet de cr\u00e9er l'objet \u00ab 7 de c\u0153ur \u00bb sous le nom <code>c7</code> ?</p> <ul> <li><code>c7.__init__(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(7, \"coeur\")</code></li> <li><code>from Carte import 7, \"coeur\"</code></li> </ul> R\u00e9ponse <p><code>c7 = Carte(7, \"coeur\")</code> cr\u00e9e une instance de la classe <code>Carte</code> de valeur \\(7\\) et de couleur <code>\"coeur\"</code>, puis l'affecte \u00e0 la variable <code>c7</code>.</p> <p>2. On souhaite cr\u00e9er le jeu de cartes. Pour cela, on \u00e9crit une fonction <code>initialiser</code> :</p> <ul> <li>sans param\u00e8tre</li> <li>qui renvoie une liste de 52 objets de la classe <code>Carte</code> repr\u00e9sentant les 52 cartes du jeu.</li> </ul> <p>Voici une proposition de code. Recopier et compl\u00e9ter les lignes suivantes pour que la fonction r\u00e9ponde \u00e0 la demande :</p> \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(...):\n        carte_cree = ...\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(2, 15):\n        carte_cree = Carte(val, coul)\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> <p>3. On rappelle que dans une partie de bataille, les deux joueurs tirent chacun une carte du dessus de leur tas, et celui qui tire la carte la plus forte remporte les deux cartes et les place en dessous de son tas.</p> <p>Parmi les structures lin\u00e9aires de donn\u00e9es suivantes : Tableau, File, Pile, quelle est celle qui mod\u00e9lise le mieux un tas de cartes dans ce jeu de la bataille ? Justifier votre choix.</p> R\u00e9ponse <p>On a besoin d'une structure lin\u00e9aire pour</p> <ul> <li>extraire une carte \u00e0 une seule extr\u00e9mit\u00e9 ;</li> <li>ajouter une carte \u00e0 l'autre extr\u00e9mit\u00e9 (elle sera donc loin d'\u00eatre pioch\u00e9e).</li> </ul> <p>FILO : First In Last Out ; premier entr\u00e9, dernier sorti, pour la File.</p> <p>C'est la File qui r\u00e9pond le mieux \u00e0 la mod\u00e9lisation souhait\u00e9e.</p> <p>4. \u00c9crire une fonction <code>comparer</code> qui prend en param\u00e8tres deux objets de la classe Carte : <code>carte_1, carte_2</code>. Cette fonction renvoie :</p> <ul> <li>\\(0\\) si la valeur des deux cartes est identique ;</li> <li>\\(1\\) si la carte <code>carte_1</code> a une valeur strictement plus forte que celle de <code>carte_2</code> ;</li> <li>\\(-1\\) si la carte <code>carte_2</code> a une valeur strictement plus forte que celle de <code>carte_1</code>.</li> </ul> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def comparer(carte_1, carte_2):\n    if carte_1.valeur &gt; carte_2.valeur:\n        return 1\n    elif carte_1.valeur &lt; carte_2.valeur:\n        return -1\n    else:\n        return 0\n</code></pre>"},{"location":"Evaluations/test_mermaid/","title":"Test mermaid","text":"<pre><code>gantt\n\u00a0\u00a0axisFormat %W\n\u00a0\u00a0section Requirement &lt;br&gt; Analysis\n\u00a0\u00a0\u00a0\u00a0Req. Task 1 : 2020-12-31, 2021-01-02\n\u00a0\u00a0\u00a0\u00a0Req. Task 2 : 1d\n\u00a0\u00a0\u00a0\u00a0Req. Task 3 : crit,3d\n\u00a0\u00a0section Design\n\u00a0\u00a0\u00a0\u00a0Desg. Task A: active, after t2, 2w\n\u00a0\u00a0\u00a0\u00a0Desg. Task B: 9d\n\u00a0\u00a0section Implement</code></pre>"},{"location":"Graphe/Graphe/","title":"Macro Rendering Error","text":"<p>File: <code>Graphe/Graphe.md</code></p> <p>KeyError: 22</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 22\n</code></pre>"},{"location":"Graphe/TD_Graphe/","title":"TD Graphe","text":"<p>Le programme de N.S.I en Terminale :</p> Contenus Capacit\u00e9s attendues Commentaires Graphes - structures relationnelles. Mod\u00e9liser des situations sous forme de graphes On s'appuie sur des exemples comme le r\u00e9seau routier, le r\u00e9seau \u00e9lectrique, Internet, les r\u00e9seaux sociaux. Sommets, arcs, ar\u00eates, graphes orient\u00e9s ou non orient\u00e9s. \u00c9crire les impl\u00e9mentations correspondantes d'un graphe : matrice d'adjacence, liste de successeurs/de pr\u00e9d\u00e9cesseurs. Le choix de la repr\u00e9sentation d\u00e9pend du traitement qu'on veut mettre en place : Passer d'une repr\u00e9sentation \u00e0 une autre. on fait le lien avec la rubrique \u00ab algorithmique \u00bb <p>Initi\u00e9e par le grand math\u00e9maticien suisse Euler, avec le c\u00e9l\u00e8bre probl\u00e8me des 7 ponts de K\u00f6nigsberg, les applications de la th\u00e9orie des graphes et de la recherche op\u00e9rationnelle sont aujourd'hui immenses tant au plan civil que militaire :</p> <ul> <li>aide \u00e0 la prise de d\u00e9cision ;  </li> <li>recherche de la meilleure strat\u00e9gie ;</li> <li>optimisation (plus court chemin, GPS, co\u00fbt minimal, ordonnancement des  t\u00e2ches ...) ;  </li> <li>r\u00e9seaux de transports (autoroutes, chemins de fer, m\u00e9tro, lignes a\u00e9riennes ...) ;  </li> <li>transport de l'\u00e9nergie (\u00e9lectricit\u00e9, gaz ...) ;  </li> <li>transport de l'informations : internet, r\u00e9seaux sociaux ...  </li> </ul> <p>La th\u00e9orie des graphes n'est pas une branche ind\u00e9pendante des math\u00e9matiques, elle se rattache \u00e0 la programmation lin\u00e9aire, la programmation convexe (o\u00f9 le concept plus g\u00e9n\u00e9ral de fonction convexe remplace les fonctions lin\u00e9aires et affines), le calcul des probabilit\u00e9s. Les graphes sont une structure de donn\u00e9es tr\u00e8s riche permettant de mod\u00e9liser des situations vari\u00e9es de relations entre un ensemble d'entit\u00e9s :</p> <ul> <li>entre les ordinateurs du r\u00e9seau internet ; </li> <li>entre des personnes sur un r\u00e9seau social ; </li> <li>entre les villes dans un r\u00e9seau routier ou de distribution ; </li> <li>entre les atomes d'une mol\u00e9cule ; </li> <li>etc  </li> </ul>"},{"location":"Graphe/TD_Graphe/#un-peu-de-vocabulaire-sur-les-graphes","title":"Un peu de vocabulaire sur les graphes","text":"<p>Ce qu'il faut retenir</p> <p>D\u2019un point de vue math\u00e9matique, un graphe est la donn\u00e9e</p> <ul> <li>d\u2019un certain nombre de points du plan, appel\u00e9s sommets ,  </li> <li>certains \u00e9tant reli\u00e9s par des segments de droites ou de courbes     (simples) appel\u00e9s ar\u00eates ,  </li> <li>la disposition des sommets et la forme choisie pour les ar\u00eates n\u2019intervenant pas.  </li> <li>Le nombre de sommets du graphe est son ordre.  </li> </ul> <p>Sauf indication contraire, un graphe sera consid\u00e9r\u00e9 comme non orient\u00e9 et les ar\u00eates pourront \u00eatre parcourues dans les deux sens.  </p>"},{"location":"Graphe/TD_Graphe/#vocabulaire-des-graphes-non-orientes","title":"Vocabulaire des graphes non orient\u00e9s","text":"<p>Ce qu'il faut retenir</p> <p>Dans le cas des graphes non orient\u00e9s, les relations entre deux sommets se font dans les deux sens. On appelle ses relations des ar\u00eates (edges en anglais), et on a les d\u00e9finitions suivantes :  </p> <ul> <li>Sommets adjacents : deux sommets sont adjacents s\u2019ils sont reli\u00e9s entre eux par une ar\u00eate. On dit que l\u2019ar\u00eate est incidente aux deux sommets.  </li> <li>Voisins d\u2019un sommet x : ce sont tous les sommets reli\u00e9s \u00e0 x par une ar\u00eate.  </li> <li>Degr\u00e9 d\u2019un sommet x : nombre d\u2019ar\u00eates incidentes au sommet, on le note d (x).  </li> <li>Cha\u00eene : s\u00e9quence ordonn\u00e9e d\u2019ar\u00eates telle que chaque ar\u00eate a une extr\u00e9mit\u00e9 en commun avec l\u2019ar\u00eate suivante.  </li> <li>Cycle : dans un graphe non orient\u00e9, un cycle est une suite d\u2019ar\u00eates cons\u00e9cutives (cha\u00eene) dont les deux sommets extr\u00e9mit\u00e9s sont identiques.  </li> <li>Boucle : il peut exister des ar\u00eates entre un sommet x et lui-m\u00eame. Elles sont appel\u00e9s boucles.  </li> </ul> <p></p> <p>Exercice 1 </p> <ul> <li>Citer des sommets adjacents.  </li> <li>Donner le degr\u00e9 de chacun des sommets.  </li> <li>Citer une cha\u00eene.  </li> <li>Donner un cycle.  </li> <li>Y-t-il une boucle ?</li> </ul>"},{"location":"Graphe/TD_Graphe/#vocabulaire-des-graphes-orientes","title":"Vocabulaire des graphes orient\u00e9s","text":"<p>Ce qu'il faut retenir</p> <p>Dans le cas des graphes orient\u00e9s, les ar\u00eates ont un sens et elles sont appel\u00e9es arcs. Par exemple, l\u2019ar\u00eate a = (x, y) indique qu\u2019il y a un arc d\u2019origine x et d\u2019extr\u00e9mit\u00e9 finale y. De plus, on a les d\u00e9finitions suivantes.  </p> <ul> <li>Successeurs et pr\u00e9d\u00e9cesseurs d\u2019un sommet x : dans un graphe orient\u00e9 on ne parle plus de voisins d\u2019un sommet mais de ses successeurs et de ses pr\u00e9d\u00e9cesseurs : le successeurs de x sont tous les sommets y tels qu\u2019il existe un arc (x, y) (de x vers y) et les pr\u00e9d\u00e9cesseurs de x sont tous les sommets w tels qu\u2019il existe un arc (w, x) (de w vers x).  </li> <li>Chemin : s\u00e9quence ordonn\u00e9e d\u2019arcs cons\u00e9cutifs (on parlait de cha\u00eene dans un graphe non orient\u00e9).  </li> <li>Circuit : dans un graphe orient\u00e9, un circuit est une suite d\u2019arcs cons\u00e9cutifs (chemin) dont les deux sommets extr\u00e9mit\u00e9s sont identiques.  </li> <li>Degr\u00e9 d\u2019un sommet x : cette notion existe aussi dans le cas des graphes orient\u00e9s. On distingue le degr\u00e9 entrant d\u2019un sommet x (not\u00e9 \\(d_-(x)\\)= nombre de pr\u00e9d\u00e9cesseurs de x) et le degr\u00e9 sortant d\u2019un sommet x (not\u00e9 \\(d_+(x)\\)= nombre de successeurs de x ). Le degr\u00e9 d\u2019un sommet x vaut \\(d (x) = d_+(x) + d_-(x)\\). \u2022 Boucle : ce sont les arcs entre un sommet et lui-m\u00eame.</li> </ul> <p></p> <p>Exercice 2</p> <ul> <li>Citer le(s) successeurs de A et le(s) pr\u00e9d\u00e9cesseur(s) de A.  </li> <li>Donner le degr\u00e9 de chacun des sommets.  </li> <li>\\(A,B,F\\) est-il un chemin.  </li> <li>Donner un circuit.  </li> <li>Y-t-il une boucle ?</li> </ul>"},{"location":"Graphe/TD_Graphe/#graphes-values-ou-ponderees","title":"Graphes valu\u00e9s ou pond\u00e9r\u00e9es","text":"<p>Ce qu'il faut retenir</p> <p>Certains graphes (orient\u00e9s ou non) sont dits valu\u00e9s : on ajoute un co\u00fbt (ou valuation, ou poids) \u00e0 chaque ar\u00eate/arc. Dans le cas d'un graphe repr\u00e9sentant un r\u00e9seau routier, le co\u00fbt sur chaque ar\u00eate pourrait, par exemple, \u00eatre la distance entre deux villes.</p> <p></p>"},{"location":"Graphe/TD_Graphe/#reseaux-sociaux-modelisation-par-un-graphe","title":"R\u00e9seaux sociaux : mod\u00e9lisation par un graphe","text":"<p>Au premier trimestre 2020, Facebook\u00a9 revendiquait 2,6 milliards d'utilisateurs actifs chaque mois, en hausse de 9,2% par rapport \u00e0 d\u00e9but 2019. Le r\u00e9seau social am\u00e9ricain a pass\u00e9 la barre symbolique des 2 milliards au deuxi\u00e8me trimestre 2017. A noter que 42% des utilisateurs actifs mensuels de Facebook viennent d'Asie-Pacifique, 15,6% sont Europ\u00e9ens et 9,7% sont Nord-am\u00e9ricains. Facebook permet \u00e0 ses utilisateurs d'entrer des informations personnelles et d'interagir avec d'autres utilisateurs. Les interactions entre utilisateurs reposent sur la notion \u00ab d'amis \u00bb.</p>"},{"location":"Graphe/TD_Graphe/#principe-de-la-modelisation-par-un-graphe-non-oriente","title":"Principe de la mod\u00e9lisation par un graphe non orient\u00e9","text":"<p>Imaginez un r\u00e9seau social ayant 7 abonn\u00e9s (L, M, N, O, P, Q et R) o\u00f9 :</p> <ul> <li> <p>L est ami avec M, N, O et P ;</p> </li> <li> <p>M est ami avec L et P ;</p> </li> <li> <p>N est ami avec L, O et P ;</p> </li> <li> <p>O est ami avec L,N,P,Q et R ;</p> </li> <li> <p>P est ami avec O,L et M ;</p> </li> <li> <p>Q est ami avec N et O ;</p> </li> <li> <p>R est ami avec O.</p> </li> </ul> <p>La description de ce r\u00e9seau social, malgr\u00e9 son faible nombre d'abonn\u00e9s, est d\u00e9j\u00e0 quelque peu compliqu\u00e9e, alors imaginez cette m\u00eame description avec un r\u00e9seau social comportant des millions d'entre eux ! Il existe un moyen plus \"visuel\" pour repr\u00e9senter ce r\u00e9seau social : on peut repr\u00e9senter chaque abonn\u00e9 par un cercle (avec le nom de l'abonn\u00e9 situ\u00e9 dans le cercle) et chaque relation \"X est ami avec Y\" par un segment de droite reliant X et Y (\"X est ami avec Y\" et \"Y est ami avec X\" \u00e9tant repr\u00e9sent\u00e9 par le m\u00eame segment de droite). Le mini-r\u00e9seau social d\u00e9crit pr\u00e9c\u00e9demment peut \u00eatre mod\u00e9lis\u00e9 sous la forme du graphe ci-dessous :</p> <p></p> <p>Un peu de vocabulaire sur les graphes des r\u00e9seaux sociaux...</p> <ul> <li>La distance entre deux sommets d\u2019un graphe est le nombre minimum d\u2019ar\u00eates pour aller du sommet \u00e0 un autre. Exemple : entre L et R la distance est 2.  </li> <li>L\u2019\u00e9cartement d\u2019un sommet est la distance maximale existant entre ce sommet et les autres sommets du graphe. Exemple : pour le sommet Q, la plus grande distance avec un autre sommet est 3 ; l\u2019\u00e9cartement est donc de 3.  </li> <li>Le centre d\u2019un graphe est le sommet d\u2019\u00e9cartement minimal (le centre n\u2019est pas n\u00e9cessairement unique). Exemple : les sommets Q et R ont un \u00e9cartement de 3, les autres un \u00e9cartement de 2 ; les centres sont donc L, N, O, P.  </li> <li>Le rayon d\u2019un graphe est l\u2019\u00e9cartement d\u2019un centre du graphe. Exemple : les centres L, N, O, P ont un \u00e9cartement de 2 ; le rayon du graphe est donc 2.  </li> <li>Le diam\u00e8tre d\u2019un graphe est la distance maximale entre deux sommets du graphe. Exemple : l\u2019\u00e9cartement max \u00e9tant 3 (entre Q et M ou entre R et M), le diam\u00e8tre du graphe est 3.</li> </ul> <p>Exercice 3</p> <ul> <li> <p>Construisez un graphe de r\u00e9seau social \u00e0 partir des informations suivantes :</p> </li> <li> <p>A est ami avec B, D et E ;  </p> </li> <li>B est ami avec A, C et D ;  </li> <li>C est ami avec B et D ;  </li> <li>D est ami avec A, B, C et E ;  </li> <li>E est ami avec A et F ;  </li> <li> <p>F est ami avec E.</p> </li> <li> <p>Compl\u00e9ter le tableau ci-dessous des distances entre sommets :  </p> </li> <li> <p>Quel est le centre du graphe  </p> </li> <li>Quel est le rayon du graphe ?  </li> <li>Quel est le diam\u00e8tre du graphe ?</li> </ul>"},{"location":"Graphe/TD_Graphe/#implementation-dun-graphe-non-oriente-a-laide-dune-matrice-dadjacence","title":"Impl\u00e9mentation d'un graphe non orient\u00e9 \u00e0 l'aide d'une matrice d'adjacence","text":"<p>Un graphe non orient\u00e9 peut \u00eatre transcrit sous la forme d'une matrice d'adjacence qui sera simple \u00e0 coder dans un programme Python.</p> <p>Matrice d'adjacence</p> <p>Une matrice M est un tableau de nombres, qui peut \u00eatre repr\u00e9sent\u00e9 en machine par un tableau de tableaux (ou une liste de listes) not\u00e9 matrice. Chaque nombre de cette matrice est rep\u00e9r\u00e9 par son num\u00e9ro de ligne \\(i\\) et son num\u00e9ro de colonne \\(j\\). On note ce nombre \\(M_{i,j}\\) et on peut y acc\u00e9der par l'instruction <code>matrice[i][j]</code>. Un graphe \u00e0 \\(n\\) sommets peut \u00eatre repr\u00e9sent\u00e9e par une matrice d'adjacence de taille \\(n \\times n\\), o\u00f9 la valeur du coefficient d'indice \\(i,j\\) d\u00e9pend de l'existence d'une ar\u00eate ou d'un arc reliant les sommets \\(i\\) et \\(j\\).</p> <p>Comment construire une matrice d'adjacence ?</p> <p>Il faut savoir qu'\u00e0 chaque ligne correspond un sommet du graphe et qu'\u00e0 chaque colonne correspond aussi un sommet du graphe. \u00c0 chaque intersection ligne \\(i\\)-colonne \\(j\\) (ligne \\(i\\) correspond au sommet \\(i\\) et colonne \\(j\\) correspond au sommet \\(j\\)), on place un 1 s'il existe une ar\u00eate entre le sommet \\(i\\) et le sommet \\(j\\), et un z\u00e9ro s'il n'existe pas d'ar\u00eate entre le sommet \\(i\\) et le sommet \\(j\\).</p> <p>En d'autre terme, pour construire la matrice d'adjacence associ\u00e9e \u00e0 un graphe, il suffit, pour chaque intersection ligne / colonne, de r\u00e9pondre \u00e0 la question : Est-ce que le sommet \u00ab X \u00bb est reli\u00e9 directement au sommet \u00ab Y \u00bb par une ar\u00eate ? Si la r\u00e9ponse est OUI \u2192 1 Si la r\u00e9ponse est NON \u2192 0  </p> <p>Graphe non orient\u00e9 est ami avec</p> <p></p> <p>En Python on code une matrice d'adjacence sous la forme d'une liste de listes. Chaque sous-liste repr\u00e9sente une colonne de la matrice d'adjacence.</p> \ud83d\udc0d Script Python<pre><code>#Matrice d'adjacence :\nm = [[0, 1, 1, 1, 0, 0],\n     [1, 0, 0, 1, 0, 0],\n     [1, 0, 0, 1, 1, 0],\n     [1, 1, 1, 0, 1, 1],\n     [0, 0, 1, 1, 0, 1],\n     [0, 0, 0, 1, 1, 0],\n]\n</code></pre> <p>Remarque</p> <ul> <li>Une matrice d\u2019adjacence est qualifi\u00e9e de matrice carr\u00e9e car elle comporte toujours le m\u00eame nombre de lignes et de colonnes.</li> <li>Dans le cadre d\u2019un graphe non orient\u00e9 de type \u00ab est ami avec \u00bb, les \u00e9l\u00e9ments de la matrice d\u2019adjacence associ\u00e9e sont sym\u00e9trique par rapport \u00e0 la grande diagonale des 0.</li> </ul> <p>Exercice 4</p> <ul> <li>Compl\u00e9ter la matrice d'adjacence et \u00e9crire son codage Python correspondant au graphe non orient\u00e9 suivant traduisant la relation \u00ab est ami avec \u00bb</li> </ul> <p></p> <ul> <li>\u00c9crire un programme Python permettant de calculer le nombre d'amis de chaque utilisateur du r\u00e9seau \u00ab d'amiti\u00e9s \u00bb pr\u00e9c\u00e9dent \u00e0 partir de la matrice d'adjacence.</li> </ul>"},{"location":"Graphe/TD_Graphe/#implementation-dun-graphe-oriente-a-laide-dune-matrice-dadjacence","title":"Impl\u00e9mentation d'un graphe orient\u00e9 \u00e0 l'aide d'une matrice d'adjacence","text":"<p>Dans le mod\u00e8le du mini-r\u00e9seau social pr\u00e9c\u00e9dent, le graphe est non orient\u00e9 : il traduit seulement le fait qu'un utilisateur est ami avec un autre (relation bijective). La notion de \u00ab followers \u00bb que l'on rencontre dans de nombreux r\u00e9seaux sociaux (Twitter en est un exemple), n\u00e9cessite quant \u00e0 elle d'orienter les ar\u00eates du graphe (elles deviennent alors des arcs) afin de traduire la relation \u00ab X \u00bb suit \u00ab Y \u00bb. Ainsi dans l'exemple de graphe orient\u00e9 ci-dessous, Alice (origine) suit Zo\u00e9 et Chlo\u00e9 (extr\u00e9mit\u00e9s).</p> <p>Graphe orient\u00e9 est ami avec</p> <p> </p> <p>Exercice 5</p> <ul> <li>Comment peut-on obtenir facilement le nombre de personnes suivies par une personne donn\u00e9e ? \u00c9crire la fonction Python correspondante.  </li> <li>Comment peut-on obtenir facilement le nombre de personnes qui suivent une personne donn\u00e9e ? \u00c9crire la fonction Python correspondante.  </li> <li>Compl\u00e9ter le programme Python afin qu'il affiche, pour une personne donn\u00e9e, le nombre de personnes qu'elle suit et le nombre de personnes qui la suivent?</li> </ul>"},{"location":"Graphe/TD_Graphe/#representation-par-matrice-dadjacence-exercice","title":"Repr\u00e9sentation par matrice d'adjacence -- Exercice","text":"<p>On consid\u00e8re le graphe non orient\u00e9 suivant :</p> <p></p> <p>Question</p> <p>\u00c9crire la matrice d'adjacence</p> <p>Ce qu'il faut retenir</p> <p>Dans le cas d'un graphe non orient\u00e9, la matrice d'adjacence est n\u00e9cessairement sym\u00e9trique par rapport \u00e0 sa diagonale : on a \\(M_{i,j}=M_{j,i}\\).gr</p> <p>On consid\u00e8re le graphe orient\u00e9 suivant :</p> <p></p> <p>Question</p> <p>\u00c9crire la matrice d'adjacence</p> <p>Ce qu'il faut retenir</p> <p>Comme les arcs ont un sens, la matrice d'adjacence d'un graphe orient\u00e9 n'est g\u00e9n\u00e9ralement pas sym\u00e9trique.</p>"},{"location":"Graphe/TD_Graphe/#representation-par-listes-des-successeurs","title":"Repr\u00e9sentation par listes des successeurs","text":"<p>Une autre fa\u00e7on de repr\u00e9senter un graphe est d'associer \u00e0 chaque sommet la liste des sommets auxquels il est reli\u00e9. Dans le cas d'un graphe orient\u00e9, on parle de liste de successeurs, alors que dans le cas d'un graphe non orient\u00e9 on parle de liste de voisins.</p> <p>Une fa\u00e7on simple et efficace est d'utiliser un dictionnaire o\u00f9 chaque sommet est associ\u00e9 \u00e0 la liste de ses successeurs/voisins.</p> <p>Exemple : Graphe non orient\u00e9</p> <p></p> <p>Ce graphe peut \u00eatre repr\u00e9sent\u00e9 par le dictionnaire suivant, o\u00f9 les cl\u00e9s sont les sommets et les valeurs sont les listes de voisins.</p> \ud83d\udc0d Script Python<pre><code>graphe1 = {\n \"A\": [\"B\", \"F\", \"G\"],\n \"B\": [\"A\", \"C\", \"F\"],\n \"C\": [\"B\", \"D\", \"F\"],\n \"D\": [\"C\", \"E\"],\n \"E\": [\"D\", \"E\", \"F\"],\n \"F\": [\"A\", \"B\", \"C\", \"E\", \"G\"],\n \"G\": [\"A\", \"F\"]\n}\n</code></pre> <p>Exemple : Graphe orient\u00e9</p> <p></p> <p>Question</p> <p>Compl\u00e9tez le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>graphe2 = {\n    \"A\": ...\n    \"B\": ...\n    \"C\": ...\n    \"D\": ...\n    \"E\": ...\n    \"F\": ...\n    \"G\": ...\n    }\n</code></pre> <p>Un autre exemple</p> <p></p> <p>Le code suivant permet d'impl\u00e9menter un graphe en langage Python</p> \ud83d\udc0d Script Python<pre><code>graphe = dict()    # cr\u00e9ation d'un dictionnaire vide \ngraphe[\"A\"] = [\"B\",\"C\",\"E\",\"F\",\"H\"] # liens de A vers les sommets list\u00e9s\ngraphe[\"B\"] = [\"A\",\"D\",\"H\"]\ngraphe[\"C\"] = [\"A\",\"F\", \"G\",\"H\"]\ngraphe[\"D\"] = [\"B\",\"H\"]\ngraphe[\"E\"] = [\"A\",\"H\"]\ngraphe[\"F\"] = [\"A\",\"C\"]\ngraphe[\"G\"] = [\"C\",\"H\"]\ngraphe[\"H\"] = [\"A\",\"B\",\"C\",\"D\",\"E\",\"G\"]\n</code></pre> <p>Rappel</p> <p>Vous avez vu l\u2019an dernier dans le cours sur les dictionnaires, qu\u2019il est possible :  </p> <ul> <li>d\u2019obtenir l\u2019ensemble des cl\u00e9s avec la m\u00e9thode keys() en sachant que graphe.keys() est un it\u00e9rable,  </li> <li>d\u2019obtenir l\u2019ensemble des cl\u00e9s avec la m\u00e9thode values() en sachant que graphe.values() est un it\u00e9rable.  </li> </ul> <p>Question</p> <p>En s'aidant de la remarque pr\u00e9c\u00e9dente, proposer une fonction ordre en langage Python qui re\u00e7oit en param\u00e8tre un dictionnaire et renvoie l'ordre de ce graphe. </p> <p>Question</p> <p>Tester votre fonction ordre en utilisant le graphe de l'exemple introductif, impl\u00e9ment\u00e9 en langage Python ci-dessus.</p> <p>Question</p> <p>\u00c9crire une fonction <code>sommets_adjacents</code> qui prend en param\u00e8tre un dictionnaire ainsi qu'un sommet sous forme de cha\u00eene de caract\u00e8res et qui renvoie la liste des sommets adjacents \u00e0 ce sommet entr\u00e9 comme param\u00e8tre.</p> <p>Question</p> <p>Tester la fonction sommets_adjacents sur le sommet A.</p> <p>Question</p> <p>Proposer des pr\u00e9conditions.</p> <p>Question</p> <p>Proposer une fonction <code>lister_aretes</code> qui prend en param\u00e8tre un dictionnaire et renvoie la liste des ar\u00eates d'un graphe. Une ar\u00eate sera repr\u00e9sent\u00e9e par un tuple \u00e0 deux \u00e9l\u00e9ments. ( Attention aux doublons)</p> <p>Question</p> <p>\u00c9crire une fonction degre qui prend en param\u00e8tre un dictionnaire ainsi qu'un sommet sous forme de cha\u00eene de caract\u00e8res et qui renvoie le degr\u00e9 de ce sommet entr\u00e9 comme param\u00e8tre.</p> <p>Question</p> <p>Tester la fonction degre.</p> <p>Question</p> <p>Proposer des pr\u00e9conditions.</p> <p>Question</p> <p>Proposer une fonction nombre_aretes qui prend en param\u00e8tre un dictionnaire et renvoie le nombre d'ar\u00eates d'un graphe.</p>"},{"location":"Graphe/TD_Graphe/#efficacite-des-representations","title":"Efficacit\u00e9 des repr\u00e9sentations","text":"<p>La matrice d'adjacence est simple \u00e0 mettre en \u0153uvre mais n\u00e9cessite un espace m\u00e9moire proportionnel \u00e0 \\(n \\times n\\) (o\u00f9 \\(n\\) est le nombre de sommets). Ainsi, un graphe de 1000 sommets n\u00e9cessitent une matrice d'un million de nombres m\u00eame si le graphe contient peu d'ar\u00eates/arcs. Pour le m\u00eame graphe contenant peu d'ar\u00eates/arcs, le dictionnaire ne m\u00e9moriserait pour chaque sommet que les voisins/successeurs (les 1) sans avoir \u00e0 m\u00e9moriser les autres (les 0). En revanche, pour un graphe contenant beaucoup d'ar\u00eates/arcs, la dictionnaire occuperait plus d'espace m\u00e9moire que la matrice d'adjacence.</p> <p>Cela implique en outre que l'acc\u00e8s aux voisins/successeurs d'un sommet est plus rapide avec le dictionnaire car il n'est pas n\u00e9cessaire de parcourir toute la ligne de la matrice (\\(n\\) valeurs) alors m\u00eame que celle-ci peut ne contenir que tr\u00e8s peu de 1.</p> <p>De plus, l'utilisation d'un dictionnaire permet de nommer les sommets sans ambigu\u00eft\u00e9 et ne les limite pas \u00e0 des entiers comme c'est le cas pour la matrice d'adjacence (m\u00eame si on peut associer chacun de ces entiers au sommet correspondant, ce que nous avons fait pr\u00e9c\u00e9demment).</p> <p>Enfin, au lieu d'utiliser le type liste (list de Python ici) pour m\u00e9moriser les voisins/successeurs, on peut avantageusement utiliser le type ensemble (type pr\u00e9d\u00e9fini set de Python) qui est une structure de donn\u00e9es permettant un acc\u00e8s plus efficace aux \u00e9l\u00e9ments (l'impl\u00e9mentation se fait par des tables de hachage, hors programme de NSI).</p>"},{"location":"Graphe/TD_Graphe_Exercices/","title":"Macro Rendering Error","text":"<p>File: <code>Graphe/TD_Graphe_Exercices.md</code></p> <p>KeyError: 24</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 24\n</code></pre>"},{"location":"Graphe/TD_Graphe_Parcours/","title":"Macro Rendering Error","text":"<p>File: <code>Graphe/TD_Graphe_Parcours.md</code></p> <p>KeyError: 23</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 23\n</code></pre>"},{"location":"Graphe/test_graphe/","title":"Test graphe","text":"<pre><code>    graph LR\n        A((\"A\"))\n        B((\"B\"))\n        C((\"C\"))\n        D((\"D\"))\n        E((\"E\"))\n        F((\"F\"))\n        C --&gt; A\n        C --&gt; D\n        C --&gt; E\n        A --&gt; B\n        A --&gt; D\n        B --&gt; D\n        C --&gt; D\n        D --&gt; F\n        E --&gt; F\n</code></pre>"},{"location":"Graphe/data/parcours_colore/","title":"-*- coding: utf-8 -*-","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nCreated on Tue Feb  9 09:57:42 2021\n\n@author: kourf\n\"\"\"\n</pre> \"\"\" Created on Tue Feb  9 09:57:42 2021  @author: kourf \"\"\" In\u00a0[\u00a0]: Copied! <pre>from graphviz import Graph, Digraph\nfrom collections import deque\nfrom PIL import Image\nimport os\n</pre> from graphviz import Graph, Digraph from collections import deque from PIL import Image import os In\u00a0[\u00a0]: Copied! <pre>\"\"\"\nJe suis parti sur la classe SommetColore mais il aurait probablement \u00e9t\u00e9 plus \nsimple d'indiquer l'\u00e9tat visit\u00e9 ou d\u00e9couvert dans le dictionaire des sommets :\n        (decouvert: bool, visite: bool, successeurs: list).\n\"\"\"\n</pre> \"\"\" Je suis parti sur la classe SommetColore mais il aurait probablement \u00e9t\u00e9 plus  simple d'indiquer l'\u00e9tat visit\u00e9 ou d\u00e9couvert dans le dictionaire des sommets :         (decouvert: bool, visite: bool, successeurs: list). \"\"\" In\u00a0[\u00a0]: Copied! <pre>COULEUR_INITIALE = '#FFFFFF'\nCOULEUR_DECOUVERT = '#FF7F59'\nCOULEUR_VISITE = '#9F1818'\n</pre> COULEUR_INITIALE = '#FFFFFF' COULEUR_DECOUVERT = '#FF7F59' COULEUR_VISITE = '#9F1818' In\u00a0[\u00a0]: Copied! <pre>class SommetColore:\ndef __init__(self, etiquette):\nself._etiquette = etiquette\nself._couleur = COULEUR_INITIALE\nself.decouvert = False\nself.visite = False\ndef marquer_decouvert(self):\nself._couleur = COULEUR_DECOUVERT\nself.decouvert = True\ndef marquer_visite(self):\nself._couleur = COULEUR_VISITE\nself.visite = True\n\ndef est_decouvert(self):\nreturn self.decouvert\ndef est_visite(self):\nreturn self.visite\ndef etiquette(self):\nreturn self._etiquette\ndef couleur(self):\nreturn self._couleur\ndef __repr__(self):\nreturn self._etiquette\n</pre> class SommetColore:     def __init__(self, etiquette):         self._etiquette = etiquette         self._couleur = COULEUR_INITIALE         self.decouvert = False         self.visite = False              def marquer_decouvert(self):         self._couleur = COULEUR_DECOUVERT         self.decouvert = True              def marquer_visite(self):         self._couleur = COULEUR_VISITE         self.visite = True      def est_decouvert(self):         return self.decouvert          def est_visite(self):         return self.visite          def etiquette(self):         return self._etiquette          def couleur(self):         return self._couleur          def __repr__(self):         return self._etiquette In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>class GraphColore:\n\"\"\"\n    Cr\u00e9e un objet graphe color\u00e9 \u00e0 partir d'une liste de sommets ou d'un \n    graphe donn\u00e9 sous la forme d'un dictionnaire\n    \"\"\"\ndef __init__(self, sommets):\nself.dico_sommets = {v : SommetColore(v) for v in sommets}\nif type(sommets) == list:   # liste de sommets -&gt; graphe sans ar\u00eate\nself.sommets = {self.dico_sommets[v]: [] for v in sommets}\nelse:                       # sommets est un dictionnaire\nself.sommets = {self.dico_sommets[v]: [self.dico_sommets[s] for s in sommets[v]] for v in sommets}\nself.n = n = len(sommets)\n\ndef get_sommets(self):  return list(self.sommets.keys())\n\ndef successeurs(self, s):\nif not isinstance(s, SommetColore):\ns = self.dico_sommets[s]\nreturn self.sommets[s]\n\ndef voisins(self, s):\n\"Identique \u00e0 la m\u00e9thode successeurs\"\nreturn self.successeurs(s)\n\ndef est_successeur(self, s1, s2):\nif not isinstance(s1, SommetColore):\ns1 = self.dico_sommets[s1]      if not isinstance(s2, SommetColore):\ns2 = self.dico_sommets[s2]\nreturn s2 in self.sommets[s1]\n\ndef est_oriente(self):\nfor s1 in self.sommets:\nfor s2 in self.sommets[s1]:        if s1 not in self.sommets[s2]:\nreturn True\nreturn False\ndef dessiner_graphe(self, nombre_images=1, oriente=None):\nif oriente==None:\noriente = self.est_oriente()\nnom_fichier = 'graph' + str(nombre_images)\nif oriente:\ng = Digraph('G', filename=nom_fichier, format='gif')\nelse:\ng = Graph('G', filename=nom_fichier, format='gif')\ng.attr(rankdir=\"LR\")\nfor s1 in self.sommets:\nfor s2 in self.sommets[s1]:\nif oriente or s2.etiquette() &lt;= s1.etiquette():\ng.node(s1.etiquette(), style='filled', fillcolor=s1.couleur())\ng.node(s2.etiquette(), style='filled', fillcolor=s2.couleur())\ng.edge(s1.etiquette(), s2.etiquette())\ng.render()\nreturn g\n</pre> class GraphColore:     \"\"\"     Cr\u00e9e un objet graphe color\u00e9 \u00e0 partir d'une liste de sommets ou d'un      graphe donn\u00e9 sous la forme d'un dictionnaire     \"\"\"     def __init__(self, sommets):         self.dico_sommets = {v : SommetColore(v) for v in sommets}         if type(sommets) == list:   # liste de sommets -&gt; graphe sans ar\u00eate             self.sommets = {self.dico_sommets[v]: [] for v in sommets}         else:                       # sommets est un dictionnaire             self.sommets = {self.dico_sommets[v]: [self.dico_sommets[s]                                                     for s in sommets[v]]                              for v in sommets}         self.n = n = len(sommets)      def get_sommets(self):           return list(self.sommets.keys())      def successeurs(self, s):         if not isinstance(s, SommetColore):             s = self.dico_sommets[s]         return self.sommets[s]      def voisins(self, s):         \"Identique \u00e0 la m\u00e9thode successeurs\"         return self.successeurs(s)      def est_successeur(self, s1, s2):         if not isinstance(s1, SommetColore):             s1 = self.dico_sommets[s1]               if not isinstance(s2, SommetColore):             s2 = self.dico_sommets[s2]         return s2 in self.sommets[s1]           def est_oriente(self):         for s1 in self.sommets:             for s2 in self.sommets[s1]:                         if s1 not in self.sommets[s2]:                     return True         return False          def dessiner_graphe(self, nombre_images=1, oriente=None):         if oriente==None:             oriente = self.est_oriente()         nom_fichier = 'graph' + str(nombre_images)         if oriente:             g = Digraph('G', filename=nom_fichier, format='gif')         else:             g = Graph('G', filename=nom_fichier, format='gif')         g.attr(rankdir=\"LR\")         for s1 in self.sommets:             for s2 in self.sommets[s1]:                 if oriente or s2.etiquette() &lt;= s1.etiquette():                     g.node(s1.etiquette(), style='filled', fillcolor=s1.couleur())                     g.node(s2.etiquette(), style='filled', fillcolor=s2.couleur())                     g.edge(s1.etiquette(), s2.etiquette())         g.render()         return g                   In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>gtemp_1 = {'A': ['B', 'E', 'G'],\n'B': ['A', 'C', 'E', 'F'],\n'C': ['B', 'D', 'G'],\n'D': ['C', 'E', 'F'],\n'E': ['A', 'B', 'D', 'H'],\n'F': ['B', 'D', 'H'],\n'G': ['A', 'C'],\n'H': ['E', 'F']              }\ngraphe_1 = GraphColore(gtemp_1)\n</pre> gtemp_1 = {'A': ['B', 'E', 'G'],            'B': ['A', 'C', 'E', 'F'],            'C': ['B', 'D', 'G'],            'D': ['C', 'E', 'F'],            'E': ['A', 'B', 'D', 'H'],            'F': ['B', 'D', 'H'],            'G': ['A', 'C'],            'H': ['E', 'F']                          } graphe_1 = GraphColore(gtemp_1) In\u00a0[\u00a0]: Copied! <pre>gtemp_2 = {'A': ['B', 'E', 'G'],\n'B': ['A', 'C', 'D'],\n'C': ['B', 'J'],\n'D': ['B', 'F'],\n'E': ['A'],\n'F': ['D', 'H', 'I'],\n'G': ['A'],\n'H': ['F'],\n'I': ['F'],\n'J': ['C'],\n}\ngraphe_2 = GraphColore(gtemp_2)\n</pre> gtemp_2 = {'A': ['B', 'E', 'G'],            'B': ['A', 'C', 'D'],            'C': ['B', 'J'],            'D': ['B', 'F'],            'E': ['A'],            'F': ['D', 'H', 'I'],            'G': ['A'],            'H': ['F'],            'I': ['F'],            'J': ['C'],            } graphe_2 = GraphColore(gtemp_2) In\u00a0[\u00a0]: Copied! <pre>gtemp_3 = {'A': ['B', 'G'],\n'B': ['C', 'E'],\n'C': ['D'],\n'D': ['F'],\n'E': ['A', 'D', 'H'],\n'F': ['B', ],\n'G': ['C'],\n'H': ['F']              }\ngraphe_3 = GraphColore(gtemp_3)\n</pre> gtemp_3 = {'A': ['B', 'G'],            'B': ['C', 'E'],            'C': ['D'],            'D': ['F'],            'E': ['A', 'D', 'H'],            'F': ['B', ],            'G': ['C'],            'H': ['F']                          } graphe_3 = GraphColore(gtemp_3) <p>Parcours en largeur</p> In\u00a0[\u00a0]: Copied! <pre>def parcours_largeur(G, s):\nnombre_images = 1\ns = G.dico_sommets[s]  # conversion de s en instance de SommetColore\nfile = deque([s])\ns.marquer_decouvert()\nwhile file:\ns = file.popleft()\ns.marquer_visite()\nG.dessiner_graphe(nombre_images)\nnombre_images += 1\nfor v in G.voisins(s):  if not v.est_decouvert():\nv.marquer_decouvert()\nfile.append(v)\nG.dessiner_graphe(nombre_images)\nnombre_images += 1\n</pre> def parcours_largeur(G, s):     nombre_images = 1     s = G.dico_sommets[s]  # conversion de s en instance de SommetColore     file = deque([s])     s.marquer_decouvert()     while file:         s = file.popleft()         s.marquer_visite()         G.dessiner_graphe(nombre_images)         nombre_images += 1         for v in G.voisins(s):               if not v.est_decouvert():                 v.marquer_decouvert()                 file.append(v)                 G.dessiner_graphe(nombre_images)                 nombre_images += 1 <p>Parcours en profondeur it\u00e9ratif</p> In\u00a0[\u00a0]: Copied! <pre>def parcours_profondeur_iter(G, s):\nnombre_images = 1\ns = G.dico_sommets[s]  # conversion de s en instance de SommetColore\npile = [s]\ns.marquer_decouvert()\nwhile pile:\ns = pile.pop()\nif not s.est_visite():\ns.marquer_visite()\nG.dessiner_graphe(nombre_images)\nnombre_images += 1           for v in G.voisins(s):  if not v.est_visite():\npile.append(v)\nv.marquer_decouvert()\nG.dessiner_graphe(nombre_images)\nnombre_images += 1\n</pre> def parcours_profondeur_iter(G, s):     nombre_images = 1     s = G.dico_sommets[s]  # conversion de s en instance de SommetColore     pile = [s]     s.marquer_decouvert()     while pile:         s = pile.pop()         if not s.est_visite():             s.marquer_visite()             G.dessiner_graphe(nombre_images)             nombre_images += 1                        for v in G.voisins(s):                   if not v.est_visite():                     pile.append(v)                     v.marquer_decouvert()                     G.dessiner_graphe(nombre_images)                     nombre_images += 1     <p>Parcours en profondeur r\u00e9cursif</p> In\u00a0[\u00a0]: Copied! <pre>def parcours_profondeur(G, s, nombre_images=None):\nif nombre_images==None:\nnombre_images=[1]\nif not isinstance(s, SommetColore):\ns = G.dico_sommets[s]\ns.marquer_visite()\nG.dessiner_graphe(nombre_images[0])\nnombre_images[0] += 1\nfor v in G.voisins(s):\nif not v.est_visite():\nparcours_profondeur(G, v, nombre_images)\n</pre> def parcours_profondeur(G, s, nombre_images=None):     if nombre_images==None:         nombre_images=[1]         if not isinstance(s, SommetColore):             s = G.dico_sommets[s]     s.marquer_visite()     G.dessiner_graphe(nombre_images[0])     nombre_images[0] += 1     for v in G.voisins(s):         if not v.est_visite():             parcours_profondeur(G, v, nombre_images) <p>Parcours chemin donn\u00e9</p> In\u00a0[\u00a0]: Copied! <pre>def parcours_chemin(G, chemin):\nfor i in range(len(chemin)):\ns = chemin[i]\nif not isinstance(s, SommetColore):\ns = G.dico_sommets[chemin[i]]\ns.marquer_visite()\nG.dessiner_graphe(i+1)\n</pre> def parcours_chemin(G, chemin):     for i in range(len(chemin)):         s = chemin[i]         if not isinstance(s, SommetColore):             s = G.dico_sommets[chemin[i]]         s.marquer_visite()         G.dessiner_graphe(i+1) <p>Parcours hamiltonien</p> In\u00a0[\u00a0]: Copied! <pre>def parcours_ham(G, s, solutions, chemin=None):\nif chemin==None:\nchemin = [s]\nif len(chemin) == G.n:\nsolutions.append(chemin)\nfor v in G.voisins(s):\nif v not in chemin:\nparcours_ham(G, v, solutions, chemin + [v])\n</pre> def parcours_ham(G, s, solutions, chemin=None):     if chemin==None:         chemin = [s]     if len(chemin) == G.n:         solutions.append(chemin)     for v in G.voisins(s):         if v not in chemin:             parcours_ham(G, v, solutions, chemin + [v]) In\u00a0[\u00a0]: Copied! <pre>def parcours_hamiltonien(G):\nsolutions = []\nfor s in G.get_sommets():\nparcours_ham(G, s, solutions)\nif solutions:\nparcours_chemin(G, solutions[0])\nelse:\nprint(\"Pas de chemin hamiltonien\")\n</pre> def parcours_hamiltonien(G):     solutions = []     for s in G.get_sommets():         parcours_ham(G, s, solutions)     if solutions:         parcours_chemin(G, solutions[0])     else:         print(\"Pas de chemin hamiltonien\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Cr\u00e9ation du gif</p> In\u00a0[\u00a0]: Copied! <pre>def creation_parcours_colore(graphe, parcours, sommet=None, nom_fichier='graphe.gif'):\n\"\"\"\n    Cr\u00e9e un gif repr\u00e9sentant le parcours choisi :\n    - parcours_largeur, parcours_profondeur_iter ou parcours_profondeur : \n        pr\u00e9ciser le sommet de d\u00e9part\n    - parcours_chemin : indiquer un chemin sous forme d'une liste de sommets\n        \u00e0 la place du sommet de d\u00e9part\n    - parcours_hamiltonien : ne pas indiquer de sommet de d\u00e9part\n    \"\"\"\ntry:\nos.mkdir('dossier_temp')\nexcept:\npass\nif os.path.exists(\"graphe.gif\"):\nos.remove(\"graphe.gif\")\nos.chdir('dossier_temp')\nif sommet==None:\nparcours(graphe)\nelse:\nparcours(graphe, sommet)\nnombre_images = len(os.listdir())//2\nif nombre_images == 0:\nos.chdir('..')\nos.rmdir('dossier_temp')\nreturn\nimages = [0]*nombre_images\nimage_finale = Image.open('graph1.gif')\nfor i in range(nombre_images):\nimages[i] = Image.open('graph'+str(i+1)+'.gif')\nimage_finale.save(nom_fichier, save_all=True, append_images=images, optimize=False, duration=500, loop=0)\nimage_finale.close()\nfor i in range(nombre_images):\nimages[i].close()\nos.remove('graph'+str(i+1)+'.gif')\nos.remove('graph'+str(i+1))\nos.rename('graphe.gif', '../graphe.gif')\nos.chdir('..')\nos.rmdir('dossier_temp')\n</pre> def creation_parcours_colore(graphe, parcours, sommet=None, nom_fichier='graphe.gif'):     \"\"\"     Cr\u00e9e un gif repr\u00e9sentant le parcours choisi :     - parcours_largeur, parcours_profondeur_iter ou parcours_profondeur :          pr\u00e9ciser le sommet de d\u00e9part     - parcours_chemin : indiquer un chemin sous forme d'une liste de sommets         \u00e0 la place du sommet de d\u00e9part     - parcours_hamiltonien : ne pas indiquer de sommet de d\u00e9part          \"\"\"     try:         os.mkdir('dossier_temp')     except:         pass     if os.path.exists(\"graphe.gif\"):         os.remove(\"graphe.gif\")     os.chdir('dossier_temp')     if sommet==None:         parcours(graphe)     else:         parcours(graphe, sommet)     nombre_images = len(os.listdir())//2     if nombre_images == 0:         os.chdir('..')         os.rmdir('dossier_temp')         return     images = [0]*nombre_images     image_finale = Image.open('graph1.gif')     for i in range(nombre_images):         images[i] = Image.open('graph'+str(i+1)+'.gif')     image_finale.save(nom_fichier, save_all=True, append_images=images, optimize=False, duration=500, loop=0)     image_finale.close()     for i in range(nombre_images):         images[i].close()         os.remove('graph'+str(i+1)+'.gif')         os.remove('graph'+str(i+1))     os.rename('graphe.gif', '../graphe.gif')     os.chdir('..')     os.rmdir('dossier_temp') In\u00a0[\u00a0]: Copied! <pre>creation_parcours_colore(graphe_3,parcours_profondeur, sommet=\"A\", nom_fichier='graphe.gif')\n</pre> creation_parcours_colore(graphe_3,parcours_profondeur, sommet=\"A\", nom_fichier='graphe.gif') In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/","title":"Cours : Programmation Orient\u00e9e Objet (POO)","text":"Th\u00e8me 1 - Structure de donn\u00e9es                           06              Cours : Programmation Orient\u00e9e Objet (POO) <p>Le paradigme objet</p> <p>Nous avons vu qu'il existait diff\u00e9rentes mani\u00e8res de voir la programmation, on parle de diff\u00e9rents paradigmes de programmation.  L'un d'eux est le paradigme objet. Lorsque l'on programme en utilisant ce paradigme on parle de programmation objet ou de programmation orient\u00e9e objet (abr\u00e9g\u00e9 POO, ou OOP en anglais pour \u00ab Object-oriented programming \u00bb.</p> <p>Nous nous limiterons cette ann\u00e9e, comme le programme l'indique, \u00e0 une br\u00e8ve introduction de la programmation objet.</p>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#vocabulaire-de-la-programmation-objet","title":"Vocabulaire de la programmation objet","text":"<p>La programmation objet consiste \u00e0 regrouper donn\u00e9es et traitements dans une m\u00eame structure appel\u00e9e objet. Elle poss\u00e8de l'avantage de localiser en un m\u00eame endroit toute l'impl\u00e9mentation d'une structure de donn\u00e9es abstraite.</p>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#objets-attributs-methodes","title":"Objets, attributs, m\u00e9thodes","text":"<p>Concr\u00e8tement, un objet est une structure de donn\u00e9es abstraite regroupant : - des donn\u00e9es associ\u00e9es \u00e0 l'objet que l'on appelle des attributs. - des fonctions (ou proc\u00e9dures) s'appliquant sur l'objet que l'on appelle m\u00e9thodes. </p>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#classes-et-objets-en-python","title":"Classes et objets en Python","text":""},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#en-python-tout-est-objet","title":"En Python, tout est objet !","text":"<p>Vous ne le saviez sans doute pas, mais les objets vous connaissez d\u00e9j\u00e0.</p> <p>Vous avez manipul\u00e9 des objets depuis que vous programmez en Python, tout simplement car dans ce langage tout est objet. On peut le voir facilement.</p> \ud83d\udc0d Script Python<pre><code>m=[4,5,8,2]\ntype(m)\n</code></pre> \ud83d\udccb Texte<pre><code>&lt;class 'list'&gt;\n</code></pre> <p><code>m</code> est une liste, ou plus pr\u00e9cis\u00e9ment un objet de type <code>list</code>. Et en tant qu'objet de type <code>list</code>, il est possible de lui appliquer certaines fonctions pr\u00e9d\u00e9finies (qu'on appelera m\u00e9thodes) :</p> \ud83d\udc0d Script Python<pre><code>m.reverse()\nm\n</code></pre> \ud83d\udccb Texte<pre><code>[2, 8, 5, 4]\n</code></pre> <p>La syntaxe utilis\u00e9e (le . apr\u00e8s le nom de l'objet) est sp\u00e9cifique \u00e0 la POO. Chaque fois que vous voyez cela, c'est que vous \u00eates en train de manipuler des objets.  </p> <p>Nous ne sommes pas surpris par ce r\u00e9sultat car la personne qui a programm\u00e9 la m\u00e9thode <code>reverse()</code> lui a donn\u00e9 un nom explicite.  Comment a-t-elle programm\u00e9 cette inversion des valeurs de la liste ? Nous n'en savons rien et cela ne nous int\u00e9resse pas. Nous sommes juste utilisateurs de cette m\u00e9thode.  L'objet de type <code>list</code> nous a \u00e9t\u00e9 livr\u00e9 avec sa m\u00e9thode <code>reverse()</code> (et bien d'autres choses) et nous n'avons pas \u00e0 d\u00e9monter la bo\u00eete pour en observer les engrenages : on parle de principe d'encapsulation.</p> <p>On peut obtenir la liste de toutes les fonctions disponibles pour un objet de type <code>list</code>, par la fonction <code>dir</code> :</p> \ud83d\udc0d Script Python<pre><code>dir(m)\n</code></pre> \ud83d\udccb Texte<pre><code>['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n</code></pre> <p>Les m\u00e9thodes encadr\u00e9es par un double underscore __ sont des m\u00e9thodes priv\u00e9es, a priori non destin\u00e9es \u00e0 l'utilisateur. Les m\u00e9thodes publiques, utilisables pour chaque objet de type <code>list</code>, sont donc <code>append</code>, <code>clear</code>, ...  </p> <p>Comment savoir ce que font les m\u00e9thodes ? Si elles ont \u00e9t\u00e9 correctement cod\u00e9es (et elles l'ont \u00e9t\u00e9), elles poss\u00e8dent une docstring, accessible par :</p> \ud83d\udc0d Script Python<pre><code>m.append.__doc__\n</code></pre> \ud83d\udccb Texte<pre><code>'Append object to the end of the list.'\n</code></pre> \ud83d\udc0d Script Python<pre><code>m.index.__doc__\n</code></pre> \ud83d\udccb Texte<pre><code>'Return first index of value.\\n\\nRaises ValueError if the value is not present.'\n</code></pre> \ud83d\udc0d Script Python<pre><code>help(m.index)\n</code></pre> \ud83d\udccb Texte<pre><code>Help on built-in function index:\n\nindex(value, start=0, stop=2147483647, /) method of builtins.list instance\n    Return first index of value.\n\n    Raises ValueError if the value is not present.\n</code></pre>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#mise-en-pratique","title":"Mise en pratique","text":""},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#une-premiere-classe-en-python","title":"Une premi\u00e8re classe en Python","text":"<p>Nous allons voir comment impl\u00e9menter une classe en Python. </p> <p>Vocabulaire :</p> <p>Par convention, les noms de classes en Python sont \u00e9crits en capitales (premi\u00e8re lettre en majuscule). On a document\u00e9 notre classe avec une docstring qui sera accessible \u00e0 quiconque souhaite utiliser notre classe.</p> \ud83d\udc0d Script Python<pre><code>class Voiture :\n    def __init__(self, annee, coul, vmax) :\n        self.annee = annee\n        self.couleur = coul\n        self.vitesse_max = vmax\n        self.age = 2020 - self.annee\n</code></pre>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#creation-et-initialisation-dun-objet-en-python","title":"Cr\u00e9ation et initialisation d'un objet en Python","text":"<p>A retenir : la m\u00e9thode constructeur</p> <p>La m\u00e9thode constructeur, toujours appel\u00e9e <code>__init__()</code>, est une m\u00e9thode (une \u00abdef\u00bb) qui sera automatiquement appel\u00e9e \u00e0 la cr\u00e9ation de l'objet. Elle va donc le doter de tous les attributs de sa classe.</p> \ud83d\udc0d Script Python<pre><code>class Voiture :\n    def __init__(self, annee, coul, vmax) :\n        self.annee = annee\n        self.couleur = coul\n        self.vitesse_max = vmax\n        self.age = 2022 - self.annee\n</code></pre> <ul> <li>le mot-cl\u00e9 <code>self</code>, omnipr\u00e9sent en POO (d'autres langages utilisent <code>this</code>), fait r\u00e9f\u00e9rence \u00e0 l'objet lui-m\u00eame, qui est en train d'\u00eatre construit.</li> <li>pour construire l'objet, 3 param\u00e8tres seront n\u00e9cessaires : <code>annee</code>, <code>coul</code> et <code>vmax</code>. Ils donneront respectivement leur valeur aux attributs <code>annee</code>, <code>couleur</code> et <code>vitesse_max</code>.</li> <li>dans cet exemple, les noms <code>coul</code> et <code>vmax</code> ont \u00e9t\u00e9 utilis\u00e9s pour abr\u00e9ger <code>couleur</code> et <code>vitesse_max</code>, mais il est recommand\u00e9 de garder les m\u00eames noms, m\u00eame si ce n'est pas du tout obligatoire.</li> </ul> <p>Construisons donc notre premi\u00e8re voiture !</p> \ud83d\udc0d Script Python<pre><code>ma_voiture = Voiture(2012, \"Grise\", 180)\n</code></pre> <p><code>mon_bolide</code> poss\u00e8de 4 attributs :  - <code>annee</code>, <code>couleur</code> et <code>vitesse_max</code> ont \u00e9t\u00e9 donn\u00e9s par l'utilisateur lors de la cr\u00e9ation. - <code>age</code> s'est cr\u00e9\u00e9 \u00abtout seul\u00bb par l'instruction <code>self.age = 2022 - self.annee</code>.</p> \ud83d\udc0d Script Python<pre><code>type(ma_voiture)\n</code></pre> \ud83d\udccb Texte<pre><code>&lt;class '__main__.Voiture'&gt;\n</code></pre> \ud83d\udc0d Script Python<pre><code>print(ma_voiture.annee)\nprint(ma_voiture.couleur)\nprint(ma_voiture.vitesse_max)\nprint(ma_voiture.age)\n</code></pre> \ud83d\udccb Texte<pre><code>2012\nGrise\n180\n8\n</code></pre> <p>Bien s\u00fbr, on peut cr\u00e9er aytant de voitures que l'on veut en suivant le m\u00eame principe :</p> \ud83d\udc0d Script Python<pre><code>batmobile = Voiture(2036, \"noire\", 525)\nbatmobile.couleur\n</code></pre> \ud83d\udccb Texte<pre><code>'noire'\n</code></pre> <p>Exercice : Reprendre l'exemple du type abstrait <code>Rationnel</code></p> <p>Nous reprenons pour cela l'exemple du type abstrait <code>Rationnel</code> abord\u00e9 dans le chapitre pr\u00e9c\u00e9dent. Pour rappel, on souhaitait pouvoir effectuer les op\u00e9rations suivantes sur cette structure de donn\u00e9es :</p> <ul> <li>Cr\u00e9er un rationnel</li> <li>Acc\u00e9der au num\u00e9rateur et au d\u00e9nominateur d'un rationnel</li> <li>Ajouter, soustraire, multiplier, diviser deux rationnels</li> <li>V\u00e9rifier si deux rationnels sont \u00e9gaux ou non</li> </ul> <p>Nous avions d\u00e9j\u00e0 impl\u00e9ment\u00e9 ce type abstrait (de plusieurs mani\u00e8res) dans le chapitre en question. L'objectif ici est de cr\u00e9er une classe appel\u00e9e <code>Rationnel</code> dont le but est de pouvoir construire des objets de type <code>Rationnel</code> et les manipuler.</p> <p>On d\u00e9clare une classe en Python \u00e0 l'aide du mot cl\u00e9 <code>class</code> :</p> \ud83d\udc0d Script Python<pre><code>class Rationnel:\n\"\"\"Manipulation de rationnels d\u00e9finis par leurs num\u00e9rateur et d\u00e9nominateur\"\"\"\n</code></pre> <p>Par convention, les noms de classes en Python sont \u00e9crits en capitales (premi\u00e8re lettre en majuscule). On a document\u00e9 notre classe avec une docstring qui sera accessible \u00e0 quiconque souhaite utiliser notre classe.</p> \ud83d\udc0d Script Python<pre><code>class Rationnel:\n\"\"\"Manipulation de rationnels d\u00e9finis par leurs num\u00e9rateur et d\u00e9nominateur\"\"\"\n\n    def __init__(self, numerateur, denominateur):\n\"\"\"Initialise le rationnel avec les valeurs indiqu\u00e9es\"\"\"\n        pass\n</code></pre> <p>On peut d\u00e9sormais cr\u00e9er un objet <code>r</code> par appel du constructeur en fournissant les valeurs des param\u00e8tres pr\u00e9vus dans la m\u00e9thode sp\u00e9ciale d'initialisation. On peut acc\u00e9der aux attributs de l'objet en utilisant la notation point\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>\n</code></pre> \ud83d\udccb Texte<pre><code>3\n4\n</code></pre> <p>On peut modifier les attributs d'un objet en les red\u00e9finissant.</p> \ud83d\udc0d Script Python<pre><code>r.num = 2  # modification de la valeur du num\u00e9rateur\nr.num, r.den\n</code></pre> \ud83d\udccb Texte<pre><code>(2, 4)\n</code></pre> <p>Les attributs <code>num</code> et <code>den</code> sont propres \u00e0 chaque objet. Dans la terminologie des langages \u00e0 objet, on parle d'attributs d'instance.</p> <p>Notre objet est bien du type abstrait de donn\u00e9es <code>Rationnel</code> que l'on vient de cr\u00e9er en d\u00e9finissant notre classe.</p> \ud83d\udc0d Script Python<pre><code>type(r)\n</code></pre> \ud83d\udccb Texte<pre><code>&lt;class '__main__.Rationnel'&gt;\n</code></pre>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#ecriture-des-methodes-dediees","title":"Ecriture des m\u00e9thodes d\u00e9di\u00e9es","text":"<p>Si on veut pouvoir manipuler nos objets, il faut ajouter \u00e0 notre classe les m\u00e9thodes souhait\u00e9es. Par exemple, on ajoute les m\u00e9thodes <code>ajouter</code> et <code>egal</code> en d\u00e9finissant deux fonctions dans notre classe.</p> \ud83d\udc0d Script Python<pre><code>class Rationnel:\n\"\"\"Manipulation de rationnels d\u00e9finis par leurs num\u00e9rateur et d\u00e9nominateur\"\"\"\n\n    def __init__(self, numerateur, denominateur):\n\"\"\"Initialise le rationnel avec les valeurs indiqu\u00e9es\"\"\"\n        self.num = numerateur\n        self.den = denominateur\n\n    def ajouter(self, other):\n\"\"\"Renvoie un nouveau rationnel \u00e9gal \u00e0 la somme\"\"\"\n        import math\n        num = ...  # calcul du numerateur\n        den = ...  # calcul du d\u00e9nominateur\n        d = math.gcd(num, den)  # calcul du pgcd pour simplifier le rationnel\n        return Rationnel(num // d, den // d)  # on renvoie un nouvel objet 'Rationnel'\n\n    def egal(self, other):\n\"\"\"Renvoie Vrai si les deux rationnels sont \u00e9gaux, Faux sinon.\"\"\"        \n        return ... and ...\n</code></pre> <p>On peut alors acc\u00e9der \u00e0 ces m\u00e9thodes en utilisant \u00e9galement la notation point\u00e9e sur l'objet auquel s'applique la m\u00e9thode.</p> \ud83d\udc0d Script Python<pre><code>r1 = Rationnel(1, 4)\nr2 = Rationnel(1, 2)\nr3 = r1.ajouter(r2)  # on ajoute r2 \u00e0 r1\nr3.num, r3.den\n</code></pre> \ud83d\udc0d Script Python<pre><code>r4 = Rationnel(3, 4)\nr3.egal(r4)  # pour v\u00e9rifier si r3 = r4\n</code></pre> <p>Remarque : Vous noterez que l'on fournit toujours un param\u00e8tre de moins lors de l'appel \u00e0 une m\u00e9thode que dans la d\u00e9finition de la m\u00e9thode. En effet, le param\u00e8tre <code>self</code> n'est pas utilis\u00e9 car il d\u00e9signe la r\u00e9f\u00e9rence \u00e0 l'objet auquel s'applique la m\u00e9thode.</p> <p>On peut utiliser la fonction <code>dir</code> pour lister tous les attributs et m\u00e9thodes d'un objet.</p> \ud83d\udc0d Script Python<pre><code>r= Rationnel(5, 3)\ndir(r)\n</code></pre> <p>On constate qu'il y a de nombreuses m\u00e9thodes sp\u00e9ciales rep\u00e9rables par leur nom encadr\u00e9 de <code>__</code>. Ces m\u00e9thodes sont appel\u00e9es dans des contextes particuliers et peuvent \u00eatre red\u00e9finies par le programmeur pour une classe particuli\u00e8re. </p> <p>L'usage de ces m\u00e9thodes sp\u00e9ciales n'est pas un attendu du programme mais cela peut se r\u00e9v\u00e9ler tr\u00e8s utile. C'est pourquoi nous en pr\u00e9senterons quelques-unes.</p>"},{"location":"Programmation/Cours_Programmation_Orientee_Objet/#methodes-speciales-en-python-hors-programme","title":"M\u00e9thodes sp\u00e9ciales en Python : Hors programme","text":"<p>Nous nous contenterons ici de pr\u00e9senter trois m\u00e9thodes sp\u00e9ciales (quelques autres seront \u00e9voqu\u00e9es dans les activit\u00e9s) :</p> <ul> <li>la m\u00e9thode <code>__repr__(self)</code> est appel\u00e9e pour calculer la repr\u00e9sentation officielle en cha\u00eene de caract\u00e8res d'un objet (c'est cette m\u00e9thode qui est appel\u00e9e lorsque l'on veut \u00e9valuer un objet) ;</li> <li>la m\u00e9thode <code>__str__(self)</code> est appel\u00e9e pour calculer une cha\u00eene de caract\u00e8res informelle ou joliment mise en forme de repr\u00e9sentation de l'objet (c'est cette m\u00e9thode qui est appel\u00e9e par la fonction <code>print()</code>) ;</li> <li>la m\u00e9thode <code>__eq__(self, other)</code> est appel\u00e9e pour tester l'\u00e9galit\u00e9 entre deux objets.</li> </ul> <p>On pourrait \u00eatre tent\u00e9 d'afficher une instance ou de tester l'\u00e9galit\u00e9 entre deux instances d'une m\u00eame classe. Par exemple, avec notre classe <code>Rationnel</code> on aimerait \u00e9crire.</p> \ud83d\udc0d Script Python<pre><code>r1 = Rationnel(1, 2)\nr2 = Rationnel(1, 2)\n</code></pre> \ud83d\udc0d Script Python<pre><code>r1  # \u00e9valuation \n</code></pre> \ud83d\udc0d Script Python<pre><code>print(r1)  # affichage\n</code></pre> \ud83d\udc0d Script Python<pre><code>r1 == r2 # test d'\u00e9galit\u00e9\n</code></pre> <p>Nous ne pouvons nous satisfaire des r\u00e9sultats. L'\u00e9valuation d'un objet, son affichage et le test d'\u00e9galit\u00e9 (avec les notations habituelles) font appel respectivement aux m\u00e9thodes <code>__repr__</code>, <code>__str__</code> et <code>__eq__</code> que nous avons besoin de red\u00e9finir pour obtenir des r\u00e9sultats coh\u00e9rents.</p> \ud83d\udc0d Script Python<pre><code>class Rationnel:\n\"\"\"Manipulation de rationnels d\u00e9finis par leurs num\u00e9rateur et d\u00e9nominateur\"\"\"\n\n    def __init__(self, numerateur, denominateur):\n\"\"\"Initialise le rationnel avec les valeurs indiqu\u00e9es\"\"\"\n        self.num = numerateur\n        self.den = denominateur\n\n    def ajouter(self, other):\n\"\"\"Renvoie un nouveau rationnel \u00e9gal \u00e0 la somme\"\"\"\n        import math\n        num = self.num * other.den + other.num * self.den  # calcul du numerateur\n        den = self.den * other.den  # calcul du d\u00e9nominateur\n        d = math.gcd(num, den)  # calcul du pgcd pour simplifier le rationnel\n        return Rationnel(num // d, den // d)  # on renvoie un nouvel objet 'Rationnel'\n\n    def egal(self, other):\n\"\"\"Renvoie Vrai si les deux rationnels sont \u00e9gaux, Faux sinon.\"\"\"        \n        return self.num == other.num and self.den == other.den\n\n    def __repr__(self):\n        return \"Rationnel(\" + str(self.num) + \", \" + str(self.den) + \")\"  # ou f\"Rationnel({str.num}, {str.den})\"\n\n    def __str__(self):\n        return str(self.num) + \" / \" + str(self.den)  # ou f\"{self.num} / {self.den}\"\n\n    def __eq__(self, other):  # on pourrait aussi \u00e9crire simplement __eq__ = egal\n        return self.num * other.den == other.num * self.den\n</code></pre> <p>On peut d\u00e9sormais utiliser les instructions classiques d'\u00e9valuation (ou d'affichage) et de test d'\u00e9galit\u00e9 avec les objets de notre classe.</p> \ud83d\udc0d Script Python<pre><code>r1 = Rationnel(1, 2)\nr2 = Rationnel(1, 2)\nr1\n</code></pre> \ud83d\udc0d Script Python<pre><code>print(r1)\n</code></pre> \ud83d\udc0d Script Python<pre><code>r3 = Rationnel(1, 4)\nr4 = r3.ajouter(r1)\nr4\n</code></pre> \ud83d\udc0d Script Python<pre><code>r1 == r2\n</code></pre> <p>Que se passe-t-il pour la derni\u00e8re instruction ? </p> <p>Python reconna\u00eet qu'il doit tester l'\u00e9galit\u00e9 entre deux instances de la classe <code>Rationnel</code>. Ce test (<code>==</code>) invoque la m\u00e9thode sp\u00e9ciale <code>__eq__</code> de la classe <code>Rationnel</code>. Plus pr\u00e9cis\u00e9ment, <code>r1 == r2</code> appelle <code>r1.__eq__(r2)</code> et comme nous venons de d\u00e9finir cette m\u00e9thode, le r\u00e9sultat est coh\u00e9rent. On peut d\u00e9sormais tester l'\u00e9galit\u00e9 de deux rationnels sans utiliser l'instruction un peu plus lourde <code>r1.egal(r2)</code>.</p> <p>BILAN</p> <p>La paradigme objet est une autre fa\u00e7on de voir la programmation qui consiste \u00e0 utiliser un structure de donn\u00e9e appel\u00e9e objet qui r\u00e9unit des donn\u00e9es et des fonctionnalit\u00e9s. Les donn\u00e9es sont appel\u00e9es atributs et les fonctionnalit\u00e9s sont appel\u00e9es m\u00e9thodes.</p> <p>Une classe permet de d\u00e9finir un mod\u00e8le d'objet en sp\u00e9cifiant des attributs et des m\u00e9thodes. On peut ensuite utiliser cette classe pour fabriquer des objets selon ce mod\u00e8le.</p> <p>En Python, on utilise le mot cl\u00e9 <code>class</code> pour d\u00e9finir une classe qui devient alors un nouveau type abstrait de donn\u00e9es. On peut alors cr\u00e9er de nouveaux objets en appelant le constructeur qui porte le nom de la classe. Les objets ainsi cr\u00e9\u00e9s s'appellent des instances de la classe. </p> <p>En Python, la m\u00e9thode sp\u00e9ciale <code>__init__</code> est appel\u00e9e \u00e0 la construction d'un nouvel objet. C'est dans cette m\u00e9thode que l'on d\u00e9finit les attributs de nos objets.</p> <p>Les attributs et m\u00e9thodes d'une instance de classe sont accessibles en utilisant la notation point\u00e9e : <code>objet.attribut</code> et <code>objet.methode(arguments)</code>.</p>"},{"location":"Programmation/POO_BAC/","title":"POO : Exercices BAC","text":"Th\u00e8me 1 - Structure de donn\u00e9es                           BAC              Programmation Orient\u00e9e Objet (POO)"},{"location":"Programmation/POO_BAC/#exercice-n1-metropole-j1-ex5-2022","title":"Exercice n\u00b01 : M\u00e9tropole J1 : Ex.5 - 2022","text":"<p>P.O.O </p> <ul> <li>Laser Game</li> </ul> <p>Les participants \u00e0 un jeu de LaserGame sont r\u00e9partis en \u00e9quipes et s'affrontent dans ce jeu de tir, rev\u00eatus d'une veste \u00e0 capteurs et munis d'une arme factice \u00e9mettant des infrarouges.</p> <p>Les ordinateurs embarqu\u00e9s dans ces vestes utilisent la programmation orient\u00e9e objet pour mod\u00e9liser les joueurs. La classe <code>Joueur</code> est d\u00e9finie comme suit :</p> \ud83d\udc0d Script Python<pre><code>class Joueur:\n    def __init__(self, pseudo, identifiant, equipe):\n        \" Appelle le constructeur et initialise \"\n        self.pseudo = pseudo\n        self.equipe = equipe\n        self.id = identifiant\n        self.nb_de_tirs_emis = 0\n        self.liste_id_tirs_recus = []\n        self.est_actif = True\n\n    def tire(self):\n        \" M\u00e9thode d\u00e9clench\u00e9e par l'appui sur la g\u00e2chette \"\n        if self.est_actif:\n            self.nb_de_tirs_emis += 1\n\n    def est_determine(self):\n        \" Le joueur r\u00e9alise-t-il un grand nombre de tirs ? \"\n        return self.nb_de_tirs_emis &gt; 500  # Un bool\u00e9en est renvoy\u00e9.\n\n    def subit_un_tir(self, id_recu):\n        \" M\u00e9thode d\u00e9clench\u00e9e par les capteurs de la veste \"\n        if self.est_actif:\n            self.est_actif = False\n            self.liste_id_tirs_recus.append(id_recu)\n</code></pre> <p>1. Parmi les instructions suivantes, recopier celle qui permet de d\u00e9clarer un objet <code>joueur_1</code>, instance de la classe <code>Joueur</code>, correspondant \u00e0 un joueur dont le pseudo est <code>\"Sniper\"</code>, dont l'identifiant est <code>319</code> et qui est int\u00e9gr\u00e9 \u00e0 l'\u00e9quipe <code>\"A\"</code> :</p> <ul> <li>Instruction 1 : <code>joueur_1 = [\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 2 : <code>joueur_1 = new Joueur[\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 3 : <code>joueur_1 = Joueur(\"Sniper\", 319, \"A\")</code></li> <li>Instruction 4 : <code>joueur_1 = Joueur{\"pseudo\":\"Sniper\", \"id\":319, \"equipe\":\"A\"}</code></li> </ul> <p>2. La m\u00e9thode <code>subit_un_tir</code> r\u00e9alise les actions suivantes :</p> <p>Lorsqu'un joueur actif subit un tir capt\u00e9 par sa veste, l'identifiant du tireur est ajout\u00e9 \u00e0 l'attribut <code>liste_id_tirs_recus</code> et l'attribut <code>est_actif</code> prend la valeur <code>False</code> (le joueur est d\u00e9sactiv\u00e9). Il doit alors revenir \u00e0 son camp de base pour \u00eatre de nouveau actif.</p> <p>2.a. \u00c9crire la m\u00e9thode <code>redevenir_actif</code> qui rend \u00e0 nouveau le joueur actif uniquement s'il \u00e9tait pr\u00e9c\u00e9demment d\u00e9sactiv\u00e9.</p> <p>2.b. \u00c9crire la m\u00e9thode <code>nb_de_tirs_recus</code> qui renvoie le nombre de tirs re\u00e7us par un joueur en utilisant son attribut <code>liste_id_tirs_recus</code>.</p> <p>3. Lorsque la partie est termin\u00e9e, les participants rejoignent leur camp de base respectif o\u00f9 un ordinateur, qui utilise la classe <code>Base</code>, r\u00e9cup\u00e8re les donn\u00e9es.</p> <p>La classe <code>Base</code> est d\u00e9finie par :</p> <ul> <li>ses attributs :<ul> <li><code>equipe</code> : nom de l'\u00e9quipe (<code>str</code>), par exemple, <code>\"A\"</code>,</li> <li><code>liste_des_id_de_l_equipe</code> qui correspond \u00e0 la liste (<code>list</code>) des identifiants connus des joueurs de l'\u00e9quipe,</li> <li><code>score</code> : score (<code>int</code>) de l'\u00e9quipe, dont la valeur initiale est 1000 ;</li> </ul> </li> <li>ses m\u00e9thodes :<ul> <li><code>est_un_id_allie</code> qui d\u00e9termine si l'identifiant pass\u00e9 en param\u00e8tre est un identifiant d'un joueur de l'\u00e9quipe, en renvoyant un bool\u00e9en,</li> <li><code>decremente_score</code> qui diminue l'attribut <code>score</code> du nombre pass\u00e9 en param\u00e8tre,</li> <li><code>collecte_information</code> qui r\u00e9cup\u00e8re les statistiques d'un participant pass\u00e9 en param\u00e8tre (instance de la classe <code>Joueur</code>) pour calculer le score de l'\u00e9quipe.</li> </ul> </li> </ul> \ud83d\udc0d Script Python<pre><code>def collecte_information(self, participant):\n    if participant.equipe == self.equipe :  # test 1\n        for id in participant.liste_id_tirs_recus:\n            if self.est_un_id_allie(id):    # test 2\n                self.decremente_score(20)\n            else:\n                self.decremente_score(10)\n</code></pre> <p>3.a. Indiquer le num\u00e9ro du test (test 1 ou test 2) qui permet de v\u00e9rifier qu'en fin de partie un participant \u00e9gar\u00e9 n'a pas rejoint par erreur la base adverse.</p> <p>3.b. D\u00e9crire comment varie quantitativement le score de la base lorsqu'un joueur de cette \u00e9quipe a \u00e9t\u00e9 touch\u00e9 par le tir d'un co\u00e9quipier.</p> <p>On souhaite accorder \u00e0 la base un bonus de 40 points pour chaque joueur particuli\u00e8rement d\u00e9termin\u00e9 (qui r\u00e9alise un grand nombre de tirs).</p> <p>4. Recopier et compl\u00e9ter, en utilisant les m\u00e9thodes des classes <code>Joueur</code> et <code>Base</code>, les 2 lignes de codes suivantes qu'il faut ajouter \u00e0 la fin de la m\u00e9thode <code>collecte_information</code> :</p> \ud83d\udc0d Script Python<pre><code>    ...             # si le participant r\u00e9alise un grand nombre de tirs\n        ...         # le score de la Base augmente de 40\n</code></pre>"},{"location":"Programmation/POO_BAC/#exercice-2-dapres-2022-centres-etrangers-j2-ex-4","title":"Exercice 2 : D'apr\u00e8s 2022, Centres \u00e9trangers, J2, Ex. 4","text":"<p>P.O.O</p> <ul> <li>La Bataille</li> </ul> <p>Simon souhaite cr\u00e9er en Python le jeu de cartes \u00ab la bataille \u00bb pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu.</p> <p>R\u00e8gles du jeu de la bataille</p> <p>Pr\u00e9paration</p> <ul> <li>Distribuer toutes les cartes aux deux joueurs.</li> <li>Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cach\u00e9e devant eux.</li> </ul> <p>D\u00e9roulement</p> <ul> <li>\u00c0 chaque tour, chaque joueur d\u00e9voile la carte du haut de son tas.</li> <li>Le joueur qui pr\u00e9sente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.</li> <li>Les valeurs des cartes sont : dans l-ordre de la plus forte \u00e0 la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible)</li> </ul> <p>Si deux cartes sont de m\u00eame valeur, il y a \u00ab bataille \u00bb.</p> <ul> <li>Chaque joueur pose alors une carte face cach\u00e9e, suivie d'une carte face visible sur la carte d\u00e9voil\u00e9e pr\u00e9c\u00e9demment.</li> <li>On recommence l'op\u00e9ration s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.</li> </ul> <p>Lorsque l'un des joueurs poss\u00e8de toutes les cartes du jeu, la partie s'arr\u00eate et ce dernier gagne.</p> <p>Pour cela Simon cr\u00e9e une classe Python <code>Carte</code>. Chaque instance de la classe a deux attributs : un pour sa <code>valeur</code> et un pour sa <code>couleur</code>. Il donne au valet la valeur \\(11\\), \u00e0 la dame la valeur \\(12\\), au roi la valeur \\(13\\) et \u00e0 l'as la valeur \\(14\\). La couleur est une chaine de caract\u00e8res : <code>\"trefle\"</code>, <code>\"carreau\",</code> <code>\"coeur\"</code> ou <code>\"pique\"</code>.</p> <p>1. Simon a \u00e9crit la classe Python <code>Carte</code> suivante, ayant deux attributs <code>valeur</code> et <code>couleur</code>, et dont le constructeur prend deux arguments : <code>val</code> et <code>coul</code>.</p> <p>1.a. Recopier et compl\u00e9ter les <code>...</code> des lignes 3 et 4 ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        ... .valeur = ...\n        ... = coul\n</code></pre> <p>1.b. Parmi les propositions ci-dessous quelle instruction permet de cr\u00e9er l'objet \u00ab 7 de c\u0153ur \u00bb sous le nom <code>c7</code> ?</p> <ul> <li><code>c7.__init__(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(7, \"coeur\")</code></li> <li><code>from Carte import 7, \"coeur\"</code></li> </ul> <p>2. On souhaite cr\u00e9er le jeu de cartes. Pour cela, on \u00e9crit une fonction <code>initialiser</code> :</p> <ul> <li>sans param\u00e8tre</li> <li>qui renvoie une liste de 52 objets de la classe <code>Carte</code> repr\u00e9sentant les 52 cartes du jeu.</li> </ul> <p>Voici une proposition de code. Recopier et compl\u00e9ter les lignes suivantes pour que la fonction r\u00e9ponde \u00e0 la demande :</p> \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(...):\n        carte_cree = ...\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> <p>3. On rappelle que dans une partie de bataille, les deux joueurs tirent chacun une carte du dessus de leur tas, et celui qui tire la carte la plus forte remporte les deux cartes et les place en dessous de son tas.</p> <p>Parmi les structures lin\u00e9aires de donn\u00e9es suivantes : Tableau, File, Pile, quelle est celle qui mod\u00e9lise le mieux un tas de cartes dans ce jeu de la bataille ? Justifier votre choix.</p> <p>4. \u00c9crire une fonction <code>comparer</code> qui prend en param\u00e8tres deux objets de la classe Carte : <code>carte_1, carte_2</code>. Cette fonction renvoie :</p> <ul> <li>\\(0\\) si la valeur des deux cartes est identique ;</li> <li>\\(1\\) si la carte <code>carte_1</code> a une valeur strictement plus forte que celle de <code>carte_2</code> ;</li> <li>\\(-1\\) si la carte <code>carte_2</code> a une valeur strictement plus forte que celle de <code>carte_1</code>.</li> </ul>"},{"location":"Programmation/POO_BAC_correction/","title":"POO : Exercices BAC - Correction","text":""},{"location":"Programmation/POO_BAC_correction/#exercice-n1-metropole-j1-ex5-2022","title":"Exercice n\u00b01 : M\u00e9tropole J1 : Ex.5 - 2022","text":"<p>P.O.O </p> <ul> <li>Laser Game</li> </ul> <p>Les participants \u00e0 un jeu de LaserGame sont r\u00e9partis en \u00e9quipes et s'affrontent dans ce jeu de tir, rev\u00eatus d'une veste \u00e0 capteurs et munis d'une arme factice \u00e9mettant des infrarouges.</p> <p>Les ordinateurs embarqu\u00e9s dans ces vestes utilisent la programmation orient\u00e9e objet pour mod\u00e9liser les joueurs. La classe <code>Joueur</code> est d\u00e9finie comme suit :</p> \ud83d\udc0d Script Python<pre><code>class Joueur:\n    def __init__(self, pseudo, identifiant, equipe):\n        \" Appelle le constructeur et initialise \"\n        self.pseudo = pseudo\n        self.equipe = equipe\n        self.id = identifiant\n        self.nb_de_tirs_emis = 0\n        self.liste_id_tirs_recus = []\n        self.est_actif = True\n\n    def tire(self):\n        \" M\u00e9thode d\u00e9clench\u00e9e par l'appui sur la g\u00e2chette \"\n        if self.est_actif:\n            self.nb_de_tirs_emis += 1\n\n    def est_determine(self):\n        \" Le joueur r\u00e9alise-t-il un grand nombre de tirs ? \"\n        return self.nb_de_tirs_emis &gt; 500  # Un bool\u00e9en est renvoy\u00e9.\n\n    def subit_un_tir(self, id_recu):\n        \" M\u00e9thode d\u00e9clench\u00e9e par les capteurs de la veste \"\n        if self.est_actif:\n            self.est_actif = False\n            self.liste_id_tirs_recus.append(id_recu)\n</code></pre> <p>1. Parmi les instructions suivantes, recopier celle qui permet de d\u00e9clarer un objet <code>joueur_1</code>, instance de la classe <code>Joueur</code>, correspondant \u00e0 un joueur dont le pseudo est <code>\"Sniper\"</code>, dont l'identifiant est <code>319</code> et qui est int\u00e9gr\u00e9 \u00e0 l'\u00e9quipe <code>\"A\"</code> :</p> <ul> <li>Instruction 1 : <code>joueur_1 = [\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 2 : <code>joueur_1 = new Joueur[\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 3 : <code>joueur_1 = Joueur(\"Sniper\", 319, \"A\")</code></li> <li>Instruction 4 : <code>joueur_1 = Joueur{\"pseudo\":\"Sniper\", \"id\":319, \"equipe\":\"A\"}</code></li> </ul> R\u00e9ponse <p>C'est l'instruction 3 : <code>joueur_1 = Joueur(\"Sniper\", 319, \"A\")</code></p> <p>2. La m\u00e9thode <code>subit_un_tir</code> r\u00e9alise les actions suivantes :</p> <p>Lorsqu'un joueur actif subit un tir capt\u00e9 par sa veste, l'identifiant du tireur est ajout\u00e9 \u00e0 l'attribut <code>liste_id_tirs_recus</code> et l'attribut <code>est_actif</code> prend la valeur <code>False</code> (le joueur est d\u00e9sactiv\u00e9). Il doit alors revenir \u00e0 son camp de base pour \u00eatre de nouveau actif.</p> <p>2.a. \u00c9crire la m\u00e9thode <code>redevenir_actif</code> qui rend \u00e0 nouveau le joueur actif uniquement s'il \u00e9tait pr\u00e9c\u00e9demment d\u00e9sactiv\u00e9.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def redevenir_actif(self):\n    if not self.est_actif:\n        self.est_actif = True\n</code></pre> <p>2.b. \u00c9crire la m\u00e9thode <code>nb_de_tirs_recus</code> qui renvoie le nombre de tirs re\u00e7us par un joueur en utilisant son attribut <code>liste_id_tirs_recus</code>.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def nb_tirs_recus(self):\n    return len(self.liste_id_tirs_recus)\n</code></pre> <p>3. Lorsque la partie est termin\u00e9e, les participants rejoignent leur camp de base respectif o\u00f9 un ordinateur, qui utilise la classe <code>Base</code>, r\u00e9cup\u00e8re les donn\u00e9es.</p> <p>La classe <code>Base</code> est d\u00e9finie par :</p> <ul> <li>ses attributs :<ul> <li><code>equipe</code> : nom de l'\u00e9quipe (<code>str</code>), par exemple, <code>\"A\"</code>,</li> <li><code>liste_des_id_de_l_equipe</code> qui correspond \u00e0 la liste (<code>list</code>) des identifiants connus des joueurs de l'\u00e9quipe,</li> <li><code>score</code> : score (<code>int</code>) de l'\u00e9quipe, dont la valeur initiale est 1000 ;</li> </ul> </li> <li>ses m\u00e9thodes :<ul> <li><code>est_un_id_allie</code> qui d\u00e9termine si l'identifiant pass\u00e9 en param\u00e8tre est un identifiant d'un joueur de l'\u00e9quipe, en renvoyant un bool\u00e9en,</li> <li><code>decremente_score</code> qui diminue l'attribut <code>score</code> du nombre pass\u00e9 en param\u00e8tre,</li> <li><code>collecte_information</code> qui r\u00e9cup\u00e8re les statistiques d'un participant pass\u00e9 en param\u00e8tre (instance de la classe <code>Joueur</code>) pour calculer le score de l'\u00e9quipe.</li> </ul> </li> </ul> \ud83d\udc0d Script Python<pre><code>def collecte_information(self, participant):\n    if participant.equipe == self.equipe :  # test 1\n        for id in participant.liste_id_tirs_recus:\n            if self.est_un_id_allie(id):    # test 2\n                self.decremente_score(20)\n            else:\n                self.decremente_score(10)\n</code></pre> <p>3.a. Indiquer le num\u00e9ro du test (test 1 ou test 2) qui permet de v\u00e9rifier qu'en fin de partie un participant \u00e9gar\u00e9 n'a pas rejoint par erreur la base adverse.</p> R\u00e9ponse <p>C'est le test 1 qui permet de savoir si le joueur ne s'est pas \u00e9gar\u00e9 en terrain adverse.</p> <p>3.b. D\u00e9crire comment varie quantitativement le score de la base lorsqu'un joueur de cette \u00e9quipe a \u00e9t\u00e9 touch\u00e9 par le tir d'un co\u00e9quipier.</p> R\u00e9ponse <p>Un tir ami fait perdre 20 points au score.</p> <p>On souhaite accorder \u00e0 la base un bonus de 40 points pour chaque joueur particuli\u00e8rement d\u00e9termin\u00e9 (qui r\u00e9alise un grand nombre de tirs).</p> <p>4. Recopier et compl\u00e9ter, en utilisant les m\u00e9thodes des classes <code>Joueur</code> et <code>Base</code>, les 2 lignes de codes suivantes qu'il faut ajouter \u00e0 la fin de la m\u00e9thode <code>collecte_information</code> :</p> \ud83d\udc0d Script Python<pre><code>    ...             # si le participant r\u00e9alise un grand nombre de tirs\n        ...         # le score de la Base augmente de 40\n</code></pre> R\u00e9ponse <p>Pour augmenter de \\(40\\), on peut soustraire \\(-40\\).</p> \ud83d\udc0d Script Python<pre><code>    if participant.est_determine():  # si le participant r\u00e9alise un grand nombre de tirs\n        self.decremente_score(-40)   # le score de la Base augmente de 40\n</code></pre>"},{"location":"Programmation/POO_BAC_correction/#exercice-2-dapres-2022-centres-etrangers-j2-ex-4","title":"Exercice 2 : D'apr\u00e8s 2022, Centres \u00e9trangers, J2, Ex. 4","text":"<p>P.O.O</p> <ul> <li>La Bataille</li> </ul> <p>Simon souhaite cr\u00e9er en Python le jeu de cartes \u00ab la bataille \u00bb pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu.</p> <p>R\u00e8gles du jeu de la bataille</p> <p>Pr\u00e9paration</p> <ul> <li>Distribuer toutes les cartes aux deux joueurs.</li> <li>Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cach\u00e9e devant eux.</li> </ul> <p>D\u00e9roulement</p> <ul> <li>\u00c0 chaque tour, chaque joueur d\u00e9voile la carte du haut de son tas.</li> <li>Le joueur qui pr\u00e9sente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.</li> <li>Les valeurs des cartes sont : dans l-ordre de la plus forte \u00e0 la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible)</li> </ul> <p>Si deux cartes sont de m\u00eame valeur, il y a \u00ab bataille \u00bb.</p> <ul> <li>Chaque joueur pose alors une carte face cach\u00e9e, suivie d'une carte face visible sur la carte d\u00e9voil\u00e9e pr\u00e9c\u00e9demment.</li> <li>On recommence l'op\u00e9ration s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.</li> </ul> <p>Lorsque l'un des joueurs poss\u00e8de toutes les cartes du jeu, la partie s'arr\u00eate et ce dernier gagne.</p> <p>Pour cela Simon cr\u00e9e une classe Python <code>Carte</code>. Chaque instance de la classe a deux attributs : un pour sa <code>valeur</code> et un pour sa <code>couleur</code>. Il donne au valet la valeur \\(11\\), \u00e0 la dame la valeur \\(12\\), au roi la valeur \\(13\\) et \u00e0 l'as la valeur \\(14\\). La couleur est une chaine de caract\u00e8res : <code>\"trefle\"</code>, <code>\"carreau\",</code> <code>\"coeur\"</code> ou <code>\"pique\"</code>.</p> <p>1. Simon a \u00e9crit la classe Python <code>Carte</code> suivante, ayant deux attributs <code>valeur</code> et <code>couleur</code>, et dont le constructeur prend deux arguments : <code>val</code> et <code>coul</code>.</p> <p>1.a. Recopier et compl\u00e9ter les <code>...</code> des lignes 3 et 4 ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        ... .valeur = ...\n        ... = coul\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        self.valeur = val\n        self.couleur = coul\n</code></pre> <p>1.b. Parmi les propositions ci-dessous quelle instruction permet de cr\u00e9er l'objet \u00ab 7 de c\u0153ur \u00bb sous le nom <code>c7</code> ?</p> <ul> <li><code>c7.__init__(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(7, \"coeur\")</code></li> <li><code>from Carte import 7, \"coeur\"</code></li> </ul> R\u00e9ponse <p><code>c7 = Carte(7, \"coeur\")</code> cr\u00e9e une instance de la classe <code>Carte</code> de valeur \\(7\\) et de couleur <code>\"coeur\"</code>, puis l'affecte \u00e0 la variable <code>c7</code>.</p> <p>2. On souhaite cr\u00e9er le jeu de cartes. Pour cela, on \u00e9crit une fonction <code>initialiser</code> :</p> <ul> <li>sans param\u00e8tre</li> <li>qui renvoie une liste de 52 objets de la classe <code>Carte</code> repr\u00e9sentant les 52 cartes du jeu.</li> </ul> <p>Voici une proposition de code. Recopier et compl\u00e9ter les lignes suivantes pour que la fonction r\u00e9ponde \u00e0 la demande :</p> \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(...):\n        carte_cree = ...\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(2, 15):\n        carte_cree = Carte(val, coul)\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> <p>3. On rappelle que dans une partie de bataille, les deux joueurs tirent chacun une carte du dessus de leur tas, et celui qui tire la carte la plus forte remporte les deux cartes et les place en dessous de son tas.</p> <p>Parmi les structures lin\u00e9aires de donn\u00e9es suivantes : Tableau, File, Pile, quelle est celle qui mod\u00e9lise le mieux un tas de cartes dans ce jeu de la bataille ? Justifier votre choix.</p> R\u00e9ponse <p>On a besoin d'une structure lin\u00e9aire pour</p> <ul> <li>extraire une carte \u00e0 une seule extr\u00e9mit\u00e9 ;</li> <li>ajouter une carte \u00e0 l'autre extr\u00e9mit\u00e9 (elle sera donc loin d'\u00eatre pioch\u00e9e).</li> </ul> <p>FILO : First In Last Out ; premier entr\u00e9, dernier sorti, pour la File.</p> <p>C'est la File qui r\u00e9pond le mieux \u00e0 la mod\u00e9lisation souhait\u00e9e.</p> <p>4. \u00c9crire une fonction <code>comparer</code> qui prend en param\u00e8tres deux objets de la classe Carte : <code>carte_1, carte_2</code>. Cette fonction renvoie :</p> <ul> <li>\\(0\\) si la valeur des deux cartes est identique ;</li> <li>\\(1\\) si la carte <code>carte_1</code> a une valeur strictement plus forte que celle de <code>carte_2</code> ;</li> <li>\\(-1\\) si la carte <code>carte_2</code> a une valeur strictement plus forte que celle de <code>carte_1</code>.</li> </ul> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def comparer(carte_1, carte_2):\n    if carte_1.valeur &gt; carte_2.valeur:\n        return 1\n    elif carte_1.valeur &lt; carte_2.valeur:\n        return -1\n    else:\n        return 0\n</code></pre>"},{"location":"Programmation/T1_1_Recursivite/","title":"Macro Rendering Error","text":"<p>File: <code>Programmation/T1_1_Recursivite.md</code></p> <p>KeyError: 3</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 6, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 3\n</code></pre>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/","title":"T4 1 TP Recursivite correction","text":"Th\u00e8me 4 - Langage et Programmation                           03              RECURSIVITE <p>Programme Terminale </p> Contenus Capacit\u00e9s attendues Commentaires R\u00e9cursivit\u00e9 Ecrire un programme r\u00e9cursif. Analyser le fonctionnement d'un programme r\u00e9cursif. Des exemples relevant de domaines vari\u00e9s sont \u00e0 privil\u00e9gier <p></p>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#premiere-approche","title":"Premi\u00e8re approche","text":"<p>Faite l'essai</p>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#principe","title":"Principe","text":"<p>En r\u00e8gle g\u00e9n\u00e9rale, un objet est dit r\u00e9cursif s'il se d\u00e9finit \u00e0 partir de lui-m\u00eame. On trouve donc des acronymes r\u00e9cursifs, comme :   </p> <ul> <li>GNU dans GNU/Linux (GNU is Not Unix), </li> <li>le logiciel d'\u00e9mulation WINE (Wine Is Not an Emulator),  </li> <li>les cartes bancaire VISA (Visa International Service Association), </li> <li>le moteur de recherche Bing (Bing is not Google), </li> <li>etc.  </li> </ul> <p> A retenir : Fonction r\u00e9cursive</p> <p>Une fonction est dite r\u00e9cursive lorsqu'elle fait appel \u00e0 elle-m\u00eame dans sa propre d\u00e9finition.</p>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#premiers-exemples-et-precautions-dusage","title":"Premiers exemples et pr\u00e9cautions d'usage","text":"<p>Note : No infinite recursion ! Voici trois premiers exemples de fonctions r\u00e9cursives. Dans chaque cas, rep\u00e9rer l'appel r\u00e9cursif \u00e0 la fonction.</p> <p>Une seule de ces 3 fonctions est correcte, laquelle?</p> <ul> <li> <p>Fonction 1 \ud83d\udc0d Script Python<pre><code>def f(n):\n    print(n)\n    f(n-1)\n    print(\"Hello world!\")\n</code></pre></p> </li> <li> <p>Fonction 2 \ud83d\udc0d Script Python<pre><code>def f(n):\n    if n == 0:\n        print(\"Hello world!\")\n    else:\n        print(n)\n        f(n-1)\n</code></pre></p> </li> <li> <p>Fonction 3 \ud83d\udc0d Script Python<pre><code>def f(n):\n    if n == 0:\n        print(\"Hello world!\")\n    else:\n        print(n)\n        f(n)\n</code></pre></p> </li> </ul> <p>Cas de Base</p> <p>Lorsqu'on \u00e9crit une fonction r\u00e9cursive, le pi\u00e8ge classique est de cr\u00e9er une boucle infinie.</p> <p>Hormis les blaques de geeks d'initi\u00e9s, la r\u00e9cursivit\u00e9 en informatique ne tol\u00e8re pas l'auto-r\u00e9f\u00e9rence infinie: il faut pr\u00e9voir une condition d'arr\u00eat qui traite le cas de base !!!</p> <p></p> <p>Ce \u00abcas de base\u00bb sera aussi appel\u00e9 \u00abcondition d'arr\u00eat\u00bb, puisque la tr\u00e8s grande majorit\u00e9 des algorithmes r\u00e9cursifs peuvent \u00eatre per\u00e7us comme des escaliers qu'on descend marche par marche, jusqu'au sol qui assure notre arr\u00eat.</p> <p>Terminaison</p> <p>Pour s'assurer qu'une fonction r\u00e9cursive se termine, il faut absolument que la cha\u00eene d'appel conduise au cas de base. </p> <ul> <li>si le param\u00e8tre de la fonction est un entier, alors l'appel doit se faire avec un entier strictement inf\u00e9rieur;  </li> <li>si le param\u00e8tre de la fonction est une liste, alors l'appel doit se faire avec une liste de longueur strictement inf\u00e9rieure;  </li> <li>etc.</li> </ul> <p></p> <p>Observez bien la descente puis la remont\u00e9e de notre vendeur de livre. Le cas de base est ici l'\u00e9tage 0. Il emp\u00eache une descente infinie.</p> <p>Nous coderons bient\u00f4t la fonction donnant le prix du livre en fonction de l'\u00e9tage.</p> <p>Pour l'instant, d\u00e9couvrons enfin \u00e0 quoi ressemble une fonction r\u00e9cursive \u00abbien \u00e9crite\u00bb :</p> \ud83d\udc0d Script Python<pre><code>def mystere(n):\n    if n == 0 :\n        return 0\n    else : \n        return n + mystere(n-1)\n</code></pre> <p>Trois choses sont essentielles et doivent se retrouver dans tout programme r\u00e9cursif :</p> <ul> <li>lignes 2 et 3 : le cas de base (si n vaut 0 on renvoie vraiment une valeur, en l'occurence 0)  </li> <li>ligne 5 : l'appel r\u00e9cursif  </li> <li>ligne 5 : la d\u00e9cr\u00e9mentation du param\u00e8tre d'appel  </li> </ul> \ud83d\udccb Texte<pre><code>mystere(5)\n15\n</code></pre> \ud83d\udccb Texte<pre><code>mystere(8)\n36\n</code></pre> <p>Analyse avec Python tutor</p> <p>Que se passe-t-il lorsqu'on appelle <code>mystere(4)</code> ?</p> \\[\\begin{align}   \\rm{mystere(4)} &amp;= 4+ \\rm{mystere(3)}\\\\    &amp;= 4+ (3+\\rm{mystere(2)}) \\\\    &amp;= 4+ (3+(2+\\rm{mystere(1)} )) \\\\    &amp;= 4+ (3+(2+(1+\\rm{mystere(0)} ))) \\\\       &amp;= 4+ (3+(2+(1+0 ))) \\\\   \\end{align}\\] <p>On voit que l'existence du cas de base pour \\(n=0\\) est primordiale pour \u00e9viter la r\u00e9cursion infinie.</p> <p></p> <p>Cette fonction <code>mystere(n)</code> calcule donc la somme des entiers positifs inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\).</p> <p>Une anecdote raconte que Carl Friedrich Gauss trouva cette valeur de 5050 en quelques secondes, devant son instituteur \u00e9bahi. Il venait pour cela d'inventer la formule :  \\(\\(1+2+3+\\dots+n=\\frac{n(n+1)}{2}\\)\\)</p> <p>Ici, \\(1+2+3+\\dots+100=\\dfrac{(100\\times 101)}{2}=50 \\times 101=5050\\)</p> <p>A Connaitre : Somme des n premiers entiers</p> <p>On souhaite calculer la somme suivante:  \\(S = 0 + 1 + 2 + 3 + \\dots + (n-1) + n\\)</p> Version it\u00e9rativeVersion r\u00e9cursive <p>En premi\u00e8re, on a vu comment construire une fonction it\u00e9rative le permettant, \u00e0 l'aide d'une boucle <code>for</code> (d'o\u00f9 le terme it\u00e9ratif) et d'une variable accumulatrice:</p> \ud83d\udc0d Script Python<pre><code>def somme_iter(n):\n    s = 0\n    for k in range(n+1):\n     s += k\n    return s\nsomme_iter(100)\n5050\n</code></pre> <p>Une autre fa\u00e7on de voir le probl\u00e8me, c'est de se dire que cette somme peut s'\u00e9crire \\(S = n + (n-1) + \\dots + 3 + 2 + 1 + 0\\) et que c'est la somme de \\(n\\) et de la somme des \\(n-1\\) premiers entiers : \\(S = n + \\underbrace{(n-1) + \\dots + 3 + 2 + 1 + 0}_{\\text{somme des entiers jusqu'\u00e0 } n-1}\\).</p> <p>On \u00e9crit alors de fa\u00e7on \u00abassez naturelle\u00bb la fonction r\u00e9cursive suivante (qui est la fonction myst\u00e8re pr\u00e9c\u00e9dente) :</p> \ud83d\udc0d Script Python<pre><code>def somme_rec(n):\n    if n == 0:\n        return 0\n    else:\n        return n + somme(n-1)\nsomme_rec(100)\n5050  \n</code></pre> <p>Exercice  1  </p> Enonc\u00e9Version it\u00e9rativeVersion r\u00e9cursive <p>On consid\u00e8re la fonction <code>factorielle(n)</code> (not\u00e9e \\(n!\\) en math\u00e9matiques), qui calcule le produit d'un entier \\(n\\) par les entiers positifs qui lui sont inf\u00e9rieurs: $$ n! = n \\times (n-1) \\times (n-2) \\times  \\dots \\times 3 \\times 2 \\times 1$$ Exemple : \\(5!=5\\times4\\times3\\times2\\times1=120\\)</p> <p>S'inspirer des fonctions <code>somme</code> pr\u00e9c\u00e9dentes pour \u00e9crire deux fonctions <code>facto_iter</code> (it\u00e9rative) et <code>facto_rec</code> (r\u00e9cursive) renvoyant la factorielle d'un nombre entier <code>n</code> strictement positif.</p> \ud83d\udc0d Script Python<pre><code>def facto_iter(n):\n    s = 1\n    for k in range(1,n+1):\n        s *= k\n    return s\n\nfacto_iter(10)\n3628800\n</code></pre> \ud83d\udc0d Script Python<pre><code>def facto_rec(n):\n    if n == 0:\n        return 1\n    else:\n        return n * facto_rec(n-1)\n\nfacto_rec(10)\n3628800\n</code></pre>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#mecanisme-notion-de-pile","title":"M\u00e9canisme - Notion de pile","text":"<p>Maintenant qu'on a vu le principe d'une fonction r\u00e9cursive, il faut comprendre comment se passent les appels successifs \u00e0 la fonction, pour un param\u00e8tre diff\u00e9rent. </p> <p>Reprenons l'exemple de la fonction r\u00e9cursive <code>somme</code>. Si on appelle cette fonction: \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; somme(5)\n</code></pre> Puisque l'argument <code>5</code> ne correspond pas au cas de base, la fonction va faire appel \u00e0 <code>somme(4)</code>. Il faut retenir que l'ex\u00e9cution de la fonction <code>somme</code> est interrompue (avec l'argument <code>5</code>) pour rappeler la fonction <code>somme</code> (avec l'argument <code>4</code>)... </p> <p>Pour g\u00e9rer ces diff\u00e9rents appels, le syst\u00e8me utilise une pile d'ex\u00e9cution :   </p> <p>(Dans la notion de pile (qui sera trait\u00e9e plus tard dans le programme de Terminale), seule l'instruction \u00aben haut de la pile\u00bb peut \u00eatre trait\u00e9e et enlev\u00e9e (on dit \u00abd\u00e9pil\u00e9e\u00bb).)</p> <p></p>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#limitation-de-la-taille-de-la-pile","title":"Limitation de la taille de la pile","text":"<p>Nous venons de voir que notre appel \u00e0 <code>somme(5)</code> g\u00e9n\u00e9rait une pile de hauteur 6 (on parlera plut\u00f4t de profondeur 6). Cette profondeur est-elle limit\u00e9e ?</p> \ud83d\udc0d Script Python<pre><code>somme_rec(3000)\n</code></pre> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;input&gt;\", line 5, in somme_rec\n  File \"&lt;input&gt;\", line 5, in somme_rec\n  File \"&lt;input&gt;\", line 5, in somme_rec\n  [Previous line repeated 271 more times]\n  File \"&lt;input&gt;\", line 2, in somme_rec\nRecursionError: maximum recursion depth exceeded in comparison\n</code></pre> <p>Dans l'exemple pr\u00e9c\u00e9dent, la pile a une profondeur de 6. La profondeur de la pile n'est pas illimit\u00e9e: \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; somme(3000)\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;input&gt;\", line 5, in somme_rec\n  File \"&lt;input&gt;\", line 5, in somme_rec\n  File \"&lt;input&gt;\", line 5, in somme_rec\n  [Previous line repeated 271 more times]\n  File \"&lt;input&gt;\", line 2, in somme_rec\nRecursionError: maximum recursion depth exceeded in comparison\n</code></pre></p> <p>Vous venons de provoquer un \u00abd\u00e9bordement de pile\u00bb, le c\u00e9l\u00e8bre stack overflow.</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, les programmes r\u00e9cursifs sont souvent proches de la d\u00e9finition du probl\u00e8me \u00e0 r\u00e9soudre et assez naturels \u00e0 \u00e9crire, mais ils sont susceptibles de g\u00e9n\u00e9rer un trop grand nombre d'appels \u00e0 eux-m\u00eames et de n\u00e9cessiter un temps d'ex\u00e9cution trop grand ou un d\u00e9bordement de pile. Il est parfois possible de les optimiser, comme nous le verrons dans le cours concernant la programmation dynamique.  </p> <p>Nous reparlerons aussi de r\u00e9cursivit\u00e9 lorsque nous l'inscrirons dans un paradigme plus global de programmation, qui est \u00ab diviser pour r\u00e9gner \u00bb (en anglais divide and conquer).</p>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#premiers-exercices","title":"Premiers Exercices","text":"<p>Exercice  2</p> Enonc\u00e9Correction <p>Coder la fonction <code>prix(etage)</code> de la BD pr\u00e9sent\u00e9e plus haut.</p> \ud83d\udc0d Script Python<pre><code>def prix(etage):\n    if etage == 0:\n        return 3\n    else:\n        return 2 * prix(etage - 1)\n\nprix(4)\n48\n</code></pre> <p>Exercice  3</p> Enonc\u00e9Correction <p>\u00c9crire une fonction r\u00e9cursive <code>puissance(x,n)</code> qui calcule le nombre \\(x^n\\).</p> \ud83d\udc0d Script Python<pre><code>def puissance(x, n):\n    if n == 0:\n        return 1\n    else:\n        return x * puissance(x, n-1)\n\npuissance(2,10)\n1024\n</code></pre> <p>Exercice  4</p> Enonc\u00e9Correction <p>Dans une grande boite de P\u00e9tri contenant un mileu nutritif riche sont d\u00e9pos\u00e9es 10 bact\u00e9ries. On suppose que chaque heure le nombre de bact\u00e9ries est multipli\u00e9 par 4. Ecrire une fonction r\u00e9cursive nb_bact qui renvoie le nombre de bact\u00e9ries au bout de \\(n\\) jours, \\(n\\) \u00e9tant un entier naturel saisi comme argument.    </p> \ud83d\udc0d Script Python<pre><code>def nb_bact(n):\n    if n==0:\n        return 10\n    else:\n        return 4*nb_bact(n-1)\n\nnb_jours=3\nnb_heures=24*3\nnb_bact(nb_heures)\n223007451985306231415357182726483615059804160\n</code></pre>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#exemples-de-recursivite-double","title":". Exemples de r\u00e9cursivit\u00e9 double.","text":"<p>Les expressions qui d\u00e9finissent une fonction peuvent aussi d\u00e9pendre de plusieurs appels \u00e0 la fonction en cours de d\u00e9finition.</p>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#la-suite-de-fibonnaci","title":"La suite de Fibonnaci","text":"<p>Consid\u00e9rons la suite num\u00e9rique ainsi d\u00e9finie : </p> <ul> <li>\\(F_0 = 0\\) </li> <li>\\(F_1 = 1\\) </li> <li>$ \\forall n \\in \\mathbb{N}, F_{n+2} = F_{n+1}+F_n$  </li> </ul> <p>On a donc \\(F_2=0+1=1, F_3=F_2+F_1=1+1=2, F_4=F_3+F_2=2+1=3, F_5=F_4+F_3=3+2=5\\) ...</p> <p>Exercice  5</p> Enonc\u00e9Version it\u00e9rativeVersion it\u00e9rative <ol> <li>Impl\u00e9menter de fa\u00e7on it\u00e9rative la suite de Fibonnaci.  </li> <li>Impl\u00e9menter de fa\u00e7on r\u00e9cursive la suite de Fibonnaci.</li> </ol> \ud83d\udc0d Script Python<pre><code>def fibo_imperatif(n):\n    a = 0\n    b = 1\n    for k in range(n-1):\n        t = b\n        b = a + b\n        a = t\n    return b\n\nfibo_imperatif(10)\n55\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fibo_rec(n):\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibo_rec(n-1) + fibo_rec(n-2)\n\nfibo(10)\n55\n</code></pre> <p>Observation de la pile d'ex\u00e9cution</p> <p>Appelons <code>F(n)</code> la fonction calculant de mani\u00e8re r\u00e9cursive le n-i\u00e8me terme de la suite. Observons en d\u00e9tail la pile d'ex\u00e9cution lors du calcul de <code>F(4)</code>.</p> <p>On s'aper\u00e7oit notamment que :</p> <ul> <li>les appels r\u00e9cursifs ne sont PAS simultan\u00e9s (rappelons que la simultan\u00e9it\u00e9 n'existe th\u00e9oriquement pas en informatique). On pourrait s'imaginer que la relation \\(F_4=F_3+F_2\\) allait d\u00e9clencher deux \u00abfils\u00bb r\u00e9cursifs calculant respectivement \\(F_3\\) et \\(F_2\\). Il n'en est rien, on va jusqu'au bout du calcul de \\(F_3\\) avant de s'int\u00e9resser \u00e0 \\(F_2\\).</li> <li>cons\u00e9quence de la remarque pr\u00e9c\u00e9dente : le calcul de \\(F_2\\) s'effectue 2 fois. Une am\u00e9lioration future (appel\u00e9e m\u00e9mo\u00efsation, voir le cours de programmation dynamique) sera de conserver cette valeur de \\(F_2\\) afin d'am\u00e9liorer les calculs.</li> </ul> <p>On peut y construire par exemple l'arbre d'appel de <code>fibo(6)</code> :</p> \ud83d\udc0d Script Python<pre><code>from rcviz import viz\n</code></pre> \ud83d\udc0d Script Python<pre><code>@viz\ndef fibo(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibo(n-1)+fibo(n-2)\n</code></pre> \ud83d\udc0d Script Python<pre><code>fibo(6)\n8\n</code></pre> \ud83d\udccb Texte<pre><code>fibo.callgraph()\n</code></pre> <p></p> <p>On y remarque (par exemple) que <code>fibo(2)</code> est calcul\u00e9 5 fois... </p>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#exercices","title":"Exercices","text":"<p>Exercice  6</p> Enonc\u00e9Correction <p>On veut r\u00e9aliser un ch\u00e2teau de cartes g\u00e9ants qui prolonge la ch\u00e2teau de l'image ci-dessous :</p> <p></p> <p>On note \\(n\\) le nombre d'\u00e9tages du ch\u00e2teau et  \\(nb\\_cartes(n)\\) le nombre de cartes n\u00e9cessaires pour r\u00e9aliser un ch\u00e2teau \u00e0 \\(n\\) \u00e9tages. On admet que l'on peut conna\u00eetre le nombre \\(nb\\_cartes(n+1)\\) de cartes n\u00e9cessaires pour un ch\u00e2teau \u00e0 \\(n+1\\) \u00e9tages si on conna\u00eet d\u00e9j\u00e0 le nombre \\(nb\\_cartes(n)\\) en utilisant la relation suivante (appel\u00e9e relation de r\u00e9currence en math\u00e9matiques) : </p> \\[nb\\_cartes(n+1)=nb\\_cartes(n)+2+3 \\times n\\] <p>(\u00e0 retrouver pour ceux suivant la sp\u00e9cialit\u00e9 maths)</p> <p>On veut \u00e0 partir de ces informations construire une fonction r\u00e9cursive nomm\u00e9e \\(nb\\_cartes\\) qui renvoie finalement le nombre \\(nb\\_cartes(n)\\) si en argument lui est entr\u00e9 le nombre \\(n\\) d'\u00e9tages voulus au ch\u00e2teau.  </p> <ol> <li>Ecrire la fonction correspondante 2 Testez votre fonction obtenue. Vous pouvez utiliser l'image ci-dessus pour conna\u00eetre quelques valeurs \u00e0 obtenir.</li> </ol> \ud83d\udc0d Script Python<pre><code>def nb_cartes(n):\n    if n==0:\n        return 0\n    else:\n        return nb_cartes(n-1)+2+3*(n-1)\n\nnb_cartes(15)\n345\n</code></pre> <p>Exercice  7</p> Enonc\u00e9Correction Q1Correction Q2 <p>Soit \\((u_n)\\) la suite d'entiers d\u00e9finie par : </p> <p>\\(u_{n+1}= \\left\\{\\begin{array}{ll} \\dfrac{u_n}{2}  &amp; \\text{si } u_n \\text{ est pair}\\\\ 3 \\times u_n +1  &amp; \\text{sinon}\\\\ \\end{array} \\right.\\)</p> <p>avec \\(u_0\\) un entier quelconque plus grand que 1.  1. Ecrire une fonction r\u00e9cursive <code>syracuse(u_n)</code> qui affiche les valeurs successives de la suite \\(u_n\\) tant que \\(u_n\\) est plus grand que 1. La conjecture de Syracuse affirme que, quelle que soit la valeur de \\(u_0\\), il existe un indice \\(n\\) dans la liste tel que \\(u_n=1\\); Cette conjecture d\u00e9fie toujours les math\u00e9maticiens. 2. On appelle \u00abtemps de vol\u00bb le nombre d'\u00e9tapes n\u00e9cessaires avant de retomber sur 1. Modifier la fonction pr\u00e9c\u00e9dente afin qu'elle affiche le temps de vol pour tout nombre n.  </p> \ud83d\udc0d Script Python<pre><code>def syracuse(u):\n    print(u)\n    if u == 1:\n        return None\n    elif u % 2 == 0:\n        syracuse(u // 2)\n    else:\n        syracuse(3*u + 1)\n\nsyracuse(50)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def syracuse(n, t=0):\n    print(n)\n    t += 1\n    if n == 1:\n        print('temps de vol :', t)\n        return None\n    if n % 2 == 0:\n        syracuse(n // 2, t)\n    else:\n        syracuse(3*n + 1, t)\n\nsyracuse(50)\n</code></pre> <p>Exercice  8</p> Enonc\u00e9 <p>Voici une fonction myst\u00e8re nomm\u00e9e <code>myst</code> : \ud83d\udc0d Script Python<pre><code>def myst(l: list) -&gt; int:\n    if l==[]:\n        return 0\n    else:          \n        l.pop(0)          # suppression du premier terme de la liste l\n        return 1+myst(l)\n</code></pre></p> <ol> <li>Pourquoi cette fonction myst est une fonction r\u00e9cursive ?</li> <li>Testez cette fonction avec quelques listes.</li> <li>Quel est le r\u00f4le de cette fonction myst ?</li> </ol> <p>Exercice  9</p> Enonc\u00e9Correction <p>Soit \\((u_n)\\) la suite d'entiers d\u00e9finie par : \\(u_{n}= \\left\\{\\begin{array}{ll}     a \\in R  &amp; \\text{si } n =0\\\\     b \\in R  &amp; \\text{si } n=1\\\\     3u_{n-1}+2u_{n-2}+5 &amp; \\forall n \\geq 2     \\end{array} \\right.\\)</p> <p>Ecrire une fonction r\u00e9cursive <code>serie(n,a,b)</code> qui renvoie le \\(n\\)-i\u00e8me terme de cette suite pour les valeurs de \\(a\\) et \\(b\\) donn\u00e9es en param\u00e8tres.</p> \ud83d\udc0d Script Python<pre><code>def serie(n,a,b):\n    if n==0:\n        return a\n    if n==1:\n        return b\n    else:\n        return 3*serie(n-1,a,b)+2*serie(n-2,a,b)+5\n\nserie(10,1,2)\n359485\n</code></pre> <p>Exercice  10</p> Enonc\u00e9RemarqueCorrection <p>Un palindrome est une cha\u00eene de caract\u00e8res qui est identique lue de gauche \u00e0 droite ou de droite \u00e0 gauche. Par exemple, la cha\u00eene GIRAFARIG est un palindrome : si on inverse le mot, il reste identique. Pour coder r\u00e9cursivement un test de palindrome (cf. dessin ci-dessous), il suffit de v\u00e9rifier que  </p> <ul> <li>les lettres aux extr\u00e9mit\u00e9s sont les m\u00eames (les lettres en bleu sur la figure);  </li> <li>le mot priv\u00e9 de ses deux extr\u00e9mit\u00e9s est encore un palindrome (en orange sur le dessin), d\u2019o\u00f9 appel r\u00e9cursif.  </li> </ul> <p></p> <p>Pr\u00e9caution : quand on v\u00e9rifie que le mot priv\u00e9 de ses deux extr\u00e9mit\u00e9s est encore un palindrome, il faut faire attention \u00e0 ce que le retrait des extr\u00e9mit\u00e9s soit possible. Ce probl\u00e8me ne se pose que si le mot a une lettre ou n\u2019a aucune lettre. Dans ces cas, le mot est un palindrome, ce qui donne le cas de base de la r\u00e9cursivit\u00e9. Remarquons que si le mot a deux lettres, ce n\u2019est pas un cas de base car quand on lui retire ses extr\u00e9mit\u00e9s, la cha\u00eene devient vide et on tombe sur un cas de base.</p> <p>mot[1:-1] est un slice : c\u2019est la cha\u00eene mot amput\u00e9e de son premier caract\u00e8re (elle commence \u00e0 l\u2019indice 1 et se termine juste avant l\u2019indice -1, ce dernier indice r\u00e9f\u00e9ren\u00e7ant le dernier caract\u00e8re de la cha\u00eene).</p> \ud83d\udc0d Script Python<pre><code>def palindrome(mot):\n    if len(mot)&lt;=1:\n        return True\n    else:\n        if mot[0]==mot[-1]:\n            print(mot[1:-1])\n            return palindrome(mot[1:-1])\n        else:\n            return False\n\nprint(palindrome(\"agirafariga\"))\ngirafarig\nirafari\nrafar\nafa\nf\nTrue\n</code></pre> <p>Exercice  11 les tours de Hano\u00ef </p> Enonc\u00e9Correction <p>Le probl\u00e8me des tours de Hano\u00ef, invent\u00e9 par le math\u00e9maticien \u00c9douard Lucas en 1889, consiste \u00e0 d\u00e9placer des disques de diam\u00e8tres diff\u00e9rents d'une tour de d\u00e9part \u00e0 une tour d'arriv\u00e9e, en passant par une tour interm\u00e9diaire.</p> <p>On ne peut d\u00e9placer qu'un disque \u00e0 la fois, et on ne peut pas placer un disque sur un plus petit que lui.</p> <p>Le but est bien entendu de minimiser le nombre de d\u00e9placements.</p> <p></p> <ol> <li>Essayer de trouver une strat\u00e9gie optimale en s'entra\u00eenant par exemple [ici]https://www.mathsisfun.com/games/towerofhanoi.html)   </li> <li> <p>Observer les \u00e9tapes-cl\u00e9s suivantes :  </p> </li> <li> <p>\u00c9tape 1  </p> </li> <li> <p>\u00c9tape 2  </p> </li> <li> <p>\u00c9tape 3  </p> </li> <li> <p>\u00c9tape 4  </p> </li> <li> <p>\u00c9crire une fonction r\u00e9cursive <code>hanoi(n, depart, inter, arrivee)</code> affichant les d\u00e9placements successifs (par ex. <code>1 -&gt; 3</code>) pour d\u00e9placer <code>n</code> disques de la tour <code>depart</code> vers la tour <code>arrivee</code> en passant par la tour interm\u00e9diaire <code>inter</code>.</p> </li> </ol> \ud83d\udc0d Script Python<pre><code>def hanoi(n, depart, inter, arrivee):\n\"\"\" n : nombre d'assiettes dans la pile\n    # depart : la pile de d\u00e9part(\"A\", \"B\" ou \"C\")\n    # inter : la pile interm\u00e9daire(\"A\", \"B\" ou \"C\")\n    # arrivee : la pile d'arriv\u00e9e (\"A\", \"B\" ou \"C\") \"\"\"\n\n    if n == 1 :\n        print(depart + \" vers \" + arrivee)\n    else :\n        hanoi(n-1, depart, arrivee, inter) \n        print(depart + \" vers \" + arrivee)\n        hanoi(n-1, inter, depart, arrivee)\n\nhanoi(5, \"1\", \"2\", \"3\")\n</code></pre>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#pydefis","title":"Pyd\u00e9fis","text":"<ul> <li>Par ici la monnaie </li> <li>Le cr\u00e9pier (psycho-rigide)</li> </ul>"},{"location":"Programmation/T4_1_TP_Recursivite_correction/#annexe-dessins-recursifs-grace-au-module-turtle","title":"Annexe : dessins r\u00e9cursifs gr\u00e2ce au module <code>turtle</code>","text":"<p>Le module <code>turtle</code> permet de faire des trac\u00e9s basiques. Mais d\u00e8s l'instant o\u00f9 on met de la r\u00e9cursivit\u00e9 dans le code, les r\u00e9sultats peuvent devenir tr\u00e8s surprenants, et aboutir \u00e0 des structures fractales.</p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\nang = 40\n\ndef trace(n,l):\n\n    if n == 0 :\n        return None\n    else :\n        forward(l)\n        left(ang)\n        trace(n-1,0.7*l)\n        right(2*ang)\n        trace(n-1,0.7*l)\n        left(ang)\n        forward(-l)\n\n\npenup()        \ngoto(0,-80)\npendown()\nleft(90)\nspeed(0)\n\ntrace(5,100)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\nang = 40\n\ndef trace(n,l):\n\n    if n == 0 :\n        return None\n    else :\n        forward(l)\n        left(ang)\n        trace(n-1,0.65*l)\n        right(2*ang)\n        trace(n-1,0.65*l)\n        left(ang)\n        forward(-l)\n\n\npenup()        \ngoto(0,-80)\npendown()\nleft(90)\nspeed(0)\n\ntrace(12,100)\nmainloop()\n</code></pre> <p>Exercice  12 Facultatif</p> enonc\u00e9Correction <p>Reproduire le dessin suivant, \u00e0 l'aide du module <code>turtle</code>.  </p> <p><code>turtle</code> est un hommage au langage LOGO invent\u00e9 par Seymour Papert au MIT \u00e0 la fin des ann\u00e9es 60.</p> <p></p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\ndef carre(c):\n    for k in range(4):\n        forward(c)\n        right(90)\n\ndef base(c):\n    carre(c)\n    forward(c/2)\n    right(45)\n\ndef trace(c, n):\n    if n == 0 :\n        return None\n    else :\n        base(c)\n        c = c/(2**0.5)\n        return trace(c, n-1)\n\ntrace(200, 15)\nmainloop()\n</code></pre> <p></p>"},{"location":"Programmation/calculabilite/","title":"Macro Rendering Error","text":"<p>File: <code>Programmation/calculabilite.md</code></p> <p>KeyError: 23</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 23\n</code></pre>"},{"location":"Programmation/index_prog/","title":"\u27a1 Th\u00e8me : Langage de programmation(LP)","text":"<p>Histoire de l'informatique</p> <p> </p> <p></p> <p>En 1962, Ole-Johan Dahl et Kristen Nygaard cr\u00e9ent le langage Simula, premier langage \u00e0 classes. </p> <p>Au d\u00e9but des ann\u00e9es 1970, Alan Kay s'inspire de Simula pour cr\u00e9er le langage Smalltalk, qui est le premier langage orient\u00e9 objet.</p> <p>Aujourd'hui, il existe de nombreux langages \u00e0 objets, sous forme fonctionnelle, imp\u00e9rative, ou les deux, comme Python par exemple.</p> <p> </p> <p>Info</p> <p>\ud83d\uddf9 R\u00e9cursivit\u00e9 \ud83d\uddf9 Modularit\u00e9   \ud83d\uddf9 Mise au point des programmes. Gestion des bugs.  </p>"},{"location":"Projet/cryptographie/","title":"D\u00e9couverte de la cryptographie","text":"<p>la cryptographie est une des applications majeures de l'informatique. Le but de projet est de r\u00e9aliser un programme permettant de chiffrer et de d\u00e9chiffrer un texte \u00e0 l'aide du code de C\u00e9sar, l'une des plus anciens (et des plus simples) m\u00e9thode de cryptage. Le code de C\u00e9sar peut \u00eatre cass\u00e9 par analyse fr\u00e9quentielle, on programmera donc aussi le d\u00e9cryptage  du code de C\u00e9sar en utilisant cette technique. Une autre partie du projet est consacr\u00e9e au chiffrement de Vigen\u00e8re.</p>"},{"location":"Projet/cryptographie/#etape-1-le-code-de-cesar","title":"Etape 1 : le code de C\u00e9sar","text":"<p>Comprendre le code de C\u00e9sar et la m\u00e9thode pour le d\u00e9chiffrer. On pourra faire ses propres recherches ou consulter la vid\u00e9o suivante (en anglais, mais les sous-titres fran\u00e7ais sont disponibles):</p> <p>Sans l'aide d'un ordinateur, \"\u00e0 la main\" :</p> <ul> <li>Chiffrer le mot \"EXPERT\" en d\u00e9calant les lettres de 5 emplacements.</li> <li>D\u00e9chiffrer de mot \"DOBBSLVO\" en sachant que la cl\u00e9  est 10.</li> </ul> <p>Pr\u00e9parer une explication orale de la m\u00e9thode de chiffrement ainsi que le la technique de d\u00e9chiffrement, inclure des exemples. </p>"},{"location":"Projet/cryptographie/#etape-2-chiffrer-ou-dechiffrer-avec-la-cle","title":"Etape 2 : Chiffrer ou d\u00e9chiffrer avec la cl\u00e9","text":"<p>R\u00e9aliser un programme permettant \u00e0 un utilisateur de chiffrer ou de d\u00e9chiffrer un texte avec la cl\u00e9 de son choix. Pour simplifier, on suppose que le texte est constitu\u00e9 uniquement de lettres majuscules non accentu\u00e9es, de ponctuations et d'espaces. On \u00e9crira une fonction <code>chiffre_texte</code> qui prend en argument une chaine de caract\u00e8re <code>texte</code> et une cl\u00e9 <code>cle</code> (entier compris entre 1 et 25) et qui renvoie <code>texte</code> chiffr\u00e9 avec le code de C\u00e9sar de cl\u00e9 <code>cle</code> (on laisse intacte les espaces et caract\u00e8res de ponctuation, on ne d\u00e9chiffre que les lettres majuscules). Par exemple : \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; chiffre_texte(\"NSI\",14)\n'BGW'\n&gt;&gt;&gt; chiffre_texte(\"SUPER\",5)\n'XZUJW'\n&gt;&gt;&gt; chiffre_texte(\"C'EST GENIAL\",11)\n\"N'PDE RPYTLW\"\n</code></pre></p> <p>Aide</p> <ul> <li>Penser \u00e0 utiliser les fonctions <code>ord</code> et <code>chr</code> de Python</li> <li>On pourra commencer par \u00e9crire une fonction <code>chiffre_caractere</code> qui prend en argument un caract\u00e8re <code>caractere</code> et une cl\u00e9 <code>cle</code> et renvoie <code>caractere</code> d\u00e9cal\u00e9 de <code>cle</code> emplacements. </li> </ul>"},{"location":"Projet/cryptographie/#etape-3-analyse-frequentielle","title":"Etape 3 : Analyse fr\u00e9quentielle","text":"<p>Faire un programme qui d\u00e9code automatiquement un texte crypt\u00e9 par la m\u00e9thode de C\u00e9sar gr\u00e2ce \u00e0 une analyse fr\u00e9quentielle. Tester votre programme sur l'exemple suivant : \ud83d\udccb Texte<pre><code>PFOJC JCIG OJSN FSIGGW O RSQCRSF QS ASGGOUS\nQ SGH HFSG PWSB AOWG WZ FSGHS SBQCFS PSOIQCID O TOWFS\n</code></pre></p> <p>Aide</p> <p>On pourra commencer par \u00e9crire une fonction <code>plus_frequent</code> qui prend en argument un texte et renvoie la lettre qui appara\u00eet le plus souvent dans ce texte. Par exemple : \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; plus_frequent(\"UN EXEMPLE DE TEXTE\")\n'E'\n</code></pre></p>"},{"location":"Projet/cryptographie/#etape-4-dictionnaire-et-force-brute","title":"Etape 4 : dictionnaire et force brute","text":"<p>Tester votre programme sur le d\u00e9chiffrement automatique du texte suivant :</p> \ud83d\udccb Texte<pre><code>RU YXDBBJ DW YAXOXWM BXDYRA, B'JBBRC MJWB BXW URC, B'JYYDHJWC BDA BXW YXUXLQXW. RU YARC DW AXVJW, RU U'XDEARC, RU UDC; VJRB RU W'H BJRBRBBJRC ZD'DW RVKAXPURX LXWODB, RU KDCJRC \u00c0 CXDC RWBCJWC BDA DW VXC MXWC RU RPWXAJRC UJ BRPWRORLJCRXW.\n</code></pre> <p>Ce texte est extrait du livre la disparition (G. Perec), faire des recherches sur ce livre et expliquer sa particularit\u00e9. Expliquer alors pourquoi le programme de d\u00e9chiffrement par analyse fr\u00e9quentielle ne fonctionne pas. </p> <p>Une autre m\u00e9thode de d\u00e9cryptage consiste \u00e0 utiliser une attaque par force brute c'est \u00e0 dire qu'on teste toutes les cl\u00e9s possibles et on v\u00e9rifie que les mots obtenus apr\u00e8s d\u00e9chiffrement sont des mots du dictionnaire. Mettre en oeuvre en Python cet algorithme de d\u00e9cryptage et l'utiliser pour le texte donn\u00e9 en exemple ci-dessus.</p> <p>Aide</p> <p>On pourra t\u00e9l\u00e9charge ci-dessous un dictionnaire des mots de la langue fran\u00e7aise :  Dictionnaire </p>"},{"location":"Projet/cryptographie/#etape-5-codage-de-vigenere","title":"Etape 5 : Codage de Vigen\u00e8re","text":"<p>Faire des recherches sur le codage de Vigen\u00e8re, expliquer son fonctionnement, d\u00e9tailler un exemple de codage avec cette m\u00e9thode. Ce code r\u00e9siste-t-il \u00e0 une approche par analyse fr\u00e9quentielle ? Justifier. </p> <p>Proposer un programme Python permettant de coder et de d\u00e9coder un texte avec la m\u00e9thode de chiffrement de Vigen\u00e8re.</p> <p>Bilbliographie : </p> <ul> <li>Ce cours s'inspire largement de celui de Fabrice Nativel.</li> </ul>"},{"location":"Projet/cryptographie2/","title":"Macro Rendering Error","text":"<p>File: <code>Projet/cryptographie2.md</code></p> <p>KeyError: 20</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 6, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 20\n</code></pre>"},{"location":"Projet/forcebrute/","title":"Attaque par force brute","text":"<p>La premi\u00e8re partie du projet consiste \u00e0 d\u00e9terminer des mots de passe en utilisant une attaque par force brute. Les mots de passe prot\u00e8gent des fichiers <code>pdf</code> et il faudra utiliser Python pour g\u00e9n\u00e9rer des mots de passe et les tester jusqu'\u00e0 trouver le bon. Une seconde partie du projet est la cr\u00e9ation d'un programme Python permettant de g\u00e9n\u00e9rer automatiquement des mots de passe forts.</p> <p>On utilise dans ce projet le module <code>pymupdf</code> de Python permettant d'interagir avec des fichiers au format <code>pdf</code>. Pour installer ce module, \u00e9crire en ligne de commande :  \ud83d\udccb Texte<pre><code>pip install pymupdf\n</code></pre></p> <p>On donne ci-dessous une fonction Python <code>test_password</code> qui prend en argument une chaine de caract\u00e8res <code>password</code> et renvoie <code>True</code> lorsque <code>password</code> est le mot de passe permettant d'ouvrir le fichier <code>FILE</code> d\u00e9clar\u00e9 en constante au d\u00e9but du programme :</p> \ud83d\udc0d Script Python<pre><code>import fitz\n\nFILE = \"protege1.pdf\"\nDOC = fitz.Document(FILE)\n\n\ndef test_password(password):\n'''Renvoie True lorsque password permet d'ouvrir le fichier FILE d\u00e9clar\u00e9 ci-dessus'''\n    return DOC.authenticate(password)\n</code></pre> <p>Par exemple pour tester si la mot de passe du fichier <code>protege1</code> est \"1789\", on peut par exemple faire :</p> <p>\ud83d\udc0d Script Python<pre><code>if test_password(\"1789\"):\n    print(\"Le mot de passe est 1789\")\n</code></pre> Attention, le fichier sur lequel on effectue le test est donn\u00e9 \u00e0 la ligne 3 dans la variable <code>FILE</code>.</p>"},{"location":"Projet/forcebrute/#etape-1-avec-des-chiffres","title":"Etape 1 : Avec des chiffres","text":"<p>Ces deux premiers fichiers ne devraient pas poser probl\u00e8me : les mots de passe ne contiennent que des chiffres !</p>"},{"location":"Projet/forcebrute/#fichier-1","title":"Fichier 1","text":"<ul> <li>Fichier \u00e0 t\u00e9l\u00e9charger :</li> </ul> <p>Fichier1 </p> <ul> <li>Informations sur le mot de passe: Vous savez que ce mot de passe contient 4 caract\u00e8res qui sont tous des chiffres. C'est \u00e0 dire que ce mot de passe est semblable \u00e0 un code de carte bancaire, comme par exemple <code>1492</code> ou <code>0141</code>.</li> </ul>"},{"location":"Projet/forcebrute/#fichier-2","title":"Fichier 2","text":"<ul> <li>Fichier \u00e0 t\u00e9l\u00e9charger :</li> </ul> <p>Fichier2 </p> <ul> <li>Informations sur le mot de passe: Vous savez que ce mot de passe est une date de naissance au format <code>jjmmaaaa</code> et que l'ann\u00e9e de naissance est sup\u00e9rieure \u00e0 1900. </li> </ul> <p>Aide</p> <p>Afin d'optimiser votre programme et de ne pas tester inutilement des mots de passe, attention \u00e0 bien g\u00e9n\u00e9rer des dates de naissances valides ! </p>"},{"location":"Projet/forcebrute/#etape-2-avec-des-lettres-aussi","title":"Etape 2 : avec des lettres aussi !","text":""},{"location":"Projet/forcebrute/#fichier-3","title":"Fichier 3","text":"<ul> <li>Fichier \u00e0 t\u00e9l\u00e9charger :</li> </ul> <p>Fichier3 </p> <ul> <li>Informations sur le mot de passe: Vous savez que ce mot de passe est un mot de la langue fran\u00e7aise \u00e9crit en minuscule. Pour vous aider, un dictionnaire peut \u00eatre t\u00e9l\u00e9charg\u00e9  ci-dessous : Dictionnaire </li> </ul>"},{"location":"Projet/forcebrute/#fichier-4","title":"Fichier 4","text":"<ul> <li>Fichier \u00e0 t\u00e9l\u00e9charger :</li> </ul> <p>Fichier4 </p> <ul> <li>Informations sur le mot de passe: Les mots de passe les plus courants ont \u00e9t\u00e9 r\u00e9pertori\u00e9s sur ce site. Le quatri\u00e8me mot de passe figure dans cette liste de mots de passe couramment utilis\u00e9e.</li> </ul>"},{"location":"Projet/forcebrute/#etape-3-a-peine-plus-complique","title":"Etape 3 : \u00e0 peine plus compliqu\u00e9 !","text":""},{"location":"Projet/forcebrute/#fichier-5","title":"Fichier 5","text":"<ul> <li> <p>Fichier \u00e0 t\u00e9l\u00e9charger : Fichier5 </p> </li> <li> <p>Informations sur le mot de passe: De nombreuses personnes utilisent leur pr\u00e9nom (\u00e9crit avec une majuscule) suivi de leur num\u00e9ro de d\u00e9partement comme mot de passe comme par exemple <code>Kevin974</code> pour un habitant de la R\u00e9union se pr\u00e9nommant Kevin. C'est le cas pour ce mot de passe ou vous savez de plus que le pr\u00e9nom est courant (il figure dans le top100 des pr\u00e9noms les plus attribu\u00e9s en France ces derni\u00e8res ann\u00e9es)</p> </li> </ul>"},{"location":"Projet/forcebrute/#etape-4-generateur-de-mots-de-passe","title":"Etape 4 : g\u00e9n\u00e9rateur de mots de passe","text":"<p>Ecrire un programme Python permettant de g\u00e9n\u00e9rer des mots de passe al\u00e9atoires r\u00e9sistants \u00e0 une attaque par force brute. L'utilisateur pourra pr\u00e9ciser les caract\u00e8res \u00e0 utiliser (chiffres, majuscules, minuscules, caract\u00e8res sp\u00e9ciaux) et la longueur du mot de passe souhait\u00e9.</p>"},{"location":"Projet/forcebrute/#etape-5-pour-aller-plus-loin","title":"Etape 5 : pour aller plus loin","text":"<p>Ecrire un programme Python permettant de d\u00e9terminer le temps approximatif n\u00e9cessaire pour trouver un mot de passe par une attaque par force brute en fonction de la longueur du mot de passe et du type de caract\u00e8re utilis\u00e9.</p> <p>Bilbliographie : </p> <ul> <li>Ce cours s'inspire largement de celui de Fabrice Nativel.</li> </ul>"},{"location":"Projet/gomoku/","title":"Gomoku","text":"<p>Dans le jeu de Gomoku (voir illustration ci-dessous) deux joueurs s'affrontent dans le but d'aligner en premier  5 pions dans n'importe quelle direction (horizontale, verticale, diagonale). Traditionnellement, ce jeu se joue sur un plateau du jeu de Go de dimensions 15 sur 15 (ou 19 sur 19) avec des pions noirs et blancs pour chacun des deux joueurs.</p> <p>On pourra consulter la page wikipedia consacr\u00e9e \u00e0 ce jeu pour plus d'informations.</p> <p>Le but du projet est de programmer ce jeu en python afin que deux joueurs humains puissent s'affronter dans une interface graphique r\u00e9alis\u00e9e avec le module <code>turtle</code>.</p>"},{"location":"Projet/gomoku/#etape-1-realisation-du-plateau-de-jeu","title":"Etape 1 : r\u00e9alisation du plateau de jeu","text":"<p>Dessiner la grille de jeu, pr\u00e9voir un espace pour l'affichage de message pendant le jeu et pour l'affichage des coups des joueurs. Un exemple est donn\u00e9e ci-dessous :  Sur cet exemple, on a pr\u00e9vu deux colonnes \u00e0 droites pour indiquer les coups successifs des joueurs ainsi qu'un cadre gris en bas pour afficher les messages durant la partie (coup invalide, victoire, ...). </p> <p>Aide</p> <p>Pour faciliter le positionnement des diff\u00e9rents \u00e9l\u00e9ments, on peut au pr\u00e9alable dessiner le rep\u00e8re de la tortue en version papier et y positionner les diff\u00e9rents \u00e9l\u00e9ments afin d'avoir directement leurs coordonn\u00e9es.</p> <p>A la fin de cette \u00e9tape on devrait donc disposer d'une fonction <code>dessine_jeu</code> qui dessine tous les \u00e9l\u00e9ments du jeu tels que ci-dessus.</p>"},{"location":"Projet/gomoku/#etape-2-positionner-un-pion-sur-la-grille","title":"Etape 2 : positionner un pion sur la grille","text":"<p>Le but de cet \u00e9tape est d'\u00e9crire :</p> <ul> <li>une fonction <code>dessine_pion</code> qui prend en param\u00e8tre le num\u00e9ro de ligne et de colonne ainsi que le num\u00e9ro du coup jou\u00e9 a le dessine \u00e0 l'emplacement correspondant sur la grille. Par exemple <code>dessine_pion(5,6,1)</code> dessine le pion situ\u00e9 en F7 (on num\u00e9rote \u00e0 partir de z\u00e9ro comme les listes de Python) de couleur noir (c'est le premier coup jou\u00e9 et les noirs commencent).</li> <li>une fonction <code>note_coup</code> qui note dans l'emplacement pr\u00e9vu dans les colonnes de droite le coup du joueur concern\u00e9. Par exemple, <code>note_coup(4,7,2)</code> \u00e9crit dans la colonne du joueur 2 <code>E8</code>. Cette fonction sera appel\u00e9e par <code>dessine_pion</code>, de fa\u00e7on \u00e0 ce que dessiner un pion \u00e9crive en m\u00eame temps le coup jou\u00e9.</li> <li>une fonction <code>message</code> qui \u00e9crit dans le cadre pr\u00e9vu sur le plateau de jeu le coup du joueur concern\u00e9. Cette fonction peut \u00eatre appel\u00e9e par la fonction <code>note_coup</code> ci-dessus.</li> </ul> <p>Aide</p> <p>On pourra \u00e9crire une fonction <code>position_pion</code> qui prend en argument un ligne et une colonne et renvoie la position du centre du pion dans la grille. Par exemple <code>position_pion(5,6)</code> doit renvoyer l'abscisse et l'ordonn\u00e9e du centre de la case <code>F7</code>.</p> <p>Dans l'illustration ci-dessous, on a test\u00e9 nos fonctions en \u00e9crivant dans le programme principal : \ud83d\udc0d Script Python<pre><code>dessine_jeu()\ndessine_pion(5,6,1)\ndessine_pion(4,7,2)\ndessine_pion(5,7,3)\ndessine_pion(3,7,4)\ndessine_pion(6,8,5)\n</code></pre></p> <p></p>"},{"location":"Projet/gomoku/#etape-3-boucle-principale-du-jeu-et-gestion-des-interactions-avec-les-joueurs","title":"Etape 3 : boucle principale du jeu et gestion des interactions avec les joueurs","text":"<p>Le but de cette \u00e9tape est d'\u00e9crire la boucle principale du jeu ainsi qu'une fonction <code>joue_coup</code> qui fait appara\u00eetre une fen\u00eatre <code>textinput</code> du module turtle pour qu'un joueur y entre son coup sous la forme d'un lettre pour la ligne (de <code>A</code> \u00e0 <code>O</code>) et d'un nombre (de <code>1</code> \u00e0 <code>15</code>) pour la colonne puis de valider ce coup avant de le jouer. Un coup est valide lorsqu'il se situe sur la grille et que la case n'est pas encore occup\u00e9e. On tiendra donc \u00e0 jour une variable <code>grille</code> contenant l'\u00e9tat du plateau de jeu. On pourra par exemple, utiliser une liste de listes, chaque liste repr\u00e9sentant une des lignes du plateau de jeu et consid\u00e9rer que dans ces listes :</p> <ul> <li>un 0 repr\u00e9sente une case vide</li> <li>un 1 repr\u00e9sente un pion du joueur 1</li> <li>un 2 repr\u00e9sente un pion du joueur 2</li> </ul> <p>Au d\u00e9part le plateau de jeu \u00e9tant vide, <code>grille</code> est la liste dont chaque \u00e9l\u00e9ment est une liste de 15 z\u00e9ros. Si on tape <code>F7</code> dans <code>joue_coup</code> le sixi\u00e8me \u00e9l\u00e9ment de <code>grille</code> devient la liste <code>[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0]</code>. Si le joueur 2 joue ensuite en <code>F8</code> cette liste devient <code>[0,0,0,0,0,0,1,2,0,0,0,0,0,0,0]</code></p> <p>Pour la boucle principale du jeu, on consid\u00e8re pour simplifier que le jeu s'arr\u00eate d\u00e8s qu'un des joueurs aligne cinq pions. On peut donc cr\u00e9er une variable bool\u00e9enne <code>victoire</code> initialis\u00e9e \u00e0 <code>False</code> et \u00e9crire une boucle <code>while not victoire</code>. Dans cette boucle, on fait appel aux fonctions \u00e9crites plus haut, pour jouer les coups successifs de chacun des joueurs et on met \u00e0 jour une variable comptabilisant le nombre de coups jou\u00e9s.</p>"},{"location":"Projet/gomoku/#etape-4-tester-si-cinq-pions-sont-alignes","title":"Etape 4 : tester si cinq pions sont align\u00e9s","text":"<p>Le but de cette \u00e9tape est d'\u00e9crire une fonction <code>victoire</code> qui prend en argument une grille de jeu et renvoie <code>True</code> si dans cette grille 5 pions sont align\u00e9s et <code>False</code> sinon. Lorsqu'un alignement de 5 pions est rep\u00e9r\u00e9e, cette fonction tracera aussi une ligne rouge sur les pions afin de rendre bien visible l'alignement.</p> <p>Aide</p> <p>On pourra commencer par chercher les alignements de 5 pions seulement  en horizontal puis en vertical et enfin en diagonale afin d'avoir toutes les possibilit\u00e9s de victoire.</p> <p>On montre ci-dessous un exemple de partie o\u00f9 les noirs sont victorieux : </p> <p>A la fin de cette \u00e9tape, on dispose donc d'un programme fonctionnel permettant \u00e0 deux joueurs de s'affronter.</p>"},{"location":"Projet/gomoku/#etape-5-aller-plus-loin","title":"Etape 5 : aller plus loin","text":"<p>Cette \u00e9tape consiste \u00e0 am\u00e9liorer le jeu plusieurs pistes sont propos\u00e9es :</p> <ul> <li>pouvoir jouer \u00e0 la souris (pour cela utiliser la fonction <code>onclick</code> du module turtle associ\u00e9 \u00e0 <code>mainloop</code>)</li> <li>pouvoir revenir en arri\u00e8re de un ou plusieurs coups dans la partie</li> <li>pouvoir sauvegarder (et donc charger) une partie en cours</li> <li>pouvoir choisir les couleurs, formes de pions, ...</li> <li>pouvoir choisir les couleurs, formes de pions, ...</li> </ul>"},{"location":"Projet/life_and_death/","title":"Projet 1","text":""},{"location":"Projet/life_and_death/#sujet-1-life-death","title":"Sujet 1 : Life &amp; Death","text":"<p>\u00c9nonc\u00e9</p> <p>On consid\u00e8re une grille - th\u00e9oriquement infinie - dont les cases appell\u00e9es cellules peuvent prendre deux \u00e9tats distincts : \u00abvivante\u00bb ou \u00abmorte\u00bb.</p> <p>Une cellule poss\u00e8de huit voisins : les cellules adjacentes horizontalement, verticalement et diagonalement.</p> <p>\u00c0 chaque g\u00e9n\u00e9ration, les cellules peuvent changer d'\u00e9tat ou conserver leur \u00e9tat selon les r\u00e8gles suivantes:</p> <ul> <li>si une cellule morte poss\u00e8de exactement 3 cellules voisines vivantes, alors elle devient vivante (elle na\u00eet);</li> <li>si une cellule vivante poss\u00e8de 2 ou 3 cellules vivantes, alors elle reste vivante, sinon elle meurt.</li> </ul> <p>L'objectif est de simuler, g\u00e9n\u00e9ration apr\u00e8s g\u00e9n\u00e9ration, l'\u00e9tat de la grille.</p> <p>Exemple:</p> 123456789101112 <p> </p> <p></p> <p></p> <p> </p> <p></p> <p></p> <p> </p> <p></p> <p></p> <p> </p> <p></p> <p></p> <p>Consignes</p> <ul> <li>Utiliser le module <code>pygame</code> pour animer la grille g\u00e9n\u00e9ration apr\u00e8s g\u00e9n\u00e9ration.</li> <li>L'\u00e9tat initial de la grille sera choisi al\u00e9atoirement.</li> <li>Le programme principal devra contenir deux classes: <code>Grille</code> et <code>Cellule</code>.</li> <li> <p>La classe <code>Grille</code> contiendra une m\u00e9thode <code>actualisation</code> (ou <code>update</code>) qui consistera \u00e0 actualiser l'\u00e9tat de la grille (c'est \u00e0 dire de chacune de ses cellules) ainsi qu'\u00e0 afficher la grille.</p> <p>La boucle des \u00e9v\u00e9nements sera donc r\u00e9duite \u00e0 (avec par exemple <code>G</code> instance de la classe <code>Grille</code>): \ud83d\udc0d Script Python<pre><code>continuer = True\nwhile continuer:\n    for evenement in pygame.event.get(): \n        if evenement.type == QUIT:\n            continuer = False\n\n    G.actualisation()\n    pygame.display.flip()\n    pygame.time.delay(100)\n</code></pre></p> </li> </ul> Proposition de correction \ud83d\udc0d Script Python<pre><code>import pygame\nimport random as rd\n\n## Classes\n\nclass Cellule():\n    def __init__(self, t, l, c, e):\n        self.s = t\n        self.ligne = l\n        self.colonne = c\n        self.x = self.s * c\n        self.y = self.s * l\n        self.etat = e\n        self.etat_suivant = 0\n        self.nb_voisins = 0\n\n    def actualise_suivant(self):\n        if (self.etat == 0 and self.nb_voisins==3) or (self.etat == 1 and self.nb_voisins in {2, 3}):\n            self.etat_suivant = 1\n        else:\n            self.etat_suivant = 0\n\n    def actualise_cellule(self):\n        self.etat = self.etat_suivant\n\n    def affiche_cellule(self, ecran):\n        if self.etat:\n            pygame.draw.rect(ecran, (0, 0, 0), (self.x, self.y, self.s, self.s))\n        else:\n            pygame.draw.rect(ecran, (255, 255, 255), (self.x, self.y, self.s, self.s))\n\n\nclass Grille():\n    def __init__(self, l, h, t, e):\n        self.longueur = l\n        self.hauteur = h\n        self.taille_cellule = t\n        self.ecran = e\n        self.cellules = [[Cellule(self.taille_cellule, r, c, rd.randint(0, 1)) for c in range(self.longueur)] for r in range(self.hauteur)]\n\n    def actualisation(self):\n        for r in range(self.hauteur):\n            for c in range(self.longueur):\n                self.cellules[r][c].nb_voisins = self.compte_voisins(r, c)\n                self.cellules[r][c].actualise_suivant()\n        for r in range(self.hauteur):\n            for c in range(self.longueur):\n                self.cellules[r][c].actualise_cellule()\n                self.cellules[r][c].affiche_cellule(self.ecran)\n\n    def compte_voisins(self, r, c):\n        n = 0\n        for d in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            try:\n                n += self.cellules[r + d[0]][c + d[1]].etat\n            except:\n                pass\n        return n\n\n## initialisation\npygame.init()\n\n\n## Constantes\nlongueur_grille, hauteur_grille = 640, 480\ntaille_cellule = 10\ntaille = (longueur_grille, hauteur_grille)\n\n## \u00c9cran\nfenetre = pygame.display.set_mode(taille)\npygame.display.set_caption(\"Jeu de la vie de John Conway\")\n\n## Grille\nG = Grille(longueur_grille // taille_cellule , hauteur_grille // taille_cellule, taille_cellule, fenetre)\n\n## Boucle des \u00e9v\u00e9nements\ncontinuer = False\nwhile not continuer:\n    for evenement in pygame.event.get():\n        if evenement.type == pygame.QUIT:\n            continuer = True\n\n    G.actualisation()\n    pygame.display.flip()\n    pygame.time.delay(200)\n\n## Fermeture de la fen\u00eatre\npygame.quit()\n</code></pre>"},{"location":"Projet/life_and_death/#sujet-2-promenade-dune-puce","title":"Sujet 2: Promenade d'une puce","text":"<p>\u00c9nonc\u00e9</p> <p>Une puce se prom\u00e8ne sur une grille dont les cases appell\u00e9es cellules peuvent \u00eatre blanches ou noires. Au d\u00e9part, toutes les cellules sont blanches et la puce se trouve au centre de la grille.</p> <p>La puce peut se d\u00e9placer horizontalement ou verticalement sur la grille de la fa\u00e7on suivante:</p> <ul> <li>si la puce se situe sur une cellule blanche, elle tourne de 90\u00b0 vers la droite, change la couleur de la case en noir et avance d'une case.</li> <li>si la puce se situe sur une cellule noire, elle tourne de 90\u00b0 vers la gauche, change la couleur de la case en blanc et avance d'une case.</li> </ul> <p> </p> <p>Consignes</p> <ul> <li>Utiliser le module <code>pygame</code> pour animer la grille g\u00e9n\u00e9ration apr\u00e8s g\u00e9n\u00e9ration.</li> <li>Le programme principal devra contenir deux classes: <code>Grille</code> et <code>Puce</code>.</li> <li> <p>La classe <code>Grille</code> contiendra une m\u00e9thode <code>actualisation</code> (ou <code>update</code>) qui consistera \u00e0 actualiser l'\u00e9tat de la grille (c'est \u00e0 dire de la cellule o\u00f9 la puce est pass\u00e9e) ainsi qu'\u00e0 afficher la grille.</p> <p>La boucle des \u00e9v\u00e9nements sera donc r\u00e9duite \u00e0 (avec par exemple <code>G</code> instance de la classe <code>Grille</code>): \ud83d\udc0d Script Python<pre><code>continuer = True\nwhile continuer:\n    for evenement in pygame.event.get(): \n        if evenement.type == QUIT:\n            continuer = False\n\n    G.actualisation()\n    pygame.display.flip()\n</code></pre></p> </li> </ul> Proposition de correction \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\n\n\nclass Grille:\n    def __init__(self, l:int, h:int):\n        self.longueur = l\n        self.hauteur = h\n        self.cellules = [self.longueur*[1] for _ in range(self.hauteur)]\n        self.puce = Puce(self.longueur//2, self.hauteur//2)\n        self.go = True\n\n    def actualisation(self):\n        l, c = self.puce.ligne, self.puce.colonne\n\n        try:\n            self.puce.avance(self.cellules[l][c])        \n            self.cellules[l][c] = 1 - self.cellules[l][c]\n            pygame.draw.rect(fenetre, [255*self.cellules[l][c]]*3, [l, c, 1, 1])\n            pygame.draw.rect(fenetre, [255, 0, 0], [self.puce.ligne, self.puce.colonne, 1, 1])\n        except:\n            pass\n\n\nclass Puce:\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n\n    def __init__(self, l, c):\n        self.ligne = l\n        self.colonne = c\n        self.dir = 0\n\n    def avance(self, cellule):\n        if cellule == 1:\n            self.dir = (self.dir+1) % 4\n        else:\n            self.dir = (self.dir-1) % 4\n\n        self.ligne += Puce.directions[self.dir][0]\n        self.colonne += Puce.directions[self.dir][1]\n\n\npygame.init()\n\nlongueur, hauteur = 320, 240\nfenetre = pygame.display.set_mode((longueur, hauteur))\nfenetre.fill([255, 255, 255])\npygame.display.flip()\n\n\nG = Grille(longueur, hauteur)\n\ncontinuer = True\nwhile continuer:\n\n    for evenement in pygame.event.get():\n        if evenement.type == QUIT:\n            continuer = False\n\n    G.actualisation()\n\n    pygame.display.flip()\n\n\npygame.quit()\n</code></pre>"},{"location":"Projet/pygame/","title":"Projet","text":"Projet              Pygame : Initiation"},{"location":"Projet/pygame/#preambule","title":"Preambule","text":"<p>Pygame est un package de Python facilitant la cr\u00e9ation de jeux bas\u00e9s une interface graphique. Vous pouvez :</p> <ul> <li>l'installer sur votre distribution Python, par <code>pip3 install pygame</code>.  </li> <li>le tester directement via https://repl.it/, en choisissant <code>pygame</code> dans la liste des langages propos\u00e9s.</li> </ul> \ud83d\udc0d Script Python<pre><code>import pygame, sys\nfrom pygame.locals import *\n\npygame.init()\n\n#ecran = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\necran = pygame.display.set_mode((640, 480))\necran.fill([10,186,181])\n\ncontinuer = True\n\nwhile continuer:\n    for event in pygame.event.get():\n          if event.type == KEYDOWN:\n            if event.key == K_RIGHT:\n                continuer = False\n\n    pygame.display.flip()\n\npygame.quit()\n</code></pre> <p>Commentaires</p> <ul> <li>Durant tout le code, notre sc\u00e8ne de travail sera l'objet <code>ecran</code>, dans lequel nous viendrons coller de nouveaux \u00e9l\u00e9ments.   </li> </ul> <p>\u00c9l\u00e9ments structurants d'un code <code>pygame</code> :</p> <ul> <li><code>pygame.init()</code>  effectue une initialisation globale de tous les modules <code>pygame</code> import\u00e9s. \u00c0 mettre au d\u00e9but du code.  </li> <li><code>while continue :</code> comme tr\u00e8s souvent dans les jeux, la structure essentielle est une boucle infinie dont on ne sortira que par un appui sur la fl\u00e8che bas o\u00f9 continue passe en <code>False</code>.</li> </ul>"},{"location":"Projet/pygame/#apparition-dun-personnage","title":"Apparition d'un personnage","text":""},{"location":"Projet/pygame/#telechargement-de-limage","title":"T\u00e9l\u00e9chargement de l'image","text":"<p>Nous allons travailler avec le sprite ci-dessous, nomm\u00e9 <code>perso.png</code>. </p> <p></p> <p>T\u00e9l\u00e9chargez-le pour le mettre dans le m\u00eame dossier que votre code <code>pygame</code>.  A red\u00e9finir avec une bonne dimension.</p> <p>Vous pouvez trouver sur internet un grand nombre de sprites libres de droits, au format <code>png</code> (donc g\u00e9rant la transparence), dans de multiples positions (ce qui permet de simuler des mouvements fluides). Ici nous travaillerons avec un sprite unique.</p>"},{"location":"Projet/pygame/#importation-de-limage-dans-la-fenetre","title":"Importation de l'image dans la fen\u00eatre","text":"<p>\ud83d\udc0d Script Python<pre><code>perso = pygame.image.load(\"Paragoomba.png\").convert_alpha()\n</code></pre> La fonction <code>convert_alpha()</code> est appel\u00e9e pour que soit correctement trait\u00e9 le canal de transparence (canal alpha) de notre image.</p>"},{"location":"Projet/pygame/#affichage-de-limage","title":"Affichage de l'image","text":"<p>\u00c0 ce stade, <code>perso</code> est un objet <code>pygame</code> de type <code>Surface</code> .</p> <p>Afin de facilement pouvoir le d\u00e9placer, nous allons stocker la position de cet objet dans une variable <code>position_perso</code>,  qui sera de type <code>rect</code>. </p> <p>\ud83d\udc0d Script Python<pre><code>position_perso = perso.get_rect()\n</code></pre> Pour afficher cette image, nous allons venir le superposer aux \u00e9l\u00e9ments graphiques d\u00e9j\u00e0 dessin\u00e9s (en l'occurence : rien) avec l'instruction <code>blit()</code> :</p> \ud83d\udc0d Script Python<pre><code>fenetre.blit(perso, position_perso)\n</code></pre> <p>\u25b8 r\u00e9capitulatif du code</p> \ud83d\udc0d Script Python<pre><code>import pygame, sys\nfrom pygame.locals import *\n\npygame.init()\n\n#ecran = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\necran = pygame.display.set_mode((640, 480))\necran.fill([10,186,181])\n\ncontinuer = True\n\nperso = pygame.image.load(\"Paragoomba1.png\").convert_alpha()\nposition_perso = perso.get_rect()\n\n\n\nwhile continuer:\n    ecran.blit(perso, position_perso)\n    for event in pygame.event.get():\n        if event.type == KEYDOWN:\n            if event.key == K_RIGHT:\n                continuer = False\n\n    pygame.display.flip()\n\npygame.quit()\n</code></pre>"},{"location":"Projet/pygame/#gestion-des-evenements","title":"Gestion des \u00e9v\u00e8nements","text":"<p>En informatique, un \u00e9v\u00e9nement peut \u00eatre une entr\u00e9e clavier (soit l\u2019appui soit le rel\u00e2chement d\u2019une touche), le d\u00e9placement de votre souris, un clic (encore une fois, appui ou rel\u00e2chement, qui seront trait\u00e9s comme deux \u00e9v\u00e9nements distincts). Un bouton de votre joystick peut aussi engendrer un \u00e9v\u00e9nement, et m\u00eame la fermeture de votre fen\u00eatre est consid\u00e9r\u00e9 comme un \u00e9v\u00e9nement\u202f!</p> <p>Pour Pygame, un \u00e9v\u00e9nement est repr\u00e9sent\u00e9 par un type et divers autres attributs que nous allons d\u00e9tailler dans ce chapitre.</p> <p>De plus, il faut savoir que chaque \u00e9v\u00e9nement cr\u00e9\u00e9 est envoy\u00e9 sur une file (ou queue), en attendant d\u2019\u00eatre trait\u00e9. Quand un \u00e9v\u00e9nement entre dans cette queue, il est plac\u00e9 \u00e0 la fin de celle-ci. Vous l\u2019aurez donc compris, le premier \u00e9v\u00e9nement transmis \u00e0 Pygame sera trait\u00e9 en premier\u202f! Cette notion est tr\u00e8s importante, puisque nous allons nous en servir sous peu\u202f!</p> <p>Ce type de queue est dit FIFO.  </p>"},{"location":"Projet/pygame/#comment-les-capturer","title":"Comment les capturer ?","text":"<p>On utilise le module event de Pygame.</p> <p>Voici ce que nous dit la documentation \u00e0 propos de ce module\u202f:</p> Afficher/Masquer la documentation <ul> <li>pygame.event  </li> <li>pygame module for interacting with events and queues  </li> <li>pygame.event.pump \u2014 internally process pygame event handlers  </li> <li>pygame.event.get \u2014 get events from the queue  </li> <li>pygame.event.poll \u2014 get a single event from the queue  </li> <li>pygame.event.wait \u2014 wait for a single event from the queue  </li> <li>pygame.event.peek \u2014 test if event types are waiting on the queue  </li> <li>pygame.event.clear \u2014 remove all events from the queue  </li> <li>pygame.event.event_name \u2014 get the string name from and event id  </li> <li>pygame.event.set_blocked \u2014 control which events are allowed on the queue  </li> <li>pygame.event.set_allowed \u2014 control which events are allowed on the queue  </li> <li>pygame.event.get_blocked \u2014 test if a type of event is blocked from the queue  </li> <li>pygame.event.set_grab \u2014 control the sharing of input devices with other applications  </li> <li>pygame.event.get_grab \u2014 test if the program is sharing input devices  </li> <li>pygame.event.post \u2014 place a new event on the queue  </li> <li>pygame.event.Event \u2014 create a new event object  </li> <li> <p>pygame.event.EventType \u2014 pygame object for representing SDL events</p> </li> <li> <p>event </p> </li> </ul> <p>Et comme on peut le voir, le module event ne permet pas que d\u2019intercepter des \u00e9v\u00e9nements. Il nous permet aussi de cr\u00e9er des \u00e9v\u00e9nements. Et m\u00eame d\u2019en bloquer\u202f!</p> <ul> <li>Lorsqu'un programme <code>pygame</code> est lanc\u00e9, la variable interne <code>pygame.event.get()</code> re\u00e7oit en continu les \u00e9v\u00e8nements des p\u00e9riph\u00e9riques g\u00e9r\u00e9s par le syst\u00e8me d'exploitation.  </li> <li>Nous allons nous int\u00e9resser aux \u00e9v\u00e8nements de type <code>KEYDOWN</code> (touche de clavier appuy\u00e9e) ou de type <code>MOUSEBUTTONDOWN</code> (boutons de souris appuy\u00e9).</li> </ul>"},{"location":"Projet/pygame/#evenements-clavier","title":"\u00c9v\u00e8nements clavier","text":""},{"location":"Projet/pygame/#exemple-de-code","title":"Exemple de code","text":"<p>La structure de code pour d\u00e9tecter l'appui sur une touche de clavier est, dans le cas de la d\u00e9tection de la touche \u00abFl\u00e8che droite\u00bb :</p> <p>\ud83d\udc0d Script Python<pre><code>for event in pygame.event.get():   \n  if event.type == KEYDOWN:\n    if event.key == K_RIGHT:\n      print(\"fl\u00e8che droite appuy\u00e9e\")\n</code></pre> La touche (en anglais key) \u00abFl\u00e8che Droite\u00bb est appel\u00e9e <code>K_RIGHT</code> par <code>pygame</code>. </p> <p>Le nom de toutes les touches peut \u00eatre retrouv\u00e9 \u00e0 l'adresse pygame ref</p> <p>Remarque : c'est gr\u00e2ce \u00e0 la ligne initiale \ud83d\udc0d Script Python<pre><code>from pygame.locals import *\n</code></pre> que la variable <code>K_RIGHT</code> (et toutes les autres) est reconnue.</p>"},{"location":"Projet/pygame/#probleme-de-la-remanence","title":"Probl\u00e8me de la r\u00e9manence","text":"<p>Quand une touche de clavier est appuy\u00e9e, elle le reste un certain temps. Parfois volontairement (sur un intervalle long) quand l'utilisateur d\u00e9cide de la laisser appuy\u00e9e, mais aussi involontairement (sur un intervalle tr\u00e8s court), lors d'un appui \u00abclassique\u00bb. Il existe donc toujours un intervalle de temps pendant lequel la touche reste appuy\u00e9e. Que doit faire notre programme pendant ce temps ? Deux options sont possibles :</p> <ul> <li>option 1 : consid\u00e9rer que la touche appuy\u00e9e correspond \u00e0 un seul et unique \u00e9v\u00e8nement, quelle que soit la dur\u00e9e de l'appui sur la touche.</li> <li>option 2 : consid\u00e9rer qu'au bout d'un certain d\u00e9lai, la touche encore appuy\u00e9e doit d\u00e9clencher un nouvel \u00e9v\u00e8nement.</li> </ul> <p>Par d\u00e9faut,<code>pygame</code> est r\u00e9gl\u00e9 sur l'option 1. N\u00e9anmoins, il est classique pour les jeux vid\u00e9os de vouloir que \u00ablaisser la touche appuy\u00e9e\u00bb continue \u00e0 faire avancer le personnage. Nous allons donc faire en sorte que toutes les 50 millisecondes, un nouvel appui soit d\u00e9tect\u00e9 si la touche est rest\u00e9e enfonc\u00e9e. Cela se fera par l'expression :</p> \ud83d\udc0d Script Python<pre><code>pygame.key.set_repeat(50)\n</code></pre>"},{"location":"Projet/pygame/#evenements-souris","title":"\u00c9v\u00e8nements souris","text":""},{"location":"Projet/pygame/#exemple-de-code_1","title":"Exemple de code","text":"<p>La structure de code pour d\u00e9tecter l'appui sur un bouton de la souris est, dans le cas de la d\u00e9tection du bouton de gauche (le bouton 1)  :</p> \ud83d\udc0d Script Python<pre><code>for event in pygame.event.get():    \n  if event.type == MOUSEBUTTONDOWN and event.button == 1 :\n      print(\"clic gauche d\u00e9tect\u00e9\")\n</code></pre>"},{"location":"Projet/pygame/#recuperation-des-coordonnees-de-la-souris","title":"R\u00e9cup\u00e9ration des coordonn\u00e9es de la souris","text":"<p>Le tuple <code>(abscisse, ordonn\u00e9e)</code> des coordonn\u00e9es de la souris sera r\u00e9cup\u00e9r\u00e9 avec l'instruction <code>pygame.mouse.get_pos()</code>.</p>"},{"location":"Projet/pygame/#deplacement-du-personnage","title":"D\u00e9placement du personnage","text":"<p>Le d\u00e9placement d'un personnage se fera toujours par modification de ses coordonn\u00e9es (et visuellement, par effacement de la derni\u00e8re position). Ce d\u00e9placement pourra \u00eatre : - absolu : on donne de nouvelles coordonn\u00e9es au personnage. - relatif : on indique de combien le personnage doit se d\u00e9caler par rapport \u00e0 sa position initiale.  </p>"},{"location":"Projet/pygame/#deplacement-absolu","title":"D\u00e9placement absolu","text":"<p>Pour afficher le personnage \u00e0 la position <code>(100,200)</code>, on \u00e9crira : \ud83d\udc0d Script Python<pre><code>position_perso.topleft = (100,200)\n</code></pre></p> <p>o\u00f9 <code>position_perso</code> est l'objet de type <code>rect</code>  contenant les coordonn\u00e9es.</p> <p>Exo</p> <p>Coder un script pour d\u00e9placer Paragoomba \u00e0 la souris (Paragoomba doit toujours suivre la souris) (<code>MOUSEMOTION</code>)</p> Correction \ud83d\udc0d Script Python<pre><code>import pygame, sys\nfrom pygame.locals import *\nfrom random import randint\n\npygame.init()\n\n#ecran = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\necran = pygame.display.set_mode((640, 480))\necran.fill([10,186,181])\n\ncontinuer = True\n\nperso = pygame.image.load(\"Paragoomba1.png\").convert_alpha()\nposition_perso = perso.get_rect()\nposition_perso.topleft = (100,200)\n\nwhile continuer:\n  pygame.draw.rect(ecran, (10,186,181), (0, 0, 640, 480))\n  for event in pygame.event.get():\n    if event.type == pygame.MOUSEMOTION:\n      position_perso = event.pos\n      if event.type == KEYDOWN:\n        if event.key == K_RIGHT:\n          continuer = False\n  ecran.blit(perso, position_perso)\n  pygame.display.flip()\n\npygame.quit()\n</code></pre> <p>Exo</p> <p>Coder un script pour dessiner un rectangle sur l\u2019\u00e9cran au rel\u00e2chement d\u2019un bouton de la souris.</p> Correction \ud83d\udc0d Script Python<pre><code>import pygame, sys\nfrom pygame.locals import *\nfrom random import randint\n\npygame.init()\n\n#ecran = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\necran = pygame.display.set_mode((640, 480))\necran.fill([10,186,181])\n\ncontinuer = True\n\nperso = pygame.image.load(\"Paragoomba1.png\").convert_alpha()\nposition_perso = perso.get_rect()\nposition_perso.topleft = (100,200)\n\nlargeur = 10\nhauteur = 10\ncouleur = (200, 80, 20)\n\nwhile continuer:\n  for event in pygame.event.get():\n    if event.type == pygame.MOUSEBUTTONUP:\n      x, y = event.pos\n      pygame.draw.rect(ecran, couleur, (x, y, largeur, hauteur))\n    if event.type == KEYDOWN:\n      if event.key == K_RIGHT:\n        continuer = False\n  ecran.blit(perso, position_perso)\n  pygame.display.flip()\n</code></pre>"},{"location":"Projet/pygame/#le-jeu-de-tennis-a-la-pong","title":"Le jeu de tennis (\u00e0 la Pong)","text":"<p>Pour la cr\u00e9ation du jeu de tennis, nous allons organiser notre code en plusieurs fichiers :</p> <ul> <li>un fichier tennis.py qui sera le programme principal  </li> <li>un fichier constantes.py qui contiendra les constantes utilis\u00e9es par les autres fichiers (hauteur et largeur de fen\u00eatre, couleurs), certaines fonctions...  </li> </ul>"},{"location":"Projet/pygame/#les-packages-utilises","title":"Les packages utilis\u00e9s","text":"<p>On commence par introduire les packages (biblioth\u00e8ques) qui seront utilis\u00e9es :</p> \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\nfrom constantes import *\n</code></pre>"},{"location":"Projet/pygame/#les-constantes-du-jeu-fichier-constantespy","title":"Les constantes du jeu : fichier constantes.py","text":"<p>On d\u00e9finit la hauteur et la largeur de la fen\u00eatre ainsi que l'abscisse du mur qui sera situ\u00e9 \u00e0 droite.</p> <p>On d\u00e9finit \u00e9galement un jeu de couleurs.</p> Fichier constantes.py \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\nfrom constantes import *\n\n\n# initialisation de l'\u00e9cran de jeu\npygame.init()\n\n\n\npolice = pygame.font.SysFont(\"Arial\", 25)\nfonte = pygame.font.Font(None, 30) \n\n\n# Initialise la fen\u00eatre de jeu\nlargeur_ecran = 600\nhauteur_ecran = 400\n\nscreen = pygame.display.set_mode((largeur_ecran,hauteur_ecran))\npygame.display.set_caption(\"Tennis\")\n\n# variables d'\u00e9tat\n\nhauteur_raquette=50\n\nlargeur_raquette =10\ndist_mur   = 20  # distance du mur au bord de la raquette\n\n\nraquette_G_x = dist_mur\nraquette_G_y = 50\n\n\nball_x = int(largeur_ecran / 2)\nball_y = int(hauteur_ecran / 2)\nball_speed_x = -4\nball_speed_y = -4\nball_rayon  = 10\n\nscore = 0\nvie=2\n\nCOORD_X_MUR = largeur_ecran-20\n\n\n# Definit des couleurs RGB\nBLACK = [0, 0, 0]\nWHITE = [255, 255, 255]\nGREEN = [24, 161, 80]\nRED   = [255, 0, 0]\nBLUE  = [30 , 36 , 161]\nORANGE = [196 , 92 , 54]\n\n#fonctions permettant de dessiner la balle et les deux raquettes\ndef Raquette(x, y):\n  R = (x,y,largeur_raquette,hauteur_raquette)\n  pygame.draw.rect(screen, WHITE, R, 0)\n\ndef Balle(x,y):\n  pygame.draw.circle(screen, WHITE, (x,y),10, 0)\n\ndef Mur():\n  R = (COORD_X_MUR,0,20,hauteur_ecran)\n  pygame.draw.rect(screen, GREEN, R, 0)\n\n\n\ndef touche_clavier():\n  for event in pygame.event.get():\n    if event.type == KEYDOWN:\n      # Ctrl-C pour quitter le jeu\n      if event.key == pygame.K_c and pygame.key.get_mods() &amp; pygame.KMOD_CTRL:\n        quitter()\n      # retourner la touche press\u00e9e \n      return event.key\n    # sinon, ne rien retourner (valeur nulle)\n    return None    \n\ndef attente():\n  while touche_clavier() == None:\n      pygame.display.update()\n\n# initialisation de l'\u00e9cran de jeu\npygame.init()\n\n\n\n\ndef affiche_texte_centre(texte, y=-1, couleur=None):\n  if couleur == None:\n    couleur = ORANGE\n  rendu = fonte.render(texte, True, couleur)\n  rectangle = rendu.get_rect()\n  if y == -1:\n    rectangle.center = ((largeur_ecran) / 2 , (hauteur_ecran) / 2)\n  else:\n    rectangle.center = ((largeur_ecran) / 2 , y)\n  screen.blit(rendu, rectangle)\n\ndef affiche_texte(texte, x, y, couleur=None):\n  if couleur == None:\n    couleur = WHITE\n  rendu = fonte.render(texte, True, couleur)\n  rectangle = rendu.get_rect()\n  rectangle.center = (x, y)\n  screen.blit(rendu, rectangle)\n</code></pre>"},{"location":"Projet/pygame/#le-jeu","title":"Le jeu","text":"<p>On cr\u00e9e la fen\u00eatre de jeu, on utilise la fonte courante et on charge les sons qui seront utilis\u00e9 pour le jeu :</p> <ul> <li>la musique d'ambiance music.mp3  </li> <li>et le bruit de verre bris\u00e9 glass_break.wav qui indique la fin du jeu  </li> </ul> <p>Le jeu se compose de trois parties :</p> <ul> <li>l'\u00e9cran d'accueil qui indique quelles sont les touches pour jouer  </li> <li>le jeu de tennis  </li> <li>la fin de partie qui affiche le score obtenu par le joueur  </li> </ul> tennis.py \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\nfrom constantes import *\n\n\n\n\n\n\n\n\n# Gestion du rafraichissement de l'\u00e9cran\nclock = pygame.time.Clock()\n\n# Cache le pointeur de la souris\npygame.mouse.set_visible(0)\n\n\n\n\n###########################################################\n# \u00e9cran d'accueil\n###########################################################\nscreen.fill(BLACK)\naffiche_texte_centre(\"Appuyez sur une touche pour commencer\", 100)\naffiche_texte_centre(\"Fl\u00e8che haut pour faire monter la raquette\", 140)\naffiche_texte_centre(\"Fl\u00e8che bas pour faire descendre la raquette\", 170)\n\nattente()\n\n# Le jeu continue tant que l'utilisateur ne ferme pas la fen\u00eatre\nTermine = False\n\n# Boucle principale de jeu\nwhile not Termine:\n  # recup\u00e8re la liste des \u00e9v\u00e8nements du joueur\n  event = pygame.event.Event(pygame.USEREVENT)\n\n  # dessine le mur de droite\n\n  # EVENEMENTS\n  # d\u00e9tecte le clic sur le bouton close de la fen\u00eatrepygame.Rect\n  for event in pygame.event.get():\n      if event.type == pygame.QUIT:\n        Termine = True\n\n  # r\u00e9cup\u00e8re la liste des touches claviers appuye\u00e9es sous la forme d'une liste de bool\u00e9ens\n  KeysPressed = pygame.key.get_pressed()\n\n  # LOGIQUE\n  # d\u00e9placement du palet gauche\n\n  if KeysPressed[pygame.K_UP]:\n      raquette_G_y -= 3\n\n  if KeysPressed[pygame.K_DOWN]:\n      raquette_G_y += 3\n\n\n  if raquette_G_y &lt; 0 :\n      raquette_G_y = 0\n\n\n  if raquette_G_y &gt; hauteur_ecran - hauteur_raquette :\n      raquette_G_y = hauteur_ecran - hauteur_raquette\n\n  # D\u00e9placement de la balle\n  ball_x += ball_speed_x\n  ball_y += ball_speed_y\n\n  if ball_y &lt; ball_rayon or ball_y &gt; hauteur_ecran - ball_rayon :\n      ball_speed_y *= -1\n\n  # collision entre la balle et le palet de gauche\n  if ball_x  &lt;  dist_mur + largeur_raquette + ball_rayon :\n      if ball_y &gt; raquette_G_y  and  ball_y  &lt;  raquette_G_y + hauteur_raquette :\n          ball_speed_x *= -1\n          score+=1\n\n\n\n  # collision avec les murs gauche et droit\n  if ball_x &lt; ball_rayon :\n      ball_x = int(largeur_ecran / 2)\n      ball_y = int(hauteur_ecran / 2)\n      vie-=1\n\n\n  if ball_x &gt; largeur_ecran - ball_rayon :\n      ball_speed_x *= -1\n\n\n\n  # AFFICHAGE\n  # Dessine le fond\n  screen.fill(BLACK)\n  Mur()\n  Raquette(raquette_G_x, raquette_G_y)\n\n  Balle(ball_x,ball_y)\n\n  #  dessine le texte dans une zone de rendu \u00e0 part\n  texte = \"Votre score : \" + str(score) + \" Vie : \" + str(vie)\n  if score == 15 :\n      texte = \"Joueur GAGNANT\"\n      Termine=True\n  if vie&lt;=0:\n      texte = 'PERDU' \n      Termine=True\n\n\n  zone = police.render( texte, True, GREEN)\n  # affiche la zone de rendu au dessus de fenetre de jeu\n  screen.blit(zone,(280,10))\n\n\n\n  # Bascule l'image dessin\u00e9e \u00e0 l'\u00e9cran\n  pygame.display.flip()\n\n    # Demande \u00e0 pygame de se caler sur 30 FPS\n  clock.tick(30)\n\nscreen.fill( 'black')\ntexte = \"Votre score est de {} points\".format(score)\naffiche_texte_centre(texte,150)\naffiche_texte_centre(\"Appuyez sur une touche pour terminer\", 200)\nattente()\n\n# Ferme la fen\u00eatre\ndel(police)\npygame.quit()\n</code></pre>"},{"location":"Projet/pygame/#le-jeu-pong-en-lui-meme","title":"Le jeu Pong en lui-m\u00eame","text":"<p>A vous</p> <p>Faites votre propre jeu avec une deuxi\u00e8me raquette, meilleur gestion des rebonds, changement de vitesses....</p>"},{"location":"Projet/pygame/#snake-en-python-le-plus-simplement-possible","title":"SNAKE en Python, le plus simplement possible","text":""},{"location":"Projet/pygame/#version-0","title":"Version 0","text":""},{"location":"Projet/pygame/#pygame","title":"Pygame","text":"<p>On importe pygame avec :</p> \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\n</code></pre> <p>Le second import sert \u00e0 quitter le jeu propremement.</p>"},{"location":"Projet/pygame/#constantes","title":"Constantes","text":"<p>On cr\u00e9e quelques constantes :</p> \ud83d\udc0d Script Python<pre><code>HAUTEUR = 600  # hauteur de la fenetre\nLARGEUR = 600  # largeur de la fenetre\nBLOC = 20\n\n# Les couleurs utilis\u00e9es\nNOIR = (..., ..., ...)  # fond\nROUGE = (..., ..., ...) # pomme\nJAUNE = (..., ..., ...)  # t\u00eate\nVERT = (..., ..., ...)  # corps\nCYAN = (..., ..., ...)  # texte\n\nFPS = 30\n</code></pre>"},{"location":"Projet/pygame/#initialisation","title":"initialisation","text":"<p>On initialise le jeu :</p> \ud83d\udc0d Script Python<pre><code>pygame.init()\nhorloge = pygame.time.Clock()\nfenetre = pygame.display.set_mode((LARGEUR, HAUTEUR))\npygame.display.set_caption('Snake')\n\npygame.display.update()\n</code></pre>"},{"location":"Projet/pygame/#boucle-infinie","title":"Boucle Infinie","text":"<p>Tous les jeux comportent une boucle infinie. Celle-ci ne contient pas grand chose :</p> <ul> <li>quitter le jeu,  </li> <li>remplir la fen\u00eatre de noir  </li> <li>faire avancer l'horloge  </li> <li>mettre \u00e0 jour les affichages  </li> </ul>"},{"location":"Projet/pygame/#boucle-infinie_1","title":"Boucle infinie","text":"\ud83d\udc0d Script Python<pre><code>while True:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n        if event.type == KEYDOWN:\n            if event.key == K_ESCAPE:\n                pygame.quit()\n    fenetre.fill(NOIR)\n    horloge.tick(FPS)\n    pygame.display.update()\n</code></pre>"},{"location":"Projet/pygame/#boucle-infinie_2","title":"Boucle infinie","text":"<ul> <li> <p>La boucle <code>for event in...</code> permet de r\u00e9cup\u00e9rer les \u00e9v\u00e9nements \"cliquer sur la croix\" ou \"appuyer sur Escape\" et quitte le jeu dans ce cas.</p> </li> <li> <p>Ensuite on dessine la fen\u00eatre, remplie de noir</p> </li> <li>On fait avancer l'horloge</li> <li>On affiche tout \u00e7a</li> </ul>"},{"location":"Projet/pygame/#version-1","title":"Version 1","text":""},{"location":"Projet/pygame/#ecrire-du-texte","title":"Ecrire du texte","text":"<p>Cette fonction nous permettra d'\u00e9crire facilement le score</p> \ud83d\udc0d Script Python<pre><code>def drawText(text, font, surface, x, y):\n    textobj = font.render(text, 1, CYAN)\n    textrect = textobj.get_rect()\n    textrect.topleft = (x, y)\n    surface.blit(textobj, textrect)\n</code></pre>"},{"location":"Projet/pygame/#taille-de-la-police-valeur-du-score","title":"Taille de la police, valeur du score","text":"\ud83d\udc0d Script Python<pre><code>font = pygame.font.SysFont(None, 48)\n</code></pre> <p>et</p> \ud83d\udc0d Script Python<pre><code>score = 0\n</code></pre>"},{"location":"Projet/pygame/#le-serpent","title":"Le serpent","text":"<p>Le serpent est une double liste</p> \ud83d\udc0d Script Python<pre><code>snake = [[3, 3], [2, 3], [1, 3]]\n</code></pre> <p>Le premier \u00e9l\u00e9ment est sa t\u00eate, elle est en <code>[3,3]</code> ensuite vient son corps. Il commence donc avec une taille de 3.</p>"},{"location":"Projet/pygame/#dessiner-le-serpent","title":"Dessiner le serpent","text":"<p>Dans la boucle infinie, avant l'horloge :</p> \ud83d\udc0d Script Python<pre><code>  for elt in snake[1:]:\n      pygame.draw.rect(fenetre, VERT, (elt[0] * BLOC, elt[1] * BLOC,  BLOC, BLOC))\n  pygame.draw.rect(fenetre, JAUNE, (snake[0][0] * BLOC, snake[0][1] * BLOC, BLOC, BLOC))\n</code></pre> <p>Le corps est vert et la t\u00eate jaune.</p>"},{"location":"Projet/pygame/#afficher-le-score","title":"Afficher le score","text":"<p>On utilise notre fonction cr\u00e9e plus t\u00f4t :</p> \ud83d\udc0d Script Python<pre><code>drawText(str(score), font, fenetre, 0.2*LARGEUR, 0.2*HAUTEUR)\n</code></pre>"},{"location":"Projet/pygame/#version-2","title":"Version 2","text":"<p>On ne capturait que \"Escape\" et le clic sur la croix. On ajoute les fl\u00eaches.</p>"},{"location":"Projet/pygame/#capturer-les-touches-du-jeu","title":"Capturer les touches du jeu","text":""},{"location":"Projet/pygame/#diminuer-la-vitesse-de-rafaichissement","title":"Diminuer la vitesse de rafa\u00eechissement","text":"\ud83d\udc0d Script Python<pre><code>FPS = 5\n</code></pre>"},{"location":"Projet/pygame/#deplacer-le-serpent","title":"D\u00e9placer le serpent","text":"<p>On commence par cr\u00e9er une direction (= la vitesse) en dehors de la boucle infinie</p> \ud83d\udc0d Script Python<pre><code>direction = (1, 0)\n</code></pre>"},{"location":"Projet/pygame/#deplacer-le-serpent_1","title":"D\u00e9placer le serpent","text":"<p>Chaque pression d'une fl\u00eache change la direction :</p> \ud83d\udc0d Script Python<pre><code>    key = pygame.key.get_pressed()\n    if key:\n        if key[pygame.K_UP]:\n            direction = (..., ...)\n        if key[pygame.K_DOWN]:\n            direction = (..., ...)\n        if key[pygame.K_LEFT]:\n            direction = (..., ...)\n        if key[pygame.K_RIGHT]:\n            direction = (..., ...)\n</code></pre>"},{"location":"Projet/pygame/#deplacer-le-serpent_2","title":"D\u00e9placer le serpent","text":"<p>Ensuite la t\u00eate.</p> <p>C'est l'ancienne t\u00eate, qui s'est d\u00e9plac\u00e9e :</p> \ud83d\udc0d Script Python<pre><code>  head = [snake[0][0] + direction[0], snake[0][1] + direction[1]]\n</code></pre>"},{"location":"Projet/pygame/#deplacer-le-serpent_3","title":"D\u00e9placer le serpent","text":"<p>Le corps se d\u00e9place.</p> <ol> <li>On ajoute la t\u00eate au d\u00e9but :</li> </ol> Correction \ud83d\udc0d Script Python<pre><code>  snake.insert(0, head)\n</code></pre> <ol> <li>On perd un \u00e9l\u00e9ment de fin :</li> </ol> Correction \ud83d\udc0d Script Python<pre><code>  snake.pop(-1)\n</code></pre>"},{"location":"Projet/pygame/#version-4","title":"Version 4","text":""},{"location":"Projet/pygame/#la-mort-du-serpent","title":"La mort du serpent","text":"<p>Il meurt :</p> <ul> <li>s'il quitte l'\u00e9cran  </li> <li>si sa t\u00eate est dans son corps  </li> </ul>"},{"location":"Projet/pygame/#la-mort-du-serpent_1","title":"La mort du serpent","text":"Correction \ud83d\udc0d Script Python<pre><code>  if head in snake[1:] or head[0] &lt; 0 or head[0] &gt; LARGEUR / BLOC - 1 or head[1] &lt; 0 or head[1] &gt; HAUTEUR / BLOC - 1:\n   pygame.quit()\n</code></pre>"},{"location":"Projet/pygame/#version-5","title":"Version 5","text":""},{"location":"Projet/pygame/#fluidite","title":"Fluidit\u00e9","text":"<p>Le jeu n'est pas fluide.</p> <p>On va mettre \u00e0 jour les \u00e9l\u00e9ments du jeux toutes les 1.5 secondes et afficher 30 frames par secondes.</p> <p>Il nous faut deux variables suppl\u00e9mentaires :</p> <ol> <li>Une valeur pour d\u00e9cider quand mettre \u00e0 jour  </li> <li>Un compteur  </li> </ol>"},{"location":"Projet/pygame/#fluidite_1","title":"Fluidit\u00e9","text":"\ud83d\udc0d Script Python<pre><code>FPS = 30\nMAJ = 10\n\n# ...\n\n# juste avant la boucle infinie\ncompteur = 0\n</code></pre>"},{"location":"Projet/pygame/#fluidite_2","title":"Fluidit\u00e9","text":"<p>Dans la boucle infinie</p> \ud83d\udc0d Script Python<pre><code>  if compteur == MAJ:\n    compteur = 0\n    head = [snake[0][0] + direction[0], snake[0][1] + direction[1]]\n    # mettre les autres \u00e9v\u00e9nements concernant le snake\n\n  # On augmente le compteur\n  # tout \u00e0 la fin de la boucle infinie\n  compteur += 1\n</code></pre>"},{"location":"Projet/pygame/#nourriture","title":"Nourriture","text":"<p>On cr\u00e9e d'abord une nouvelle liste :</p> \ud83d\udc0d Script Python<pre><code>pomme = [8, 3]\n</code></pre>"},{"location":"Projet/pygame/#nourriture_1","title":"Nourriture","text":"<p>On dessine la pomme comme la t\u00eate, mais en rouge</p> Correction \ud83d\udc0d Script Python<pre><code>pygame.draw.rect(fenetre, ROUGE,(pomme[0] * BLOC, pomme[1] * BLOC, BLOC, BLOC))\n</code></pre>"},{"location":"Projet/pygame/#nourriture_2","title":"Nourriture","text":"<p>Puis on d\u00e9tecte la collision avec la pomme.</p> <p>En cas de collision :</p> <ol> <li>Le score augmente  </li> <li>Une nouvelle pomme est cr\u00e9e.  </li> </ol> <p>La boucle <code>while</code> emp\u00eache la pomme d'appara\u00eetre sur le serpent</p>"},{"location":"Projet/pygame/#nourriture_3","title":"Nourriture","text":"Correction \ud83d\udc0d Script Python<pre><code>from random import randint\n  # ...\n\n  # Dans la boucle infinie\n  if snake[0] == pomme:\n    score += 1\n    while pomme in snake:\n        pomme = [randint(0, LARGEUR / BLOC - 1),\n                randint(0, HAUTEUR / BLOC - 1)]\n</code></pre>"},{"location":"Projet/pygame/#nourriture_4","title":"Nourriture","text":"<p>S'il n'y a pas de collision le serpent diminue, sinon il conserve sa taille</p> \ud83d\udc0d Script Python<pre><code>  else:\n    snake.pop(-1)\n</code></pre>"},{"location":"Projet/pygame/#conclusion","title":"Conclusion","text":"<p>C'est termin\u00e9...</p> <p>Snake en 100 lignes (peu comment\u00e9es) avec le minimum d'instructions. On peut faire beaucoup plus court mais c'est d\u00e9j\u00e0 tr\u00e8s simple</p> <ul> <li>Python permet notamment de cr\u00e9er des jeux,  </li> <li>Cr\u00e9er un jeu avec Pygame n'est pas difficile,  </li> <li>Il nous faut quelques constantes, quelques \u00e9l\u00e9ments de jeu (serpent, t\u00eate)  </li> <li>Une boucle infinie dans laquelle  </li> <li>On lit les saisies de l'utilisateur  </li> <li>On effectue les calculs (nouvelle t\u00eate, collisions etc.)  </li> <li>On met \u00e0 jour les \u00e9l\u00e9ments graphiques  </li> </ul> Code final \ud83d\udc0d Script Python<pre><code>\"\"\"\nSnake simple\nSnake r\u00e9alis\u00e9 \"simplement\" en Pygame avec Python 3.\nN\u00e9cessite Pygame et Python 3.7\n\"\"\"\n# -*- coding: utf-8 -*-\n\n# pour choisir o\u00f9 faire appara\u00eetre la nouvelle pomme\nfrom random import randint\n# la librairie pygame\nimport pygame\n# afin de quitter le jeu proprement\nfrom pygame.locals import *\n\n\n# Les dimensions de la fen\u00eatre\nHAUTEUR = 600  # hauteur de la fenetre\nLARGEUR = 600  # largeur de la fenetre\n# Ainsi que celle d'un carr\u00e9 \u00e0 l'\u00e9cran : 20 pixels\nBLOC = 20\n\n# Les couleurs utilis\u00e9es\nNOIR = (0, 0, 0)  # fond\nROUGE = (193, 68, 51)  # pomme\nJAUNE = (208, 210, 62)  # t\u00eate\nVERT = (97, 195, 73)  # corps\nCYAN = (51, 133, 193)  # texte\n\n# Vitesse de rafa\u00eechissement du jeu\nFPS = 60\n# On effectue les calculs toutes les 15 frames\nMAJ = 15\n\n\n############################################################\n#####################   Fonctions             ##############\n############################################################\n\n\ndef drawText(text, font, surface, x, y):\n'''\n    Dessine du texte \u00e0 l'\u00e9cran\n    @param text: (str) le texte\n    @param font: (pygame.font) la police\n    @param surface: (pygame.surface) la surface sur laquelle \u00e9crire\n    @param x, y: (int) les coordonn\u00e9es du texte\n    '''\n    textobj = font.render(text, 1, CYAN)\n    textrect = textobj.get_rect()\n    textrect.topleft = (x, y)\n    surface.blit(textobj, textrect)\n\n\n############################################################\n#####################   GAME INITIALISATION   ##############\n############################################################\n\n\n# pygame\n# les \u00e9l\u00e9ments indispensables sont init, time.Clock()  et un\n# display\npygame.init()\nhorloge = pygame.time.Clock()\nfenetre = pygame.display.set_mode((LARGEUR, HAUTEUR))\n# titre de la fen\u00eatre\npygame.display.set_caption('Snake')\n\n# taille et type de la fonte\nfont = pygame.font.SysFont(None, 48)\n\n# on met imm\u00e9diatement \u00e0 jour avant de commencer\npygame.display.update()\n\n############################################################\n#####################   GAME LOOP    #######################\n############################################################\n\n# les \u00e9l\u00e9ments du jeu\n# le serpent est un tableau \u00e0 2 dimensions.\n# le premier est la t\u00eate, les suivants le corps\n# chaque \u00e9l\u00e9ment est une liste de cooordonn\u00e9es [abs, ord]\nsnake = [[3, 3], [2, 3], [1, 3]]\ndirection = (1, 0)\npomme = [8, 3]\n\n# le score est un entier\nscore = 0\n\n# compteur de frame pour les mises \u00e0 jour\ncompteur = 0\n\nwhile True:\n    # Saisies de l'utilisateur\n\n    # quitter le jeu\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n\n        if event.type == KEYDOWN:\n            if event.key == K_ESCAPE:\n                pygame.quit()\n\n    # d\u00e9placer le serpent\n    key = pygame.key.get_pressed()\n    if key:\n        if key[pygame.K_UP]:\n            # on change la direction vers le haut\n            direction = (0, -1)\n        if key[pygame.K_DOWN]:\n            # on change la direction vers le bas\n            direction = (0, 1)\n        if key[pygame.K_LEFT]:\n            # on change la direction vers la gauche\n            direction = (-1, 0)\n        if key[pygame.K_RIGHT]:\n            # on change la direction vers la droite\n            direction = (1, 0)\n\n    # Calculs\n    # ils ne sont effectu\u00e9s que toutes les 15 frames\n    if compteur == MAJ:\n        # on reset le compteur\n        compteur = 0\n\n        # la nouvelle t\u00eate est l'ancienne, d\u00e9plac\u00e9e dans la direction\n        head = [snake[0][0] + direction[0], snake[0][1] + direction[1]]\n\n        # on l'ins\u00e8re au d\u00e9but\n        snake.insert(0, head)\n\n        # collision t\u00eate / pomme\n        if snake[0] == pomme:\n            # on augmente le score\n            score += 1\n            # on d\u00e9place la pomme en dehors du corps\n            while pomme in snake:\n                # n\u00e9cessaire de tirer plusieurs fois si on n'a\n                # pas de chance !\n                pomme = [randint(0, LARGEUR / BLOC - 1),\n                        randint(0, HAUTEUR / BLOC - 1)]\n        else:\n            # si le serpent n'a pas mang\u00e9 la pomme, il diminue\n            snake.pop(-1)\n\n        # mort du serpent\n        # s'il touche son corps\n        # ou s'il quitte l'\u00e9cran\n        if head in snake[1:] \\\n                or head[0] &lt; 0 \\\n                or head[0] &gt; LARGEUR / BLOC - 1 \\\n                or head[1] &lt; 0 \\\n                or head[1] &gt; HAUTEUR / BLOC - 1:\n            pygame.quit()\n\n    # Graphiques\n\n    # d'abord on remplit de noir pour cacher les images pr\u00e9c\u00e9dentes\n    fenetre.fill(NOIR)\n    # Ensuite on dessine le corps en vert\n    for elt in snake[1:]:\n        pygame.draw.rect(fenetre, VERT,\n                        (elt[0] * BLOC, elt[1] * BLOC, BLOC, BLOC))\n\n    # la t\u00eate en jaune\n    pygame.draw.rect(fenetre, JAUNE,\n                    (snake[0][0] * BLOC, snake[0][1] * BLOC, BLOC, BLOC))\n\n    # la pomme en rouge\n    pygame.draw.rect(fenetre, ROUGE,\n                    (pomme[0] * BLOC, pomme[1] * BLOC, BLOC, BLOC))\n\n    # le score dans le coin de l'\u00e9cran\n    drawText(str(score), font, fenetre, 0.2 * LARGEUR, 0.2 * HAUTEUR)\n\n    # On met pygame \u00e0 jour\n    # en avan\u00e7ant l'horloge\n    horloge.tick(FPS)\n    # en dessinant les \u00e9l\u00e9ments\n    pygame.display.update()\n    # et comptant les frames\n    compteur += 1\n</code></pre>"},{"location":"Projet/pygame/#mini-tetris","title":"Mini-Tetris","text":"<p>Un peu d\u2019histoire</p> <p>Tetris est un jeu vid\u00e9o entre arcade et puzzle, con\u00e7u par Alekse\u00ef Pajitnov en juin 1984. Le succ\u00e8s devient plan\u00e9taire et tous les consoles qui suivront poss\u00e9deront leur version de Tetris. Il fait partie des jeux les plus addictifs de l\u2019\u00e9poque, avec Pacman.</p> Code mini-tetris - Le d\u00e9but \ud83d\udc0d Script Python<pre><code>import pygame\nimport copy\nimport random\n\n# initialisation de l'\u00e9cran de jeu\npygame.init()\n\n# Definit des couleurs RGB\nNOIR  = (0, 0, 0)\nVERT  = (0, 255, 0)\nROUGE = (255, 0, 0)\nBLEU  = (0 , 0 , 255)\nGRIS  = (128,128,128)\nCYAN  = (0,255,255)\nJAUNE = (255,255,0)\nORANGE= (255,150,0)\nVERT  = (0,255,255)\nMAUVE = (180,80,255)\nLCoul = [ NOIR, GRIS, CYAN, JAUNE, MAUVE, ORANGE, BLEU, ROUGE, VERT ]\n\n# PIECES\nP_I = [ [0,2,0],\n        [0,2,0],\n        [0,2,0] ]\n\nP_T = [ [0,0,0],\n        [4,4,4],\n        [0,4,0]]\n\nP_O = [ [3,3,0],\n        [3,3,0],\n        [0,0,0] ]\n\nP_L = [ [0,0,0],\n        [5,5,5],\n        [5,0,0] ]\n\nP_J = [ [0,0,0],\n        [6,6,6],\n        [0,0,6]]\n\nP_Z = [ [7,7,0],\n        [0,7,7],\n        [0,0,0] ]\n\nP_S = [ [0,8,8],\n        [8,8,0],\n        [0,0,0]]\n\nLP  = [ P_I, P_T, P_O, P_L, P_J, P_Z, P_S]\n\n\ndef AffPiece():\n    P = LP[idpiece]\n    for dx in range(3):\n        for dy in range(3):\n            c = P[dy][dx]\n            if c != 0:\n              idcoul = int(c)\n              xx = (px+dx) * LCASE\n              yy = (py+dy) * LCASE\n              R = (xx,yy,LCASE,LCASE)\n              pygame.draw.rect(screen,LCoul[idcoul],R)\n\n\n\n# DECORS\nLIGNE_VIDE = [1,1] + [0]*11 + [1]*2\nDECOR = []\nfor i in range(16):\n    DECOR.append(LIGNE_VIDE.copy())\nDECOR.append([1]*15)\nDECOR.append([1]*15)\n\nLCASE = 20\ndef AfficheDecors():\n    for y in range(len(DECOR)) :\n        for x in range(len(DECOR[0])):\n            xx = x * LCASE\n            yy = y * LCASE\n            id = DECOR[y][x]\n\n            pygame.draw.rect(screen,LCoul[id],(xx,yy,LCASE,LCASE))\n            pygame.draw.rect(screen,NOIR,(xx,yy,LCASE,LCASE),1)\n\n\n# Initialise la fen\u00eatre de jeu\nscreenWidth = 300\nscreenHeight = 360\nscreen = pygame.display.set_mode((screenWidth,screenHeight))\npygame.display.set_caption(\"MINI TETRIS\")\n\n\n# Gestion du rafraichissement de l'\u00e9cran\nclock = pygame.time.Clock()\n# Cache le pointeur de la souris\npygame.mouse.set_visible(0)\n\n\n# variables d'\u00e9tat\n# piece courante\nidpiece = 1\npx  = 6\npy  = 0\nrot = 0\n#Touches\nKEyDown  = 0\nKeyUp    = 0\nKeyLeft  = 0\nKeyRight = 0\n\n#compteur d'affichage\ncomptage = 0\n\n\n# Le jeu continue tant que l'utilisateur ne ferme pas la fen\u00eatre\nTermine = False\n\n# Boucle principale de jeu\nwhile not Termine:\n  # recup\u00e8re la liste des \u00e9v\u00e8nements du joueur\n  event = pygame.event.Event(pygame.USEREVENT)\n\n  # EVENEMENTS\n  # d\u00e9tecte le clic sur le bouton close de la fen\u00eatre\n  for event in pygame.event.get():\n      if event.type == pygame.QUIT:\n        Termine = True\n\n  # r\u00e9cup\u00e8re la liste des touches claviers appuye\u00e9es sous la forme d'une liste de bool\u00e9ens\n  KeysPressed = pygame.key.get_pressed()\n\n  # LOGIQUE\n  # d\u00e9placement de la pi\u00e8ce\n  comptage += 1\n  if comptage % 20 == 0 :\n          py += 1\n\n\n  if KeysPressed[pygame.K_UP] and KeyUp == 0:\n        pass\n\n  if KeysPressed[pygame.K_LEFT] and KeyLeft == 0:\n        pass\n\n  if KeysPressed[pygame.K_RIGHT] and KeyRight == 0:\n        pass\n\n  if KeysPressed[pygame.K_DOWN] and KeyDown == 0:\n        pass\n\n\n  KeyDown  = KeysPressed[pygame.K_DOWN]\n  KeyUp    = KeysPressed[pygame.K_UP]\n  KeyLeft  = KeysPressed[pygame.K_LEFT]\n  KeyRight = KeysPressed[pygame.K_RIGHT]\n\n\n\n  # AFFICHAGE\n  # Dessine le fond\n  AfficheDecors()\n  AffPiece()\n\n  # Bascule l'image dessin\u00e9e \u00e0 l'\u00e9cran\n  pygame.display.flip()\n\n    # Demande \u00e0 pygame de se caler sur 30 FPS\n  clock.tick(30)\n\n# Ferme la fen\u00eatre\npygame.quit()\n</code></pre> <p>Le jeu est fonctionnel que dans une petite partie : une pi\u00e8ce descend mais il est impossible de la d\u00e9placer.</p>"},{"location":"Projet/pygame/#presentation-du-code","title":"Pr\u00e9sentation du code","text":"<p>#### Les constantes couleurs :</p> \ud83d\udc0d Script Python<pre><code># Definit des couleurs RGB\nNOIR  = (0, 0, 0)\nVERT  = (0, 255, 0)\nROUGE = (255, 0, 0)\nBLEU  = (0 , 0 , 255)\nGRIS  = (128,128,128)\nCYAN  = (0,255,255)\nJAUNE = (255,255,0)\nORANGE= (255,150,0)\nMAUVE = (180,80,255)\nLCoul = [ NOIR, GRIS, CYAN, JAUNE, MAUVE, ORANGE, BLEU, ROUGE, VERT ]\n</code></pre> <p>Le fond noir est associ\u00e9 \u00e0 la valeur d'indice  0, les murs gris \u00e0 la valeur d'indice 1 et chaque pi\u00e8ce du jeu est associ\u00e9e avec la couleur d'indice compris entre 2 et 8.</p>"},{"location":"Projet/pygame/#les-differentes-pieces","title":"Les diff\u00e9rentes pi\u00e8ces :","text":"<p>Pour simplifier les algorithmes, on va utiliser des combinaisons de carr\u00e9s qui s'inscrivent dans une grille 3 \\(\\times\\) 3</p> <p></p> <p>Toutes les pi\u00e8ces sont stock\u00e9es dans des listes de 3 \\(\\times\\) 3 \u00e9l\u00e9ments. Une valeur nulle correspond \u00e0 une case vide et une valeur non nulle indique une case pleine ainsi que sa couleur. L'ensemble des pi\u00e8ces est stock\u00e9 dans une liste nomm\u00e9e LP : </p> \ud83d\udc0d Script Python<pre><code># PIECES\nP_I = [ [0,2,0],\n        [0,2,0],\n        [0,2,0] ]\n\nP_O = [ [3,3,0],\n        [3,3,0],\n        [0,0,0] ]\n\nP_T = [ [0,0,0],\n        [4,4,4],\n        [0,4,0]]\n\nP_L = [ [0,0,0],\n        [5,5,5],\n        [5,0,0] ]\n\nP_J = [ [0,0,0],\n        [6,6,6],\n        [0,0,6]]\n\nP_Z = [ [7,7,0],\n        [0,7,7],\n        [0,0,0] ]\n\nP_S = [ [0,8,8],\n        [8,8,0],\n        [0,0,0]]\n\nLP  = [ P_I, P_O, P_T, P_L, P_J, P_Z, P_S]\n</code></pre> <p>Les variables d'\u00e9tat sont pr\u00e9sent\u00e9es ci-dessous. </p> \ud83d\udc0d Script Python<pre><code># variables d'\u00e9tat\n# piece courante\nidpiece = 1\npx  = 6\npy  = 0\nrot = 0\n#Touches\nKeyDown  = 0\nKeyUp    = 0\nKeyLeft  = 0\nKeyRight = 0\n</code></pre> <p>La variable <code>idpiece</code> indique l'indice de la pi\u00e8ce courante dans la liste <code>LP</code>. Ainsi le jeu d\u00e9marre avec la pi\u00e8ce T. Les variable <code>px</code>, <code>py</code> et <code>rot</code> indique la position en \\(x\\), et \\(y\\) da la pi\u00e8ce dans la grille, ainsi que sa rotation : 0 pour \\(0^{\\circ}\\) et 1 pour \\(90^{\\circ}\\) . Et quatre variables pour stocker l'\u00e9tat pr\u00e9c\u00e9dent des touches fl\u00e9ch\u00e9es : enfonc\u00e9 ou non. L'int\u00e9r\u00eat des de pouvoir d\u00e9tecter les appuis sur ces touches.</p>"},{"location":"Projet/pygame/#affichage-du-decors","title":"Affichage du d\u00e9cors :","text":"\ud83d\udc0d Script Python<pre><code># DECORS\nLIGNE_VIDE = [1,1] + [0]*11 + [1]*2\nDECOR = []\nfor i in range(16):\n    DECOR.append(LIGNE_VIDE.copy())\nDECOR.append([1]*15)\nDECOR.append([1]*15)\n\n\nLCASE = 20\ndef AfficheDecors():\n    for y in range(len(DECOR)) :\n        for x in range(len(DECOR[0])):\n            xx = x * LCASE\n            yy = y * LCASE\n            id = DECOR[y][x]\n\n            pygame.draw.rect(screen,LCoul[id],(xx,yy,LCASE,LCASE))\n            pygame.draw.rect(screen,NOIR,(xx,yy,LCASE,LCASE),1)\n</code></pre> <p>Le d\u00e9cor est stock\u00e9 dans une grille de 15 cases de large pour 18 de haut. Comme la largeur des cases fait 20 pixels, on a donc une fen\u00eatre de taille 300 \\(\\times\\) 360 pixels. On d\u00e9finit une constante <code>LIGNE_VIDE</code> compos\u00e9e de 2 colonnes sur la gauche et sur la droite, qui marquent les bords avec des cases grises,donc de code couleur associ\u00e9 1. Les 11 cases centrales vides sont remplies avec la valeur 0? Le d\u00e9cor est d\u00e9fini comme une liste de 18 lignes. Les 16 premi\u00e8res sont des lignes vides, et les 2 derni\u00e8res sont remplies de 1. Pour cr\u00e9er les 16 lignes vides, nous utilisons la liste <code>LIGNE_VIDE</code> qu'on copie avec la fonction <code>copy()</code>. Ceci est tr\u00e8s important car chaque ligne doit \u00eatre ind\u00e9pendante !\\</p> <p></p> <p>Les valeurs sont stock\u00e9es dans une liste de listes intitul\u00e9e <code>DECOR</code>. Ainsi <code>len(DECOR)</code> correspond au nombre de lignes et <code>len(DECOR[0])</code> au nombre de colonnes du jeu. En \u00e9crivant <code>DECOR[y][x]</code> on acc\u00e8de \u00e0 l'indice de couleur pour la case de coordonn\u00e9es (x,y). L'origine du d\u00e9cor (0,0) est positionn\u00e9e en haut \u00e0 gauche de l'\u00e9cran. La variable <code>LCASE</code> d\u00e9finit la largeur d'une case en pixels. Pour dessiner enti\u00e8rement la grille, on utilise un double boucle en x et y.  </p> <p>On dessine un carr\u00e9 plein gr\u00e2ce \u00e0 la premi\u00e8re fonction <code>draw.rect()</code>, puis les bords noirs avec le deuxi\u00e8me appel.</p>"},{"location":"Projet/pygame/#deplacement-des-pieces","title":"D\u00e9placement des pi\u00e8ces :","text":"<p>On d\u00e9place la pi\u00e8ce courante avec une technique particuli\u00e8re. On utilise une variable comptage qui comptabilise le nombre d'affichages effectu\u00e9s. Le test effectu\u00e9 est : <code>comptage % 20 == 0</code>,  ce qui produit 20 affichages. Comme on est \u00e0 30 FPS, cela se produit toutes les 0,66 seconde. a ce moment-l\u00e0, on fait descendre la pi\u00e8ce d'une ligne vers le bas. (A ce niveau aucune collision n'est pas g\u00e9r\u00e9e) </p> \ud83d\udc0d Script Python<pre><code>   # LOGIQUE\n   # d\u00e9placement de la pi\u00e8ce\n   comptage += 1\n   if comptage % 20 == 0 :\n           py += 1\n</code></pre> <p>Dans la partie g\u00e9rant la logique du jeu, on trouve cette ligne</p> \ud83d\udc0d Script Python<pre><code>   if KeysPressed[pygame.K_UP] and KeyUp == 0:\n        pass\n</code></pre> <p>La variable <code>KeyUp</code> stocke l'\u00e9tat de la touche <code>[Fl\u00e8che Haut]</code> lors de l'affichage pr\u00e9c\u00e9dent. Dans cette condition, on d\u00e9tecte si le joueur vient d'appuyer sur cette touche. Pour l'instant cette condition ne d\u00e9clenche rien mais cela va changer par la suite.</p> <p>Gestion de la rotation</p> <p>Vous allez g\u00e9rer la rotation de la pi\u00e8ce courante. Tout d'abord apr\u00e8s la condition g\u00e9rant l'appui sur la touche <code>[Fl\u00e8che Haut]</code>, vous allez modifier la valeur de la variable <code>rot</code>. Chaque appui doit augmenter la variable <code>rot</code> de 1. Il serait judicieux d'appliquer un modulo 4 pour faire en sorte que cette variable ne puisse prendre que des valeurs entre 0 et 3. Dans le jeu orignal, les pi\u00e8ces ne tournent que dans un sens.</p> Question 1Question 2Question 3 <p>Cr\u00e9ez une fonction <code>Rot90Droite(P)</code> qui, \u00e0 partir d'une pi\u00e8ce 3 \\(\\times\\) 3 tourne cette pi\u00e8ce de \\(90^{\\circ}\\). La pi\u00e8ce P correspond \u00e0 une liste de listes, cette pi\u00e8ce ne doit pas \u00eatre modifi\u00e9e. Vous allez construire une nouvelle pi\u00e8ce et la retourner. Voici quelques conseils :      </p> <ul> <li>Pour cr\u00e9er une nouvelle pi\u00e8ce, vous pouvez l'initialiser \u00e0 partir d'une liste de listes contenant des 0 ou appliquer la fonction <code>copy.deepcopy()</code> sur la pi\u00e8ce P actuelle. Le contenu n'a pas d'importance, car de toute fa\u00e7on, il va \u00eatre \u00e9cras\u00e9  </li> <li>Il faut programmer la rotation de \\(90^{\\circ}\\). Voici un exemple avec la pi\u00e8ce P en entr\u00e9e et la pi\u00e8ce R \u00e0 calculer \u00e0 droite. Dans tous les cas, la case centrale ne change pas.</li> </ul> <p></p> <ul> <li>Option 1 : \u00e9crivez une instruction pour chacune des huit cases. Par exemple, pour la case 1 en haut \u00e0 gauche : <code>R[0][0]=P[2][0]</code>, et pour la case 2 : <code>R[0][1]=P[1][0]</code>.  </li> <li>Option 2 : faites une liste des positions des huit cases des bords, ceci en tournant dans le sens des aiguilles d'une montre : <code>L=((0,0) , (1,0) , (2,0), (2,1) ( (2,2) , (1,2) ...]</code> Ainsi en cr\u00e9ant une boucle for d'indice i allant de 0 \u00e0 7 , vous savez que la case \u00e0 la position <code>R[i]</code> doit \u00eatre initialis\u00e9e avec la case <code>L[(i-2)%8]</code>.</li> </ul> <p>Cr\u00e9ez une fonction <code>Rotn(P,nb)</code> qui calcul la pi\u00e8ce P apr\u00e8s nb rotations. Pour cela :  </p> <ul> <li>Initialiser une pi\u00e8ce 3 \\(\\times\\) 3 sous forme de liste de listes. Il est judicieux d'utiliser la fonction <code>copy.deepcopy()</code> pour cloner la pi\u00e8ce P, car si la variable nb vaut 0, il n'y aura aucune rotation effectu\u00e9e et c'est la copie de la pi\u00e8ce initiale qui sera retourn\u00e9e.  </li> <li>Effectuez autant de rotations que n\u00e9cessaire. Pour cela utiliser la fonction <code>Rot90Droite()</code>.  </li> <li>Retournez le r\u00e9sultat.</li> </ul> <p>Modifier la fonction <code>AffPiece()</code> pour qu'elle tienne compte de la variable rot et affichez la pi\u00e8ce en tenant compte de ce param\u00e8tre. Maintenant, lorsque vous appuyer sur la touche [Fl\u00e8che Haut], vous devez voir la pi\u00e8ce tourner.</p> <p>D\u00e9placement lat\u00e9raux</p> Question 1Question 2 <p>\u00c9crivez une fonction <code>DetectColission()</code> qui d\u00e9termine suivant une pi\u00e8ce, une rotation et une position (x,y) donn\u00e9es s'il y a collision avec le d\u00e9cor ou non. Voici quelques conseils : </p> <ul> <li>Appliquer la rotation sur la pi\u00e8ce pour obtenir sa bonne orientation  </li> <li>Cr\u00e9ez une double boucle d'indices dx et dy pour parcourir les cases de la pi\u00e8ce.  </li> <li>Comparer chaque case <code>(dx,dy)</code> de la pi\u00e8ce avec la case <code>(x+dx,y+dy)</code> du d\u00e9cor. Si les deux cases sont non vides, alors il y a collision, et retournez vrai dans ce cas.  </li> </ul> <p>Compl\u00e9tez le code g\u00e9rant l'appui sur les touches <code>[Fl\u00e8che Droite]</code> et <code>[Fl\u00e8che Gauche]</code>. Par exemple, lors de l'appui sur <code>[Fl\u00e8che Gauche]</code>, v\u00e9rifiez d'abord que la futur place de la pi\u00e8ce n'est pas en collision avec le d\u00e9cor. Si aucune collision n'est d\u00e9tect\u00e9e, alors modifier la position de la pi\u00e8ce en faisant : \\(px-=1\\).</p> <p>Gestion de la descente</p> Question 1Question 2Question 3Question 4Question 5 <p>\u00c9crivez une fonction <code>FusionDecor()</code> qui, suivant une pi\u00e8ce, une rotation et une position (x,y) donn\u00e9e, fixe cette pi\u00e8ce dans le d\u00e9cor. Cette fonction est comparable \u00e0 la fonction <code>DetectCollision()</code>, sauf qu'il n'y a pas \u00e0 faire de test, mais juste un transfert des cases color\u00e9es de la pi\u00e8ce vers les cases de la grille.  </p> <p>\u00c9crivez une fonction <code>NextPiece()</code> qui initialise une nouvelle pi\u00e8ce. Pour cela, gr\u00e2ce au package <code>random</code>, choisissez une pi\u00e8ce au hasard. Sa position sera forc\u00e9ment la ligne 0 et au milieu de la grille, c'est-\u00e0-dire \u00e0 l'abscisse 6. Par contre vous pouvez choisir sa rotation al\u00e9atoirement.  </p> <p>Tous les 20 affichages, la pi\u00e8ce courante descend automatiquement d'une ligne, g\u00e9rez la collision avec le d\u00e9cor. Lorsque la pi\u00e8ce est susceptible de descendre, examinez si sa position futur produit une collision. Dans ce cas-l\u00e0, elle ne doit pas descendre, car elle est stopp\u00e9e par quelque chose. Appelez cette fonction <code>FusionDecor()</code> pour figer la pi\u00e8ce. Apr\u00e8s cela g\u00e9n\u00e9rez une nouvelle pi\u00e8ce.  </p> <p>Vous pouvez maintenant g\u00e9rer l'appui sur la touche <code>[Fl\u00e8che BAS]</code>. Le m\u00e9canisme est identique \u00e0 celui de la descente automatique. </p> <p>Il reste un m\u00e9canisme \u00e0 mettre en  place : le retrait des lignes pleines. Cet \u00e9v\u00e9nement peut arriver apr\u00e8s la fusion d'une pi\u00e8ce avec le d\u00e9cor. Il se peut qu'une ou plusieurs lignes pleines apparaissent. \u00c9crivez une fonction <code>RetraitLigne()</code> dont l'objectif est de retirer l'ensemble des lignes pleines du d\u00e9cor.  </p> <ul> <li>Cr\u00e9ez une boucle for avec un indice partant de 0 jusqu'\u00e0 15 compris. Les deux derni\u00e8res lignes ne doivent pas \u00eatre trait\u00e9es.  </li> <li>Faites un calcul pour trouver la valeur de l'indice qui parcourt les lignes en sens inverse, c'est-\u00e0-dire de l'indice 15 \u00e0 0.  </li> <li>Testez la ligne associ\u00e9e \u00e0 ce nouvel indice pour savoir si elle est pleine :  <ul> <li>Pour cela, il suffit de d\u00e9tecter si une valeur 0 est pr\u00e9sente dans la ligne courante. utilisez le test <code>0 in MaLigneCourante</code> qui retourne Vrai ou Faux  </li> <li>Si la ligne est pleine, retirez-la gr\u00e2ce \u00e0 la fonction <code>DECOR.pop(index)</code>.  </li> <li>Une fois le parcours termin\u00e9, des lignes ont pu \u00eatre supprim\u00e9es. Ainsi tant que le nombre de lignes dans la liste <code>DECOR</code> est insuffisant, rajoutez des lignes vides \u00e0 l'indice 0 gr\u00e2ce \u00e0 la fonction <code>DECOR.insert(0,...)</code>. Pensez \u00e0 ins\u00e9rer une ligne vide qui soit ind\u00e9pendante de la constante <code>LIGNE_VIDE</code> d\u00e9finie dans le programme.</li> </ul> </li> </ul>"},{"location":"Projet/pygame_non_utilise/","title":"Pygame non utilise","text":""},{"location":"Projet/pygame_non_utilise/#un-premier-jeu-pong","title":"Un Premier Jeu - Pong","text":"<p>Pong est l'un des premiers jeux vid\u00e9o d'arcade commercialis\u00e9 en 1972. Il s'inspire du tennis de table. Devant l'engouement g\u00e9n\u00e9r\u00e9 par le jeu, Pong est port\u00e9 sur une console de salon \u00e0 partir de 1975.  </p> <p>Le package PyGame permet de r\u00e9aliser avec Python des jeux en quelques heures. Nous allons donc cr\u00e9er un jeu de pong rudimentaire en utilisant des classes pour g\u00e9rer la balle et la raquette</p> <p>Voici ce \u00e0 quoi ressemblera l'interface du jeu que nous allons cr\u00e9er :</p> <p> </p> <p>Nous allons mettre en oeuvre le concept objet en d\u00e9finissant une classe Balle et une classe Raquette pour le jeu de Pong.</p>"},{"location":"Projet/pygame_non_utilise/#un-premier-exemple","title":"Un premier exemple","text":"<p>Voici le code d'un premier jeu avant PONG :</p> \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\n\nHAUTEUR_FENETRE = 480\nLARGEUR_FENETRE = 640\n\nfenetre = pygame.display.set_mode( (LARGEUR_FENETRE, HAUTEUR_FENETRE) )\npygame.display.set_caption(\"Titre de la fen\u00eatre\")\npygame.font.init()\nfonte = pygame.font.Font(None, 30)\n</code></pre> <p>La fen\u00eatre s'affiche mais disparait aussit\u00f4t. il faut cr\u00e9er une boucle pour la garder ouverte et rafraichir l'affichage dans la fen\u00eatre :</p> \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\n\nHAUTEUR_FENETRE = 480\nLARGEUR_FENETRE = 640\n\nfenetre = pygame.display.set_mode( (LARGEUR_FENETRE, HAUTEUR_FENETRE) )\npygame.display.set_caption(\"Titre de la fen\u00eatre\")\npygame.font.init()\nfonte = pygame.font.Font(None, 30)\n\nwhile True:\n  pygame.display.update()\n</code></pre> <p>L'\u00e9cran reste noir et rien ne s'affiche. Dans la boucle while il faut r\u00e9aliser une s\u00e9rie d'actions : afficher des images, du texte, etc.</p> \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\n\nHAUTEUR_FENETRE = 480\nLARGEUR_FENETRE = 640\n\nfenetre = pygame.display.set_mode( (LARGEUR_FENETRE, HAUTEUR_FENETRE) )\npygame.display.set_caption(\"Titre de la fen\u00eatre\")\npygame.font.init()\nfonte = pygame.font.Font(None, 30)\n\nx = LARGEUR_FENETRE // 2\ny = HAUTEUR_FENETRE // 2\nrayon = 10\nwhile True:\n  # dessine la balle\n  pygame.draw.circle(fenetre, (255,255,255), (x, y), rayon)\n  pygame.display.update()\n\n  # attente du clic souris sur x pour fermer la fen\u00eatre\n  # ou Alt+F4 sous Linux\n  for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n      pygame.quit()\n      exit()\n</code></pre> <p>Enfin il est n\u00e9cessaire de d\u00e9placer les \u00e9l\u00e9ments dans la fen\u00eatre :</p> \ud83d\udc0d Script Python<pre><code>import pygame\nfrom pygame.locals import *\n\n# initialisation de l'\u00e9cran de jeu\npygame.init()\n\nHAUTEUR_FENETRE = 480\nLARGEUR_FENETRE = 640\n\nfenetre = pygame.display.set_mode( (LARGEUR_FENETRE, HAUTEUR_FENETRE) )\npygame.display.set_caption(\"Titre de la fen\u00eatre\")\npygame.font.init()\nfonte = pygame.font.Font(None, 30)\n\n# donn\u00e9es de la balle\nx = LARGEUR_FENETRE // 2\ny = HAUTEUR_FENETRE // 2\nrayon = 10\n\n# vecteur de d\u00e9placement\nvx = 1\nvy = 1\n\nwhile True:\n  # temporise\n  pygame.time.delay(15)\n\n  # dessine le fond de l'\u00e9cran en noir\n  fenetre.fill( (0,0,0) )\n\n  # dessine la balle\n  pygame.draw.circle(fenetre, (255,255,255), (x, y), rayon)\n\n  # nouvelle position\n  x = x + vx\n  y = y + vy\n\n  if x &gt;= LARGEUR_FENETRE or x &lt;= 0:\n    vx = -vx\n\n  if y &gt;= HAUTEUR_FENETRE or y &lt;= 0:\n    vy = -vy \n\n  pygame.display.update()\n\ndel(police)\npygame.quit()\n</code></pre> <p>Exo</p> <p>Am\u00e9liorer la gestion du rebond car la balle sort de l'\u00e9cran.</p> <p>Gestion des \u00e9v\u00e9nements Afin de g\u00e9rer les \u00e9v\u00e8nements (appui sur une touche, clic souris, etc), il faut \u00e9num\u00e9rer chacun des \u00e9v\u00e9nements re\u00e7us et v\u00e9rifier celui qui nous int\u00e9resse.</p> <p>Sur l'exemple suivant on test l'appui sur la touche 'A', un clic souris ou le fait de quitter la fen\u00eatre en cliquant sur l'icone correspondante en haut de la fen\u00eatre.</p> \ud83d\udc0d Script Python<pre><code>import pygame\nimport sys\nfrom pygame.locals import *\n\nHAUTEUR_FENETRE = 480\nLARGEUR_FENETRE = 640\n\nfenetre = pygame.display.set_mode( (LARGEUR_FENETRE, HAUTEUR_FENETRE) )\npygame.display.set_caption(\"Titre de la fen\u00eatre\")\npygame.font.init()\nfonte = pygame.font.Font(None, 30)\n\n# donn\u00e9es de la balle\nx = LARGEUR_FENETRE // 2\ny = HAUTEUR_FENETRE // 2\nrayon = 10\n# vecteur de d\u00e9placement\nvx = 1\nvy = 1\nwhile True:\n  # temporise\n  pygame.time.delay(15)\n\n  # dessine le fond de l'\u00e9cran en noir\n  fenetre.fill( (0,0,0) )\n\n  # dessine la balle\n  pygame.draw.circle(fenetre, (255,255,255), (x, y), rayon)\n\n  # nouvelle position\n  x = x + vx\n  y = y + vy\n\n  if x &gt;= LARGEUR_FENETRE or x &lt;= 0:\n    vx = -vx\n\n  if y &gt;= HAUTEUR_FENETRE or y &lt;= 0:\n    vy = -vy \n\n  for event in pygame.event.get():\n    if event.type == KEYDOWN:\n      if event.key == pygame.K_a:\n        vx = -vx\n    if event.type == QUIT:\n      pygame.quit()\n      sys.exit()\n    if event.type == MOUSEBUTTONDOWN:\n      vy = -vy\n\n  pygame.display.update()\n</code></pre>"},{"location":"Projet/pyxel/","title":"Jeu vid\u00e9o r\u00e9tro avec Pyxel","text":"<p>Le but du projet est de programmer un jeu vid\u00e9o \"r\u00e9tro\" c'est \u00e0 dire en 2D et avec des graphiques simples, souvent l\u00e9g\u00e8rement pixelis\u00e9. Parmi les exemples les plus connus, on peut citer :</p> <ul> <li>space invaders</li> <li>pac man</li> <li>breakout</li> </ul> <p>On utilise pour cela  le module <code>pyxel</code> de Python. A noter, que ce module dispose maintenant d'une interface compl\u00e8te utilisable directement en ligne dans un navigateur sans aucune installation.</p> <p>Le module Pyxel est utilis\u00e9 pour la nuit du c0de, ce projet reprend donc en grande partie les tutoriels de la nuit du code</p>"},{"location":"Projet/pyxel/#etape-1-prise-en-main-de-pyxel-partie-1","title":"Etape 1 :  prise en main de Pyxel (partie 1)","text":"<p>Faire les \u00e9tapes 1 \u00e0 4 du tutoriel d\u00e9taill\u00e9 de la nuit du code</p>"},{"location":"Projet/pyxel/#etape-2-prise-en-main-de-pyxel-partie-2","title":"Etape 2 :  prise en main de Pyxel (partie 2)","text":"<p>Faire les \u00e9tapes 5 \u00e0 8 du tutoriel d\u00e9taill\u00e9 de la nuit du code</p>"},{"location":"Projet/pyxel/#etape-3-prise-en-main-de-pyxel-partie-3","title":"Etape 3 :  prise en main de Pyxel (partie 3)","text":"<p>Faire les \u00e9tapes 9 \u00e0 12 du tutoriel d\u00e9taill\u00e9 de la nuit du code</p>"},{"location":"Projet/pyxel/#etape-4-realisation-du-jeu","title":"Etape 4 : r\u00e9alisation du jeu","text":"<p>Chercher une id\u00e9e pour votre jeu, en vous inspirant \u00e9ventuellement de jeux r\u00e9tros, ou des projets r\u00e9alis\u00e9s dans d'autres lyc\u00e9es pour la nuit du c0de, ou encore pour les troph\u00e9es NSI Dans cette \u00e9tape, on cherche avant tout \u00e0 obtenir une version alpha du jeu c'est \u00e0 dire d\u00e9j\u00e0 jouable mais sans toutes les fonctionnalit\u00e9s ou avec encore des bugs.</p>"},{"location":"Projet/pyxel/#etape-5-finalisation-du-jeu","title":"Etape 5 : finalisation du jeu","text":"<p>Corriger les bugs \u00e9ventuels du jeu d\u00e9tect\u00e9s \u00e0 la version pr\u00e9c\u00e9dente. Ajouter de nouvels fonctionnalit\u00e9s si possible.</p>"},{"location":"Projet/reines/","title":"Le probl\u00e8me des huit reines","text":"<p>Le but du projet est d'\u00e9crire un programme permettant de r\u00e9soudre le probl\u00e8me des huit reines (ou dames). Ce probl\u00e8me est un grand classique de la programmation r\u00e9cursive. Dans ce projet, on s'int\u00e9resse aussi \u00e0 la r\u00e9alisation d'une sortie graphique (avec <code>turtle</code>). Les trois premi\u00e8res \u00e9tapes de ce projet sont ind\u00e9pendantes.</p>"},{"location":"Projet/reines/#etape-1-visualisation","title":"Etape 1 :  visualisation","text":"<p>R\u00e9aliser  en turtle, l'interface graphique permettant de repr\u00e9senter un \u00e9chiquier comme ci-dessous :</p> <p></p> <p>Ajouter la possibilit\u00e9 soit via un clic soit via un <code>textinput</code> de placer une reine sur cet \u00e9chiquier. On peut \u00e9ventuellement ajouter la possibilit\u00e9 de voir les cases menac\u00e9es par une reine (en barrant ces cases). Dans l'illustation ci-dessous on a plac\u00e9 deux dames, l'une en G1 et l'autre en H7, les cases menac\u00e9es par ces reines portent une croix.</p> <p></p>"},{"location":"Projet/reines/#etape-2-resolution-par-force-brute","title":"Etape 2 : r\u00e9solution par force brute","text":"<p>On ne peut placer qu'une seule reine par colonne, on repr\u00e9sente donc le placement de huit reines sur l'\u00e9chiquier par une liste de huit entiers (les positions par colonne de chacune des huit reines). Par exemple la liste <code>[2, 5, 8, 1, 2, 1, 5, 6]</code> correspond \u00e0 l'\u00e9chiquier ci-dessous :  C'est \u00e0 dire que le i\u00e8me \u00e9l\u00e9ment de la liste est la position de la reine de la colonne num\u00e9ro i. Par exemples, la reine de la colonne 1 est situ\u00e9 sur la ligne 2, la reine de la colonne 2 sur la ligne 5.  Justifier que les huit \u00e9l\u00e9ments de la liste doivent \u00eatre diff\u00e9rents pour que cette liste repr\u00e9sente une solution du probl\u00e8me. En d\u00e9duire qu'une solution est une permutation de la liste <code>[1, 2, 3, 4, 5, 6, 7, 8]</code></p> <p>L'id\u00e9e de la r\u00e9solution par force brute et donc de parcourir l'ensemble des permutations de la liste   <code>[1, 2, 3, 4, 5, 6, 7, 8]</code> afin d'en extraire les solutions. Une permutation est une solution lorsqu'une deux reines ne sont pas sur la m\u00eame diagonale de l'\u00e9chiquier.</p> <p>Aide</p> <p>Pour g\u00e9n\u00e9rer les permutations de la liste <code>[1, 2, 3, 4, 5, 6, 7, 8]</code>, on pourra :</p> <ul> <li>dans un premier temps utiliser la fonction <code>permutations</code> du module <code>itertools</code></li> <li>puis, \u00e9crire sa propre fonction. Pour cela penser r\u00e9cursif, et exprimer une permutation de <code>[1, 2, 3, 4, 5, 6, 7, 8]</code> comme l'un des \u00e9l\u00e9ments de cette liste suivie d'une permutation des \u00e9l\u00e9ments restants.</li> </ul>"},{"location":"Projet/reines/#etape-3-resolution-par-backtracking","title":"Etape 3 : r\u00e9solution par backtracking","text":"<p>Faire des recherches sur un algorithme r\u00e9cursif appel\u00e9 backtracking (en fran\u00e7ais : retour sur trace) qui permet de r\u00e9soudre efficacement ce probl\u00e8me. On pourra par exemple consulter ce site</p> <p>Programmer ce nouvel algorithme.</p>"},{"location":"Projet/reines/#etape-4-echiquier-de-taille-quelconque-et-comparaison","title":"Etape 4 : \u00e9chiquier de taille quelconque et comparaison","text":"<p>Le probl\u00e8me des 8 reines se g\u00e9n\u00e9ralise rapidement \u00e0 un \u00e9chiquier de dimensions \\(n \\times n\\) sur lequel on cherche \u00e0 placer \\(n\\) reines sans qu'elles se menacent. Faire fonctionner les deux algorithmes (force brute et retour sur trace) en augmentant progressivement les valeurs de \\(n\\). Que pouvez-vous en conclure ?</p>"},{"location":"Projet/reines/#etape-5-aller-plus-loin","title":"Etape 5 : aller plus loin","text":"<p>R\u00e9soudre par backtracking un probl\u00e8me similaire, par exemple le probl\u00e8me du cavalier</p>"},{"location":"Projet/AOC/cours/","title":"Advent Of Code - conseils","text":""},{"location":"Projet/AOC/cours/#1-ou-mettre-les-donnees","title":"1. O\u00f9 mettre les donn\u00e9es ?","text":"<p>Je vous conseille de travailler avec 2 fichiers : </p> <ul> <li><code>input.txt</code> qui contiendra l'input r\u00e9el qui vous permettra de trouver votre solution.</li> <li><code>input_test.txt</code> qui contiendra les donn\u00e9es de test (qui sont toujours propos\u00e9es au sein de l'\u00e9nigme).  </li> </ul>"},{"location":"Projet/AOC/cours/#2-comment-recuperer-et-exploiter-ces-donnees","title":"2. Comment r\u00e9cup\u00e9rer et exploiter ces donn\u00e9es ?","text":""},{"location":"Projet/AOC/cours/#21-recuperation-des-donnees-dans-une-liste","title":"2.1 R\u00e9cup\u00e9ration des donn\u00e9es dans une liste :","text":"<p>L'instruction suivante :</p> \ud83d\udc0d Script Python<pre><code>data = open('input_test.txt').read().splitlines()\n</code></pre> <p>va r\u00e9cup\u00e9rer au sein d'une liste toutes les lignes de l'input. Attention, les objets contenus dans la liste sont des cha\u00eenes de caract\u00e8res.</p> <p>Exemple avec le fichier <code>input_test.txt</code></p> \ud83d\udc0d Script Python<pre><code>1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\n</code></pre> <p>La variable <code>data</code> sera alors : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; data\n['1000', '2000', '3000', '', '4000', '', '5000', '6000', '', '7000', '8000', '9000', '', '10000']\n</code></pre></p>"},{"location":"Projet/AOC/cours/#22-exploiter-ces-donnees","title":"2.2 Exploiter ces donn\u00e9es","text":"<p>Le plus dur commence ! Suivant ce qu'il va falloir faire avec ces donn\u00e9es, vous allez devoir les triturer pour les utiliser, au sein de diff\u00e9rentes structures (listes, dictionnaires... ). Cela d\u00e9pend des situations. Ici par exemple, les donn\u00e9es sont \u00abjuste\u00bb des nombres, on peut donc parcourir la liste et effectuer un <code>int()</code> pour les convertir en nombre lorsque c'est n\u00e9cessaire...  </p>"},{"location":"Projet/gomoku/gomoku/","title":"Gomoku","text":"<p>Projet cr\u00e9e par f.Nativel :</p> <p>Dans le jeu de Gomoku (voir illustration ci-dessous) deux joueurs s'affrontent dans le but d'aligner en premier  5 pions dans n'importe quelle direction (horizontale, verticale, diagonale). Traditionnellement, ce jeu se joue sur un plateau du jeu de Go de dimensions 15 sur 15 (ou 19 sur 19) avec des pions noirs et blancs pour chacun des deux joueurs.</p> <p>On pourra consulter la page wikipedia consacr\u00e9e \u00e0 ce jeu pour plus d'informations.</p> <p>Le but du projet est de programmer ce jeu en python afin que deux joueurs humains puissent s'affronter dans une interface graphique r\u00e9alis\u00e9e avec le module <code>turtle</code> ou avec le module <code>pygame</code>.</p>"},{"location":"Projet/gomoku/gomoku/#etape-1-realisation-du-plateau-de-jeu","title":"Etape 1 : r\u00e9alisation du plateau de jeu","text":"<p>Dessiner la grille de jeu, pr\u00e9voir un espace pour l'affichage de message pendant le jeu et pour l'affichage des coups des joueurs. Un exemple est donn\u00e9e ci-dessous : </p> <p></p> <p>Sur cet exemple, on a pr\u00e9vu deux colonnes \u00e0 droites pour indiquer les coups successifs des joueurs ainsi qu'un cadre gris en bas pour afficher les messages durant la partie (coup invalide, victoire, ...). </p> <p>Aide</p> <p>Pour faciliter le positionnement des diff\u00e9rents \u00e9l\u00e9ments, on peut au pr\u00e9alable dessiner le rep\u00e8re de la tortue en version papier et y positionner les diff\u00e9rents \u00e9l\u00e9ments afin d'avoir directement leurs coordonn\u00e9es.</p> <p>A la fin de cette \u00e9tape on devrait donc disposer d'une fonction <code>dessine_jeu</code> qui dessine tous les \u00e9l\u00e9ments du jeu tels que ci-dessus.</p>"},{"location":"Projet/gomoku/gomoku/#etape-2-positionner-un-pion-sur-la-grille","title":"Etape 2 : positionner un pion sur la grille","text":"<p>Le but de cet \u00e9tape est d'\u00e9crire :</p> <ul> <li>une fonction <code>dessine_pion</code> qui prend en param\u00e8tre le num\u00e9ro de ligne et de colonne ainsi que le num\u00e9ro du coup jou\u00e9 a le dessine \u00e0 l'emplacement correspondant sur la grille. Par exemple <code>dessine_pion(5,6,1)</code> dessine le pion situ\u00e9 en F7 (on num\u00e9rote \u00e0 partir de z\u00e9ro comme les listes de Python) de couleur noir (c'est le premier coup jou\u00e9 et les noirs commencent).</li> <li>une fonction <code>note_coup</code> qui note dans l'emplacement pr\u00e9vu dans les colonnes de droite le coup du joueur concern\u00e9. Par exemple, <code>note_coup(4,7,2)</code> \u00e9crit dans la colonne du joueur 2 <code>E8</code>. Cette fonction sera appel\u00e9e par <code>dessine_pion</code>, de fa\u00e7on \u00e0 ce que dessiner un pion \u00e9crive en m\u00eame temps le coup jou\u00e9.</li> <li>une fonction <code>message</code> qui \u00e9crit dans le cadre pr\u00e9vu sur le plateau de jeu le coup du joueur concern\u00e9. Cette fonction peut \u00eatre appel\u00e9e par la fonction <code>note_coup</code> ci-dessus.</li> </ul> <p>Aide</p> <p>On pourra \u00e9crire une fonction <code>position_pion</code> qui prend en argument un ligne et une colonne et renvoie la position du centre du pion dans la grille. Par exemple <code>position_pion(5,6)</code> doit renvoyer l'abscisse et l'ordonn\u00e9e du centre de la case <code>F7</code>.</p> <p>Dans l'illustration ci-dessous, on a test\u00e9 nos fonctions en \u00e9crivant dans le programme principal : \ud83d\udc0d Script Python<pre><code>dessine_jeu()\ndessine_pion(5,6,1)\ndessine_pion(4,7,2)\ndessine_pion(5,7,3)\ndessine_pion(3,7,4)\ndessine_pion(6,8,5)\n</code></pre></p> <p></p>"},{"location":"Projet/gomoku/gomoku/#etape-3-boucle-principale-du-jeu-et-gestion-des-interactions-avec-les-joueurs","title":"Etape 3 : boucle principale du jeu et gestion des interactions avec les joueurs","text":"<p>Le but de cette \u00e9tape est d'\u00e9crire la boucle principale du jeu ainsi qu'une fonction <code>joue_coup</code> qui fait appara\u00eetre une fen\u00eatre <code>textinput</code> du module turtle pour qu'un joueur y entre son coup sous la forme d'un lettre pour la ligne (de <code>A</code> \u00e0 <code>O</code>) et d'un nombre (de <code>1</code> \u00e0 <code>15</code>) pour la colonne puis de valider ce coup avant de le jouer. Un coup est valide lorsqu'il se situe sur la grille et que la case n'est pas encore occup\u00e9e. On tiendra donc \u00e0 jour une variable <code>grille</code> contenant l'\u00e9tat du plateau de jeu. On pourra par exemple, utiliser une liste de listes, chaque liste repr\u00e9sentant une des lignes du plateau de jeu et consid\u00e9rer que dans ces listes :</p> <ul> <li>un 0 repr\u00e9sente une case vide  </li> <li>un 1 repr\u00e9sente un pion du joueur 1  </li> <li>un 2 repr\u00e9sente un pion du joueur 2  </li> </ul> <p>Au d\u00e9part le plateau de jeu \u00e9tant vide, <code>grille</code> est la liste dont chaque \u00e9l\u00e9ment est une liste de 15 z\u00e9ros. Si on tape <code>F7</code> dans <code>joue_coup</code> le sixi\u00e8me \u00e9l\u00e9ment de <code>grille</code> devient la liste <code>[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0]</code>. Si le joueur 2 joue ensuite en <code>F8</code> cette liste devient <code>[0,0,0,0,0,0,1,2,0,0,0,0,0,0,0]</code></p> <p>Pour la boucle principale du jeu, on consid\u00e8re pour simplifier que le jeu s'arr\u00eate d\u00e8s qu'un des joueurs aligne cinq pions. On peut donc cr\u00e9er une variable bool\u00e9enne <code>victoire</code> initialis\u00e9e \u00e0 <code>False</code> et \u00e9crire une boucle <code>while not victoire</code>. Dans cette boucle, on fait appel aux fonctions \u00e9crites plus haut, pour jouer les coups successifs de chacun des joueurs et on met \u00e0 jour une variable comptabilisant le nombre de coups jou\u00e9s.</p>"},{"location":"Projet/gomoku/gomoku/#etape-4-tester-si-cinq-pions-sont-alignes","title":"Etape 4 : tester si cinq pions sont align\u00e9s","text":"<p>Le but de cette \u00e9tape est d'\u00e9crire une fonction <code>victoire</code> qui prend en argument une grille de jeu et renvoie <code>True</code> si dans cette grille 5 pions sont align\u00e9s et <code>False</code> sinon. Lorsqu'un alignement de 5 pions est rep\u00e9r\u00e9e, cette fonction tracera aussi une ligne rouge sur les pions afin de rendre bien visible l'alignement.</p> <p>Aide</p> <p>On pourra commencer par chercher les alignements de 5 pions seulement  en horizontal puis en vertical et enfin en diagonale afin d'avoir toutes les possibilit\u00e9s de victoire.</p> <p>On montre ci-dessous un exemple de partie o\u00f9 les noirs sont victorieux :</p> <p></p> <p>A la fin de cette \u00e9tape, on dispose donc d'un programme fonctionnel permettant \u00e0 deux joueurs de s'affronter.</p>"},{"location":"Projet/gomoku/gomoku/#etape-5-aller-plus-loin","title":"Etape 5 : aller plus loin","text":"<p>Cette \u00e9tape consiste \u00e0 am\u00e9liorer le jeu plusieurs pistes sont propos\u00e9es :</p> <ul> <li>pouvoir jouer \u00e0 la souris (pour cela utiliser la fonction <code>onclick</code> du module turtle associ\u00e9 \u00e0 <code>mainloop</code>)  </li> <li>pouvoir revenir en arri\u00e8re de un ou plusieurs coups dans la partie  </li> <li>pouvoir sauvegarder (et donc charger) une partie en cours  </li> <li>pouvoir choisir les couleurs, formes de pions, ...  </li> <li>pouvoir choisir les couleurs, formes de pions, ...  </li> </ul>"},{"location":"StructureDonnees/POO_BAC/","title":"Sujet BAC 4 :  \u00a0 Programmation Orient\u00e9e Objet","text":""},{"location":"StructureDonnees/POO_BAC/#exercice-n1-metropole-j1-ex5-2022","title":"Exercice n\u00b01 : M\u00e9tropole J1 : Ex.5 - 2022","text":"<p>Exercice  1 P.O.O - Laser Game</p> <p>Les participants \u00e0 un jeu de LaserGame sont r\u00e9partis en \u00e9quipes et s'affrontent dans ce jeu de tir, rev\u00eatus d'une veste \u00e0 capteurs et munis d'une arme factice \u00e9mettant des infrarouges.</p> <p>Les ordinateurs embarqu\u00e9s dans ces vestes utilisent la programmation orient\u00e9e objet pour mod\u00e9liser les joueurs. La classe <code>Joueur</code> est d\u00e9finie comme suit :</p> \ud83d\udc0d Script Python<pre><code>class Joueur:\n    def __init__(self, pseudo, identifiant, equipe):\n        \" Appelle le constructeur et initialise \"\n        self.pseudo = pseudo\n        self.equipe = equipe\n        self.id = identifiant\n        self.nb_de_tirs_emis = 0\n        self.liste_id_tirs_recus = []\n        self.est_actif = True\n\n    def tire(self):\n        \" M\u00e9thode d\u00e9clench\u00e9e par l'appui sur la g\u00e2chette \"\n        if self.est_actif:\n            self.nb_de_tirs_emis += 1\n\n    def est_determine(self):\n        \" Le joueur r\u00e9alise-t-il un grand nombre de tirs ? \"\n        return self.nb_de_tirs_emis &gt; 500  # Un bool\u00e9en est renvoy\u00e9.\n\n    def subit_un_tir(self, id_recu):\n        \" M\u00e9thode d\u00e9clench\u00e9e par les capteurs de la veste \"\n        if self.est_actif:\n            self.est_actif = False\n            self.liste_id_tirs_recus.append(id_recu)\n</code></pre> <p>1. Parmi les instructions suivantes, recopier celle qui permet de d\u00e9clarer un objet <code>joueur_1</code>, instance de la classe <code>Joueur</code>, correspondant \u00e0 un joueur dont le pseudo est <code>\"Sniper\"</code>, dont l'identifiant est <code>319</code> et qui est int\u00e9gr\u00e9 \u00e0 l'\u00e9quipe <code>\"A\"</code> :</p> <ul> <li>Instruction 1 : <code>joueur_1 = [\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 2 : <code>joueur_1 = new Joueur[\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 3 : <code>joueur_1 = Joueur(\"Sniper\", 319, \"A\")</code></li> <li>Instruction 4 : <code>joueur_1 = Joueur{\"pseudo\":\"Sniper\", \"id\":319, \"equipe\":\"A\"}</code></li> </ul> <p>2. La m\u00e9thode <code>subit_un_tir</code> r\u00e9alise les actions suivantes :</p> <p>Lorsqu'un joueur actif subit un tir capt\u00e9 par sa veste, l'identifiant du tireur est ajout\u00e9 \u00e0 l'attribut <code>liste_id_tirs_recus</code> et l'attribut <code>est_actif</code> prend la valeur <code>False</code> (le joueur est d\u00e9sactiv\u00e9). Il doit alors revenir \u00e0 son camp de base pour \u00eatre de nouveau actif.</p> <p>2.a. \u00c9crire la m\u00e9thode <code>redevenir_actif</code> qui rend \u00e0 nouveau le joueur actif uniquement s'il \u00e9tait pr\u00e9c\u00e9demment d\u00e9sactiv\u00e9.</p> <p>2.b. \u00c9crire la m\u00e9thode <code>nb_de_tirs_recus</code> qui renvoie le nombre de tirs re\u00e7us par un joueur en utilisant son attribut <code>liste_id_tirs_recus</code>.</p> <p>3. Lorsque la partie est termin\u00e9e, les participants rejoignent leur camp de base respectif o\u00f9 un ordinateur, qui utilise la classe <code>Base</code>, r\u00e9cup\u00e8re les donn\u00e9es.</p> <p>La classe <code>Base</code> est d\u00e9finie par :</p> <ul> <li>ses attributs :<ul> <li><code>equipe</code> : nom de l'\u00e9quipe (<code>str</code>), par exemple, <code>\"A\"</code>,</li> <li><code>liste_des_id_de_l_equipe</code> qui correspond \u00e0 la liste (<code>list</code>) des identifiants connus des joueurs de l'\u00e9quipe,</li> <li><code>score</code> : score (<code>int</code>) de l'\u00e9quipe, dont la valeur initiale est 1000 ;</li> </ul> </li> <li>ses m\u00e9thodes :<ul> <li><code>est_un_id_allie</code> qui d\u00e9termine si l'identifiant pass\u00e9 en param\u00e8tre est un identifiant d'un joueur de l'\u00e9quipe, en renvoyant un bool\u00e9en,</li> <li><code>decremente_score</code> qui diminue l'attribut <code>score</code> du nombre pass\u00e9 en param\u00e8tre,</li> <li><code>collecte_information</code> qui r\u00e9cup\u00e8re les statistiques d'un participant pass\u00e9 en param\u00e8tre (instance de la classe <code>Joueur</code>) pour calculer le score de l'\u00e9quipe.</li> </ul> </li> </ul> \ud83d\udc0d Script Python<pre><code>def collecte_information(self, participant):\n    if participant.equipe == self.equipe :  # test 1\n        for id in participant.liste_id_tirs_recus:\n            if self.est_un_id_allie(id):    # test 2\n                self.decremente_score(20)\n            else:\n                self.decremente_score(10)\n</code></pre> <p>3.a. Indiquer le num\u00e9ro du test (test 1 ou test 2) qui permet de v\u00e9rifier qu'en fin de partie un participant \u00e9gar\u00e9 n'a pas rejoint par erreur la base adverse.</p> <p>3.b. D\u00e9crire comment varie quantitativement le score de la base lorsqu'un joueur de cette \u00e9quipe a \u00e9t\u00e9 touch\u00e9 par le tir d'un co\u00e9quipier.</p> <p>On souhaite accorder \u00e0 la base un bonus de 40 points pour chaque joueur particuli\u00e8rement d\u00e9termin\u00e9 (qui r\u00e9alise un grand nombre de tirs).</p> <p>4. Recopier et compl\u00e9ter, en utilisant les m\u00e9thodes des classes <code>Joueur</code> et <code>Base</code>, les 2 lignes de codes suivantes qu'il faut ajouter \u00e0 la fin de la m\u00e9thode <code>collecte_information</code> :</p> \ud83d\udc0d Script Python<pre><code>    ...             # si le participant r\u00e9alise un grand nombre de tirs\n        ...         # le score de la Base augmente de 40\n</code></pre>"},{"location":"StructureDonnees/POO_BAC/#exercice-2-dapres-2022-centres-etrangers-j2-ex-4","title":"Exercice 2 : D'apr\u00e8s 2022, Centres \u00e9trangers, J2, Ex. 4","text":"<p>Exercice  2 P.O.O - La Bataille</p> <p>Simon souhaite cr\u00e9er en Python le jeu de cartes \u00ab la bataille \u00bb pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu.</p> <p>R\u00e8gles du jeu de la bataille</p> <p>Pr\u00e9paration</p> <ul> <li>Distribuer toutes les cartes aux deux joueurs.</li> <li>Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cach\u00e9e devant eux.</li> </ul> <p>D\u00e9roulement</p> <ul> <li>\u00c0 chaque tour, chaque joueur d\u00e9voile la carte du haut de son tas.</li> <li>Le joueur qui pr\u00e9sente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.</li> <li>Les valeurs des cartes sont : dans l-ordre de la plus forte \u00e0 la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible)</li> </ul> <p>Si deux cartes sont de m\u00eame valeur, il y a \u00ab bataille \u00bb.</p> <ul> <li>Chaque joueur pose alors une carte face cach\u00e9e, suivie d'une carte face visible sur la carte d\u00e9voil\u00e9e pr\u00e9c\u00e9demment.</li> <li>On recommence l'op\u00e9ration s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.</li> </ul> <p>Lorsque l'un des joueurs poss\u00e8de toutes les cartes du jeu, la partie s'arr\u00eate et ce dernier gagne.</p> <p>Pour cela Simon cr\u00e9e une classe Python <code>Carte</code>. Chaque instance de la classe a deux attributs : un pour sa <code>valeur</code> et un pour sa <code>couleur</code>. Il donne au valet la valeur \\(11\\), \u00e0 la dame la valeur \\(12\\), au roi la valeur \\(13\\) et \u00e0 l'as la valeur \\(14\\). La couleur est une chaine de caract\u00e8res : <code>\"trefle\"</code>, <code>\"carreau\",</code> <code>\"coeur\"</code> ou <code>\"pique\"</code>.</p> <p>1. Simon a \u00e9crit la classe Python <code>Carte</code> suivante, ayant deux attributs <code>valeur</code> et <code>couleur</code>, et dont le constructeur prend deux arguments : <code>val</code> et <code>coul</code>.</p> <p>1.a. Recopier et compl\u00e9ter les <code>...</code> des lignes 3 et 4 ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        ... .valeur = ...\n        ... = coul\n</code></pre> <p>1.b. Parmi les propositions ci-dessous quelle instruction permet de cr\u00e9er l'objet \u00ab 7 de c\u0153ur \u00bb sous le nom <code>c7</code> ?</p> <ul> <li><code>c7.__init__(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(7, \"coeur\")</code></li> <li><code>from Carte import 7, \"coeur\"</code></li> </ul> <p>2. On souhaite cr\u00e9er le jeu de cartes. Pour cela, on \u00e9crit une fonction <code>initialiser</code> :</p> <ul> <li>sans param\u00e8tre</li> <li>qui renvoie une liste de 52 objets de la classe <code>Carte</code> repr\u00e9sentant les 52 cartes du jeu.</li> </ul> <p>Voici une proposition de code. Recopier et compl\u00e9ter les lignes suivantes pour que la fonction r\u00e9ponde \u00e0 la demande :</p> \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(...):\n        carte_cree = ...\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> <p>3. On rappelle que dans une partie de bataille, les deux joueurs tirent chacun une carte du dessus de leur tas, et celui qui tire la carte la plus forte remporte les deux cartes et les place en dessous de son tas.</p> <p>Parmi les structures lin\u00e9aires de donn\u00e9es suivantes : Tableau, File, Pile, quelle est celle qui mod\u00e9lise le mieux un tas de cartes dans ce jeu de la bataille ? Justifier votre choix.</p> <p>4. \u00c9crire une fonction <code>comparer</code> qui prend en param\u00e8tres deux objets de la classe Carte : <code>carte_1, carte_2</code>. Cette fonction renvoie :</p> <ul> <li>\\(0\\) si la valeur des deux cartes est identique ;</li> <li>\\(1\\) si la carte <code>carte_1</code> a une valeur strictement plus forte que celle de <code>carte_2</code> ;</li> <li>\\(-1\\) si la carte <code>carte_2</code> a une valeur strictement plus forte que celle de <code>carte_1</code>.</li> </ul>"},{"location":"StructureDonnees/POO_BAC_correction/","title":"Sujet BAC 4 :  \u00a0 Programmation Orient\u00e9e Objet","text":""},{"location":"StructureDonnees/POO_BAC_correction/#exercice-n1-metropole-j1-ex5-2022","title":"Exercice n\u00b01 : M\u00e9tropole J1 : Ex.5 - 2022","text":"<p>P.O.O </p> <ul> <li>Laser Game</li> </ul> <p>Les participants \u00e0 un jeu de LaserGame sont r\u00e9partis en \u00e9quipes et s'affrontent dans ce jeu de tir, rev\u00eatus d'une veste \u00e0 capteurs et munis d'une arme factice \u00e9mettant des infrarouges.</p> <p>Les ordinateurs embarqu\u00e9s dans ces vestes utilisent la programmation orient\u00e9e objet pour mod\u00e9liser les joueurs. La classe <code>Joueur</code> est d\u00e9finie comme suit :</p> \ud83d\udc0d Script Python<pre><code>class Joueur:\n    def __init__(self, pseudo, identifiant, equipe):\n        \" Appelle le constructeur et initialise \"\n        self.pseudo = pseudo\n        self.equipe = equipe\n        self.id = identifiant\n        self.nb_de_tirs_emis = 0\n        self.liste_id_tirs_recus = []\n        self.est_actif = True\n\n    def tire(self):\n        \" M\u00e9thode d\u00e9clench\u00e9e par l'appui sur la g\u00e2chette \"\n        if self.est_actif:\n            self.nb_de_tirs_emis += 1\n\n    def est_determine(self):\n        \" Le joueur r\u00e9alise-t-il un grand nombre de tirs ? \"\n        return self.nb_de_tirs_emis &gt; 500  # Un bool\u00e9en est renvoy\u00e9.\n\n    def subit_un_tir(self, id_recu):\n        \" M\u00e9thode d\u00e9clench\u00e9e par les capteurs de la veste \"\n        if self.est_actif:\n            self.est_actif = False\n            self.liste_id_tirs_recus.append(id_recu)\n</code></pre> <p>1. Parmi les instructions suivantes, recopier celle qui permet de d\u00e9clarer un objet <code>joueur_1</code>, instance de la classe <code>Joueur</code>, correspondant \u00e0 un joueur dont le pseudo est <code>\"Sniper\"</code>, dont l'identifiant est <code>319</code> et qui est int\u00e9gr\u00e9 \u00e0 l'\u00e9quipe <code>\"A\"</code> :</p> <ul> <li>Instruction 1 : <code>joueur_1 = [\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 2 : <code>joueur_1 = new Joueur[\"Sniper\", 319, \"A\"]</code></li> <li>Instruction 3 : <code>joueur_1 = Joueur(\"Sniper\", 319, \"A\")</code></li> <li>Instruction 4 : <code>joueur_1 = Joueur{\"pseudo\":\"Sniper\", \"id\":319, \"equipe\":\"A\"}</code></li> </ul> R\u00e9ponse <p>C'est l'instruction 3 : <code>joueur_1 = Joueur(\"Sniper\", 319, \"A\")</code></p> <p>2. La m\u00e9thode <code>subit_un_tir</code> r\u00e9alise les actions suivantes :</p> <p>Lorsqu'un joueur actif subit un tir capt\u00e9 par sa veste, l'identifiant du tireur est ajout\u00e9 \u00e0 l'attribut <code>liste_id_tirs_recus</code> et l'attribut <code>est_actif</code> prend la valeur <code>False</code> (le joueur est d\u00e9sactiv\u00e9). Il doit alors revenir \u00e0 son camp de base pour \u00eatre de nouveau actif.</p> <p>2.a. \u00c9crire la m\u00e9thode <code>redevenir_actif</code> qui rend \u00e0 nouveau le joueur actif uniquement s'il \u00e9tait pr\u00e9c\u00e9demment d\u00e9sactiv\u00e9.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def redevenir_actif(self):\n    if not self.est_actif:\n        self.est_actif = True\n</code></pre> <p>2.b. \u00c9crire la m\u00e9thode <code>nb_de_tirs_recus</code> qui renvoie le nombre de tirs re\u00e7us par un joueur en utilisant son attribut <code>liste_id_tirs_recus</code>.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def nb_tirs_recus(self):\n    return len(self.liste_id_tirs_recus)\n</code></pre> <p>3. Lorsque la partie est termin\u00e9e, les participants rejoignent leur camp de base respectif o\u00f9 un ordinateur, qui utilise la classe <code>Base</code>, r\u00e9cup\u00e8re les donn\u00e9es.</p> <p>La classe <code>Base</code> est d\u00e9finie par :</p> <ul> <li>ses attributs :<ul> <li><code>equipe</code> : nom de l'\u00e9quipe (<code>str</code>), par exemple, <code>\"A\"</code>,</li> <li><code>liste_des_id_de_l_equipe</code> qui correspond \u00e0 la liste (<code>list</code>) des identifiants connus des joueurs de l'\u00e9quipe,</li> <li><code>score</code> : score (<code>int</code>) de l'\u00e9quipe, dont la valeur initiale est 1000 ;</li> </ul> </li> <li>ses m\u00e9thodes :<ul> <li><code>est_un_id_allie</code> qui d\u00e9termine si l'identifiant pass\u00e9 en param\u00e8tre est un identifiant d'un joueur de l'\u00e9quipe, en renvoyant un bool\u00e9en,</li> <li><code>decremente_score</code> qui diminue l'attribut <code>score</code> du nombre pass\u00e9 en param\u00e8tre,</li> <li><code>collecte_information</code> qui r\u00e9cup\u00e8re les statistiques d'un participant pass\u00e9 en param\u00e8tre (instance de la classe <code>Joueur</code>) pour calculer le score de l'\u00e9quipe.</li> </ul> </li> </ul> \ud83d\udc0d Script Python<pre><code>def collecte_information(self, participant):\n    if participant.equipe == self.equipe :  # test 1\n        for id in participant.liste_id_tirs_recus:\n            if self.est_un_id_allie(id):    # test 2\n                self.decremente_score(20)\n            else:\n                self.decremente_score(10)\n</code></pre> <p>3.a. Indiquer le num\u00e9ro du test (test 1 ou test 2) qui permet de v\u00e9rifier qu'en fin de partie un participant \u00e9gar\u00e9 n'a pas rejoint par erreur la base adverse.</p> R\u00e9ponse <p>C'est le test 1 qui permet de savoir si le joueur ne s'est pas \u00e9gar\u00e9 en terrain adverse.</p> <p>3.b. D\u00e9crire comment varie quantitativement le score de la base lorsqu'un joueur de cette \u00e9quipe a \u00e9t\u00e9 touch\u00e9 par le tir d'un co\u00e9quipier.</p> R\u00e9ponse <p>Un tir ami fait perdre 20 points au score.</p> <p>On souhaite accorder \u00e0 la base un bonus de 40 points pour chaque joueur particuli\u00e8rement d\u00e9termin\u00e9 (qui r\u00e9alise un grand nombre de tirs).</p> <p>4. Recopier et compl\u00e9ter, en utilisant les m\u00e9thodes des classes <code>Joueur</code> et <code>Base</code>, les 2 lignes de codes suivantes qu'il faut ajouter \u00e0 la fin de la m\u00e9thode <code>collecte_information</code> :</p> \ud83d\udc0d Script Python<pre><code>    ...             # si le participant r\u00e9alise un grand nombre de tirs\n        ...         # le score de la Base augmente de 40\n</code></pre> R\u00e9ponse <p>Pour augmenter de \\(40\\), on peut soustraire \\(-40\\).</p> \ud83d\udc0d Script Python<pre><code>    if participant.est_determine():  # si le participant r\u00e9alise un grand nombre de tirs\n        self.decremente_score(-40)   # le score de la Base augmente de 40\n</code></pre>"},{"location":"StructureDonnees/POO_BAC_correction/#exercice-2-dapres-2022-centres-etrangers-j2-ex-4","title":"Exercice 2 : D'apr\u00e8s 2022, Centres \u00e9trangers, J2, Ex. 4","text":"<p>P.O.O</p> <ul> <li>La Bataille</li> </ul> <p>Simon souhaite cr\u00e9er en Python le jeu de cartes \u00ab la bataille \u00bb pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu.</p> <p>R\u00e8gles du jeu de la bataille</p> <p>Pr\u00e9paration</p> <ul> <li>Distribuer toutes les cartes aux deux joueurs.</li> <li>Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cach\u00e9e devant eux.</li> </ul> <p>D\u00e9roulement</p> <ul> <li>\u00c0 chaque tour, chaque joueur d\u00e9voile la carte du haut de son tas.</li> <li>Le joueur qui pr\u00e9sente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.</li> <li>Les valeurs des cartes sont : dans l-ordre de la plus forte \u00e0 la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible)</li> </ul> <p>Si deux cartes sont de m\u00eame valeur, il y a \u00ab bataille \u00bb.</p> <ul> <li>Chaque joueur pose alors une carte face cach\u00e9e, suivie d'une carte face visible sur la carte d\u00e9voil\u00e9e pr\u00e9c\u00e9demment.</li> <li>On recommence l'op\u00e9ration s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.</li> </ul> <p>Lorsque l'un des joueurs poss\u00e8de toutes les cartes du jeu, la partie s'arr\u00eate et ce dernier gagne.</p> <p>Pour cela Simon cr\u00e9e une classe Python <code>Carte</code>. Chaque instance de la classe a deux attributs : un pour sa <code>valeur</code> et un pour sa <code>couleur</code>. Il donne au valet la valeur \\(11\\), \u00e0 la dame la valeur \\(12\\), au roi la valeur \\(13\\) et \u00e0 l'as la valeur \\(14\\). La couleur est une chaine de caract\u00e8res : <code>\"trefle\"</code>, <code>\"carreau\",</code> <code>\"coeur\"</code> ou <code>\"pique\"</code>.</p> <p>1. Simon a \u00e9crit la classe Python <code>Carte</code> suivante, ayant deux attributs <code>valeur</code> et <code>couleur</code>, et dont le constructeur prend deux arguments : <code>val</code> et <code>coul</code>.</p> <p>1.a. Recopier et compl\u00e9ter les <code>...</code> des lignes 3 et 4 ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        ... .valeur = ...\n        ... = coul\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, val, coul):\n        self.valeur = val\n        self.couleur = coul\n</code></pre> <p>1.b. Parmi les propositions ci-dessous quelle instruction permet de cr\u00e9er l'objet \u00ab 7 de c\u0153ur \u00bb sous le nom <code>c7</code> ?</p> <ul> <li><code>c7.__init__(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(self, 7, \"coeur\")</code></li> <li><code>c7 = Carte(7, \"coeur\")</code></li> <li><code>from Carte import 7, \"coeur\"</code></li> </ul> R\u00e9ponse <p><code>c7 = Carte(7, \"coeur\")</code> cr\u00e9e une instance de la classe <code>Carte</code> de valeur \\(7\\) et de couleur <code>\"coeur\"</code>, puis l'affecte \u00e0 la variable <code>c7</code>.</p> <p>2. On souhaite cr\u00e9er le jeu de cartes. Pour cela, on \u00e9crit une fonction <code>initialiser</code> :</p> <ul> <li>sans param\u00e8tre</li> <li>qui renvoie une liste de 52 objets de la classe <code>Carte</code> repr\u00e9sentant les 52 cartes du jeu.</li> </ul> <p>Voici une proposition de code. Recopier et compl\u00e9ter les lignes suivantes pour que la fonction r\u00e9ponde \u00e0 la demande :</p> \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(...):\n        carte_cree = ...\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def initialiser() :\n    jeu = []\n    for coul in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n    for val in range(2, 15):\n        carte_cree = Carte(val, coul)\n        jeu.append(carte_cree)\n    return jeu\n</code></pre> <p>3. On rappelle que dans une partie de bataille, les deux joueurs tirent chacun une carte du dessus de leur tas, et celui qui tire la carte la plus forte remporte les deux cartes et les place en dessous de son tas.</p> <p>Parmi les structures lin\u00e9aires de donn\u00e9es suivantes : Tableau, File, Pile, quelle est celle qui mod\u00e9lise le mieux un tas de cartes dans ce jeu de la bataille ? Justifier votre choix.</p> R\u00e9ponse <p>On a besoin d'une structure lin\u00e9aire pour</p> <ul> <li>extraire une carte \u00e0 une seule extr\u00e9mit\u00e9 ;</li> <li>ajouter une carte \u00e0 l'autre extr\u00e9mit\u00e9 (elle sera donc loin d'\u00eatre pioch\u00e9e).</li> </ul> <p>FILO : First In Last Out ; premier entr\u00e9, dernier sorti, pour la File.</p> <p>C'est la File qui r\u00e9pond le mieux \u00e0 la mod\u00e9lisation souhait\u00e9e.</p> <p>4. \u00c9crire une fonction <code>comparer</code> qui prend en param\u00e8tres deux objets de la classe Carte : <code>carte_1, carte_2</code>. Cette fonction renvoie :</p> <ul> <li>\\(0\\) si la valeur des deux cartes est identique ;</li> <li>\\(1\\) si la carte <code>carte_1</code> a une valeur strictement plus forte que celle de <code>carte_2</code> ;</li> <li>\\(-1\\) si la carte <code>carte_2</code> a une valeur strictement plus forte que celle de <code>carte_1</code>.</li> </ul> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def comparer(carte_1, carte_2):\n    if carte_1.valeur &gt; carte_2.valeur:\n        return 1\n    elif carte_1.valeur &lt; carte_2.valeur:\n        return -1\n    else:\n        return 0\n</code></pre>"},{"location":"StructureDonnees/Revision_Arbres/","title":"Revision Arbres","text":"R\u00e9vision : Structures de donn\u00e9es - Les Arbres Structures de donn\u00e9e  COURS et EXERCICES <p>Exercice n\u00b01 :</p> <p>\\(((2 \u2212 10) \u00d7 2 + (3 + 7) \u00d7 6)/(9 + (8 \u00d7 (1 + 4)))\\) </p> <p>Repr\u00e9senter cette expression par un arbre binaire dans lequel les noeuds sont les op\u00e9rations et les feuilles, les nombres.</p> <p>Exercice n\u00b02 :</p> <p>On donne une liste al\u00e9atoire de 13 entiers : [22, 31, 56, 12, 51, 8, 35, 7, 3, 14, 44, 2, 6] Question 1. Construire dans l\u2019ordre de la liste l\u2019arbre binaire de recherche associ\u00e9. Question 2. Quelle est la hauteur de cet arbre ? Question 3. Construire un arbre \u00e9quilibr\u00e9 pour cette m\u00eame liste d\u2019entiers. Question 4. Quelle est la hauteur de l\u2019arbre \u00e9quilibr\u00e9 ?  </p> <p>Exercice n\u00b03 :</p> <p>On consid\u00e8re la class suivante et l\u2019arbre suivant :</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self,valeur):\n\"\"\"Initialisation de l'arbre racine+sous-arbre gauche et sous-arbre droit\"\"\"\n        self.v=valeur\n        self.fg=None\n        self.fd=None\n\n    def ajout_gauche(self,val):\n\"\"\"Ajout valeur dans le sous-arbre gauche sous la forme [val,None,None]\"\"\"\n        self.fg=Arbre(val)\n\n    def ajout_droit(self,val):\n\"\"\" Ajout valeur dans le sous-arbre droit sous la forme [val,None,None]\"\"\"\n        self.fd=Arbre(val)\n\n    def affiche(self):\n\"\"\"permet d'afficher un arbre\"\"\"\n        if self==None:\n            return None\n        else :\n            return [self.v,Arbre.affiche(self.fg),Arbre.affiche(self.fd)]\n\n    def get_valeur(self):\n\"\"\" renvoie la valeur du noeud\"\"\"\n        if self==None:\n            return None\n        else:\n            return print(self.v)\n</code></pre> <p></p> <p>Question 1 : Impl\u00e9menter l\u2019arbre suivant avec la class donn\u00e9e. Question 2 : Donner le r\u00e9sultat du parcours en profondeur infixe. Question 3 : Donner le r\u00e9sultat du parcours en profondeur pr\u00e9fixe. Question 4 : Donner le r\u00e9sultat du parcours en profondeur sufixe. Question 5 : Donner le r\u00e9sultat du parcours en largeur.</p> <p>Exercice n\u00b04 :</p> <p>On consid\u00e8re le labyrinthe ci-dessous :  </p> <p>Construire un arbre binaire repr\u00e9sentant ce labyrinthe dans lequel chaque case est repr\u00e9sent\u00e9e par un noeud. On partira du noeud not\u00e9 (4, 0) et chaque noeud sera not\u00e9 \\((i , j)\\) o\u00f9 \\(i\\) et \\(j\\) repr\u00e9sentent respectivement la ligne et la colonne de la case correspondante.  </p>"},{"location":"StructureDonnees/T1_1_Programmation_Orientee_Objet/","title":"Macro Rendering Error","text":"<p>File: <code>StructureDonnees/T1_1_Programmation_Orientee_Objet.md</code></p> <p>KeyError: 4</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 6, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 4\n</code></pre>"},{"location":"StructureDonnees/T1_2_TD_POO/","title":"POO : TD","text":"Th\u00e8me 1 - Structure de donn\u00e9es                           05              TD : Programmation Orient\u00e9e Objet (POO)"},{"location":"StructureDonnees/T1_2_TD_POO/#exercice-1-class-eleve","title":"Exercice 1 : Class Eleve","text":"<p>Exercice  1</p> <ol> <li>\u00c9crire une classe <code>Eleve</code> qui contiendra les attributs <code>nom</code>, <code>classe</code> et <code>note</code>.  </li> <li>Instancier trois \u00e9l\u00e8ves de cette classe.  </li> <li>\u00c9crire une fonction <code>compare(eleve1, eleve2)</code> qui renvoie le nom de l'\u00e9l\u00e8ve ayant la meilleure note.   </li> </ol> <p>Exemple d'utilisation de la classe </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; riri = Eleve(\"Henri\", \"TG2\", 12)\n&gt;&gt;&gt; fifi = Eleve(\"Philippe\", \"TG6\", 15)\n&gt;&gt;&gt; loulou = Eleve(\"Louis\", \"TG1\", 8)\n&gt;&gt;&gt; compare(riri, fifi)\n'Philippe'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Eleve:\n    def __init__(self, nom, classe, note):\n        self.nom = nom\n        self.classe = classe\n        self.note = note\n\n    def __repr__(self):\n        return self.nom + ' ' + self.classe + ' ' + str(self.note)\n\n    def compare(self, other):\n        if self.note &gt; other.note:\n            return self.nom\n        else:\n            return other.nom\n</code></pre> \ud83d\udc0d Script Python<pre><code>riri = Eleve(\"Henri\", \"TG2\", 12)\nfifi = Eleve(\"Philippe\", \"TG6\", 15)\nloulou = Eleve(\"Louis\", \"TG1\", 8)\nriri.compare(fifi)\n</code></pre> \ud83d\udccb Texte<pre><code>'Philippe'\n</code></pre> \ud83d\udc0d Script Python<pre><code>riri\n</code></pre> \ud83d\udccb Texte<pre><code>Henri TG2 12\n</code></pre>"},{"location":"StructureDonnees/T1_2_TD_POO/#exercice-2-class-player","title":"Exercice 2 : Class Player","text":"<p>Exercice  2</p> <p>\u00c9crire une classe <code>Player</code> qui :</p> <ul> <li>ne prendra aucun argument lors de son instanciation.  </li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>energie</code> valant 3 par d\u00e9faut.  </li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>alive</code> valant <code>True</code> par d\u00e9faut.  </li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>blessure()</code> qui diminue l'attribut <code>energie</code> de 1.  </li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>soin()</code> qui augmente l'attribut <code>energie</code> de 1.  </li> <li>si l'attribut <code>energie</code> passe \u00e0 0, l'attribut <code>alive</code> doit passer \u00e0 <code>False</code> et ne doit plus pouvoir \u00e9voluer.  </li> </ul> <p>Exemple d'utilisation de la classe</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mario = Player()\n&gt;&gt;&gt; mario.energie\n3\n&gt;&gt;&gt; mario.soin()\n&gt;&gt;&gt; mario.energie\n4\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.alive\nTrue\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.alive\nFalse\n&gt;&gt;&gt; mario.soin()\n&gt;&gt;&gt; mario.alive\nFalse\n&gt;&gt;&gt; mario.energie\n0\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Player():\n    def __init__(self, energie = 3, alive = True):\n        self.hp = energie\n        self.alive = alive\n\n    def soin(self, h = 1):\n        if self.alive: self.hp += h\n\n    def blessure(self, damage = 1):\n        self.hp -= damage\n        if self.hp &lt;= 0:\n            self.alive = False\n            self.hp = 0\n</code></pre> \ud83d\udc0d Script Python<pre><code>mario = Player()\nmario.hp\nmario.blessure()\nmario.hp\nmario.blessure(3)\nmario.hp\nmario.soin(5)\nmario.hp\n</code></pre> \ud83d\udccb Texte<pre><code>0\n</code></pre> <p>Exercice  3</p> <p>Cr\u00e9er une classe <code>CompteBancaire</code> dont la m\u00e9thode constructeur recevra en param\u00e8tres :</p> <ul> <li>un attribut <code>titulaire</code> stockant le nom du propri\u00e9taire.  </li> <li>un attribut <code>solde</code> contenant le solde disponible sur le compte.  </li> </ul> <p>Cette classe contiendra deux m\u00e9thodes <code>retrait()</code> et <code>depot()</code> qui permettront de retirer ou de d\u00e9poser de l'argent sur le compte. </p> <p>Exemple d'utilisation de la classe</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; compteGL = CompteBancaire(\"G.Lassus\", 1000)\n&gt;&gt;&gt; compteGL.retrait(50)\nVous avez retir\u00e9 50 euros\nSolde actuel du compte : 950 euros\n&gt;&gt;&gt; compteGL.retrait(40000)\nRetrait impossible\n&gt;&gt;&gt; compteGL.depot(10000000)\nVous avez d\u00e9pos\u00e9 10000000 euros\nSolde actuel du compte : 10000950 euros\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre>"},{"location":"StructureDonnees/T1_2_TD_POO/#exercice-3-class-pokemon","title":"Exercice 3 : Class Pokemon","text":"<p>Exercice  4 Pokemon et POO</p>"},{"location":"StructureDonnees/T1_2_TD_POO/#creation-dun-pokemon","title":"Cr\u00e9ation d'un Pokemon","text":"<ul> <li> <p>On consid\u00e8re une classe <code>Pokemon</code> qui permet de cr\u00e9er des pokemons.</p> </li> <li> <p>Chaque Pokemon a les caract\u00e9ristiques suivantes :</p> <ul> <li>un nom</li> <li>un type</li> <li>une vitesse</li> <li>une attaque</li> <li>un nombre de points de vie maximal</li> </ul> </li> </ul> <p>Question n\u00b0 A - 1 :     &gt;En \u00e9tudiant le code ci-dessous, modifier la ligne de code appropri\u00e9e pour cr\u00e9er un Pokemon ayant les caract\u00e9ristiques suivantes : * nom : Aqua * type : eau * vitesse : 35 * attaque : 75 * defense : 20 * points de vie maximal : 141</p> \ud83d\udc0d Script Python<pre><code>from random import *\n\nclass Pokemon:\n    def __init__(self, nom : str = \"Anonyme\",\n                 typ = choice([\"eau\", \"air\", \"terre\", \"feu\"]),\n                 vitesse = randint(1,51),\n                 attaque = randint(51,100),\n                 defense = randint(1,50),\n                 pvMax = randint(101,150)):\n        self.nom = nom\n        self.type = typ\n        self.vitesse = vitesse\n        self.attaque = attaque\n        self.defense = defense\n        self.pvMax = pvMax\n        self.pvActuels = pvMax\n\naqua = Pokemon('Aqua','eau',35,75,20,141)\nassert aqua.nom == \"Aqua\"\nassert aqua.type == \"eau\"\nassert aqua.vitesse == 35\nassert aqua.attaque == 75\nassert aqua.defense == 20\nassert aqua.pvActuels == 141\n</code></pre> <p>Question n\u00b0 A - 2 :     &gt; Modifier l'attribut <code>defense</code> du Pokemon <code>aqua</code> pour qu'il prenne la valeur 15.</p> \ud83d\udc0d Script Python<pre><code>#Ecrire le code ici !!!\n\nassert aqua.defense == 15\n</code></pre>"},{"location":"StructureDonnees/T1_2_TD_POO/#methode-speciale-__str__","title":"M\u00e9thode sp\u00e9ciale <code>__str__</code>","text":"<p>Question n\u00b0 B - 1 : Surcharger la m\u00e9thode <code>__str__(self)</code> pour qu'elle affiche l'ensemble des attributs du Pokemon</p> \ud83d\udc0d Script Python<pre><code>#Reprendre le code de la classe \"Pokemon\" et compl\u00e9ter !!!\nfrom random import *\n\nclass Pokemon:\n    def __init__(self, nom : str = \"Anonyme\",\n                 typ = choice([\"eau\", \"air\", \"terre\", \"feu\"]),\n                 vitesse = randint(1,51),\n                 attaque = randint(51,100),\n                 defense = randint(1,50),\n                 pvMax = randint(101,150)):\n        self.nom = nom\n        self.type = typ\n        self.vitesse = vitesse\n        self.attaque = attaque\n        self.defense = defense\n        self.pvMax = pvMax\n        self.pvActuels = pvMax\n\n    def __str__(self):\n        return self.nom + ', ' + self.type + ', ' + str(self.vitesse) + ', ' + str(self.attaque) + ', ' + str(self.defense) + ', ' + str(self.pvMax) + ', ' + str(self.pvActuels)\n\n\naqua = Pokemon('Aqua','eau',35,75,20,141) \nprint(aqua)\n</code></pre> \ud83d\udccb Texte<pre><code>Aqua, eau, 35, 75, 20, 141, 141\n</code></pre> <p>Question n\u00b0 B - 2 :     &gt; Cr\u00e9er une m\u00e9thode <code>etre_ko(self)</code> qui renvoie <code>True</code> si le Pokemon a 0 point de vie ou moins et <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>#Reprendre le code de la classe \"Pokemon\" et compl\u00e9ter !!!\nfrom random import *\n\nclass Pokemon:\n    def __init__(self, nom : str = \"Anonyme\",\n                 typ = choice([\"eau\", \"air\", \"terre\", \"feu\"]),\n                 vitesse = randint(1,51),\n                 attaque = randint(51,100),\n                 defense = randint(1,50),\n                 pvMax = randint(101,150)):\n        self.nom = nom\n        self.type = typ\n        self.vitesse = vitesse\n        self.attaque = attaque\n        self.defense = defense\n        self.pvMax = pvMax\n        self.pvActuels = pvMax\n\n    def etre_ko(self):\n        if self.pvActuels &lt;= 0:\n            return True\n        else:\n            return False\n\n\n\naqua = Pokemon('Aqua','eau',35,75,20,141) \n\n\nassert aqua.etre_ko() == False\naqua.pvActuels = 0\nassert aqua.etre_ko() == True\naqua.pvActuels = -7\nassert aqua.etre_ko() == True\n</code></pre> <p>Question n\u00b0 B - 3 :     &gt; Cr\u00e9er une m\u00e9thode <code>se_reposer(self)</code> qui redonne tous ses points de vie au Pokemon.</p> \ud83d\udc0d Script Python<pre><code>#Reprendre le code la classe \"Pokemon\" et compl\u00e9ter !!!\nfrom random import *\n\nclass Pokemon:\n    def __init__(self, nom : str = \"Anonyme\",\n                 typ = choice([\"eau\", \"air\", \"terre\", \"feu\"]),\n                 vitesse = randint(1,51),\n                 attaque = randint(51,100),\n                 defense = randint(1,50),\n                 pvMax = randint(101,150)):\n        self.nom = nom\n        self.type = typ\n        self.vitesse = vitesse\n        self.attaque = attaque\n        self.defense = defense\n        self.pvMax = pvMax\n        self.pvActuels = pvMax\n\n    def __str__(self):\n        return self.nom + ', ' + self.type + ', ' + str(self.vitesse) + ', ' + str(self.attaque) + ', ' + str(self.defense) + ', ' + str(self.pvMax) + ', ' + str(self.pvActuels)\n\n    def etre_ko(self):\n        if self.pvActuels &lt;= 0:\n            return True\n        else:\n            return False\n\n    def se_reposer(self):\n        self.pvActuels = self.pvMax\n</code></pre>"},{"location":"StructureDonnees/T1_2_TD_POO/#interaction-avec-un-autre-pokemon","title":"Interaction avec un autre Pokemon","text":"<p>Un pokemon peut \u00eatre de 4 types : * Eau * Feu * Air * Terre</p> <p>On sait que : * l'eau domine le feu * le feu domine l'air * l'air domine la terre * la terre domine l'eau</p> <p>Question n\u00b0 C - 1 :     &gt; Cr\u00e9er une m\u00e9thode <code>dominer(self, adversaire)</code> prenant en param\u00e8tre une autre instance de la classe <code>Pokemon</code>, qui renvoie <code>True</code> si le Pokemon a un type qui domine celui du Pokemon donn\u00e9 en param\u00e8tre et <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>#Reprendre le code la classe \"Pokemon\" et compl\u00e9ter !!!\n\nfrom random import *\n\nclass Pokemon:\n    def __init__(self, nom : str = \"Anonyme\",\n                 typ = choice([\"eau\", \"air\", \"terre\", \"feu\"]),\n                 vitesse = randint(1,51),\n                 attaque = randint(51,100),\n                 defense = randint(1,50),\n                 pvMax = randint(101,150)):\n        self.nom = nom\n        self.type = typ\n        self.vitesse = vitesse\n        self.attaque = attaque\n        self.defense = defense\n        self.pvMax = pvMax\n        self.pvActuels = pvMax\n\n    def __str__(self):\n        return self.nom + ', ' + self.type + ', ' + str(self.vitesse) + ', ' + str(self.attaque) + ', ' + str(self.defense) + ', ' + str(self.pvMax) + ', ' + str(self.pvActuels)\n\n    def etre_ko(self):\n        if self.pvActuels &lt;= 0:\n            return True\n        else:\n            return False\n\n    def se_reposer(self):\n        self.pvActuels = self.pvMax\n\n    def dominer(self, other):\n        if self.type == 'eau':\n            if other.type == 'feu': return True\n            else: return False\n        if self.type == 'feu':\n            if other.type == 'air': return True\n            else: return False\n        if self.type == 'air':\n            if other.type == 'terre': return True\n            else: return False\n        if self.type == 'terre':\n            if other.type == 'eau': return True\n            else: return False\n\n\naqua = Pokemon('Aqua','eau',35,75,20,141) \n\nflamichou = Pokemon(\"Flamichou\", \"feu\")\nassert aqua.dominer(flamichou) == True\nrocamon = Pokemon(\"Rocamon\", \"terre\")\nassert aqua.dominer(rocamon) == False\n</code></pre> <p>Lorsque qu'un Pokemon attaque un autre Pokemon, il inflige des d\u00e9g\u00e2ts comptabilis\u00e9s de la fa\u00e7on suivante : * la valeur des d\u00e9g\u00e2ts est \u00e9gale \u00e0 la diff\u00e9rence entre l'attaque du Pokemon attaquant et la d\u00e9fense de l'autre Pokemon (si la diff\u00e9rence est nulle ou n\u00e9gative, alors les d\u00e9g\u00e2ts seront \u00e9gaux \u00e0 1) * si le type du Pokemon attaquant domine celui de l'autre Pokemon, alors les d\u00e9g\u00e2ts sont multipli\u00e9s par 2</p> <p>Question n\u00b0 C - 2 :     &gt; Cr\u00e9er une m\u00e9thode <code>attaquer(self, adversaire)</code> prenant en param\u00e8tre une autre instance de la classe <code>Pokemon</code> et qui retire des points de vie \u00e0 ce dernier.</p> \ud83d\udc0d Script Python<pre><code>#Reprendre le code la classe \"Pokemon\" et compl\u00e9ter !!!\n\nfrom random import *\n\nclass Pokemon:\n    def __init__(self, nom : str = \"Anonyme\",\n                 typ = choice([\"eau\", \"air\", \"terre\", \"feu\"]),\n                 vitesse = randint(1,51),\n                 attaque = randint(51,100),\n                 defense = randint(1,50),\n                 pvMax = randint(101,150)):\n        self.nom = nom\n        self.type = typ\n        self.vitesse = vitesse\n        self.attaque = attaque\n        self.defense = defense\n        self.pvMax = pvMax\n        self.pvActuels = pvMax\n\n    def __str__(self):\n        return self.nom + ', ' + self.type + ', ' + str(self.vitesse) + ', ' + str(self.attaque) + ', ' + str(self.defense) + ', ' + str(self.pvMax) + ', ' + str(self.pvActuels)\n\n    def etre_ko(self):\n        if self.pvActuels &lt;= 0:\n            return True\n        else:\n            return False\n\n    def se_reposer(self):\n        self.pvActuels = self.pvMax\n\n    def dominer(self, other):\n        if self.type == 'eau':\n            if other.type == 'feu': return True\n            else: return False\n        if self.type == 'feu':\n            if other.type == 'air': return True\n            else: return False\n        if self.type == 'air':\n            if other.type == 'terre': return True\n            else: return False\n        if self.type == 'terre':\n            if other.type == 'eau': return True\n            else: return False\n\n    def attaquer(self, other):\n        damage = self.attaque - other.defense\n        if damage &lt;= 1: damage = 1\n        if self.dominer(other):\n            damage *= 2\n        other.pvActuels -= damage\n        if other.pvActuels &lt;= 0: other.pvActuels = 0\n\n\naqua = Pokemon('Aqua','eau',35,75,20,141) \nflamichou = Pokemon(\"Flamichou\", \"feu\", 15, 63, 32, 118)\nrocamon = Pokemon(\"Rocamon\", \"terre\", 44, 95, 48, 101)\naqua.attaquer(flamichou)\nassert flamichou.pvActuels == 32\naqua.attaquer(rocamon)\nassert rocamon.pvActuels == 74\n</code></pre>"},{"location":"StructureDonnees/T1_2_TD_POO/#combat-de-pokemons","title":"Combat de Pokemons","text":"<p>Lorsque deux Pokemons combattent l'un contre l'autre : * le premier \u00e0 attaquer est celui ayant la vitesse la plus \u00e9lev\u00e9e * s'est ensuite \u00e0 l'autre d'attaquer et ainsi de suite ... * le combat s'arr\u00eate d\u00e8s qu'un des Pokemons est ko * le vainqueur est le Pokemon n'\u00e9tant pas ko</p> <p>Question n\u00b0 D - 1 :     &gt; Cr\u00e9er une fonction <code>combattre(pokemon1, pokemon2)</code> prenant en param\u00e8tres deux instances de la classe <code>Pokemon</code> et renvoyant le pokemon vainqueur du combat</p> \ud83d\udc0d Script Python<pre><code>def combattre(pokemon1, pokemon2):\n    if pokemon1.vitesse &gt; pokemon2.vitesse:\n        p1 = pokemon1\n        p2 = pokemon2\n    else:\n        p1 = pokemon2\n        p2 = pokemon1\n    while pokemon1.etre_ko() == False and pokemon2.etre_ko == False:\n        p1.attaquer(p2)\n        print(pokemon1.nom + ': ' + pokemon1.pvActuels + 'hp' + ' | ' + pokemon2.nom + ': ' + pokemon2.pvActuels + 'hp')\n        p2.attaquer(p1)\n        print(pokemon1.nom + ': ' + pokemon1.pvActuels + 'hp' + ' | ' + pokemon2.nom + ': ' + pokemon2.pvActuels + 'hp')\n    if pokemon1.etre_ko() == True: \n        return pokemon1.nom\n    else: \n        return pokemon2.nom\n\n\nvainqueur = combattre(aqua, flamichou)\nprint(vainqueur)\n</code></pre> \ud83d\udccb Texte<pre><code>Flamichou\n</code></pre> <p>Question n\u00b0 D - 2 :     &gt; Compl\u00e9ter la fonction <code>combattre</code> pour que les Pokemons se reposent avant d'engager le combat</p> \ud83d\udc0d Script Python<pre><code>#Reprendre le code de la fonction \"Combattre\" et le compl\u00e9ter\n\ndef combattre(pokemon1, pokemon2):\n    pokemon1.se_reposer()\n    pokemon2.se_reposer()\n    if pokemon1.vitesse &gt; pokemon2.vitesse:\n        p1 = pokemon1\n        p2 = pokemon2\n    else:\n        p1 = pokemon2\n        p2 = pokemon1\n    while pokemon1.etre_ko() == False and pokemon2.etre_ko() == False:\n        print(pokemon1.nom + ': ' + str(pokemon1.pvActuels) + 'hp' + ' | ' + pokemon2.nom + ': ' + str(pokemon2.pvActuels) + 'hp')\n        p1.attaquer(p2)\n        print('\\t' + pokemon1.nom + ': ' + str(pokemon1.pvActuels) + 'hp' + ' | ' + pokemon2.nom + ': ' + str(pokemon2.pvActuels) + 'hp')\n        p2.attaquer(p1)\n        print('\\t\\t' + pokemon1.nom + ': ' + str(pokemon1.pvActuels) + 'hp' + ' | ' + pokemon2.nom + ': ' + str(pokemon2.pvActuels) + 'hp')\n    if pokemon1.etre_ko() == True: \n        return pokemon2.nom\n    else: \n        return pokemon1.nom\n\naqua = Pokemon('Aqua','eau',35,65,20,141) \nflamichou = Pokemon(\"Flamichou\", \"feu\", 15, 63, 32, 118)\nrocamon = Pokemon(\"Rocamon\", \"terre\", 20, 35, 48, 101)\n\nvainqueur = combattre(aqua, rocamon)\nprint(vainqueur)\n</code></pre> \ud83d\udccb Texte<pre><code>Aqua: 141hp | Rocamon: 101hp\n    Aqua: 141hp | Rocamon: 84hp\n        Aqua: 111hp | Rocamon: 84hp\nAqua: 111hp | Rocamon: 84hp\n    Aqua: 111hp | Rocamon: 67hp\n        Aqua: 81hp | Rocamon: 67hp\nAqua: 81hp | Rocamon: 67hp\n    Aqua: 81hp | Rocamon: 50hp\n        Aqua: 51hp | Rocamon: 50hp\nAqua: 51hp | Rocamon: 50hp\n    Aqua: 51hp | Rocamon: 33hp\n        Aqua: 21hp | Rocamon: 33hp\nAqua: 21hp | Rocamon: 33hp\n    Aqua: 21hp | Rocamon: 16hp\n        Aqua: 0hp | Rocamon: 16hp\nRocamon\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre>"},{"location":"StructureDonnees/T1_3_BAC_Capytale/","title":"POO : TD","text":"Th\u00e8me 1 - Structure de donn\u00e9es                           BAC              TD : Sujet BAC  Programmation Orient\u00e9e Objet (POO)"},{"location":"StructureDonnees/T1_3_BAC_Capytale/#exercice-1-dapres-bac-locations-de-chambres","title":"Exercice 1 : (d'apr\u00e8s Bac)  - Locations de chambres.","text":"<p>Principaux th\u00e8mes abord\u00e9s :</p> <p>Structure de donn\u00e9es (programmation objet) et langages et programmation (sp\u00e9cification).</p> <p>La soci\u00e9t\u00e9 LOCAVACANCES doit g\u00e9rer la r\u00e9servation de l\u2019ensemble des chambres de ses g\u00eetes. Chaque chambre d\u2019un m\u00eame complexe sera diff\u00e9renci\u00e9e par son nom.  </p> <p>Pour cela, d\u2019un point de vue informatique, on a cr\u00e9\u00e9 deux classes : <code>Chambre</code> et <code>Gite</code> dont le code ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Chambre:\n    def __init__(self, nom: str):\n        self._nom = nom\n        self._occupation = [False for i in range(365)]\n\n        def get_nom(self):\n            return self._nom\n\n        def get_occupation(self):\n            return self._occupation\n\n        def reserver(self, date: int):\n            self._occupation[date - 1] = True\n\nclass Gite:\n    def __init__(self, nom: str):\n        self._nom = nom\n        self._chambres = []\n\n    def __str__(self):\n        n = len(self._chambres)\n        if n == 0:\n            return \"L'h\u00f4tel \" + self._nom + \" n\u2019a aucune chambre.\"\n        else:\n            return \"L\u2019h\u00f4tel \" + self._nom + \" a \" + str(n) + \" chambre(s)\"\n\n    def get_chambres(self):\n        return self._chambres\n\n    def get_nchambres(self):\n        return [ch.get_nom() for ch in self._chambres]\n\n    def ajouter_chambres(self, nom_ch : str):\n        self._chambres.append(Chambre(nom_ch))\n\n    def mystere(self, date):\n        l_ch = []\n        for ch in self._chambres :\n            if ch.get_occupation()[date - 1] == False :\n                l_ch.append(ch.get_nom())\n        return(l_ch)\n</code></pre>"},{"location":"StructureDonnees/T1_3_BAC_Capytale/#partie-a-etude-de-la-classe-chambre","title":"Partie A - \u00c9tude de la classe <code>Chambre</code> :","text":"<ol> <li>Lister les attributs en donnant leur type. Pr\u00e9ciser s\u2019ils sont modifiables dans la classe, en explicitant la m\u00e9thode associ\u00e9e.</li> </ol> R\u00e9ponse : <p>Les attributs sont en principe d\u00e9finis et initialis\u00e9s dans la m\u00e9thode <code>__init__</code>. On les d\u00e9signe en faisant pr\u00e9c\u00e9der leur nom du mot r\u00e9serv\u00e9 <code>self</code>. Ici on a donc les attributs appel\u00e9s <code>_nom</code> et <code>_occupation</code> .  </p> <p>On constate que lors de l'initialisation la valeur attribu\u00e9e \u00e0 <code>_nom</code> est le param\u00e8tre <code>nom</code> de la m\u00e9thode <code>__init__</code> , dont le type est pr\u00e9cis\u00e9 comme \u00e9tant <code>str</code>, c'est \u00e0 dire cha\u00eene de caract\u00e8res. </p> <p><code>_occupation</code> est initialis\u00e9 sous la forme d'une liste de valeurs bool\u00e9ennes (d\u00e9finie en compr\u00e9hension)</p> <p>La m\u00e9thode <code>reserver</code> permet de modifier la valeur de l'attribut <code>_occupation</code>.</p> <ol> <li>\u00c9crire un <code>assert</code> dans la m\u00e9thode <code>reserver</code> pour v\u00e9rifier si le nombre <code>date</code> pass\u00e9 en param\u00e8tre est bien compris entre 1 et 365 (on ne g\u00e8re pas les ann\u00e9es bissextiles).</li> </ol> R\u00e9ponse : <p>Modification de la m\u00e9thode <code>reserver</code>:     </p> \ud83d\udc0d Script Python<pre><code>def reserver(self, date: int):\n    assert date &gt;=1 and date &lt;=365\n    self._occupation[date - 1] = True\n</code></pre> <p>ou   </p> \ud83d\udc0d Script Python<pre><code>def reserver(self, date: int):\n    assert 1&lt;= date &lt;=365\n    self._occupation[date - 1] = True\n</code></pre> <ol> <li>\u00c9crire la m\u00e9thode <code>annuler_reserver(self, date : int)</code>  qui annule la r\u00e9servation pour le jour <code>date</code>.</li> </ol> R\u00e9ponse : \ud83d\udc0d Script Python<pre><code>def annuler_reserver(self, date:int):\n    self._occupation[date - 1] = False \n</code></pre>"},{"location":"StructureDonnees/T1_3_BAC_Capytale/#partie-b-etude-de-la-classe-gite","title":"Partie B - \u00c9tude de la classe <code>Gite</code> :","text":"<p>Le g\u00eete \u00ab BonneNuit \u00bb a 5 chambres d\u00e9nomm\u00e9es :  </p> <p>'Ch1', 'Ch2', 'Ch3', 'Ch4', 'Ch5'</p> <p>On d\u00e9finit l\u2019objet <code>giteBN</code> par l\u2019instruction : <code>giteBN = Gite(\"BonneNuit\")</code>.  </p> <ol> <li>M\u00e9thode <code>ajouter_chambres()</code> </li> </ol> <p>\u00c9crire l\u2019instruction Python pour ajouter <code>'Ch1'</code> \u00e0 l\u2019objet <code>giteBN</code>.</p> R\u00e9ponse : <p>Ajout d'une chambre \u00e0 <code>giteBN</code> en appelant sa m\u00e9thode <code>ajouter_chambre</code> avec en param\u00e8tre le nom de la chambre  : </p> \ud83d\udc0d Script Python<pre><code>giteBN.ajouter_chambres('Ch1')\n</code></pre> <p>Dans les questions suivantes 2, 3 et 4, on consid\u00e8re que l\u2019objet <code>giteBN</code>  contient toutes les chambres du gite \u00ab BonneNuit \u00bb.    </p> <ol> <li>La m\u00e9thode <code>ajouter_chambres</code> permet d\u2019enregistrer une nouvelle chambre, mais elle ne teste pas si le nom de cette chambre existe d\u00e9j\u00e0. Modifier la m\u00e9thode pour \u00e9viter cet \u00e9ventuel doublon.</li> </ol> R\u00e9ponse : <p>Les chambres sont enregistr\u00e9es dans l'attribut <code>_chambres</code> de l'objet gite. Il faut inspecter tous les noms de chambre dans cette liste pour savoir si le nouveau nom propos\u00e9 existe d\u00e9j\u00e0. La m\u00e9thode <code>get_nchambres</code> renvoie la liste des noms de toutes les chambres du gite. On peut donc faire : </p> \ud83d\udc0d Script Python<pre><code>def ajouter_chambres(self, nom_ch : str):\n    if nom_ch not in self.get_nchambres():\n        self._chambres.append(Chambre(nom_ch))\n</code></pre> <p>ou bien, sans utiliser <code>get_nchambres</code>, une d\u00e9marche classique o\u00f9 l'on parcourt la liste de chambres en positionnant un indicateur bool\u00e9en (<code>nom_nouveau</code>) pour signaler \u00e9ventuellement que le nom choisi existait d\u00e9j\u00e0 : </p> \ud83d\udc0d Script Python<pre><code>def ajouter_chambres(self, nom_ch : str):\n    nom_nouveau = True\n    for chambre in self._chambres:\n        if chambre.get_nom() == nom_ch:\n            nom_nouveau = False\n    if nom_nouveau:\n        self._chambres.append(Chambre(nom_ch))\n</code></pre> <ol> <li>\u00c9tude des m\u00e9thodes : <code>get_chambres()</code> et <code>get_nchambres()</code>.  </li> </ol> <p>a. Parmi les 4 propositions ci-dessous, quel est le type renvoy\u00e9 par l\u2019instruction Python : <code>giteBN.get_chambres()</code> .</p> <ul> <li>String </li> <li>Objet Chambre</li> <li>Tableau de String </li> <li>Tableau d\u2019objets Chambre</li> </ul> R\u00e9ponse : <p>Cette m\u00e9thode renvoie la valeur de l'attribut <code>_chambres</code> , qui est une liste. La m\u00e9thode <code>ajouter_chambres</code> de la classe gite modifie cette liste en lui ajoutant un nouvel objet Chambre (cr\u00e9\u00e9 par l'appel de <code>Chambre(nom_ch)</code>) . </p> <p>La r\u00e9ponse est donc \"tableau d\u2019objets Chambre\" (une liste Python est un tableau dynamique)</p> <p>b. Qu\u2019affiche la suite d\u2019instructions suivante ?</p> \ud83d\udc0d Script Python<pre><code>ch = giteBN.get_chambres()[1]\nprint(ch.get_nom())\n</code></pre> R\u00e9ponse : <p>La premi\u00e8re ligne r\u00e9cup\u00e8re le second \u00e9l\u00e9ment de la liste des chambres et la seconde affiche le nom de cette chambre.</p> <p>c. Quelle diff\u00e9rence existe-t-il entre les deux m\u00e9thodes <code>get_nchambres()</code>  et <code>get_chambres()</code> ?</p> R\u00e9ponse : <p>La m\u00e9thode <code>get_nchambres</code> renvoie une liste de chaines de caract\u00e8res qui sont les noms des chambres, et <code>get_chambres</code> renvoie une liste d'objets Chambre.</p> <ol> <li>Les chambres <code>'Ch1', 'Ch3', Ch5'</code> sont r\u00e9serv\u00e9es pour tout le mois de Janvier 2021.</li> </ol> <p>a. Que va renvoyer l\u2019instruction <code>giteBN.mystere(3)</code> ?   </p> R\u00e9ponse : <p>La m\u00e9hode <code>mystere</code> renvoie une liste \u00e0 laquelle ont \u00e9t\u00e9 ajout\u00e9s les noms des chambres du gite \u00e0 condition qu'elles ne soient pas r\u00e9serv\u00e9es \u00e0 la date pass\u00e9e en param\u00e8tre.  </p> <p>Donc <code>giteBN.mystere(3)</code> va renvoyer la liste des noms des chambres du gite \"BonneNuit\" disponibles le 4 janvier. Cette liste ne contiendra pas les noms <code>'Ch1', 'Ch3', Ch5'</code> puisque ces chambres sont r\u00e9serv\u00e9es en Janvier. Elle contiendra peut-\u00eatre <code>'Ch2'</code> et <code>'Ch4'</code> dont on ne sait pas si elles sont r\u00e9serv\u00e9es le 4 janvier.</p> <p>b. Dans la m\u00e9thode <code>mystere</code>  de la classe <code>Gite</code> , quel est le type des variables en param\u00e8tre et en sortie ? Quelles sont les m\u00e9thodes ou attributs dont cette m\u00e9thode a besoin ?</p> R\u00e9ponse : <p>La m\u00e9thode <code>mystere</code> prend comme param\u00e8tre <code>date</code>, qui est un entier (<code>int</code>). </p> <p>Elle retourne une liste Python. </p> <p>Elle a besoin de l'attribut <code>_chambres</code> des la classe <code>Gite</code> (ainsi que de la m\u00e9thode <code>get_occupation</code> et <code>get_nom</code> de la classe <code>Chambre</code> , et la m\u00e9thode <code>append</code> de la classe <code>list</code>. La question n'est pas tr\u00e8s pr\u00e9cise quand \u00e0 ce qui est attendu)</p>"},{"location":"StructureDonnees/T1_3_BAC_Capytale/#exercice-2-dapres-bac-pots-de-yaourts","title":"Exercice 2 : (d'apr\u00e8s Bac) - Pots de yaourts \"","text":"<p>Principaux th\u00e8mes abord\u00e9s :</p> <p>structure de donn\u00e9es (programmation objet) et langages et programmation (sp\u00e9cification).</p> <p>Une entreprise fabrique des yaourts qui peuvent \u00eatre soit nature (sans ar\u00f4me), soit aromatis\u00e9s (fraise, abricot ou vanille).  </p> <p>Pour pouvoir traiter informatiquement les sp\u00e9cificit\u00e9s de ce produit, on va donc cr\u00e9er une classe Yaourt qui poss\u00e8dera un certain nombre d\u2019attributs :</p> <ul> <li>Son genre : nature ou aromatis\u00e9</li> <li>Son ar\u00f4me : fraise, abricot, vanille ou aucun</li> <li>Sa date de durabilit\u00e9 minimale (DDM) exprim\u00e9e par un entier compris entre 1 et 365 (on ne g\u00e8re pas les ann\u00e9es  bissextiles). Par exemple, si la DDM est \u00e9gale \u00e0 15, la date de durabilit\u00e9 minimale est le 15 janvier.</li> </ul> <p>On va cr\u00e9er \u00e9galement des m\u00e9thodes permettant d\u2019interagir avec l\u2019objet Yaourt pour attribuer un ar\u00f4me ou r\u00e9cup\u00e9rer un genre par exemple. On peut repr\u00e9senter cette classe par le tableau de sp\u00e9cifications ci-dessous :</p> Yaourt ATTRIBUTS METHODES genre construire(arome,duree) arome obtenir_arome() duree obtenir_genre() obtenir_duree() attribuer_arome(arome) attribuer_duree(duree) attribuer_genre(arome) <ol> <li>Code partiel de la classe Yaourt, \u00e0 compl\u00e9ter aux endroits indiqu\u00e9s en suivant les consignes des questions suivantes  : </li> </ol> \ud83d\udc0d Script Python<pre><code>class Yaourt:\n\"\"\" Classe d\u00e9finissant un yaourt caract\u00e9ris\u00e9 par :\n        - son arome\n        - son genre\n        - sa dur\u00e9e de durabilit\u00e9 minimale\"\"\"\n\n    def __init__(self,arome,duree):\n    # **** Assertions : \u00e0 compl\u00e9ter suivant les indications de la  question 1.a.  \n        self.__arome = arome\n        self.__duree = duree\n        if arome == 'aucun':\n            self.__genre = 'nature'\n        else:\n            self.__genre = 'aromatise'\n\n    # **** M\u00e9thode get_arome(self) \u00e0 compl\u00e9ter suivant les indications de la question 1.c. \n\n    def get_duree(self):\n        return self.__duree\n\n    def get_genre(self):\n        return self.__genre\n\n\n    def set_duree(self,duree):\n        # **** Mutateur de dur\u00e9e\n        if duree &gt; 0 :\n            self.__duree = duree\n\n    # **** Mutateur d\u2019ar\u00f4me set_arome(self,arome) - \u00e0 compl\u00e9ter suivant les indications de la question 2.    \n\n    def __set_genre(self,arome):\n        if arome == 'aucun':\n            self.__genre = 'nature'\n        else:\n            self.__genre = 'aromatise'\n</code></pre> <p>1.a. Quelles sont les assertions \u00e0 pr\u00e9voir pour v\u00e9rifier que l'ar\u00f4me et la dur\u00e9e correspondent bien \u00e0 des valeurs acceptables? Il faudra aussi expliciter les commentaires qui seront renvoy\u00e9s. Pour rappel : </p> <ul> <li>L\u2019ar\u00f4me doit prendre comme valeur 'fraise', 'abricot', 'vanille' ou 'aucun'.</li> <li>Sa date de durabilit\u00e9 minimale (DDM) est une valeur positive.</li> </ul> R\u00e9ponse : <p>Modification de la m\u00e9thode <code>__init__</code> de la classe Yaourt :  </p> \ud83d\udc0d Script Python<pre><code>    def __init__(self,arome,duree):\n        assert arome in ('fraise', 'abricot', 'vanille', 'aucun') , \"valeur invalide pour l'ar\u00f4me\"\n        assert duree &gt;= 0, \"La DDM doit \u00eatre une valeur positive\"\n        self.__arome = arome\n        self.__duree = duree\n        if arome == 'aucun':\n            self.__genre = 'nature'\n        else:\n            self.__genre = 'aromatise'\n</code></pre> <p>1.b. Pour cr\u00e9er un yaourt, on ex\u00e9cutera la commande suivante : </p> \ud83d\udc0d Script Python<pre><code>mon_yaourt = Yaourt('fraise',24)\n</code></pre> <p>Quelle valeur sera affect\u00e9e \u00e0 l\u2019attribut <code>genre</code> associ\u00e9 \u00e0 <code>mon_yaourt</code> ?</p> R\u00e9ponse : <p>L'attribut <code>genre</code> aura comme valeur 'aromatise' puisque l'arome du yaourt n'est pas \u00e8gal \u00e0 'aucun'.</p> <p>1.c. \u00c9crire en Python une fonction <code>get_arome(self)</code>, renvoyant l\u2019ar\u00f4me du yaourt cr\u00e9\u00e9.</p> R\u00e9ponse : <p>M\u00e9thode <code>get_arome</code> \u00e0 ins\u00e9rer dans le code de la classe Yaourt : </p> \ud83d\udc0d Script Python<pre><code>def get_arome(self):\n    return self.__arome\n</code></pre> <ol> <li>On appelle mutateur une m\u00e9thode permettant de modifier un ou plusieurs attributs d\u2019un objet. Ecrire en Python le mutateur <code>set_arome(self,arome)</code> permettant de modifier l\u2019ar\u00f4me du yaourt.  On veillera \u00e0 garder une coh\u00e9rence entre l\u2019ar\u00f4me et le genre.</li> </ol> R\u00e9ponse : <p>M\u00e9thode <code>set_arome</code> \u00e0 ins\u00e9rer dans le code de la classe Yaourt : </p> \ud83d\udc0d Script Python<pre><code>def set_arome(self, arome):\n    assert arome in ('fraise', 'abricot', 'vanille', 'aucun') , \"valeur invalide pour l'ar\u00f4me\"\n    self.__arome=arome\n    if arome == 'aucun':\n        self.__genre = 'nature'\n    else:\n        self.__genre = 'aromatise'\n</code></pre> <p>On peut aussi utiliser la m\u00e9thode <code>set_genre</code> d\u00e9j\u00e0 d\u00e9finie pour garder une coh\u00e9rence entre l\u2019ar\u00f4me et le genre.:</p> \ud83d\udc0d Script Python<pre><code>def set_arome(self, arome):\n    assert arome in ('fraise', 'abricot', 'vanille', 'aucun') , \"valeur invalide pour l'ar\u00f4me\"\n    self.__arome=arome\n    self.__set_genre(arome)\n</code></pre> <ol> <li>On veut cr\u00e9er une pile contenant le stock de yaourts. Pour cela il faut tout d\u2019abord cr\u00e9er une pile vide : </li> </ol> \ud83d\udc0d Script Python<pre><code>def creer_pile():\n    pile = [ ]\n    return pile\n</code></pre> <p>3.a. Cr\u00e9er une fonction <code>empiler( p, yaourt:Yaourt)</code>  qui renvoie la pile <code>p</code> apr\u00e8s avoir ajout\u00e9 un objet de type Yaourt au sommet de la pile.</p> R\u00e9ponse : <p>Fonction <code>empiler</code> (on suppose que le sommet de la pile est la fin de la liste): </p> \ud83d\udc0d Script Python<pre><code>def empiler(p, yaourt):\n    p.append(yaourt)\n</code></pre> <p>3.b. Cr\u00e9er une fonction <code>depiler(p)</code> qui renvoie l\u2019objet \u00e0 d\u00e9piler.</p> R\u00e9ponse : <p>Fonction <code>d\u00e9piler</code> :</p> \ud83d\udc0d Script Python<pre><code>def depiler(p):\n    return p.pop(-1)\n</code></pre> <p>3.c. Cr\u00e9er une fonction <code>est_vide(p)</code> qui renvoie <code>True</code> si la pile est vide et <code>False</code> sinon.</p> R\u00e9ponse : <p>Fonction <code>est_vide</code> :</p> \ud83d\udc0d Script Python<pre><code>def est_vide(p):\n    return len(p) == 0\n</code></pre> <p>ou bien, en plus explicite : </p> \ud83d\udc0d Script Python<pre><code>def est_vide(p):\n    if len(p) == 0:\n        return True\n    else:\n        return False\n</code></pre> <p>3.d. Qu\u2019affiche le bloc de commandes ci-dessous ?</p> \ud83d\udc0d Script Python<pre><code>    mon_yaourt1 = Yaourt('aucun',18)\n    mon_yaourt2 = Yaourt('fraise',24)\n    ma_pile = creer_pile()\n    empiler(ma_pile, mon_yaourt1)\n    empiler(ma_pile, mon_yaourt2)\n    print(depiler(ma_pile).get_duree())\n    print(est_vide(ma_pile))\n</code></pre> R\u00e9ponse : <p>Le sujet d'origine contient un espace entre mon_yaourt et 2 \u00e0 la ligne 5, ce qui fait que l'ex\u00e9cution du code tel quel g\u00e9n\u00e8rerait une erreur. Il s'agit cependant sans doute d'une coquille. </p> <p>Pour le code corrig\u00e9 donn\u00e9 ci-dessus : Les deux premi\u00e8res lignes cr\u00e9ent deux objets Yaourt. La troisi\u00e8me cr\u00e9e une pile, o\u00f9 les deux Yaourts sont empil\u00e9s aux deux lignes suivantes. A la ligne 6, la commande d\u00e9pile le dernier Yaourt empil\u00e9, <code>mon_yaourt2</code>, et affiche sa DDN, c'est \u00e0 dire 24. Enfin la derni\u00e8re ligne affiche <code>False</code> puisqu'\u00e0 ce stade la pile contient encore <code>mon_yaourt1</code>, donc n'est pas vide. </p> \ud83d\udc0d Script Python<pre><code>class Yaourt:\n\"\"\" Classe d\u00e9finissant un yaourt caract\u00e9ris\u00e9 par :\n        - son arome\n        - son genre\n        - sa dur\u00e9e de durabilit\u00e9 minimale\"\"\"\n\n    def __init__(self,arome,duree):\n        assert arome in ('fraise', 'abricot', 'vanille', 'aucun') , \"valeur invalide pour l'ar\u00f4me\"\n        assert duree &gt;= 0, \"La DDM doit \u00eatre une valeur positive\" \n        self.__arome = arome\n        self.__duree = duree\n        if arome == 'aucun':\n            self.__genre = 'nature'\n        else:\n            self.__genre = 'aromatise'\n\n    def get_arome(self):\n        return self.__arome \n\n    def get_duree(self):\n        return self.__duree\n\n    def get_genre(self):\n        return self.__genre\n\n    def set_duree(self,duree):\n        # **** Mutateur de dur\u00e9e\n        if duree &gt; 0 :\n            self.__duree = duree\n\n    def set_arome(self, arome):\n        assert arome in ('fraise', 'abricot', 'vanille', 'aucun') , \"valeur invalide pour l'ar\u00f4me\"\n        self.__arome=arome\n        self.__set_genre(arome)\n\n    def __set_genre(self,arome):\n        if arome == 'aucun':\n            self.__genre = 'nature'\n        else:\n            self.__genre = 'aromatise'\n\ndef creer_pile():\n    pile = [ ]\n    return pile \n\ndef empiler(p, yaourt):\n    p.append(yaourt)\n\ndef depiler(p):\n    return p.pop(-1)\n\ndef est_vide(p):\n    return len(p) == 0\n\nmon_yaourt1 = Yaourt('aucun',18)\nmon_yaourt2 = Yaourt('fraise',24)\nma_pile = creer_pile()\nempiler(ma_pile, mon_yaourt1)\nempiler(ma_pile, mon_yaourt2)\nprint(depiler(ma_pile).get_duree())\nprint(est_vide(ma_pile))\n</code></pre> <p>24 False</p>"},{"location":"StructureDonnees/T2_1_Listes_Piles_et_Files/","title":"Macro Rendering Error","text":"<p>File: <code>StructureDonnees/T2_1_Listes_Piles_et_Files.md</code></p> <p>KeyError: 5</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 6, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 5\n</code></pre>"},{"location":"StructureDonnees/T2_1_Pile_File/","title":"Th\u00e8me 1 - Structure de donn\u00e9es","text":"05              Listes, Piles et Files <p>Programme Terminale </p> Contenus Capacit\u00e9s attendues Commentaires Structures de donn\u00e9es, interface et impl\u00e9mentation Sp\u00e9cifier une structure de donn\u00e9es par son interface. Distinguer interface et impl\u00e9mentation. Ecire plusieurs impl\u00e9mentations d'une m\u00eame structure de donn\u00e9es. L'abstraction des structures de donn\u00e9es est introduite apr\u00e9s plusieurs impl\u00e9mentations d'une structure simple comme la file (avec un tableau ou avec deuc piles). Listes, piles, files : structures lin\u00e9aires. Dictionnaires, index et cl\u00e9. Distinguer des structures par le jeu des m\u00e9thodes qui les caract\u00e8risent. Choisir une structure adapt\u00e9e \u00e0 la situation \u00e0 mod\u00e9liser. Distinguer la recherche d'une valeur dans une liste et dans un dictionnaire. On distingue les modes FIFO (First In First Out) et LIFO (Last In First Out) des piles et des files."},{"location":"StructureDonnees/T2_1_Pile_File/#preambule-interface-implementation","title":"Pr\u00e9ambule : interface \u2260 impl\u00e9mentation","text":"<p>Vocabulaire</p> <p>Les structures que nous allons voir peuvent s'envisager sous deux aspects :</p> <ul> <li>le c\u00f4t\u00e9 utilisateur, qui utilisera une interface pour manipuler les donn\u00e9es.  <ul> <li>interface : Vue \"logique\" de la structure de donn\u00e9es. Elle sp\u00e9cifie la nature des donn\u00e9es ainsi que l'ensemble des op\u00e9rations permises sur la structure.  </li> </ul> </li> <li>le c\u00f4t\u00e9 concepteur, qui aura choisi une impl\u00e9mentation pour construire la structure de donn\u00e9es.  <ul> <li>Impl\u00e9mentation : Vue \"physique\" de la structure de donn\u00e9es. Il s'agit de la programmation effective des op\u00e9rations d\u00e9finies dans l'interface, en utilisant des types de donn\u00e9es d\u00e9ja existants.  </li> </ul> </li> </ul> <p>Nous avons d\u00e9j\u00e0 abord\u00e9 ces deux aspects lors de la d\u00e9couverte de la Programmation Orient\u00e9e Objet. Le principe d'encapsulation fait que l'utilisateur n'a qu'\u00e0 conna\u00eetre l'existence des m\u00e9thodes disponibles, et non pas le contenu technique de celle-ci. Cela permet notamment de modifier le contenu technique (l'impl\u00e9mentation) sans que les habitudes de l'utilisateur (l'interface) ne soient chang\u00e9es.</p>"},{"location":"StructureDonnees/T2_1_Pile_File/#structures-de-donnees-lineaires","title":"Structures de donn\u00e9es lin\u00e9aires","text":""},{"location":"StructureDonnees/T2_1_Pile_File/#a-chaque-donnee-sa-structure","title":"\u00c0 chaque donn\u00e9e sa structure","text":"<p>En informatique comme dans la vie courante, il est conseill\u00e9 d'adapter sa mani\u00e8re de stocker et de traiter des donn\u00e9es en fonction de la nature de celles-ci.</p> <p>En informatique, pour chaque type de donn\u00e9es, pour chaque utilisation pr\u00e9vue, une structure particuli\u00e8re de donn\u00e9es se rev\u00e8lera (peut-\u00eatre) plus adapt\u00e9e qu'une autre.</p>"},{"location":"StructureDonnees/T2_1_Pile_File/#donnees-lineaires","title":"Donn\u00e9es lin\u00e9aires","text":"<p>Int\u00e9ressons nous par exemple aux donn\u00e9es lin\u00e9aires. Ce sont des donn\u00e9es qui ne comportent pas de hi\u00e9rarchie : toutes les donn\u00e9es sont de la m\u00eame nature et ont le m\u00eame r\u00f4le.  Par exemple, un relev\u00e9 mensuel de temp\u00e9ratures, la liste des \u00e9l\u00e8ves d'une classe, un historique d'op\u00e9rations bancaires... </p> <p>Ces donn\u00e9es sont \u00abplates\u00bb, n'ont pas de sous-domaines : la structure de liste para\u00eet parfaitement adapt\u00e9e. </p> <p>Lorsque les donn\u00e9es de cette liste sont en fait des couples (comme dans le cas d'une liste de noms/num\u00e9ros de t\u00e9l\u00e9phone), alors la structure la plus adapt\u00e9e est sans doute celle du dictionnaire.</p> <p>Les listes et les dictionnaires sont donc des exemples de structures de donn\u00e9es lin\u00e9aires.</p>"},{"location":"StructureDonnees/T2_1_Pile_File/#donnees-non-lineaires","title":"Donn\u00e9es non-lin\u00e9aires","text":"<p>M\u00eame si ce n'est pas l'objet de ce cours, donnons des exemples de structures adapt\u00e9es aux donn\u00e9es non-lin\u00e9aires :</p> <p>Si une liste de courses est subdivis\u00e9e en \"rayon frais / bricolage / papeterie\" et que le rayon frais est lui-m\u00eame s\u00e9par\u00e9 en \"laitages / viandes / fruits &amp; l\u00e9gumes\", alors une structure d'arbre sera plus adapt\u00e9e pour la repr\u00e9senter. Les structures arborescentes seront vues plus tard en Terminale.</p> <p>Enfin, si nos donn\u00e9es \u00e0 \u00e9tudier sont les relations sur les r\u00e9seaux sociaux des \u00e9l\u00e8ves d'une classe, alors la structure de graphe s'imposera d'elle-m\u00eame. Cette structure sera elle-aussi \u00e9tudi\u00e9e plus tard cette ann\u00e9e. </p>"},{"location":"StructureDonnees/T2_1_Pile_File/#comment-seront-traitees-ces-donnees-lineaires-introduction-des-listes-des-piles-et-des-files","title":"Comment seront trait\u00e9es ces donn\u00e9es lin\u00e9aires ? Introduction des listes, des piles et des files","text":"<p>La nature des donn\u00e9es ne fait pas tout. Il faut aussi s'int\u00e9resser \u00e0 la mani\u00e8re dont on voudra les traiter :</p> <ul> <li>\u00c0 quelle position les faire entrer dans notre structure ?</li> <li>\u00c0 quel moment devront-elles en \u00e9ventuellement en sortir ?</li> <li>Veut-on pouvoir acc\u00e9der rapidement \u00e0 n'importe quel \u00e9l\u00e9ment de la structure, ou simplement au premier ? ou au dernier ?</li> </ul> <p>Lorsque ces probl\u00e9matiques d'entr\u00e9e/sortie n'interviennent pas, la structure \u00abclassique\u00bb de liste est adapt\u00e9e. Mais lorsque celle-ci est importante, il convient de diff\u00e9rencier la structure de pile de celle de file.</p>"},{"location":"StructureDonnees/T2_1_Pile_File/#les-piles-stack","title":"Les piles (stack)","text":"<p>Une structure de pile (penser \u00e0 une pile d'assiette) est associ\u00e9e \u00e0 la m\u00e9thode LIFO (Last In, First Out) : - les \u00e9l\u00e9ments sont empil\u00e9s les uns au-dessus des autres,  - et on ne peut toujours d\u00e9piler que l'\u00e9l\u00e9ment du haut de la pile. - Le dernier \u00e9l\u00e9ment \u00e0 \u00eatre arriv\u00e9 est donc le premier \u00e0 \u00eatre sorti.</p> <p></p> <p>Exemples de donn\u00e9es stock\u00e9es sous forme de pile </p> <ul> <li>lors de l'ex\u00e9cution d'une fonction r\u00e9cursive, le processeur empile successivement les appels \u00e0 traiter : seule l'instruction du haut de la pile peut \u00eatre trait\u00e9e.</li> </ul> <p></p> <ul> <li> <p>historiques de navigation sur le Web, la liste des pages parcourues est stock\u00e9e sous forme de pile : la fonction \u00abBack\u00bb permet de \u00abd\u00e9piler\u00bb peu \u00e0 peu les pages pr\u00e9c\u00e9demment parcourues :  </p> </li> <li> <p>historiques d'annulation d'instructions (Ctrl+Z)  </p> </li> </ul> <p>Interface</p> <p>On dispose (ou souhaite disposer) sur une pile des m\u00e9thodes/primitives suivantes:</p> <ul> <li>d\u00e9terminer si la pile est vide (<code>est_vide</code>, <code>is_empty</code>)</li> <li>empiler un nouvel \u00e9l\u00e9ment au sommet de la pile (<code>empiler</code>, <code>push</code>)</li> <li>d\u00e9piler l'\u00e9l\u00e9ment du sommet de la pile (<code>depiler</code>, <code>pop</code>) et le renvoyer</li> </ul> <p>Ces op\u00e9rations doivent \u00eatre r\u00e9alis\u00e9es en temps constant, soit en \\(O(1)\\).</p> <p></p>"},{"location":"StructureDonnees/T2_1_Pile_File/#les-files","title":"Les files","text":"<p>Une file (queue) est une structure de donn\u00e9es lin\u00e9aire contenant des \u00e9l\u00e9ments g\u00e9n\u00e9ralement homog\u00e8nes fond\u00e9e sur le principe \u00abpremier arriv\u00e9, premier sorti\u00bb (en anglais FIFO : Fast In, First Out).</p> <p> </p> <p></p> <p>Exemples de situations utilisant une file:</p> <ul> <li>file d'attente : documents soumis \u00e0 impression, \u00e9l\u00e8ves \u00e0 la cantine...</li> <li>gestion des processus (plus tard...)</li> <li>parcours en largeur d'un arbre/graphe (plus tard...)</li> </ul> <p>Interface</p> <p>On dispose (ou souhaite disposer) sur une file des m\u00e9thodes/primitives suivantes:</p> <ul> <li>d\u00e9terminer si la file est vide (<code>is_empty</code>)</li> <li>enfiler (ajouter) un nouvel \u00e9l\u00e9ment dans la file (<code>enqueue</code>)</li> <li>d\u00e9filer l'\u00e9l\u00e9ment de t\u00eate de la file (<code>dequeue</code>) et le renvoyer</li> </ul> <p>Ces op\u00e9rations doivent \u00eatre r\u00e9alis\u00e9es en temps constant, soit en \\(O(1)\\).</p> <p> </p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC/","title":"Th\u00e8me 1 - Structure de donn\u00e9es","text":"BAC              Listes, Piles et Files"},{"location":"StructureDonnees/T2_2_Pile_File_BAC/#metropole-2022-j1-verification-syntaxique-de-parentheses-ou-de-balises","title":"M\u00e9tropole 2022, J1 - V\u00e9rification syntaxique de parenth\u00e8ses ou de balises","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J1, Ex. 1</p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC/#partie-a-expression-correctement-parenthesee","title":"Partie A : Expression correctement parenth\u00e9s\u00e9e","text":"<p>On veut d\u00e9terminer si une expression arithm\u00e9tique est correctement parenth\u00e9s\u00e9e. \u00c0 chaque parenth\u00e8se fermante \")\" correspond une parenth\u00e8se pr\u00e9c\u00e9demment ouverte \"(\".</p> <p>Exemples</p> <ul> <li>L'expression arithm\u00e9tique <code>\"(2 + 3) \u00d7 (18/(4 + 2))\"</code> est correctement parenth\u00e9s\u00e9e.</li> <li>L'expression arithm\u00e9tique <code>\"(2 + 3) \u00d7 (18/(4 + 2\"</code> est non correctement parenth\u00e9s\u00e9e.</li> </ul> <p>Pour simplifier les expressions arithm\u00e9tiques, on enregistre, dans une structure de donn\u00e9es, uniquement les parenth\u00e8ses dans leur ordre d'apparition. On appelle expression simplifi\u00e9e cette structure.</p> Expression arithm\u00e9tique Structure de donn\u00e9es <code>\"(2 + 3) \u00d7 (18/(4 + 2))\"</code> <code>()(())</code> <p>1. Indiquer si la phrase \u00ab les \u00e9l\u00e9ments sont maintenant retir\u00e9s (pour \u00eatre lus) de cette structure de donn\u00e9es dans le m\u00eame ordre qu'ils y ont \u00e9t\u00e9 ajout\u00e9s lors de l'enregistrement \u00bb d\u00e9crit le comportement d'une file ou d'une pile. Justifier.</p> <p>Pour v\u00e9rifier le parenth\u00e9sage, on peut utiliser une variable <code>controleur</code> qui :</p> <ul> <li>est un nombre entier \u00e9gal \u00e0 0 en d\u00e9but d'analyse de l'expression simplifi\u00e9e ;</li> <li>augmente de 1 si l'on rencontre une parenth\u00e8se ouvrante <code>\"(\"</code> ;</li> <li>diminue de 1 si l'on rencontre une parenth\u00e8se fermante <code>\")\"</code>.</li> </ul> <p>Exemple</p> <p>On consid\u00e8re l'expression simplifi\u00e9e A : <code>\"()(())\"</code></p> <p>Lors de l'analyse de l'expression A, <code>controleur</code> (initialement \u00e9gal \u00e0 0) prend successivement pour valeur 1, 0, 1, 2, 1, 0.</p> <p>Le parenth\u00e9sage est correct.</p> <p>2. \u00c9crire, pour chacune des 2 expressions simplifi\u00e9es B et C suivantes, les valeurs successives prises par la variable <code>controleur</code> lors de leur analyse.</p> <ul> <li>Expression simplifi\u00e9e B : \" ((()()\"</li> <li>Expression simplifi\u00e9e C : \"(()))(\"</li> </ul> <p>3. L'expression simplifi\u00e9e B pr\u00e9c\u00e9dente est mal parenth\u00e9s\u00e9e (parenth\u00e8ses fermantes manquantes) car le <code>controleur</code> est diff\u00e9rent de z\u00e9ro en fin d'analyse. L'expression simplifi\u00e9e C pr\u00e9c\u00e9dente est \u00e9galement mal parenth\u00e9s\u00e9e (parenth\u00e8se fermante sans parenth\u00e8se ouvrante) car le <code>controleur</code> prend une valeur n\u00e9gative pendant l'analyse.</p> <p>Recopier et compl\u00e9ter uniquement les lignes 13 et 16 du code ci-dessous pour que la fonction <code>parenthesage_correct</code> r\u00e9ponde \u00e0 sa description.</p> \ud83d\udc0d Script Python<pre><code>def parenthesage_correct(expression):\n\"\"\" fonction renvoyant True si l'expression arithm\u00e9tique\n    simplifi\u00e9e (str) est correctement parenth\u00e9s\u00e9e, False sinon.\n    Condition: expression ne contient que\n      des parenth\u00e8ses ouvrantes et fermantes\n    \"\"\"\n    controleur = 0\n    for parenthese in expression:  # pour chaque parenth\u00e8se\n        if parenthese == '(':\n            controleur = controleur + 1\n        else:  # parenthese == ')'\n            controleur = controleur - 1\n            if controleur ... :  # test 1 (\u00e0 recopier et compl\u00e9ter)\n                # parenth\u00e8se fermante sans parenth\u00e8se ouvrante\n                return False\n    return controleur ...  # test 2 (\u00e0 recopier et compl\u00e9ter)\n    # test 2 est un bool\u00e9en renvoy\u00e9\n    #   True : le parenth\u00e9sage est correct\n    #   False : parenth\u00e8se(s) fermante(s) manquante(s)\n</code></pre>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC/#partie-b-texte-correctement-balise","title":"Partie B : Texte correctement balis\u00e9","text":"<p>On peut faire l'analogie entre le texte simplifi\u00e9 des fichiers HTML (uniquement constitu\u00e9 de balises ouvrantes <code>&lt;nom&gt;</code> et fermantes <code>&lt;/nom&gt;</code>) et les expressions parenth\u00e9s\u00e9es : par exemple, l'expression HTML simplifi\u00e9e : <code>\"&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\"</code> est correctement balis\u00e9e.</p> <p>On ne tiendra pas compte dans cette partie des balises ne comportant pas de fermeture comme <code>&lt;br&gt;</code> ou <code>&lt;img ...&gt;</code>.</p> <p>Afin de v\u00e9rifier qu'une expression HTML simplifi\u00e9e est correctement balis\u00e9e, on peut utiliser une pile (initialement vide) selon l'algorithme suivant :</p> <ul> <li> <p>On parcourt successivement chaque balise de l'expression :</p> <ul> <li>lorsque l'on rencontre une balise ouvrante, on l'empile ;</li> <li>lorsque l'on rencontre une balise fermante :<ul> <li>si la pile est vide, alors l'analyse s'arr\u00eate : le balisage est incorrect,</li> <li>sinon, on d\u00e9pile et on v\u00e9rifie que les deux balises (la balise fermante rencontr\u00e9e et la balise ouvrante d\u00e9pil\u00e9e) correspondent (c'est-\u00e0-dire ont le m\u00eame nom) si ce n'est pas le cas, l'analyse s'arr\u00eate (balisage incorrect).</li> </ul> </li> </ul> </li> </ul> <p>Exemple</p> <p>\u00c9tat de la pile lors du d\u00e9roulement de cet algorithme pour l'expression simplifi\u00e9e <code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"</code> qui n'est pas correctement balis\u00e9e.</p> <p>\u00c9tat de la pile lors du d\u00e9roulement de l'algorithme</p> D\u00e9part\u00c9tape 1\u00c9tape 2\u00c9tape 3 Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n\u2191\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n  \u2191                  Balise &lt;p&gt;  ouvrante, on empile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n     \u2191               Balise &lt;em&gt; ouvrante, on empile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;em&amp;gt;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n          \u2191          Balise &lt;/p&gt; fermante, on d\u00e9pile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> <p><code>&lt;em&gt;</code> et <code>&lt;/p&gt;</code> ne correspondent pas !</p> <p>Le balisage est incorrect.</p> <p>4. Cette question traite de l'\u00e9tat de la pile lors du d\u00e9roulement de l'algorithme.</p> <p>4.a. Repr\u00e9senter la pile \u00e0 chaque \u00e9tape du d\u00e9roulement de cet algorithme pour l'expression <code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"</code> (balisage correct).</p> <p>4.b. Indiquer quelle condition simple (sur le contenu de la pile) permet alors de dire que le balisage est correct lorsque toute l'expression HTML simplifi\u00e9e a \u00e9t\u00e9 enti\u00e8rement parcourue, sans que l'analyse ne s'arr\u00eate.</p> <p>5. Une expression HTML correctement balis\u00e9e contient 12 balises.</p> <p>Indiquer le nombre d'\u00e9l\u00e9ments que pourrait contenir au maximum la pile lors de son analyse.</p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC/#metropole-2022-j2-jeu-de-la-poussette","title":"M\u00e9tropole 2022, J2 - Jeu de la poussette","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 2</p> <p>La poussette est un jeu de cartes en solitaire. Cet exercice propose une version simplifi\u00e9e de ce jeu bas\u00e9e sur des nombres.</p> <p>On consid\u00e8re une pile constitu\u00e9e de nombres entiers tir\u00e9s al\u00e9atoirement. Le jeu consiste \u00e0 r\u00e9duire la pile suivant la r\u00e8gle suivante : quand la pile contient du haut vers le bas un triplet dont les termes du haut et du bas sont de m\u00eame parit\u00e9, on supprime l'\u00e9l\u00e9ment central.</p> <p>Par exemple :</p> <ul> <li>Si la pile contient du haut vers le bas le triplet 1 ; 0 ; 3, on supprime le 0, car 1 et 3 sont tous les deux impairs.</li> <li>Si la pile contient du haut vers le bas le triplet 1 ; 0 ; 8, la pile reste inchang\u00e9e, car 1 et 8 n'ont pas la m\u00eame parit\u00e9.</li> </ul> <p>On parcourt la pile ainsi de haut en bas et on proc\u00e8de aux r\u00e9ductions.</p> <p>Arriv\u00e9 en bas de la pile, on recommence la r\u00e9duction en repartant du sommet de la pile jusqu'\u00e0 ce que la pile ne soit plus r\u00e9ductible.</p> <p>Une partie est \u00ab gagnante \u00bb lorsque la pile finale est r\u00e9duite \u00e0 deux \u00e9l\u00e9ments exactement.</p> <p>Voici un exemple d\u00e9taill\u00e9 de d\u00e9roulement d'une partie.</p> Premier parcours de la pileDeuxi\u00e8me parcoursTroisi\u00e8me parcoursQuatri\u00e8me parcours <p> </p> <ul> <li>La premi\u00e8re comparaison (7, 5 et 4) laisse la pile inchang\u00e9e.</li> <li>On retire le 4 lors de la deuxi\u00e8me it\u00e9ration.</li> <li>On retire le 8 lors de la troisi\u00e8me.</li> <li>Il ne reste plus que deux valeurs en bas de la pile (9 et 6) : on a fini le premier parcours.</li> </ul> <p> </p> <ul> <li>On recommence \u00e0 partir du haut de la pile : on retire le 5.</li> <li>Le triplet suivant (3, 9 et 6) n'entra\u00eene pas de suppression.</li> <li>Il ne reste plus que deux valeurs \u00e0 \u00e9tudier (9 et 6) : on a termin\u00e9 le deuxi\u00e8me parcours.</li> </ul> <p> </p> <ul> <li>On recommence en haut de la pile avec 7, 2 et 9 : on retire le 2.</li> <li>Il ne reste que le 9 et le 6 : on a termin\u00e9 le troisi\u00e8me parcours.</li> </ul> <p></p> <ul> <li>On recommence en haut de la pile avec 7, 9 et 6. La pile est inchang\u00e9e.</li> <li>La pile n'a pas \u00e9t\u00e9 modifi\u00e9e lors de ce parcours : la partie est termin\u00e9e et cette pile n'est pas gagnante.</li> </ul> <p>1.a. Donner les diff\u00e9rentes \u00e9tapes de r\u00e9duction de la pile suivante :</p> <p></p> <p>1.b. Parmi les piles propos\u00e9es ci-dessous, donner celle qui est gagnante.</p> Pile APile BPile C <p></p> <p></p> <p></p> <p>L'interface d'une pile est propos\u00e9e ci-dessous :</p> <ul> <li><code>creer_pile_vide()</code> renvoie une pile vide, </li> <li><code>est_vide(p)</code> renvoie <code>True</code> si <code>p</code> est vide, <code>False</code> sinon, </li> <li><code>empiler(p, element)</code> ajoute <code>element</code> au sommet de <code>p</code>, </li> <li><code>depiler(p)</code> retire l'\u00e9l\u00e9ment au sommet de <code>p</code> et le renvoie, </li> <li><code>sommet(p)</code> renvoie l'\u00e9l\u00e9ment au sommet de <code>p</code> sans le retirer de <code>p</code>, </li> <li><code>taille(p):</code> renvoie le nombre d'\u00e9l\u00e9ments de <code>p</code>.</li> </ul> <p>Dans la suite de l'exercice on utilisera uniquement ces fonctions.</p> <p>2. La fonction <code>reduire_triplet_au_sommet</code> permet de supprimer l'\u00e9l\u00e9ment central des trois premiers \u00e9l\u00e9ments en partant du haut de la pile, si l'\u00e9l\u00e9ment du bas et du haut sont de m\u00eame parit\u00e9. Les \u00e9l\u00e9ments d\u00e9pil\u00e9s et non supprim\u00e9s sont replac\u00e9s dans le bon ordre dans la pile.</p> <p>Recopier et compl\u00e9ter sur la copie le code de la fonction <code>reduire_triplet_au_sommet</code> prenant une pile <code>p</code> en param\u00e8tre et la modifiant en place. Cette fonction renvoie le bool\u00e9en <code>est_reduit</code> indiquant si le triplet du sommet a \u00e9t\u00e9 r\u00e9duit ou non.</p> \ud83d\udc0d Script Python<pre><code>def reduire_triplet_au_sommet(p):\n    haut = depiler(p)\n    milieu = depiler(p)\n    bas = sommet(p)\n    est_reduit = ...\n    if haut % 2 != ...:\n        empiler(p, ...)\n        ...\n    empiler(p, ...)\n    return ...\n</code></pre> <p>3. On se propose maintenant d'\u00e9crire une fonction <code>parcourir_pile_en_reduisant</code> qui parcourt la pile du haut vers le bas en proc\u00e9dant aux r\u00e9ductions pour chaque triplet rencontr\u00e9 quand cela est possible.</p> <p>La pile est toujours modifi\u00e9e en place.</p> <p>La fonction <code>parcourir_pile_en_reduisant</code> renvoie un bool\u00e9en indiquant si la pile a \u00e9t\u00e9 r\u00e9duite \u00e0 au moins une reprise lors du parcours.</p> <p>3.a. Donner la taille minimale que doit avoir une pile pour \u00eatre r\u00e9ductible.</p> <p>3.b. Recopier et compl\u00e9ter sur la copie :</p> \ud83d\udc0d Script Python<pre><code>def parcourir_pile_en_reduisant(p):\n    q = creer_pile_vide()\n    reduction_pendant_parcours = False\n    while taille(p) &gt;= 3:\n        if ...:\n            reduction_pendant_parcours = ...\n        e = depiler(p)\n        empiler(q, e)\n    while not est_vide(q):\n        ...\n        ...\n    return ...\n</code></pre> <p>4. Partant d'une pile d'entiers <code>p</code>, on propose ici d'impl\u00e9menter une fonction r\u00e9cursive <code>jouer</code> jouant une partie compl\u00e8te sur la pile <code>p</code>.</p> <p>On effectue donc autant de parcours que n\u00e9cessaire.</p> <p>Une fois la pile parcourue de haut en bas, on effectue un nouveau parcours \u00e0 condition que le parcours pr\u00e9c\u00e9dent ait modifi\u00e9 la pile. Si \u00e0 l'inverse, la pile n'a pas \u00e9t\u00e9 modifi\u00e9e, on ne fait rien, car la partie est termin\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def jouer(p):\n    if parcourir_pile_en_reduisant(...):\n        ...(...)\n</code></pre>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC/#polynesie-2022-j1-tri-dune-pile","title":"Polyn\u00e9sie 2022, J1 - Tri d'une pile","text":"<p>D'apr\u00e8s 2022, Polyn\u00e9sie, J1, Ex. 4</p> <p>La classe <code>Pile</code> utilis\u00e9e dans cet exercice est impl\u00e9ment\u00e9e en utilisant des listes Python et propose quatre \u00e9l\u00e9ments d'interface :</p> <ul> <li>Un constructeur qui permet de cr\u00e9er une pile vide, repr\u00e9sent\u00e9e par <code>[]</code> ;</li> <li>La m\u00e9thode <code>est_vide()</code> qui renvoie <code>True</code> si l'objet est une pile ne contenant aucun \u00e9l\u00e9ment, et <code>False</code> sinon ;</li> <li>La m\u00e9thode <code>empiler</code> qui prend un objet quelconque en param\u00e8tre et ajoute cet objet au sommet de la pile. Dans la repr\u00e9sentation de la pile dans la console, cet objet apparait \u00e0 droite des autres \u00e9l\u00e9ments de la pile ;</li> <li>La m\u00e9thode <code>depiler</code> qui renvoie l'objet pr\u00e9sent au sommet de la pile et le retire de la pile.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; ma_pile = Pile()\n&gt;&gt;&gt; ma_pile.empiler(2)\n&gt;&gt;&gt; ma_pile\n[2]\n&gt;&gt;&gt; ma_pile.empiler(3)\n&gt;&gt;&gt; ma_pile.empiler(50)\n&gt;&gt;&gt; ma_pile\n[2, 3, 50]\n&gt;&gt;&gt; ma_pile.depiler()\n50\n&gt;&gt;&gt; ma_pile\n[2, 3]\n</code></pre> <p>La m\u00e9thode <code>est_triee</code> ci-dessous renvoie <code>True</code> si, en d\u00e9pilant tous les \u00e9l\u00e9ments, ils sont trait\u00e9s dans l'ordre croissant, et <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>def est_triee(self):\n    if not self.est_vide():\n        e1 = self.depiler()\n        while not self.est_vide():\n            e2 = self.depiler()\n            if e1 ... e2 :\n                return False\n            e1 = ...\n    return True\n</code></pre> <p>1. Recopier sur la copie les lignes 6 et 8 en compl\u00e9tant les points de suspension.</p> <p>On cr\u00e9e dans la console la pile <code>A</code> repr\u00e9sent\u00e9e par <code>[1, 2, 3, 4]</code>.</p> <p>2.a. Donner la valeur renvoy\u00e9e par l'appel <code>A.est_triee()</code>.</p> <p>2.b. Donner le contenu de la pile <code>A</code> apr\u00e8s l'ex\u00e9cution de cette instruction.</p> <p>On souhaite maintenant \u00e9crire le code d'une m\u00e9thode <code>depile_max</code> d'une pile non vide ne contenant que des nombres entiers et renvoyant le plus grand \u00e9l\u00e9ment de cette pile en le retirant de la pile.</p> <p>Apr\u00e8s l'ex\u00e9cution de <code>p.depile_max()</code>, le nombre d'\u00e9l\u00e9ments de la pile <code>p</code> diminue donc de 1.</p> \ud83d\udc0d Script Python<pre><code>def depile_max(self):\n    assert not self.est_vide(), \"Pile vide\"\n    q = Pile()\n    maxi = self.depiler()\n    while not self.est_vide():\n        elt = self.depiler()\n        if maxi &lt; elt:\n            q.empiler(maxi)\n            maxi = ...\n        else :\n            ...\n    while not q.est_vide():\n        self.empiler(q.depiler())\n    return maxi\n</code></pre> <p>3. Recopier sur la copie les lignes 9 et 11 en compl\u00e9tant les points de suspension.</p> <p>On cr\u00e9e la pile <code>B</code> repr\u00e9sent\u00e9e par <code>[9, -7, 8, 12, 4]</code> et on effectue l'appel <code>B.depile_max()</code>.</p> <p>4.a. Donner le contenu des piles <code>B</code> et <code>q</code> \u00e0 la fin de chaque it\u00e9ration de la boucle <code>while</code> de la ligne 5.</p> <p>4.b. Donner le contenu des piles <code>B</code> et <code>q</code> avant l'ex\u00e9cution de la ligne 14.</p> <p>4.c. Donner un exemple de pile qui montre que l'ordre des \u00e9l\u00e9ments restants n'est pas pr\u00e9serv\u00e9 apr\u00e8s l'ex\u00e9cution de <code>depile_max</code>.</p> <p>On donne le code de la fonction <code>traiter</code> :</p> \ud83d\udc0d Script Python<pre><code>def traiter(self):\n    q = Pile()\n    while not self.est_vide():\n        q.empiler(self.depile_max())\n    while not q.est_vide():\n        self.empiler(q.depiler())\n</code></pre> <p>5.a. Donner les contenus successifs des piles <code>B</code> et <code>q</code></p> <ul> <li>avant la ligne 3,</li> <li>avant la ligne 5,</li> <li>\u00e0 la fin de l'ex\u00e9cution de la fonction <code>traiter</code> lorsque la fonction <code>traiter</code> est appel\u00e9e avec la pile <code>B</code> contenant <code>[1, 6, 4, 3, 7, 2]</code>.</li> </ul> <p>5.b. Expliquer le traitement effectu\u00e9 par cette m\u00e9thode.</p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC/#centres-etrangers-2022-j1-dictionnaire-modelisant-le-contenu-dun-repertoire","title":"Centres \u00e9trangers 2022, J1 - Dictionnaire mod\u00e9lisant le contenu d'un r\u00e9pertoire","text":"<p>D'apr\u00e8s 2022, Centres \u00e9trangers, J1, Ex. 3</p> <p>Afin d'organiser les r\u00e9pertoires et les fichiers sur un disque dur, une structure arborescente est utilis\u00e9e. Les fichiers sont dans des r\u00e9pertoires qui sont eux-m\u00eames dans d'autres r\u00e9pertoires, etc.</p> <p>Dans une arborescence, chaque r\u00e9pertoire peut contenir des fichiers et des r\u00e9pertoires, qui sont identifi\u00e9s par leur nom. Le contenu d'un r\u00e9pertoire est mod\u00e9lis\u00e9 par la structure de donn\u00e9es dictionnaire. Les cl\u00e9s de ce dictionnaire sont des chaines de caract\u00e8res donnant le nom des fichiers et des r\u00e9pertoires contenus.</p> <p>Exemple illustr\u00e9</p> <p>Le r\u00e9pertoire appel\u00e9 <code>T\u00e9l\u00e9chargements</code> contient deux fichiers <code>rapport.pdf</code> et <code>jingle.mp3</code> ainsi qu'un r\u00e9pertoire <code>Images</code> contenant simplement le fichier <code>logo.png</code>.</p> <p>Il est repr\u00e9sent\u00e9 ci-dessous.</p> <pre><code>%%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%\nflowchart TB\n    n0[[T\u00e9l\u00e9chargement]] --&gt; n1[[Images]]\n    n1 --&gt; n4(logo.png)\n    n0 --&gt; n2(rapport.pdf)\n    n0 --&gt; n3(jingle.mp3)</code></pre> <p>Ce r\u00e9pertoire <code>T\u00e9l\u00e9chargements</code> est mod\u00e9lis\u00e9 en Python par le dictionnaire suivant :</p> <p><code>{\"Images\": {\"logo.png\": 36}, \"rapport.pdf\": 450, \"jingle.mp3\": 4800}</code></p> <p>Les valeurs num\u00e9riques sont exprim\u00e9es en ko (kilo-octets).</p> <p><code>\"logo.png\": 36</code> signifie que le fichier <code>logo.png</code> occupe un espace m\u00e9moire de 36 ko sur le disque dur.</p> <p>On rappelle, ci-dessous, quelques commandes sur l'utilisation d'un dictionnaire :</p> <ul> <li><code>dico = dict()</code> cr\u00e9e un dictionnaire vide appel\u00e9 <code>dico</code>,</li> <li><code>dico[cle] = contenu</code> met la valeur <code>contenu</code> pour la cl\u00e9 <code>cle</code> dans le dictionnaire <code>dico</code>,</li> <li><code>dico[cle]</code> renvoie la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>cle</code> dans le dictionnaire <code>dico</code>,</li> <li><code>cle in dico</code> renvoie un bool\u00e9en indiquant si la cl\u00e9 <code>cle</code> est pr\u00e9sente dans le dictionnaire <code>dico</code>.</li> <li><code>for cle in dico:</code> permet d'it\u00e9rer sur les cl\u00e9s d'un dictionnaire.</li> <li><code>len(dico)</code> renvoie le nombre de cl\u00e9s d'un dictionnaire.</li> </ul> <p>L'adresse d'un fichier ou d'un r\u00e9pertoire correspond au nom de tous les r\u00e9pertoires \u00e0 parcourir depuis la racine afin d'acc\u00e9der au fichier ou au r\u00e9pertoire. Cette adresse est mod\u00e9lis\u00e9e en Python par la liste des noms de r\u00e9pertoire \u00e0 parcourir pour y acc\u00e9der.</p> <p>Exemple : L'adresse du r\u00e9pertoire : <code>/home/pierre/Documents/</code> est mod\u00e9lis\u00e9e par la liste <code>[\"home\", \"pierre\", \"Documents\"]</code>.</p> <p>1. Dessiner l'arbre donn\u00e9 par le dictionnaire suivant, qui correspond au r\u00e9pertoire <code>Documents</code>.</p> \ud83d\udc0d Script Python<pre><code>Documents = {\n    \"Administratif\":{\n        \"certificat_JDC.pdf\": 1500,\n        \"attestation_recensement.pdf\": 850\n    },\n    \"Cours\": {\n        \"NSI\": {\n            \"TP.html\": 60,\n            \"dm.odt\": 345\n        },\n        \"Philo\": {\n            \"Tractatus_logico-philosophicus.epub\": 2600\n        }\n    },\n    \"liste_de_courses.txt\": 24\n}\n</code></pre> <p>2. On donne la fonction <code>parcourt</code> suivante qui prend en param\u00e8tres un r\u00e9pertoire racine et une liste repr\u00e9sentant une adresse, et qui renvoie le contenu du r\u00e9pertoire cible correspondant \u00e0 l'adresse.</p> <p>Exemple : Si la variable <code>docs</code> contient le dictionnaire de l'exemple de la question 1 alors <code>parcourt(docs, [\"Cours\", \"Philo\"])</code> renvoie le dictionnaire <code>{\"Tractatus_logico-philosophicus.epub\": 2600}</code>.</p> <p>2.a. Recopier et compl\u00e9ter la ligne 4</p> \ud83d\udc0d Script Python<pre><code>def parcourt(racine, adr):\n    repertoire = racine\n    for nom_repertoire in adr:\n        repertoire = ...\n    return repertoire\n</code></pre> <p>2.b. Soit la fonction suivante :</p> \ud83d\udc0d Script Python<pre><code>def affiche(racine, adr, nom_fichier):\n    repertoire = parcourt(racine, adr)\n    print(repertoire[nom_fichier])\n</code></pre> <p>Qu'affiche l'instruction <code>affiche(docs, [\"Cours\", \"NSI\"], \"TP.html\")</code> sachant que la variable <code>docs</code> contient le dictionnaire de la question 1 ?</p> <p>3.a. La fonction <code>ajoute_fichier</code> suivante, de param\u00e8tres <code>racine</code>, <code>adr</code>, <code>nom_fichier</code> et <code>taille</code>, ajoute au dictionnaire <code>racine</code>, \u00e0 l'adresse <code>adr</code>, la cl\u00e9 <code>nom_fichier</code> associ\u00e9 \u00e0 la valeur <code>taille</code>.</p> <p>Une ligne de la fonction donn\u00e9e ci-dessous contient une erreur. Laquelle ? Proposer une correction.</p> \ud83d\udc0d Script Python<pre><code>def ajoute_fichier(racine, adr, nom_fichier, taille):\n    repertoire = parcourt(racine, adr)\n    taille = repertoire[nom_fichier]\n</code></pre> <p>3.b. \u00c9crire une fonction <code>ajoute_repertoire</code> de param\u00e8tres <code>racine</code>, <code>adr</code> et <code>nom_repertoire</code> qui cr\u00e9e un dictionnaire repr\u00e9sentant un r\u00e9pertoire vide appel\u00e9 <code>nom_repertoire</code> dans le dictionnaire <code>racine</code> \u00e0 l'adresse <code>adr</code>.</p> <p>4.a. </p> <p><code>isinstance</code> pour v\u00e9rifier le type d'une variable</p> <p><code>isinstance(variable, A)</code> renvoie <code>True</code> si <code>variable</code> est de type <code>A</code> et <code>False</code> sinon.</p> <p><code>A</code> peut \u00eatre le type <code>int</code>, <code>dict</code> ou tout autre type Python.</p> <p>\u00c9crire une fonction <code>est_fichier</code> de param\u00e8tre <code>racine</code>, un dictionnaire non vide, qui d\u00e9termine si <code>racine</code> est un r\u00e9pertoire ou un fichier. On supposera que l'arborescence est bien form\u00e9e : </p> <ul> <li>les r\u00e9pertoires et les fichiers sont des dictionnaires ;</li> <li>les r\u00e9pertoires ne contiennent, comme cl\u00e9s, que des r\u00e9pertoires et des fichiers ;</li> <li>un r\u00e9pertoire peut \u00eatre vide ;</li> <li>la valeur associ\u00e9e \u00e0 un fichier associ\u00e9e est toujours un entier.</li> </ul> <p>On pourra compl\u00e9ter le code suivant ou en proposer un autre</p> \ud83d\udc0d Script Python<pre><code>def est_fichier(racine):\n    for cle in racine:\n        if isinstance(racine[cle], ...):\n           return ...\n    return ...\n</code></pre> <p>4.b \u00c9crire une fonction <code>taille</code> de param\u00e8tre <code>racine</code> qui prend en param\u00e8tre un dictionnaire <code>racine</code> mod\u00e9lisant un r\u00e9pertoire et qui renvoie le total d'espace m\u00e9moire occup\u00e9 par les fichiers contenus dans ce r\u00e9pertoire.</p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC_Correction/","title":"Sujet BAC 5 :  \u00a0 Piles et Files","text":""},{"location":"StructureDonnees/T2_2_Pile_File_BAC_Correction/#dapres-2022-metropole-j1-ex-1-verification-syntaxique-de-parentheses-ou-de-balises","title":"D'apr\u00e8s 2022, M\u00e9tropole, J1, Ex. 1 - V\u00e9rification syntaxique de parenth\u00e8ses ou de balises","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J1, Ex. 1</p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC_Correction/#partie-a-expression-correctement-parenthesee","title":"Partie A : Expression correctement parenth\u00e9s\u00e9e","text":"<p>On veut d\u00e9terminer si une expression arithm\u00e9tique est correctement parenth\u00e9s\u00e9e. \u00c0 chaque parenth\u00e8se fermante \")\" correspond une parenth\u00e8se pr\u00e9c\u00e9demment ouverte \"(\".</p> <p>Exemples</p> <ul> <li>L'expression arithm\u00e9tique <code>\"(2 + 3) \u00d7 (18/(4 + 2))\"</code> est correctement parenth\u00e9s\u00e9e.</li> <li>L'expression arithm\u00e9tique <code>\"(2 + 3) \u00d7 (18/(4 + 2\"</code> est non correctement parenth\u00e9s\u00e9e.</li> </ul> <p>Pour simplifier les expressions arithm\u00e9tiques, on enregistre, dans une structure de donn\u00e9es, uniquement les parenth\u00e8ses dans leur ordre d'apparition. On appelle expression simplifi\u00e9e cette structure.</p> Expression arithm\u00e9tique Structure de donn\u00e9es <code>\"(2 + 3) \u00d7 (18/(4 + 2))\"</code> <code>()(())</code> <p>1. Indiquer si la phrase \u00ab les \u00e9l\u00e9ments sont maintenant retir\u00e9s (pour \u00eatre lus) de cette structure de donn\u00e9es dans le m\u00eame ordre qu'ils y ont \u00e9t\u00e9 ajout\u00e9s lors de l'enregistrement \u00bb d\u00e9crit le comportement d'une file ou d'une pile. Justifier.</p> R\u00e9ponse <p>Le premier \u00e0 \u00eatre retir\u00e9 \u00e9tait le premier \u00e0 \u00eatre ajout\u00e9, donc cela correspond \u00e0 une file.</p> <p>Pour v\u00e9rifier le parenth\u00e9sage, on peut utiliser une variable <code>controleur</code> qui :</p> <ul> <li>est un nombre entier \u00e9gal \u00e0 0 en d\u00e9but d'analyse de l'expression simplifi\u00e9e ;</li> <li>augmente de 1 si l'on rencontre une parenth\u00e8se ouvrante <code>\"(\"</code> ;</li> <li>diminue de 1 si l'on rencontre une parenth\u00e8se fermante <code>\")\"</code>.</li> </ul> <p>Exemple</p> <p>On consid\u00e8re l'expression simplifi\u00e9e A : <code>\"()(())\"</code></p> <p>Lors de l'analyse de l'expression A, <code>controleur</code> (initialement \u00e9gal \u00e0 0) prend successivement pour valeur 1, 0, 1, 2, 1, 0.</p> <p>Le parenth\u00e9sage est correct.</p> <p>2. \u00c9crire, pour chacune des 2 expressions simplifi\u00e9es B et C suivantes, les valeurs successives prises par la variable <code>controleur</code> lors de leur analyse.</p> <ul> <li>Expression simplifi\u00e9e B : \" ((()()\"</li> <li>Expression simplifi\u00e9e C : \"(()))(\"</li> </ul> R\u00e9ponse <ul> <li>Expression simplifi\u00e9e B : 1, 2, 3, 2, 3, 2</li> <li>Expression simplifi\u00e9e C : 1, 2, 1, 0, -1, 0</li> </ul> <p>3. L'expression simplifi\u00e9e B pr\u00e9c\u00e9dente est mal parenth\u00e9s\u00e9e (parenth\u00e8ses fermantes manquantes) car le <code>controleur</code> est diff\u00e9rent de z\u00e9ro en fin d'analyse. L'expression simplifi\u00e9e C pr\u00e9c\u00e9dente est \u00e9galement mal parenth\u00e9s\u00e9e (parenth\u00e8se fermante sans parenth\u00e8se ouvrante) car le <code>controleur</code> prend une valeur n\u00e9gative pendant l'analyse.</p> <p>Recopier et compl\u00e9ter uniquement les lignes 13 et 16 du code ci-dessous pour que la fonction <code>parenthesage_correct</code> r\u00e9ponde \u00e0 sa description.</p> \ud83d\udc0d Script Python<pre><code>def parenthesage_correct(expression):\n\"\"\" fonction renvoyant True si l'expression arithm\u00e9tique\n    simplifi\u00e9e (str) est correctement parenth\u00e9s\u00e9e, False sinon.\n    Condition: expression ne contient que\n      des parenth\u00e8ses ouvrantes et fermantes\n    \"\"\"\n    controleur = 0\n    for parenthese in expression:  # pour chaque parenth\u00e8se\n        if parenthese == '(':\n            controleur = controleur + 1\n        else:  # parenthese == ')'\n            controleur = controleur - 1\n            if controleur ... :  # test 1 (\u00e0 recopier et compl\u00e9ter)\n                # parenth\u00e8se fermante sans parenth\u00e8se ouvrante\n                return False\n    return controleur ...  # test 2 (\u00e0 recopier et compl\u00e9ter)\n    # test 2 est un bool\u00e9en renvoy\u00e9\n    #   True : le parenth\u00e9sage est correct\n    #   False : parenth\u00e8se(s) fermante(s) manquante(s)\n</code></pre> R\u00e9ponse <ul> <li>ligne 13: <code>(controleur &lt; 0)</code></li> <li>ligne 16: <code>(controleur == 0)</code></li> </ul> <p>Les parenth\u00e8ses sont inutiles.</p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC_Correction/#partie-b-texte-correctement-balise","title":"Partie B : Texte correctement balis\u00e9","text":"<p>On peut faire l'analogie entre le texte simplifi\u00e9 des fichiers HTML (uniquement constitu\u00e9 de balises ouvrantes <code>&lt;nom&gt;</code> et fermantes <code>&lt;/nom&gt;</code>) et les expressions parenth\u00e9s\u00e9es : par exemple, l'expression HTML simplifi\u00e9e : <code>\"&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\"</code> est correctement balis\u00e9e.</p> <p>On ne tiendra pas compte dans cette partie des balises ne comportant pas de fermeture comme <code>&lt;br&gt;</code> ou <code>&lt;img ...&gt;</code>.</p> <p>Afin de v\u00e9rifier qu'une expression HTML simplifi\u00e9e est correctement balis\u00e9e, on peut utiliser une pile (initialement vide) selon l'algorithme suivant :</p> <ul> <li> <p>On parcourt successivement chaque balise de l'expression :</p> <ul> <li>lorsque l'on rencontre une balise ouvrante, on l'empile ;</li> <li>lorsque l'on rencontre une balise fermante :<ul> <li>si la pile est vide, alors l'analyse s'arr\u00eate : le balisage est incorrect,</li> <li>sinon, on d\u00e9pile et on v\u00e9rifie que les deux balises (la balise fermante rencontr\u00e9e et la balise ouvrante d\u00e9pil\u00e9e) correspondent (c'est-\u00e0-dire ont le m\u00eame nom) si ce n'est pas le cas, l'analyse s'arr\u00eate (balisage incorrect).</li> </ul> </li> </ul> </li> </ul> <p>Exemple</p> <p>\u00c9tat de la pile lors du d\u00e9roulement de cet algorithme pour l'expression simplifi\u00e9e <code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"</code> qui n'est pas correctement balis\u00e9e.</p> <p>\u00c9tat de la pile lors du d\u00e9roulement de l'algorithme</p> D\u00e9part\u00c9tape 1\u00c9tape 2\u00c9tape 3 Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n\u2191\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n  \u2191                  Balise &lt;p&gt;  ouvrante, on empile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n     \u2191               Balise &lt;em&gt; ouvrante, on empile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;em&amp;gt;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\"\n          \u2191          Balise &lt;/p&gt; fermante, on d\u00e9pile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> <p><code>&lt;em&gt;</code> et <code>&lt;/p&gt;</code> ne correspondent pas !</p> <p>Le balisage est incorrect.</p> <p>4. Cette question traite de l'\u00e9tat de la pile lors du d\u00e9roulement de l'algorithme.</p> <p>4.a. Repr\u00e9senter la pile \u00e0 chaque \u00e9tape du d\u00e9roulement de cet algorithme pour l'expression <code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"</code> (balisage correct).</p> R\u00e9ponse D\u00e9part\u00c9tape 1\u00c9tape 2\u00c9tape 3\u00c9tape 4Fin Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n\u2191\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n  \u2191                  Balise  &lt;p&gt;  ouvrante, on empile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n      \u2191              Balise  &lt;em&gt; ouvrante, on empile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;em&amp;gt;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n          \u2191          Balise &lt;/em&gt; fermante, on d\u00e9pile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;lt;p&amp;gt;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> <p><code>&lt;em&gt;</code> et <code>&lt;/em&gt;</code> se correspondent.</p> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n               \u2191     Balise &lt;/p&gt;  fermante, on d\u00e9pile\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> <p><code>&lt;p&gt;</code> et <code>&lt;/p&gt;</code> se correspondent.</p> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n                 \u2191\n</code></pre> <pre><code>flowchart TD\n    A[\"&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;=====&lt;br&gt;Pile\"]</code></pre> <p>La pile est vide. Le balisage est correct.</p> <p>4.b. Indiquer quelle condition simple (sur le contenu de la pile) permet alors de dire que le balisage est correct lorsque toute l'expression HTML simplifi\u00e9e a \u00e9t\u00e9 enti\u00e8rement parcourue, sans que l'analyse ne s'arr\u00eate.</p> R\u00e9ponse <p>Il suffirait de v\u00e9rifier que la pile est vide.</p> <p>5. Une expression HTML correctement balis\u00e9e contient 12 balises.</p> <p>Indiquer le nombre d'\u00e9l\u00e9ments que pourrait contenir au maximum la pile lors de son analyse.</p> R\u00e9ponse <p>6 \u00e9l\u00e9ments au maximum seront empil\u00e9s, dans le cas o\u00f9 12 balises HTML sont imbriqu\u00e9es. 6 ouvrantes qui seront empil\u00e9es, puis les 6 fermantes.</p>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC_Correction/#dapres-2022-metropole-j2-ex-2-jeu-de-la-poussette","title":"D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 2 - Jeu de la poussette","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 2</p> <p>title: Jeu de la poussette author: Nicolas Rev\u00e9ret</p> <p>La poussette est un jeu de cartes en solitaire. Cet exercice propose une version simplifi\u00e9e de ce jeu bas\u00e9e sur des nombres.</p> <p>On consid\u00e8re une pile constitu\u00e9e de nombres entiers tir\u00e9s al\u00e9atoirement. Le jeu consiste \u00e0 r\u00e9duire la pile suivant la r\u00e8gle suivante : quand la pile contient du haut vers le bas un triplet dont les termes du haut et du bas sont de m\u00eame parit\u00e9, on supprime l'\u00e9l\u00e9ment central.</p> <p>Par exemple :</p> <ul> <li>Si la pile contient du haut vers le bas le triplet 1 ; 0 ; 3, on supprime le 0, car 1 et 3 sont tous les deux impairs.</li> <li>Si la pile contient du haut vers le bas le triplet 1 ; 0 ; 8, la pile reste inchang\u00e9e, car 1 et 8 n'ont pas la m\u00eame parit\u00e9.</li> </ul> <p>On parcourt la pile ainsi de haut en bas et on proc\u00e8de aux r\u00e9ductions.</p> <p>Arriv\u00e9 en bas de la pile, on recommence la r\u00e9duction en repartant du sommet de la pile jusqu'\u00e0 ce que la pile ne soit plus r\u00e9ductible.</p> <p>Une partie est \u00ab gagnante \u00bb lorsque la pile finale est r\u00e9duite \u00e0 deux \u00e9l\u00e9ments exactement.</p> <p>Voici un exemple d\u00e9taill\u00e9 de d\u00e9roulement d'une partie.</p> Premier parcours de la pileDeuxi\u00e8me parcoursTroisi\u00e8me parcoursQuatri\u00e8me parcours <p> </p> <ul> <li>La premi\u00e8re comparaison (7, 5 et 4) laisse la pile inchang\u00e9e.</li> <li>On retire le 4 lors de la deuxi\u00e8me it\u00e9ration.</li> <li>On retire le 8 lors de la troisi\u00e8me.</li> <li>Il ne reste plus que deux valeurs en bas de la pile (9 et 6) : on a fini le premier parcours.</li> </ul> <p> </p> <ul> <li>On recommence \u00e0 partir du haut de la pile : on retire le 5.</li> <li>Le triplet suivant (3, 9 et 6) n'entra\u00eene pas de suppression.</li> <li>Il ne reste plus que deux valeurs \u00e0 \u00e9tudier (9 et 6) : on a termin\u00e9 le deuxi\u00e8me parcours.</li> </ul> <p> </p> <ul> <li>On recommence en haut de la pile avec 7, 2 et 9 : on retire le 2.</li> <li>Il ne reste que le 9 et le 6 : on a termin\u00e9 le troisi\u00e8me parcours.</li> </ul> <p></p> <ul> <li>On recommence en haut de la pile avec 7, 9 et 6. La pile est inchang\u00e9e.</li> <li>La pile n'a pas \u00e9t\u00e9 modifi\u00e9e lors de ce parcours : la partie est termin\u00e9e et cette pile n'est pas gagnante.</li> </ul> <p>1.a. Donner les diff\u00e9rentes \u00e9tapes de r\u00e9duction de la pile suivante :</p> <p></p> R\u00e9ponse <p>Il s'agit d'une pile gagnante :</p> Premier parcoursSecond parcours <p> </p> <ul> <li>Lors de la premi\u00e8re comparaison, on retire le 9.</li> <li>Lors de la seconde comparaison, on retire le 7.</li> <li>Il ne reste plus que deux valeurs en bas de la pile (4 et 2) : on a fini le premier parcours.</li> </ul> <p> </p> <ul> <li>Lors de la premi\u00e8re comparaison, on retire le 8.</li> <li>Lors de la seconde comparaison, on retire le 4.</li> <li>Il ne reste plus que deux valeurs en bas de la pile (4 et 2) : la pile est gagnante.</li> </ul> <p>1.b. Parmi les piles propos\u00e9es ci-dessous, donner celle qui est gagnante.</p> Pile APile BPile C <p></p> <p></p> <p></p> R\u00e9ponse <p>Seule la pile B est gagnante. On fournit ci dessous les piles en d\u00e9but et fin de partie :</p> Pile APile BPile C <p> </p> <p> </p> <p> </p> <p>L'interface d'une pile est propos\u00e9e ci-dessous :</p> <ul> <li><code>creer_pile_vide()</code> renvoie une pile vide, </li> <li><code>est_vide(p)</code> renvoie <code>True</code> si <code>p</code> est vide, <code>False</code> sinon, </li> <li><code>empiler(p, element)</code> ajoute <code>element</code> au sommet de <code>p</code>, </li> <li><code>depiler(p)</code> retire l'\u00e9l\u00e9ment au sommet de <code>p</code> et le renvoie, </li> <li><code>sommet(p)</code> renvoie l'\u00e9l\u00e9ment au sommet de <code>p</code> sans le retirer de <code>p</code>, </li> <li><code>taille(p):</code> renvoie le nombre d'\u00e9l\u00e9ments de <code>p</code>.</li> </ul> <p>Dans la suite de l'exercice on utilisera uniquement ces fonctions.</p> <p>2. La fonction <code>reduire_triplet_au_sommet</code> permet de supprimer l'\u00e9l\u00e9ment central des trois premiers \u00e9l\u00e9ments en partant du haut de la pile, si l'\u00e9l\u00e9ment du bas et du haut sont de m\u00eame parit\u00e9. Les \u00e9l\u00e9ments d\u00e9pil\u00e9s et non supprim\u00e9s sont replac\u00e9s dans le bon ordre dans la pile.</p> <p>Recopier et compl\u00e9ter sur la copie le code de la fonction <code>reduire_triplet_au_sommet</code> prenant une pile <code>p</code> en param\u00e8tre et la modifiant en place. Cette fonction renvoie le bool\u00e9en <code>est_reduit</code> indiquant si le triplet du sommet a \u00e9t\u00e9 r\u00e9duit ou non.</p> \ud83d\udc0d Script Python<pre><code>def reduire_triplet_au_sommet(p):\n    haut = depiler(p)\n    milieu = depiler(p)\n    bas = sommet(p)\n    est_reduit = ...\n    if haut % 2 != ...:\n        empiler(p, ...)\n        ...\n    empiler(p, ...)\n    return ...\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def reduire_triplet_au_sommet(p):\n    haut = depiler(p)\n    milieu = depiler(p)\n    bas = sommet(p)\n    est_reduit = True\n    if haut % 2 != bas % 2:\n        empiler(p, milieu)\n        est_reduit = False\n    empiler(p, haut)\n    return est_reduit\n</code></pre> <p>3. On se propose maintenant d'\u00e9crire une fonction <code>parcourir_pile_en_reduisant</code> qui parcourt la pile du haut vers le bas en proc\u00e9dant aux r\u00e9ductions pour chaque triplet rencontr\u00e9 quand cela est possible.</p> <p>La pile est toujours modifi\u00e9e en place.</p> <p>La fonction <code>parcourir_pile_en_reduisant</code> renvoie un bool\u00e9en indiquant si la pile a \u00e9t\u00e9 r\u00e9duite \u00e0 au moins une reprise lors du parcours.</p> <p>3.a. Donner la taille minimale que doit avoir une pile pour \u00eatre r\u00e9ductible.</p> R\u00e9sultat <p>Si une pile a une taille de 2 ou moins, elle n'est pas r\u00e9ductible.</p> <p>Si une pile est r\u00e9ductible, alors sa taille est sup\u00e9rieure ou \u00e9gale \u00e0 3.</p> <p>3.b. Recopier et compl\u00e9ter sur la copie :</p> \ud83d\udc0d Script Python<pre><code>def parcourir_pile_en_reduisant(p):\n    q = creer_pile_vide()\n    reduction_pendant_parcours = False\n    while taille(p) &gt;= 3:\n        if ...:\n            reduction_pendant_parcours = ...\n        e = depiler(p)\n        empiler(q, e)\n    while not est_vide(q):\n        ...\n        ...\n    return ...\n</code></pre> R\u00e9sultat \ud83d\udc0d Script Python<pre><code>def parcourir_pile_en_reduisant(p):\n    q = creer_pile_vide()\n    reduction_pendant_parcours = False\n    while taille(p) &gt;= 3:\n        if reduire_triplet_au_sommet(p):\n            reduction_pendant_parcours = True\n        e = depiler(p)\n        empiler(q, e)\n    while not est_vide(q):\n        e = depiler(q)\n        empiler(p, e)\n    return reduction_pendant_parcours\n</code></pre> <p>4. Partant d'une pile d'entiers <code>p</code>, on propose ici d'impl\u00e9menter une fonction r\u00e9cursive <code>jouer</code> jouant une partie compl\u00e8te sur la pile <code>p</code>.</p> <p>On effectue donc autant de parcours que n\u00e9cessaire.</p> <p>Une fois la pile parcourue de haut en bas, on effectue un nouveau parcours \u00e0 condition que le parcours pr\u00e9c\u00e9dent ait modifi\u00e9 la pile. Si \u00e0 l'inverse, la pile n'a pas \u00e9t\u00e9 modifi\u00e9e, on ne fait rien, car la partie est termin\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def jouer(p):\n    if parcourir_pile_en_reduisant(...):\n        ...(...)\n</code></pre> R\u00e9sultat \ud83d\udc0d Script Python<pre><code>def jouer(p):\n    if parcourir_pile_en_reduisant(p):\n        jouer(p)\n</code></pre>"},{"location":"StructureDonnees/T2_2_Pile_File_BAC_Correction/#dapres-2022-polynesie-j1-ex-4-tri-dune-pile","title":"D'apr\u00e8s 2022, Polyn\u00e9sie, J1, Ex. 4 - Tri d'une pile","text":"<p>D'apr\u00e8s 2022, Polyn\u00e9sie, J1, Ex. 4</p> <p>La classe <code>Pile</code> utilis\u00e9e dans cet exercice est impl\u00e9ment\u00e9e en utilisant des listes Python et propose quatre \u00e9l\u00e9ments d'interface :</p> <ul> <li>Un constructeur qui permet de cr\u00e9er une pile vide, repr\u00e9sent\u00e9e par <code>[]</code> ;</li> <li>La m\u00e9thode <code>est_vide()</code> qui renvoie <code>True</code> si l'objet est une pile ne contenant aucun \u00e9l\u00e9ment, et <code>False</code> sinon ;</li> <li>La m\u00e9thode <code>empiler</code> qui prend un objet quelconque en param\u00e8tre et ajoute cet objet au sommet de la pile. Dans la repr\u00e9sentation de la pile dans la console, cet objet apparait \u00e0 droite des autres \u00e9l\u00e9ments de la pile ;</li> <li>La m\u00e9thode <code>depiler</code> qui renvoie l'objet pr\u00e9sent au sommet de la pile et le retire de la pile.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; ma_pile = Pile()\n&gt;&gt;&gt; ma_pile.empiler(2)\n&gt;&gt;&gt; ma_pile\n[2]\n&gt;&gt;&gt; ma_pile.empiler(3)\n&gt;&gt;&gt; ma_pile.empiler(50)\n&gt;&gt;&gt; ma_pile\n[2, 3, 50]\n&gt;&gt;&gt; ma_pile.depiler()\n50\n&gt;&gt;&gt; ma_pile\n[2, 3]\n</code></pre> <p>La m\u00e9thode <code>est_triee</code> ci-dessous renvoie <code>True</code> si, en d\u00e9pilant tous les \u00e9l\u00e9ments, ils sont trait\u00e9s dans l'ordre croissant, et <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>def est_triee(self):\n    if not self.est_vide():\n        e1 = self.depiler()\n        while not self.est_vide():\n            e2 = self.depiler()\n            if e1 ... e2 :\n                return False\n            e1 = ...\n    return True\n</code></pre> <p>1. Recopier sur la copie les lignes 6 et 8 en compl\u00e9tant les points de suspension.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def est_triee(self):\n    if not self.est_vide():\n        e1 = self.depiler()\n        while not self.est_vide():\n            e2 = self.depiler()\n            if e1 &gt; e2 :\n                return False\n            e1 = e2\n    return True\n</code></pre> <p>On cr\u00e9e dans la console la pile <code>A</code> repr\u00e9sent\u00e9e par <code>[1, 2, 3, 4]</code>.</p> <p>2.a. Donner la valeur renvoy\u00e9e par l'appel <code>A.est_triee()</code>.</p> R\u00e9ponse <p>La valeur \\(4\\) est d'abord d\u00e9pil\u00e9e, puis \\(3\\). L'ordre n'est pas croissant, ainsi <code>A.est_triee()</code> renvoie <code>False</code>.</p> <p>2.b. Donner le contenu de la pile <code>A</code> apr\u00e8s l'ex\u00e9cution de cette instruction.</p> R\u00e9ponse <p><code>A</code> sera repr\u00e9sent\u00e9 par <code>[1, 2]</code>.</p> <p>On souhaite maintenant \u00e9crire le code d'une m\u00e9thode <code>depile_max</code> d'une pile non vide ne contenant que des nombres entiers et renvoyant le plus grand \u00e9l\u00e9ment de cette pile en le retirant de la pile.</p> <p>Apr\u00e8s l'ex\u00e9cution de <code>p.depile_max()</code>, le nombre d'\u00e9l\u00e9ments de la pile <code>p</code> diminue donc de 1.</p> \ud83d\udc0d Script Python<pre><code>def depile_max(self):\n    assert not self.est_vide(), \"Pile vide\"\n    q = Pile()\n    maxi = self.depiler()\n    while not self.est_vide():\n        elt = self.depiler()\n        if maxi &lt; elt:\n            q.empiler(maxi)\n            maxi = ...\n        else :\n            ...\n    while not q.est_vide():\n        self.empiler(q.depiler())\n    return maxi\n</code></pre> <p>3. Recopier sur la copie les lignes 9 et 11 en compl\u00e9tant les points de suspension.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def depile_max(self):\n    assert not self.est_vide(), \"Pile vide\"\n    q = Pile()\n    maxi = self.depiler()\n    while not self.est_vide():\n        elt = self.depiler()\n        if maxi &lt; elt:\n            q.empiler(maxi)\n            maxi = elt\n        else :\n            q.empiler(elt)\n    while not q.est_vide():\n        self.empiler(q.depiler())\n    return maxi\n</code></pre> <p>On cr\u00e9e la pile <code>B</code> repr\u00e9sent\u00e9e par <code>[9, -7, 8, 12, 4]</code> et on effectue l'appel <code>B.depile_max()</code>.</p> <p>4.a. Donner le contenu des piles <code>B</code> et <code>q</code> \u00e0 la fin de chaque it\u00e9ration de la boucle <code>while</code> de la ligne 5.</p> R\u00e9ponse InitialisationFin du tour 1Fin du tour 2Fin du tour 3Fin du tour 4 <ul> <li><code>B</code> contient <code>[9, -7, 8, 12]</code> ;</li> <li><code>q</code> est vide ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>4</code>.</li> </ul> <p>Juste avant le premier tour de boucle</p> <ul> <li><code>B</code> contient <code>[9, -7, 8]</code> ;</li> <li><code>q</code> contient <code>[4]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <ul> <li><code>B</code> contient <code>[9, -7]</code> ;</li> <li><code>q</code> contient <code>[4, 8]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <ul> <li><code>B</code> contient <code>[9]</code> ;</li> <li><code>q</code> contient <code>[4, 8, -7]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <ul> <li><code>B</code> est vide ;</li> <li><code>q</code> contient <code>[4, 8, -7, 9]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <p>4.b. Donner le contenu des piles <code>B</code> et <code>q</code> avant l'ex\u00e9cution de la ligne 14.</p> R\u00e9ponse <p>La derni\u00e8re boucle renverse la pile <code>q</code> dans la pile <code>B</code>, ainsi, \u00e0 la ligne 14 :</p> <ul> <li><code>q</code> est vide ;</li> <li><code>B</code> contient <code>[9, -7, 8, 4]</code>.</li> </ul> <p>4.c. Donner un exemple de pile qui montre que l'ordre des \u00e9l\u00e9ments restants n'est pas pr\u00e9serv\u00e9 apr\u00e8s l'ex\u00e9cution de <code>depile_max</code>.</p> R\u00e9ponse <p>Avec une pile <code>B</code> qui contient <code>[3, 1, 2]</code></p> InitialisationFin du tour 1Fin du tour 2 <ul> <li><code>B</code> contient <code>[3, 1]</code> ;</li> <li><code>q</code> est vide ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>2</code>.</li> </ul> <p>Juste avant le premier tour de boucle</p> <ul> <li><code>B</code> contient <code>[3]</code> ;</li> <li><code>q</code> contient <code>[1]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>2</code>.</li> </ul> <ul> <li><code>B</code> est vide ;</li> <li><code>q</code> contient <code>[1, 2]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>3</code>.</li> </ul> <p>La derni\u00e8re boucle renverse la pile <code>q</code> dans la pile <code>B</code>, ainsi, \u00e0 la ligne 14 :</p> <ul> <li><code>q</code> est vide ;</li> <li><code>B</code> contient <code>[2, 1]</code>.</li> </ul> <p>Sans <code>3</code> dans la pile <code>B</code> initiale, on a dans l'ordre <code>[1, 2]</code> ce qui est diff\u00e9rent de <code>[2, 1]</code> obtenu ici avec <code>depile_max</code>.</p> <p>On a ainsi un exemple o\u00f9 l'ordre des \u00e9l\u00e9ments restants n'est pas pr\u00e9serv\u00e9 apr\u00e8s l'ex\u00e9cution de <code>depile_max</code>.</p> <p>On donne le code de la fonction <code>traiter</code> :</p> \ud83d\udc0d Script Python<pre><code>def traiter(self):\n    q = Pile()\n    while not self.est_vide():\n        q.empiler(self.depile_max())\n    while not q.est_vide():\n        self.empiler(q.depiler())\n</code></pre> <p>5.a. Donner les contenus successifs des piles <code>B</code> et <code>q</code></p> <ul> <li>avant la ligne 3,</li> <li>avant la ligne 5,</li> <li>\u00e0 la fin de l'ex\u00e9cution de la fonction <code>traiter</code> lorsque la fonction <code>traiter</code> est appel\u00e9e avec la pile <code>B</code> contenant <code>[1, 6, 4, 3, 7, 2]</code>.</li> </ul> R\u00e9ponse <p>Avec <code>B = [1, 6, 4, 3, 7, 2]</code>, un appel <code>B.traiter()</code> conduit successivement \u00e0 :</p> <ul> <li>Avant la ligne 3,<ul> <li><code>B</code> contient <code>[1, 6, 4, 3, 7, 2]</code> ;</li> <li><code>q</code> est vide.</li> </ul> </li> <li>Avant la ligne 5,<ul> <li><code>B</code> est vide ;</li> <li><code>q</code> contient <code>[7, 6, 4, 3, 2, 1]</code></li> </ul> </li> <li>\u00c0 la fin,<ul> <li><code>B</code> contient <code>[1, 2, 3, 4, 6, 7]</code></li> <li><code>q</code> est vide.</li> </ul> </li> </ul> <p>5.b. Expliquer le traitement effectu\u00e9 par cette m\u00e9thode.</p> R\u00e9ponse <p>Ce traitement est un tri de la pile. On construit d'abord <code>q</code> comme la pile des \u00e9l\u00e9ments de <code>self</code> dans l'ordre d\u00e9croissant. On renverse ensuite la pile, qui se retrouve comme si on avait empil\u00e9 les \u00e9l\u00e9ments de <code>self</code> dans l'ordre croissant.</p> <p>Attention, il s'agit de l'ordre inverse de celui propos\u00e9 par la fonction <code>est_triee</code> vu \u00e0 la question 1. ici, si on d\u00e9pile les \u00e9l\u00e9ments, ils sont d\u00e9sormais dans l'ordre d\u00e9croissant.</p> <p>D'apr\u00e8s 2022, Centres \u00e9trangers, J1, Ex. 3</p> <p>Afin d'organiser les r\u00e9pertoires et les fichiers sur un disque dur, une structure arborescente est utilis\u00e9e. Les fichiers sont dans des r\u00e9pertoires qui sont eux-m\u00eames dans d'autres r\u00e9pertoires, etc.</p> <p>Dans une arborescence, chaque r\u00e9pertoire peut contenir des fichiers et des r\u00e9pertoires, qui sont identifi\u00e9s par leur nom. Le contenu d'un r\u00e9pertoire est mod\u00e9lis\u00e9 par la structure de donn\u00e9es dictionnaire. Les cl\u00e9s de ce dictionnaire sont des chaines de caract\u00e8res donnant le nom des fichiers et des r\u00e9pertoires contenus.</p> <p>Exemple illustr\u00e9</p> <p>Le r\u00e9pertoire appel\u00e9 <code>T\u00e9l\u00e9chargements</code> contient deux fichiers <code>rapport.pdf</code> et <code>jingle.mp3</code> ainsi qu'un r\u00e9pertoire <code>Images</code> contenant simplement le fichier <code>logo.png</code>.</p> <p>Il est repr\u00e9sent\u00e9 ci-dessous.</p> <pre><code>%%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%\nflowchart TB\n    n0[[T\u00e9l\u00e9chargement]] --&gt; n1[[Images]]\n    n1 --&gt; n4(logo.png)\n    n0 --&gt; n2(rapport.pdf)\n    n0 --&gt; n3(jingle.mp3)</code></pre> <p>Ce r\u00e9pertoire <code>T\u00e9l\u00e9chargements</code> est mod\u00e9lis\u00e9 en Python par le dictionnaire suivant :</p> <p><code>{\"Images\": {\"logo.png\": 36}, \"rapport.pdf\": 450, \"jingle.mp3\": 4800}</code></p> <p>Les valeurs num\u00e9riques sont exprim\u00e9es en ko (kilo-octets).</p> <p><code>\"logo.png\": 36</code> signifie que le fichier <code>logo.png</code> occupe un espace m\u00e9moire de 36 ko sur le disque dur.</p> <p>On rappelle, ci-dessous, quelques commandes sur l'utilisation d'un dictionnaire :</p> <ul> <li><code>dico = dict()</code> cr\u00e9e un dictionnaire vide appel\u00e9 <code>dico</code>,</li> <li><code>dico[cle] = contenu</code> met la valeur <code>contenu</code> pour la cl\u00e9 <code>cle</code> dans le dictionnaire <code>dico</code>,</li> <li><code>dico[cle]</code> renvoie la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>cle</code> dans le dictionnaire <code>dico</code>,</li> <li><code>cle in dico</code> renvoie un bool\u00e9en indiquant si la cl\u00e9 <code>cle</code> est pr\u00e9sente dans le dictionnaire <code>dico</code>.</li> <li><code>for cle in dico:</code> permet d'it\u00e9rer sur les cl\u00e9s d'un dictionnaire.</li> <li><code>len(dico)</code> renvoie le nombre de cl\u00e9s d'un dictionnaire.</li> </ul> <p>L'adresse d'un fichier ou d'un r\u00e9pertoire correspond au nom de tous les r\u00e9pertoires \u00e0 parcourir depuis la racine afin d'acc\u00e9der au fichier ou au r\u00e9pertoire. Cette adresse est mod\u00e9lis\u00e9e en Python par la liste des noms de r\u00e9pertoire \u00e0 parcourir pour y acc\u00e9der.</p> <p>Exemple : L'adresse du r\u00e9pertoire : <code>/home/pierre/Documents/</code> est mod\u00e9lis\u00e9e par la liste <code>[\"home\", \"pierre\", \"Documents\"]</code>.</p> <p>1. Dessiner l'arbre donn\u00e9 par le dictionnaire suivant, qui correspond au r\u00e9pertoire <code>Documents</code>.</p> \ud83d\udc0d Script Python<pre><code>Documents = {\n    \"Administratif\":{\n        \"certificat_JDC.pdf\": 1500,\n        \"attestation_recensement.pdf\": 850\n    },\n    \"Cours\": {\n        \"NSI\": {\n            \"TP.html\": 60,\n            \"dm.odt\": 345\n        },\n        \"Philo\": {\n            \"Tractatus_logico-philosophicus.epub\": 2600\n        }\n    },\n    \"liste_de_courses.txt\": 24\n}\n</code></pre> R\u00e9ponse <pre><code>%%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%\nflowchart TB\n    doc[[Documents]] --&gt; adm[[Administratif]]\n    adm --&gt; certif(certificat_JDC.pdf)\n    adm --&gt; attest(attestation_recensement.pdf)\n\n    doc --&gt; cours[[Cours]]\n    cours --&gt; nsi[[NSI]]\n    nsi --&gt; tp(TP.html)\n    nsi --&gt; dm(dm.odt)\n\n    cours --&gt; philo[[Philo]]\n    philo --&gt; tlp(Tractatus_logico-philosophicus.epub)\n\n    doc --&gt; lst(liste_de_courses.txt)</code></pre> <p>2. On donne la fonction <code>parcourt</code> suivante qui prend en param\u00e8tres un r\u00e9pertoire racine et une liste repr\u00e9sentant une adresse, et qui renvoie le contenu du r\u00e9pertoire cible correspondant \u00e0 l'adresse.</p> <p>Exemple : Si la variable <code>docs</code> contient le dictionnaire de l'exemple de la question 1 alors <code>parcourt(docs, [\"Cours\", \"Philo\"])</code> renvoie le dictionnaire <code>{\"Tractatus_logico-philosophicus.epub\": 2600}</code>.</p> <p>2.a. Recopier et compl\u00e9ter la ligne 4</p> \ud83d\udc0d Script Python<pre><code>def parcourt(racine, adr):\n    repertoire = racine\n    for nom_repertoire in adr:\n        repertoire = ...\n    return repertoire\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def parcourt(racine, adr):\n    repertoire = racine\n    for nom_repertoire in adr:\n        repertoire = repertoire[nom_repertoire]\n    return repertoire\n</code></pre> <p>2.b. Soit la fonction suivante :</p> \ud83d\udc0d Script Python<pre><code>def affiche(racine, adr, nom_fichier):\n    repertoire = parcourt(racine, adr)\n    print(repertoire[nom_fichier])\n</code></pre> <p>Qu'affiche l'instruction <code>affiche(docs, [\"Cours\", \"NSI\"], \"TP.html\")</code> sachant que la variable <code>docs</code> contient le dictionnaire de la question 1 ?</p> R\u00e9ponse <ul> <li>La premi\u00e8re instruction fait que <code>repertoire</code> correspond au dictionnaire <code>\"NSI\"</code> qui vaut <code>{\"TP.html\": 60, \"dm.odt\": 345}</code>.</li> <li>La seconde affiche la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>\"TP.html\"</code> de ce dictionnaire, c'est-\u00e0-dire le poids en ko de ce fichier.</li> </ul> <p>L'affichage est donc</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; affiche(docs, [\"Cours\", \"NSI\"], \"TP.html\")\n60\n</code></pre> <p>3.a. La fonction <code>ajoute_fichier</code> suivante, de param\u00e8tres <code>racine</code>, <code>adr</code>, <code>nom_fichier</code> et <code>taille</code>, ajoute au dictionnaire <code>racine</code>, \u00e0 l'adresse <code>adr</code>, la cl\u00e9 <code>nom_fichier</code> associ\u00e9 \u00e0 la valeur <code>taille</code>.</p> <p>Une ligne de la fonction donn\u00e9e ci-dessous contient une erreur. Laquelle ? Proposer une correction.</p> \ud83d\udc0d Script Python<pre><code>def ajoute_fichier(racine, adr, nom_fichier, taille):\n    repertoire = parcourt(racine, adr)\n    taille = repertoire[nom_fichier]\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def ajoute_fichier(racine, adr, nom_fichier, taille):\n    repertoire = parcourt(racine, adr)\n    repertoire[nom_fichier] = taille\n</code></pre> <p>3.b. \u00c9crire une fonction <code>ajoute_repertoire</code> de param\u00e8tres <code>racine</code>, <code>adr</code> et <code>nom_repertoire</code> qui cr\u00e9e un dictionnaire repr\u00e9sentant un r\u00e9pertoire vide appel\u00e9 <code>nom_repertoire</code> dans le dictionnaire <code>racine</code> \u00e0 l'adresse <code>adr</code>.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def ajoute_repertoire(racine, adr, nom_repertoire):\n    repertoire = parcourt(racine, adr)\n    repertoire[nom_repertoire] = dict()\n</code></pre> <p>4.a. </p> <p><code>isinstance</code> pour v\u00e9rifier le type d'une variable</p> <p><code>isinstance(variable, A)</code> renvoie <code>True</code> si <code>variable</code> est de type <code>A</code> et <code>False</code> sinon.</p> <p><code>A</code> peut \u00eatre le type <code>int</code>, <code>dict</code> ou tout autre type Python.</p> <p>\u00c9crire une fonction <code>est_fichier</code> de param\u00e8tre <code>racine</code>, un dictionnaire non vide, qui d\u00e9termine si <code>racine</code> est un r\u00e9pertoire ou un fichier. On supposera que l'arborescence est bien form\u00e9e : </p> <ul> <li>les r\u00e9pertoires et les fichiers sont des dictionnaires ;</li> <li>les r\u00e9pertoires ne contiennent, comme cl\u00e9s, que des r\u00e9pertoires et des fichiers ;</li> <li>un r\u00e9pertoire peut \u00eatre vide ;</li> <li>la valeur associ\u00e9e \u00e0 un fichier associ\u00e9e est toujours un entier.</li> </ul> <p>On pourra compl\u00e9ter le code suivant ou en proposer un autre</p> \ud83d\udc0d Script Python<pre><code>def est_fichier(racine):\n    for cle in racine:\n        if isinstance(racine[cle], ...):\n           return ...\n    return ...\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def est_fichier(racine):\n    for cle in racine:\n        if isinstance(racine[cle], int):\n        return True\n    return False\n</code></pre> <p>4.b \u00c9crire une fonction <code>taille</code> de param\u00e8tre <code>racine</code> qui prend en param\u00e8tre un dictionnaire <code>racine</code> mod\u00e9lisant un r\u00e9pertoire et qui renvoie le total d'espace m\u00e9moire occup\u00e9 par les fichiers contenus dans ce r\u00e9pertoire.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def taille(racine):\n    if est_fichier(racine):\n        for cle in racine:\n            return racine[cle]\n            # il n'y a qu'un tour de boucle\n            # racine[cle] sera la taille du fichier vis\u00e9\n    else:\n        cumul = 0\n        for cle in racine:\n            cumul += taille(racine[cle])\n            # racine[cle] sera soit un fichier, soit un r\u00e9pertoire\n            # la fonction est donc r\u00e9cursive\n        return cumul\n</code></pre>"},{"location":"StructureDonnees/T3_1_arbre/","title":"Macro Rendering Error","text":"<p>File: <code>StructureDonnees/T3_1_arbre.md</code></p> <p>KeyError: 10</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 10\n</code></pre>"},{"location":"StructureDonnees/T3_2_arbre_BAC/","title":"Sujet BAC 10 :  \u00a0 Les arbres - Partie 1","text":""},{"location":"StructureDonnees/T3_2_arbre_BAC/#2022-polynesie-j1-ex-5","title":"2022, Polyn\u00e9sie, J1, Ex. 5","text":"<p>BAC : Construction d'arbres binaires</p> <p>On manipule ici les arbres binaires avec trois fonctions :</p> <ul> <li> <p><code>est_vide(A)</code> renvoie <code>True</code> si l'arbre binaire <code>A</code> est vide, <code>False</code> s'il ne l'est pas ;</p> </li> <li> <p>Pour un arbre binaire <code>A</code> non vide :</p> <ul> <li><code>sous_arbre_gauche(A)</code> renvoie le sous-arbre \u00e0 gauche de <code>A</code> ;</li> <li><code>sous_arbre_droite(A)</code> renvoie le sous-arbre \u00e0 droite de <code>A</code>.</li> </ul> </li> </ul> <p>L'arbre binaire renvoy\u00e9 par les fonctions <code>sous_arbre_gauche</code> et <code>sous_arbre_droite</code> peut \u00e9ventuellement \u00eatre l'arbre vide.</p> <p>On d\u00e9finit la hauteur d'un arbre binaire de la fa\u00e7on suivante :</p> <ul> <li>la hauteur de l'arbre vide est \\(0\\) ;</li> <li>sinon, la hauteur est \u00e9gale \u00e0 \\(1 + M\\), o\u00f9 \\(M\\) est la plus grande des hauteurs de ses sous-arbres (\u00e0 gauche et \u00e0 droite).</li> </ul> <p>1.a. Donner la hauteur de l'arbre ci-dessous.</p> <pre><code>graph TD\n    N0( ) --&gt; N2( )\n    N0   --&gt; N1( )\n    N2  --&gt; N5( )\n    N2  --&gt; N6( )\n    linkStyle 3 stroke-width:0px;\n    style N6 opacity:0;</code></pre> R\u00e9ponse <p>Avec cette d\u00e9finition, la hauteur de cet arbre binaire est 3.</p> <p>1.b. Dessiner sur la copie un arbre binaire de hauteur \\(5\\).</p> R\u00e9ponse <p>Avec cette d\u00e9finition, voici un arbre binaire de hauteur \\(5\\).</p> <pre><code>graph TD\n    N0( ) --&gt; N1( )\n    N0   --&gt; N2( )\n    N1  --&gt; N3( )\n    N1  --&gt; N4( )\n    N2  --&gt; N5( )\n    N2  --&gt; N6( )\n    N4  --&gt; N7( )\n    N4  --&gt; N8( )\n    N7  --&gt; N9( )\n    N7  --&gt; N10( )\n    linkStyle 7 stroke-width:0px;\n    style N8 opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style N5 opacity:0;</code></pre> <p>La hauteur d'un arbre est calcul\u00e9e par l'algorithme r\u00e9cursif suivant :</p> Pseudo Code<pre><code>Algorithme hauteur(A) :\n    si A vide :\n        renvoyer ...\n    sinon:\n        renvoyer 1 + max(\n            hauteur(sous_arbre_gauche(A)),\n            ...\n        )\n</code></pre> <p>2. Recopier sur la copie les lignes 3 et 7 en compl\u00e9tant les points de suspension.</p> R\u00e9ponse Pseudo Code<pre><code>Algorithme hauteur(A) :\n    si A vide :\n        renvoyer 0\n    sinon:\n        renvoyer 1 + max(\n            hauteur(sous_arbre_gauche(A)),\n            hauteur(sous_arbre_droite(A)),\n        )\n</code></pre> <p>On consid\u00e8re un arbre binaire <code>R</code> dont on note <code>G</code> le sous-arbre \u00e0 gauche et <code>D</code> le sous-arbre \u00e0 droite. On suppose que <code>R</code> est de hauteur \\(5\\) et <code>G</code> de hauteur \\(3\\).</p> <p>3.a. Justifier le fait que <code>D</code> n'est pas l'arbre vide et d\u00e9terminer sa hauteur.</p> R\u00e9ponse <p>Si <code>D</code> est \u00e9gal \u00e0 l'arbre vide, alors la hauteur de <code>R</code> est \u00e9gale \u00e0 <code>1 + hauteur(G)</code> qui est \u00e9gal \u00e0 \\(1+3=4\\), or <code>R</code> est de hauteur \\(5\\). Contradiction.</p> <p>Ainsi <code>D</code> n'est pas l'arbre vide.</p> <p>Dans ce cas <code>1 + max(hauteur(G), hauteur(D))</code> est \u00e9gal \u00e0 \\(4\\). D'o\u00f9</p> <ul> <li><code>1 + max(3, hauteur(D))</code> est \u00e9gal \u00e0 \\(5\\).</li> <li><code>max(3, hauteur(D))</code> est \u00e9gal \u00e0 \\(4\\).</li> <li><code>hauteur(D)</code> est \u00e9gal \u00e0 \\(4\\).</li> </ul> <p>3.b. Illustrer cette situation par un dessin.</p> R\u00e9ponse <ul> <li>Cet arbre est de hauteur \\(5\\),</li> <li>son sous arbre \u00e0 gauche est de hauteur \\(3\\),</li> <li>son sous arbre \u00e0 droite est de hauteur \\(4\\).</li> </ul> <pre><code>graph TD\n    N0( ) --&gt; N1( )\n    N0   --&gt; N2( )\n    N1  --&gt; N3( )\n    N1  --&gt; N4( )\n    N2  --&gt; N5( )\n    N2  --&gt; N6( )\n    N4  --&gt; N7( )\n    N4  --&gt; N8( )\n    N6  --&gt; N9( )\n    N6  --&gt; N10( )\n    N9  --&gt; N11( )\n    N9  --&gt; N12( )\n    linkStyle 7 stroke-width:0px;\n    style N8 opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style N5 opacity:0;</code></pre> <p>Soit un arbre binaire non vide de hauteur <code>h</code>. On note <code>n</code> le nombre de n\u0153uds de cet arbre. On admet que \\(h \\leqslant n \\leqslant 2^h - 1\\).</p> <p>4.a. V\u00e9rifier ces in\u00e9galit\u00e9s sur l'arbre binaire de la question 1.a..</p> R\u00e9ponse <p>Dans la question 1.a., l'arbre binaire poss\u00e8de \\(n = 4\\) n\u0153uds et a une hauteur \\(h = 3\\).</p> <p>On a bien \\(3 \\leqslant 4 \\leqslant 2^3 - 1\\) qui s'\u00e9crit aussi \\(3 \\leqslant 4 \\leqslant 7\\)</p> <p>4.b. Expliquer comment construire un arbre binaire de hauteur <code>h</code> quelconque ayant <code>h</code> n\u0153uds.</p> R\u00e9ponse <p>Il suffit, par exemple, de construire un arbre binaire o\u00f9 pour chaque n\u0153ud, soit le sous arbre \u00e0 gauche est vide, soit celui \u00e0 droite.</p> <ul> <li>Cela peut \u00eatre toujours celui \u00e0 gauche qui est vide, on parle alors d'arbre peigne \u00e0 droite.</li> <li>Cela peut \u00eatre toujours celui \u00e0 droite qui est vide, on parle alors d'arbre peigne \u00e0 gauche.</li> </ul> <p>4.c. Expliquer comment construire un arbre binaire de hauteur <code>h</code> quelconque ayant \\(2^h - 1\\) n\u0153uds.</p> <p>Indication : \\(2^h - 1 = 1+2+4+...+2^{h-1}\\).</p> R\u00e9ponse <p>Il faut, dans ce cas, construire un arbre binaire complet ; les sous-arbres vides sont tous \u00e0 la m\u00eame profondeur.</p> <p>L'objectif de la fin de l'exercice est d'\u00e9crire le code d'une fonction <code>fabrique(h, n)</code> qui prend comme param\u00e8tres deux nombres entiers positifs <code>h</code> et <code>n</code> tels que \\(h &lt; n &lt; 2^h - 1\\), et qui renvoie un arbre binaire de hauteur <code>h</code> \u00e0 <code>n</code> n\u0153uds.</p> <p>Pour cela, on utilise les deux fonctions suivantes :</p> <ul> <li><code>arbre_vide()</code>, qui renvoie un arbre vide ;</li> <li><code>arbre(gauche, droite)</code> qui renvoie l'arbre fils \u00e0 <code>gauche</code> et le fils \u00e0 <code>droite</code>.</li> </ul> <p>5. Recopier sur la copie l'arbre binaire ci-dessous et num\u00e9roter ses n\u0153uds de 1 en 1 en commen\u00e7ant \u00e0 1, en effectuant un parcours en profondeur pr\u00e9fixe.</p> <pre><code>graph TD\n    N0( ) --&gt; N2( )\n    N0   --&gt; N1( )\n    N1 --&gt; N3( )\n    N1 --&gt; N4( )\n    N2  --&gt; N5( )\n    N2  --&gt; N6( )\n    linkStyle 5 stroke-width:0px;\n    style N6 opacity:0;\n    N3 --&gt; N7( )\n    N3 --&gt; N8( )\n    N4 --&gt; N9( )\n    N4 --&gt; N10( )</code></pre> R\u00e9ponse <pre><code>graph TD\n    N0(1) --&gt; N2(9)\n    N0   --&gt; N1(2)\n    N1 --&gt; N3(3)\n    N1 --&gt; N4(6)\n    N2  --&gt; N5(10)\n    N2  --&gt; N6( )\n    linkStyle 5 stroke-width:0px;\n    style N6 opacity:0;\n    N3 --&gt; N7(4)\n    N3 --&gt; N8(5)\n    N4 --&gt; N9(7)\n    N4 --&gt; N10(8)</code></pre> <p>La fonction <code>fabrique</code> ci-dessous a pour but de r\u00e9pondre au probl\u00e8me pos\u00e9. </p> \ud83d\udc0d Script Python<pre><code>def fabrique(h, n):\n    if n == 0:\n        return ...\n    else:\n        reste = n - 1                    # 1 pour la racine du sous-arbre\n        n_gauche = min(reste, ...)       # le plus possible \u00e0 gauche\n        n_droite = reste - n_gauche      # la suite \u00e0 droite\n        return arbre(\n            fabrique(..., n_gauche),\n            ...\n        )\n</code></pre> <p>6. Recopier sur la copie les lignes 3, 6 et 9 en compl\u00e9tant les points de suspension.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def arbre_vide():\n    return []\n\ndef arbre(gauche, droite):\n    return [gauche, droite]\n\ndef fabrique(h, n):\n    if n == 0:\nreturn arbre_vide()\nelse:\n        reste = n - 1                        # 1 pour la racine du sous-arbre\nn_gauche = min(reste, 2**(h-1) - 1)  # le plus possible \u00e0 gauche\nn_droite = reste - n_gauche          # la suite \u00e0 droite\n        return arbre(\nfabrique(h-1, n_gauche),\nfabrique(h-1, n_droite)\n)\n\ndef taille(arbre):\n    if arbre == []:\n        return 0\n    else:\n        gauche, droite = arbre\n        return 1 + taille(gauche) + taille(droite)\n\ndef hauteur(arbre):\n    if arbre == []:\n        return 0\n    else:\n        gauche, droite = arbre\n        return 1 + max(hauteur(gauche), hauteur(droite))\n\n\nfor h in range(4):\n    print(\"Hauteur\", h)\n    for n in range(h, 2**h):\n        n_sav = n\n        arbre_hn = fabrique(h, n)\n        print(arbre_hn)\n        assert (h, n_sav) == (hauteur(arbre_hn), taille(arbre_hn))\n    print()\n</code></pre>"},{"location":"StructureDonnees/T3_2_arbre_BAC/#2022-metropole-j1-ex-4","title":"2022, M\u00e9tropole, J1, Ex. 4","text":"<p>BAC : Somme des valeurs d'un arbre binaire</p> <p>Cet exercice traite du calcul de la somme d'un arbre binaire. Cette somme consiste \u00e0 additionner toutes les valeurs num\u00e9riques contenues dans les n\u0153uds de l'arbre.</p> <p>L'arbre utilis\u00e9 dans les parties A et B est le suivant :</p> <pre><code>graph TD\n    N0(3) --&gt; N1(6)\n    N0    --&gt; N2(2)\n    N1    --&gt; N4(7)\n    N1    --&gt; N5(4)\n    N2    --&gt; N6(9)\n    N2    --&gt; N7(1)</code></pre>"},{"location":"StructureDonnees/T3_2_arbre_BAC/#partie-a-parcours-dun-arbre","title":"Partie A : Parcours d'un arbre","text":"<p>1. Donner la somme de l'arbre pr\u00e9c\u00e9dent. Justifier la r\u00e9ponse en explicitant le calcul qui a permis de l'obtenir.</p> R\u00e9ponse <p>La somme de l'arbre est \\(3 + 6 + 2 + 7 + 4 + 9 + 1 = 32\\)</p> <p>2. Indiquer la lettre correspondante aux noms \u00ab racine \u00bb, \u00ab feuille \u00bb, \u00ab n\u0153ud \u00bb, \u00ab SAG \u00bb (Sous Arbre \u00e0 Gauche) et \u00ab SAD \u00bb (Sous Arbre \u00e0 Droite). Chaque lettre A, B, C, D et E ne devra \u00eatre utilis\u00e9e qu'une seule fois.</p> <pre><code>flowchart TD\n    subgraph G0 [\"Arbre avec des lettres \u00e0 associer &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"]\n\n        N0(3) --&gt; N1(6)\n        N0    --&gt; N2(2)\n        subgraph G2 [ ]\n            N2    --&gt; N6(9)\n            N2    --&gt; N7(1)\n        end\n        subgraph G3 [ ]\n            N1    --&gt; N4(7)\n            N1    --&gt; N5(4)\n        end\n\n        A&gt;A] -.- N0\n        B&gt;B] -.- N1\n        C&gt;C] -.- N4\n        G3 -.- D&gt;D]\n        G2 -.- E&gt;E]\n    end</code></pre> R\u00e9ponse Lettre Nom A racine B n\u0153ud C feuille D SAG E SAD <p>3. Parmi les quatre propositions A, B, C et D ci-dessous, donnant un parcours en largeur de l'arbre, une seule est correcte. Indiquer laquelle.</p> <ul> <li>Proposition A : 7 - 6 - 4 - 3 - 9 - 2 - 1</li> <li>Proposition B : 3 - 6 - 7 - 4 - 2 - 9 - 1</li> <li>Proposition C : 3 - 6 - 2 - 7 - 4 - 9 - 1</li> <li>Proposition D : 7 - 4 - 6 - 9 - 1 - 2 - 3</li> </ul> R\u00e9ponse <p>On lit chaque niveau, de la gauche vers la droite.</p> <ul> <li>3, puis</li> <li>6, 2, puis</li> <li>7, 4, 9, 1.</li> </ul> <p>La proposition C est la bonne.</p> <p>4. \u00c9crire en langage Python la fonction <code>somme</code> qui prend en param\u00e8tre une liste de nombres et qui renvoie la somme de ses \u00e9l\u00e9ments.</p> <p>Exemple : <code>somme([1, 2, 3, 4])</code> est \u00e9gale \u00e0 10.</p> R\u00e9ponse <p>Plusieurs r\u00e9ponses possibles</p> It\u00e9ration sans indiceIt\u00e9ration avec indice \ud83d\udc0d Script Python<pre><code>def somme(une_liste):\n    resultat = 0\n    for un_entier in une_liste:\n        resultat += un_entier\n    return resultat\n</code></pre> <p>Recommand\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def somme(une_liste):\n    resultat = 0\n    for i in range(len(une_liste)):\n        resultat += une_liste[i]\n    return resultat\n</code></pre> <p>Inutile, ici, d'utiliser un indice.</p> <p>5. La fonction <code>parcourir(arbre)</code> pourrait se traduire en langage naturel par :</p> \ud83d\udccb Pseudo-code<pre><code>parcourir(A):\n    L = liste_vide\n    F = file_vide\n    enfiler A dans F\n    Tant que F n'est pas vide\n        d\u00e9filer S de F\n        ajouter la valeur de la racine de S dans L\n        Pour chaque sous arbre SA non vide de S\n            enfiler SA dans F\n    renvoyer L\n</code></pre> <p>Donner le type de parcours obtenu gr\u00e2ce \u00e0 la fonction <code>parcourir</code>.</p> R\u00e9ponse <p>Si, \u00e0 un moment du traitement, la file ne contient que des \u00e9l\u00e9ments d'un certain niveau, puis (\u00e9ventuellement) du niveau suivant, alors on enfile pendant le traitement des \u00e9l\u00e9ments du niveau suivant, ce qui fait que cette propri\u00e9t\u00e9 est conserv\u00e9e.</p> <p>Au d\u00e9part, la propri\u00e9t\u00e9 est de mise avec un seul \u00e9l\u00e9ment. Elle le restera pendant tout le parcours, ainsi on traite les \u00e9l\u00e9ments niveau par niveau.</p> <p>Il s'agit d'un parcours en largeur.</p>"},{"location":"StructureDonnees/T3_2_arbre_BAC/#partie-b-methode-diviser-pour-regner","title":"Partie B : M\u00e9thode \u00ab diviser pour r\u00e9gner \u00bb","text":"<p>6. Parmi les quatre propositions A,B, C et D ci-dessous, indiquer la seule proposition correcte. En informatique, le principe diviser pour r\u00e9gner est associ\u00e9 \u00e0 :</p> <ul> <li>Proposition A : diviser une fonction en deux fonctions de plus petit code.</li> <li>Proposition B : utiliser plusieurs modules</li> <li>Proposition C : s\u00e9parer les informations en fonction de leur type</li> <li>Proposition D : d\u00e9couper un probl\u00e8me initial en sous-probl\u00e8mes, \u00e0 r\u00e9soudre, puis combiner leurs solutions</li> </ul> R\u00e9ponse <p>Proposition D</p> <p>En informatique, diviser pour r\u00e9gner (du latin \u00ab Divide ut imperes \u00bb, divide and conquer en anglais) est une technique algorithmique consistant \u00e0 :</p> <ul> <li>Diviser : d\u00e9couper un probl\u00e8me initial en sous-probl\u00e8mes ;</li> <li>R\u00e9gner : r\u00e9soudre les sous-probl\u00e8mes (r\u00e9cursivement ou directement s'ils sont assez petits) ;</li> <li>Combiner : calculer une solution au probl\u00e8me initial \u00e0 partir des solutions des sous-probl\u00e8mes.</li> </ul> <p>7. L'arbre pr\u00e9sent\u00e9 dans le probl\u00e8me peut \u00eatre d\u00e9compos\u00e9 en racine et sous arbres :</p> <pre><code>graph TD\n    N0(3) --&gt; N1(6)\n    N0    --&gt; N2(2)\n    subgraph \"SAD &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"\n    N2    --&gt; N6(9)\n    N2    --&gt; N7(1)\n    end\n    subgraph \"SAG &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"\n    N1    --&gt; N4(7)\n    N1    --&gt; N5(4)\n    end</code></pre> <p>Indiquer dans l'esprit de \u00ab diviser pour r\u00e9gner \u00bb l'\u00e9galit\u00e9 donnant la somme d'un arbre en fonction de la somme des sous arbres et de la valeur num\u00e9rique de la racine.</p> R\u00e9ponse <p><code>somme(arbre)</code> est \u00e9gal \u00e0 <code>valeur_racine(arbre) + somme(SAG(arbre)) + somme(SAD(arbre))</code></p> <p>8. \u00c9crire en langage Python une fonction r\u00e9cursive <code>somme(arbre)</code>. Cette fonction renvoie la somme de l'arbre pass\u00e9 en param\u00e8tre.</p> <p>Les fonctions suivantes sont disponibles :</p> <ul> <li><code>est_vide(arbre)</code> : d\u00e9termine si <code>arbre</code> est vide et renvoie un bool\u00e9en <code>True</code> ou <code>False</code>.</li> <li><code>valeur_racine(arbre)</code> : renvoie la valeur num\u00e9rique de la racine de <code>arbre</code> ;</li> <li><code>arbre_gauche(arbre)</code> : renvoie le sous arbre \u00e0 gauche de <code>arbre</code> ;</li> <li><code>arbre_droite(arbre)</code> : renvoie le sous arbre \u00e0 droite de <code>arbre</code>.</li> </ul> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def somme(arbre):\n    if est_vide(arbre):\n        return 0\n    else:\n        return (\n            valeur_racine(arbre)\n            + somme(arbre_gauche(arbre))\n            + somme(arbre_droite(arbre))\n        )\n</code></pre>"},{"location":"StructureDonnees/T3_2_arbre_BAC/#2022-asie-j1-ex3","title":"2022 Asie J1 - Ex3","text":"<p>BAC : Arbres binaires</p> <p>Les premiers travaux concernant l\u2019aide \u00e0 la d\u00e9cision m\u00e9dicale se sont d\u00e9velopp\u00e9s pendant les ann\u00e9es soixante-dix parall\u00e8lement \u00e0 l\u2019av\u00e8nement de l\u2019informatique dans le secteur m\u00e9dical. L\u2019arbre de d\u00e9cision est une technique d\u00e9cisionnelle fr\u00e9quemment employ\u00e9e pour rechercher la meilleure strat\u00e9gie th\u00e9rapeutique. L\u2019arbre de d\u00e9cision de cet exercice, pr\u00e9sent\u00e9 ci-dessous, est un arbre binaire que l'on nommera <code>arb_decision</code>.</p> <pre><code>graph TD\n    N0(\"Conjonctivie jaune\") --&gt;|non| N2(\"hypercarot\u00e9n\u00e9mie\") \n    N0 --&gt; |oui| N1(\"bilirubine\")\n    N1 --&gt; |non| N3(\"spi\u00e9nom\u00e9galie\")\n    N1 --&gt; |oui| N4(\"h\u00e9patom\u00e9galie\")\n    N3  --&gt;|non| N5(\"maladie de Gilbert &lt;br&gt; par d\u00e9faut &lt;br&gt; de glycuro-conjugaison\")\n    N3  --&gt; |oui| N6(\"an\u00e9mie &lt;br&gt; h\u00e9molytique\")\n    N4 --&gt; |non| N7(\"h\u00e9patie\")\n    N4 --&gt; |oui| N8(\"douleur &lt;br&gt; et fi\u00e8vre\")\n    N8 --&gt; |non| N9(\"cancer de la t\u00eate &lt;br&gt; du pancr\u00e9as\")\n    N8 --&gt; |oui| N10(\"lithiase &lt;br&gt; du chol\u00e9doque\")</code></pre> <p>Arbre de d\u00e9cision en pr\u00e9sence d\u2019une jaunisse (peau anormalement jaune) chez un patient.</p> <p>Rappels :</p> <ul> <li>Un arbre binaire est une structure de donn\u00e9es qui peut se repr\u00e9senter sous la forme d'une hi\u00e9rarchie dont chaque \u00e9l\u00e9ment, appel\u00e9 n\u0153ud, porte une \u00e9tiquette.  </li> <li>Le n\u0153ud initial est appel\u00e9 racine.  </li> <li>Chaque n\u0153ud d\u2019un arbre binaire poss\u00e8de au plus deux sous-arbres.  </li> <li>Chacun de ces sous-arbres est un arbre binaire, appel\u00e9s sous-arbre gauche et sous-arbre droit.  </li> <li>Un n\u0153ud dont les sous-arbres sont vides est appel\u00e9 une feuille.  </li> <li>Dans cet exercice, on utilisera la convention suivante : la hauteur d\u2019un arbre binaire ne comportant qu\u2019un n\u0153ud est \u00e9gale \u00e0 1.  </li> </ul> <p>Dans l\u2019arbre de d\u00e9cision en pr\u00e9sence d\u2019une jaunisse chez un patient, </p> <ul> <li>un n\u0153ud repr\u00e9sente un sympt\u00f4me dont le m\u00e9decin doit \u00e9tudier la pr\u00e9sence ou l\u2019absence ; la r\u00e9ponse ne peut \u00eatre que oui ou non ;  </li> <li>le sous-arbre gauche d\u2019un n\u0153ud donn\u00e9 d\u00e9crit la d\u00e9marche \u00e0 adopter si le sympt\u00f4me est absent ;  </li> <li>le sous-arbre droit d\u2019un n\u0153ud donn\u00e9 d\u00e9crit la d\u00e9marche \u00e0 adopter si le sympt\u00f4me est pr\u00e9sent ;  </li> <li>l'\u00e9tiquette d'une feuille est la maladie induite par le chemin parcouru.</li> </ul> <p>Questions : </p> <ol> <li> <p>D\u00e9terminer la taille et la hauteur de l\u2019arbre donn\u00e9 en exemple en introduction (arbre de d\u00e9cision en pr\u00e9sence d\u2019une jaunisse).  </p> R\u00e9ponse <ul> <li>Taille = 11  </li> <li>hauteur = 5</li> </ul> </li> <li> <p>On choisit d\u2019impl\u00e9menter un arbre binaire \u00e0 l\u2019aide d\u2019un dictionnaire. \ud83d\udc0d Script Python<pre><code>arbre_vide = {}\narbre = {'etiquette': 'valeur' ,\n        'sag': sous_arbre_gauche ,\n        'sad': sous_arbre_droit }\n</code></pre> Le code ci-dessous repr\u00e9sente un arbre selon le mod\u00e8le pr\u00e9c\u00e9dent. \ud83d\udc0d Script Python<pre><code>{'etiquette' :'a',\n    'sag':{'etiquette' :'b',\n        'sag':{},\n        'sad' : {'etiquette' : 'd',\n            'sag' : {},\n            'sad' : {}}},\n    'sad': {'etiquette' :'f',\n        'sag' : {'etiquette' : 'g',\n            'sag' : {},\n            'sad' : {}},\n        'sad' : {} }}\n</code></pre>     a. \u00c0 quelle repr\u00e9sentation graphique correspond la structure impl\u00e9ment\u00e9e ci-dessus ?   </p> <ul> <li> <p>arbre 1 : <pre><code>graph TD  \n    A(\"a\") --&gt; B(\"b\") \n    B --&gt; d(\"d\")\n    B --&gt; d1(\" \")\n    A --&gt; F(\"f\")\n    F --&gt; G(\"g\")\n    F --&gt; G1(\" \")\n    linkStyle 2 stroke-width:0px;\n    style d1 opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style G1 opacity:0;</code></pre></p> </li> <li> <p>arbre 2 : <pre><code>graph TD\n    A(\"a\") --&gt; B(\"b\") \n    B --&gt; d(\" \")\n    B --&gt; d1(\"d\")\n    A --&gt; F(\"f\")\n    F --&gt; G(\"g\")\n    F --&gt; G1(\" \")\n    linkStyle 1 stroke-width:0px;\n    style d opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style G1 opacity:0;</code></pre></p> </li> <li> <p>arbre 3 :   <pre><code>graph TD\n    A(\"a\") --&gt; B(\"b\") \n    B --&gt; d(\" \")\n    B --&gt; d1(\"d\")\n    A --&gt; F(\"f\")\n    F --&gt; G(\" \")\n    F --&gt; G1(\"g\")\n    linkStyle 1 stroke-width:0px;\n    style d opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style G opacity:0;</code></pre></p> </li> </ul> R\u00e9ponse <p>Arbre 2 </p> <p>b. Repr\u00e9senter graphiquement l\u2019arbre correspondant au code ci-dessous.     \ud83d\udc0d Script Python<pre><code>{'etiquette' :'H',\n'sag':{ 'etiquette' :'G',\n'sag': {'etiquette' : 'E',\n'sag' : {},\n'sad' : {}},\n'sad' : {'etiquette' : 'D',\n'sag' : {},\n'sad' : {'etiquette' : 'B',\n'sag' : {},\n'sad' : {} }}},\n'sad': {'etiquette' :'F',\n'sag' : {'etiquette' : 'C',\n'sag' : {},\n'sad' : {'etiquette' : 'A',\n'sag' : {} ,\n'sad' : {}}},\n'sad' : {} }}\n</code></pre></p> R\u00e9ponse <pre><code>graph TD  \n    H(\"H\") --&gt; G(\"G\") \n    G --&gt; E(\"E\")\n    G --&gt; D(\"D\")\n    H --&gt; F(\"F\")\n    F --&gt; C(\"C\")\n    F --&gt; F1(\" \")\n    D --&gt; D1(\" \")\n    D --&gt; B(\"B\")\n    C --&gt; C1(\" \")\n    C --&gt; A(\"A\")\n    linkStyle 5 stroke-width:0px;\n    style F1 opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style D1 opacity:0;\n    linkStyle 8 stroke-width:0px;\n    style C1 opacity:0;</code></pre> </li> <li> <p>La fonction parcours(arb) ci-dessous permet de r\u00e9aliser le parcours des n\u0153uds d\u2019un arbre binaire arb donn\u00e9 en argument. \ud83d\udc0d Script Python<pre><code>def parcours(arb):\n    if arb == {}:\n        return None\n    parcours(arb['sag'])\n    parcours(arb['sad'])\n    print(arb['etiquette'])\n</code></pre></p> <p>a. Donner l'affichage apr\u00e8s l'appel de la fonction parcours avec l'arbre dont une repr\u00e9sentation graphique est ci-dessous.   </p> <pre><code>graph TD  \n    A(\"a\") --&gt; B(\"b\") \n    B --&gt; d(\"d\")\n    B --&gt; d1(\" \")\n    A --&gt; F(\"f\")\n    F --&gt; G(\"g\")\n    F --&gt; G1(\" \")\n    linkStyle 2 stroke-width:0px;\n    style d1 opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style G1 opacity:0;</code></pre> R\u00e9ponse <p>Parcours suffixe : d-b-g-f-a</p> <p>b. \u00c9crire une fonction <code>parcours_maladies(arb)</code> qui n\u2019affiche que les feuilles de l\u2019arbre binaire non vide arb pass\u00e9 en argument, ce qui correspond aux maladies possiblement induites par l\u2019arbre de d\u00e9cision.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def parcours_maladies(arb): \n    if arb=={}: \n        return None \n    parcours_maladies (arb['sag']) \n    parcours_maladies (arb['sad']) \n    if arb['sag'] == {} and arb['sad'] == {}: \n        print(arb['etiquette'])\n</code></pre> </li> <li> <p>On souhaite maintenant afficher l'ensemble des sympt\u00f4mes relatifs \u00e0 une maladie. On consid\u00e8re la fonction <code>symptomes(arbre, mal)</code> avec comme argument arbre un arbre de d\u00e9cision binaire et mal le nom d'une maladie. </p> </li> </ol> <p>L'appel de cette fonction sur l'arbre de d\u00e9cision <code>arb_decision</code> de l'introduction fournit les affichages suivants.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; symptomes(arb_decision, \"an\u00e9mie h\u00e9molytique\")\nsympt\u00f4mes de an\u00e9mie h\u00e9molytique\nspl\u00e9nom\u00e9galie\npas de bilirubine\nconjonctive jaune\n</code></pre> <p>Pour cela, on modifie la structure pr\u00e9c\u00e9dente en ajoutant une cl\u00e9 <code>surChemin</code> qui sera un bool\u00e9en indiquant si le n\u0153ud est sur le chemin de la maladie. La cl\u00e9 <code>surChemin</code> est initialis\u00e9e \u00e0 False pour tous les n\u0153uds. \ud83d\udc0d Script Python<pre><code>arbre = {'etiquette': 'valeur' ,\n        'surChemin': False ,\n        'sag': 'sous-arbre gauche' ,\n        'sad': 'sous-arbre droit' }\n</code></pre></p> <p>Recopier et compl\u00e9ter les lignes 6, 8, 14 et 18 du code suivant sur votre copie.  </p> \ud83d\udc0d Script Python<pre><code>def symptomes(arb, mal):\n    if arb['sag'] != {} :\n        symptomes(arb['sag'],mal)\n\n    if arb['sad'] != {} :\n        symptomes(...)\n\n    if ... ... ... ... :\n        arb['surChemin'] = True\n        print('sympt\u00f4mes de', arb['etiquette'],':')\n\n    else :\n        if arb['sad'] != {} and arb['sad']['surChemin'] :\n            print(...)\n            arb['surChemin'] = True\n\n        if arb['sag'] != {} and arb['sag']['surChemin'] :\n            print(...)\n            arb['surChemin'] = True\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def symptomes(arb, mal): \n    if arb['sag'] != {}: \n        symptomes(arb['sag'], mal) \n\n    if arb['sad'] != {}: \n        symptomes(arb['sad'], mal) \n\n    if arb['etiquette'] == mal: \n        arb['surChemin'] = True \n        print('sympt\u00f4mes de', arb['etiquette'],':') \n\n    else : \n        if arb['sad'] != {} and arb['sad']['surChemin']: \n            print(arb['etiquette']) \n            arb['surChemin'] = True \n\n        if arb['sag'] != {} and arb['sag']['surChemin']: \n            print('pas de ',arb['etiquette']) \n            arb['surChemin'] = True\n</code></pre>"},{"location":"StructureDonnees/T3_3_arbre_recherche/","title":"Macro Rendering Error","text":"<p>File: <code>StructureDonnees/T3_3_arbre_recherche.md</code></p> <p>KeyError: 12</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 12\n</code></pre>"},{"location":"StructureDonnees/T3_4_arbre_recherche_BAC/","title":"Sujet BAC 12 :  \u00a0 Arbres Binaires de Recherche","text":""},{"location":"StructureDonnees/T3_4_arbre_recherche_BAC/#2020-sujet-0","title":"2020, sujet 0","text":"<p>2020, sujet 0</p> <p>Question  1</p> <p>D\u00e9terminer la taille et la hauteur de l\u2019arbre binaire suivant : <pre><code>graph TD  \n    A(\"A\") --&gt; B(\"B\") \n    B --&gt; C(\"C\")\n    B --&gt; D(\"D\")\n    A --&gt; E(\"E\")\n    C --&gt; C1(\" \")\n    C --&gt; C2(\" \")\n    D --&gt; G(\"G\")\n    D --&gt; D2(\" \")\n    E --&gt; F(\"F\")\n    E --&gt; E2(\" \")\n    F --&gt; H(\"H\")\n    F --&gt; I(\"I\")\n    E2 --&gt; E3(\" \")\n    E2 --&gt; E4(\" \")\n    linkStyle 4 stroke-width:0px;\n    style C1 opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style C2 opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style D2 opacity:0;\n    linkStyle 9 stroke-width:0px;\n    style E2 opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style E3 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style E4 opacity:0;</code></pre></p> corrig\u00e9 <p>La taille est 9, la hauteur est 4.  </p> <p>Question  2</p> <p>On d\u00e9cide de num\u00e9roter en binaire les n\u0153uds d\u2019un arbre binaire de la fa\u00e7on suivante :  </p> <ul> <li>la racine correspond \u00e0 1 ;</li> <li>la num\u00e9rotation pour un fils gauche s\u2019obtient en ajoutant le chiffre 0 \u00e0 droite au num\u00e9ro de son p\u00e8re ;</li> <li>la num\u00e9rotation pour un fils droit s\u2019obtient en ajoutant le chiffre 1 \u00e0 droite au num\u00e9ro de son p\u00e8re ;  </li> </ul> <p>Par exemple, dans l\u2019arbre ci-dessous, on a utilis\u00e9 ce proc\u00e9d\u00e9 pour num\u00e9roter les n\u0153uds A, B, C, E et F .</p> <pre><code>graph TD  \n    A(\"A : 1\") --&gt; B(\"B : 10\") \n    B --&gt; C(\"C : 100\")\n    B --&gt; D(\"D : ?\")\n    A --&gt; E(\"E : 11\")\n    C --&gt; C1(\" \")\n    C --&gt; C2(\" \")\n    D --&gt; G(\"G: ?\")\n    D --&gt; D2(\" \")\n    E --&gt; F(\"F : 110\")\n    E --&gt; E2(\" \")\n    F --&gt; H(\"H : ?\")\n    F --&gt; I(\"I : ?\")\n    E2 --&gt; E3(\" \")\n    E2 --&gt; E4(\" \")\n    linkStyle 4 stroke-width:0px;\n    style C1 opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style C2 opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style D2 opacity:0;\n    linkStyle 9 stroke-width:0px;\n    style E2 opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style E3 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style E4 opacity:0;</code></pre> <ol> <li>Dans l\u2019exemple pr\u00e9c\u00e9dent, quel est le num\u00e9ro en binaire associ\u00e9 au n\u0153ud G ?  </li> <li>Quel est le n\u0153ud dont le num\u00e9ro en binaire vaut 13 en d\u00e9cimal ?  </li> <li>En notant \\(h\\) la hauteur de l\u2019arbre, sur combien de bits seront num\u00e9rot\u00e9s les n\u0153uds les plus en bas ?  </li> <li>Justifier que pour tout arbre de hauteur \\(h\\) et de taille \\(n \\geqslant 2\\), on a : \\(h \\leqslant n \\leqslant 2^h-1\\) </li> </ol> corrig\u00e9 <ol> <li>G est associ\u00e9 \u00e0 1010.   </li> <li>13 s'\u00e9crit 1101 en binaire, c'est donc le n\u0153ud I.    </li> <li>Les n\u0153uds les plus en bas sont not\u00e9s sur \\(h\\) bits.  </li> <li>L'arbre de hauteur \\(h\\) de taille minimale est l'arbre filiforme, qui est de taille \\(h\\). L'arbre de hauteur \\(h\\) de taille maximale est l'arbre complet, qui est de taille \\(2^h-1\\). Si \\(n\\) est la taille d'un arbre quelconque de taille \\(h\\), on a donc bien $$ h \\leqslant n \\leqslant 2^h-1 $$.</li> </ol> <p>Question  3</p> <p>Un arbre binaire est dit complet si tous les niveaux de l\u2019arbre sont remplis. <pre><code>graph TD\n    A(\"A\") --&gt; B(\"B\") \n    B --&gt; D(\"D\")\n    B --&gt; E(\"E\")\n    A --&gt; C(\"C\")\n    C --&gt; F(\"F\")\n    C --&gt; G(\"G\")\n    D --&gt; H(\"H\")\n    D --&gt; I(\"I\")\n    E --&gt; J(\"J\")\n    E --&gt; K(\"K\")\n    F --&gt; L(\"L\")\n    F --&gt; M(\"M\")\n    G --&gt; N(\"N\")\n    G --&gt; O(\"O\")</code></pre></p> <p>On d\u00e9cide de repr\u00e9senter un arbre binaire complet par un tableau de taille n + 1, o\u00f9 n est la taille de l\u2019arbre, de la fa\u00e7on suivante :  </p> <ul> <li>La racine a pour indice 1 ;  </li> <li>Le fils gauche du n\u0153ud d\u2019indice i a pour indice \\(2 \\times i\\) ;  </li> <li>Le fils droit du n\u0153ud d\u2019indice i a pour indice \\(2 \\times i + 1\\) ;  </li> <li>On place la taille \\(n\\) de l\u2019arbre dans la case d\u2019indice 0.  </li> </ul> <p>R\u00e9pondre aux questions suivantes :  </p> <ol> <li>D\u00e9terminer le tableau qui repr\u00e9sente l\u2019arbre binaire complet de l\u2019exemple pr\u00e9c\u00e9dent.  </li> <li>On consid\u00e8re le p\u00e8re du n\u0153ud d\u2019indice \\(i\\) avec \\(i \\geqslant 2\\). Quel est son indice dans le tableau ?</li> </ol> corrig\u00e9 <ol> <li>Tableau : <code>[15, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]</code> .  </li> <li>Le p\u00e8re du n\u0153ud d'indice <code>i</code> a pour indice <code>i//2</code>.   </li> </ol> <p>Question  4</p> <p>On se place dans le cas particulier d\u2019un arbre binaire de recherche complet o\u00f9 les n\u0153uds contiennent des entiers et pour lequel la valeur de chaque noeud est sup\u00e9rieure \u00e0 celles des noeuds de son fils gauche, et inf\u00e9rieure \u00e0 celles des noeuds de son fils droit.</p> <p>\u00c9crire une fonction <code>recherche</code> ayant pour param\u00e8tres un arbre <code>arbre</code> et un \u00e9l\u00e9ment <code>element</code>. Cette fonction renvoie <code>True</code> si <code>element</code> est dans l\u2019arbre et <code>False</code> sinon. L\u2019arbre sera repr\u00e9sent\u00e9 par un tableau comme dans la question pr\u00e9c\u00e9dente.</p> corrig\u00e9 \ud83d\udc0d Script Python<pre><code>def recherche(arbre, element):\n    i = 1\n    while i &lt; len(arbre):\n        if arbre[i] == element:\n            return True\n        if element &lt; arbre[i]:\n            i = 2*i # on se place sur le fils gauche\n        else:\n            i = 2*i +  1 # on se place sur le fils droit\n    return False\n</code></pre>"},{"location":"StructureDonnees/T3_4_arbre_recherche_BAC/#2021-metropole-sujet-1","title":"2021, M\u00e9tropole sujet 1","text":"<p>2021, M\u00e9tropole sujet 1</p> <p>Dans cet exercice, les arbres binaires de recherche ne peuvent pas comporter plusieurs fois la m\u00eame cl\u00e9. De plus, un arbre binaire de recherche limit\u00e9 \u00e0 un n\u0153ud a une hauteur de 1. On consid\u00e8re l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci-dessous (figure 1), o\u00f9 <code>val</code> repr\u00e9sente un entier :</p> <pre><code>graph TD\n    A(18) --&gt; B(15) \n    B --&gt; D(13)\n    B --&gt; E(val)\n    A --&gt; C(23)\n    C --&gt; F(19)\n    C --&gt; G(32)\n    D --&gt; H(12)\n    D --&gt; D1(\" \")\n    E --&gt; E1(\" \")\n    E --&gt; E2(\" \")\n    F --&gt; F1(\" \")\n    F --&gt; M(21)\n    G --&gt; G1(\" \")\n    G --&gt; G2(\" \")\n    linkStyle 7 stroke-width:0px;\n    style D1 opacity:0;\n    linkStyle 8 stroke-width:0px;\n    style E1 opacity:0;\n    linkStyle 9 stroke-width:0px;\n    style E2 opacity:0;\n    linkStyle 10 stroke-width:0px;\n    style F1 opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style G1 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style G2 opacity:0;</code></pre> <p>Question  1</p> <p>a Donner le nombre de feuilles de cet arbre et pr\u00e9ciser leur valeur (\u00e9tiquette). b Donner le sous arbre-gauche du n\u0153ud 23. c Donner la hauteur et la taille de l\u2019arbre. d Donner les valeurs enti\u00e8res possibles de <code>val</code> pour cet arbre binaire de recherche.</p> corrig\u00e9 <p>1.a. Il y a 4 feuilles, d'\u00e9tiquette 12, <code>val</code>, 21 et 32. 1.b. Le sous-arbre gauche du n\u0153ud 23 est 19-21. 1.c. La hauteur de l'arbre est 4. Sa taille est 9. 1.d. Les valeurs possibles de <code>val</code> sont 16 et 17.  </p> <p>On suppose, pour la suite de cet exercice, que <code>val</code> est \u00e9gal \u00e0 16.</p> <p>Question  2</p> <p>On rappelle qu\u2019un parcours infixe depuis un n\u0153ud consiste, dans l\u2019ordre, \u00e0 faire un parcours infixe sur le sous arbre-gauche, afficher le n\u0153ud puis faire un parcours infixe sur le sous-arbre droit.   Dans le cas d\u2019un parcours suffixe, on fait un parcours suffixe sur le sous-arbre gauche puis un parcours suffixe sur le sous-arbre droit, avant d\u2019afficher le n\u0153ud.</p> <p>a. Donner les valeurs d\u2019affichage des n\u0153uds dans le cas du parcours infixe de l\u2019arbre.  b. Donner les valeurs d\u2019affichage des n\u0153uds dans le cas du parcours suffixe de l\u2019arbre.</p> corrig\u00e9 <p>2.a. Parcours infixe : 12-13-15-16-18-19-21-23-32 2.b. Parcours suffixe : 12-13-16-15-21-19-32-23-18  </p> <p>Question  3</p> <p>On consid\u00e8re la classe <code>Noeud</code> d\u00e9finie de la fa\u00e7on suivante en Python :</p> <p>\ud83d\udc0d Script Python<pre><code>class Noeud():\n    def __init__(self, v):\n        self.ag = None\n        self.ad = None\n        self.v = v\n\n    def insere(self, v):\n        n = self\n        est_insere = False\n        while not est_insere :\n            if v == n.v:\n                est_insere = True             | Bloc 1\n            elif v &lt; n.v:                  \n                if n.ag != None:           ---\n                    n = n.ag                  |\n                else:                         |  Bloc 2\n                    n.ag = Noeud(v)           |  \n                    est_insere = True      ---   \n            else:\n                if n.ad != None:           ---\n                    n = n.ad                  |\n                else:                         | Bloc 3\n                    n.ad = Noeud(v)           |\n                    est_insere = True      --- \n\n    def insere_tout(self, vals):\n        for v in vals:\n            self.insere(v) \n</code></pre> a. Repr\u00e9senter l\u2019arbre construit suite \u00e0 l\u2019ex\u00e9cution de l\u2019instruction suivante :  </p> <p>\ud83d\udc0d Script Python<pre><code>racine = Noeud(18)\nracine.insere_tout([12, 13, 15, 16, 19, 21, 32, 23])\n</code></pre> b. \u00c9crire les deux instructions permettant de construire l\u2019arbre de la figure 1. On rappelle que le nombre <code>val</code> est \u00e9gal \u00e0 16.</p> <p>c. On consid\u00e8re l\u2019arbre tel qu\u2019il est pr\u00e9sent\u00e9 sur la figure 1. D\u00e9terminer l\u2019ordre d\u2019ex\u00e9cution des blocs (rep\u00e9r\u00e9s de 1 \u00e0 3) suite \u00e0 l\u2019application de la m\u00e9thode <code>insere(19)</code> au n\u0153ud racine de cet arbre.</p> corrig\u00e9 <p>a. </p> <p><pre><code>graph TD\n    A(18) --&gt; B(12) \n    B --&gt; D(\" \")\n    B --&gt; E(13)\n    A --&gt; C(19)\n    C --&gt; F(\" \")\n    C --&gt; G(21)\n    D --&gt; H(\" \")\n    D --&gt; D1(\" \" )\n    E --&gt; E1(\" \")\n    E --&gt; E2(15)\n    F --&gt; F1(\" \")\n    F --&gt; M(\" \")\n    M --&gt; G1(\" \")\n    M --&gt; G2(\" \")\n    E2 --&gt; I(\" \")\n    E2 --&gt; J(16)\n    G --&gt; K(\" \")\n    G --&gt; L(32)\n    L --&gt; N(23)\n    L --&gt; O(\" \")\n    linkStyle 1 stroke-width:0px;\n    style D opacity:0;    \n    linkStyle 4 stroke-width:0px;\n    style F opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style H opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style D1 opacity:0;\n    linkStyle 8 stroke-width:0px;\n    style E1 opacity:0;\n    linkStyle 10 stroke-width:0px;\n    style F1 opacity:0;\n    linkStyle 11 stroke-width:0px;\n    style M opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style G1 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style G2 opacity:0;\n    linkStyle 14 stroke-width:0px;\n    style I opacity:0;\n    linkStyle 16 stroke-width:0px;\n    style K opacity:0;\n    linkStyle 19 stroke-width:0px;\n    style O opacity:0;</code></pre> b. \ud83d\udc0d Script Python<pre><code>racine = Noeud(18)\nracine.insere([15, 13, 12, 16, 23, 32, 19, 21])\n</code></pre> (d'autres solutions sont possibles)</p> <p>3.c. Bloc 3 - Bloc 2 - Bloc 1  </p> <p>Question  4</p> <p>\u00c9crire une m\u00e9thode <code>recherche(self, v)</code> qui prend en argument un entier <code>v</code> et renvoie la valeur <code>True</code> si cet entier est une \u00e9tiquette de l\u2019arbre, <code>False</code> sinon.</p> corrig\u00e9 \ud83d\udc0d Script Python<pre><code>class Noeud():\n    def __init__(self, v):\n        self.ag = None\n        self.ad = None\n        self.v = v\n\n    def insere(self, v):\n        n = self\n        est_insere = False\n        while not est_insere:\n            if v == n.v:\n                est_insere = True\n            elif v &lt; n.v:\n                if n.ag != None:\n                    n = n.ag\n                else:\n                    n.ag = Noeud(v)\n                    est_insere = True\n            else:\n                if n.ad != None:\n                    n = n.ad\n                else:\n                    n.ad = Noeud(v)\n                    est_insere = True\n\n    def insere_tout(self, vals):\n        for v in vals:\n            self.insere(v)\n\n    def recherche(self, v):\n        arbre = self\n        while not arbre is None:\n            if arbre.v == v:\n                return True\n            if v &lt; arbre.v:\n                arbre = arbre.ag\n            else:\n                arbre = arbre.ad\n        return False\n\n\n    # version r\u00e9cursive (non demand\u00e9e)\n\n    def recherche_rec(self, v):\n        if self is None:\n            return False\n        if self.v == v:\n            return True\n        if v &lt; self.v:\n            if self.ag is not None:\n                return self.ag.recherche_rec(v)\n            else:\n                return False\n        else:\n            if self.ad is not None:\n                return self.ad.recherche_rec(v)\n            else:\n                return False\n\n\nracine = Noeud(18)\nracine.insere_tout([12, 13, 15, 14, 19, 21, 32, 23])\nprint(racine.recherche(149))\nprint(racine.recherche(12))\n</code></pre>"},{"location":"StructureDonnees/T3_4_arbre_recherche_BAC/#2021-metropole-candidats-libres-2","title":"2021, M\u00e9tropole Candidats Libres 2","text":"<p>2021, M\u00e9tropole Candidats Libres 2</p> <p>On rappelle qu\u2019un arbre binaire est compos\u00e9 de n\u0153uds, chacun des n\u0153uds poss\u00e9dant \u00e9ventuellement un sous-arbre gauche et \u00e9ventuellement un sous-arbre droit. Un n\u0153ud sans sous-arbre est appel\u00e9 feuille. La taille d\u2019un arbre est le nombre de n\u0153uds qu\u2019il contient ; sa hauteur est le nombre de n\u0153uds du plus long chemin qui joint le n\u0153ud racine \u00e0 l\u2019une des feuilles. Ainsi la hauteur d\u2019un arbre r\u00e9duit \u00e0 un n\u0153ud, c\u2019est-\u00e0-dire la racine, est 1.</p> <p>Dans un arbre binaire de recherche, chaque n\u0153ud contient une cl\u00e9, ici un nombre entier, qui est :</p> <ul> <li>strictement sup\u00e9rieure \u00e0 toutes les cl\u00e9s des n\u0153uds du sous-arbre gauche ;  </li> <li>strictement inf\u00e9rieure \u00e0 toutes les cl\u00e9s des n\u0153uds du sous-arbre droit.</li> </ul> <p>Un arbre binaire de recherche est dit \u00ab bien construit \u00bb s\u2019il n\u2019existe pas d\u2019arbre de hauteur inf\u00e9rieure qui pourrait contenir tous ses n\u0153uds.</p> <p>On consid\u00e8re l\u2019arbre binaire de recherche ci-dessous.</p> <pre><code>graph TD\n    A(12) --&gt; B(10) \n    B --&gt; D(5)\n    B --&gt; E(\" \")\n    A --&gt; C(15)\n    C --&gt; F(\" \")\n    C --&gt; G(20)\n    D --&gt; H(4)\n    D --&gt; D1(8)\n    E --&gt; E1(\" \")\n    E --&gt; E2(\" \")\n    F --&gt; F1(\" \")\n    F --&gt; M(\" \")\n    G --&gt; G1(\" \")\n    G --&gt; G2(\" \")\n    linkStyle 2 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style F opacity:0;\n    linkStyle 2 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 8 stroke-width:0px;\n    style E1 opacity:0;\n    linkStyle 9 stroke-width:0px;\n    style E2 opacity:0;\n    linkStyle 10 stroke-width:0px;\n    style M opacity:0;\n    linkStyle 11 stroke-width:0px;\n    style F1 opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style G1 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style G2 opacity:0;</code></pre> <p>Question  1</p> <p>a. Quelle est la taille de l\u2019arbre ci-dessus ?  </p> <p>b. Quelle est la hauteur de l\u2019arbre ci-dessus ?</p> corrig\u00e9 <p>1.a. La taille de l'arbre est 7. 1.b. La hauteur de l'arbre est 4.  </p> <p>Question  2</p> <p>Cet arbre binaire de recherche n\u2019est pas \u00ab bien construit \u00bb. Proposer un arbre binaire de recherche contenant les m\u00eames cl\u00e9s et dont la hauteur est plus petite que celle de l\u2019arbre initial.</p> corrig\u00e9 <pre><code>graph TD\n    A(10) --&gt; B(5) \n    B --&gt; D(4)\n    B --&gt; E(8)\n    A --&gt; C(15)\n    C --&gt; F(12)\n    C --&gt; G(20)</code></pre> <p>Question  3</p> <p>Les classes Noeud et Arbre ci-dessous permettent de mettre en \u0153uvre en Python la structure d\u2019arbre binaire de recherche. La m\u00e9thode <code>insere</code> permet d\u2019ins\u00e9rer r\u00e9cursivement une nouvelle cl\u00e9.</p> \ud83d\udc0d Script Python<pre><code>class Noeud :\n\n    def __init__(self, cle):\n        self.cle = cle\n        self.gauche = None\n        self.droit = None\n\n    def insere(self, cle):\n        if cle &lt; self.cle :\n            if self.gauche == None :\n                self.gauche = Noeud(cle)\n            else :\n                self.gauche.insere(cle)\n        elif cle &gt; self.cle :\n            if self.droit == None :\n                self.droit = Noeud(cle)\n            else :\n                self.droit.insere(cle)\n\nclass Arbre :\n\n    def __init__(self, cle):\n        self.racine = Noeud(cle)\n\n    def insere(self, cle):\n        self.racine.insere(cle)\n</code></pre> <p>Donner la repr\u00e9sentation de l\u2019arbre cod\u00e9 par les instructions ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>a = Arbre(10)\na.insere(20)\na.insere(15)\na.insere(12)\na.insere(8)\na.insere(4)\na.insere(5)\n</code></pre> corrig\u00e9 <pre><code>graph TD\n    A(10) --&gt; B(8) \n    B --&gt; D(4)\n    D --&gt; D1(\" \")\n    D --&gt; D2(5)\n    B --&gt; E(\" \" )\n    E --&gt; E1(\" \")\n    E --&gt; E2(\" \")\n    A --&gt; C(20)\n    C --&gt; F(15)\n    C --&gt; G(\" \")\n    F --&gt; H(12)\n    F --&gt; J(\" \")\n    G --&gt; G1(\" \")\n    G --&gt; G2(\" \")\n    linkStyle 2 stroke-width:0px;\n    style D1 opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 5 stroke-width:0px;\n    style E opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style E1 opacity:0;\n    style E2 opacity:0;\n    linkStyle 9 stroke-width:0px;\n    style G opacity:0;\n    linkStyle 11 stroke-width:0px;\n    style J opacity:0;\n    linkStyle 12 stroke-width:0px;\n    style G1 opacity:0;\n    linkStyle 13 stroke-width:0px;\n    style G2 opacity:0;</code></pre> <p>Question  4</p> <p>Pour calculer la hauteur d\u2019un arbre non vide, on a \u00e9crit la m\u00e9thode ci-dessous dans la classe Noeud.</p> <p>\ud83d\udc0d Script Python<pre><code>def hauteur(self):\n    if self.gauche == None and self.droit == None:\n        return 1\n    if self.gauche == None:\n        return 1 + self.droit.hauteur()\n    elif self.droit == None:\n        return 1 + self.gauche.hauteur()\n    else:\n        hg = self.gauche.hauteur()\n        hd = self.droit.hauteur()\n        if hg &gt; hd:\n            return hg + 1\n        else:\n            return hd + 1\n</code></pre> \u00c9crire la m\u00e9thode <code>hauteur</code> de la classe <code>Arbre</code> qui renvoie la hauteur de l\u2019arbre.</p> corrig\u00e9 <p>4. \ud83d\udc0d Script Python<pre><code>def hauteur(self):\n    return self.racine.hauteur()\n</code></pre></p> <p>Question  5</p> <p>\u00c9crire les m\u00e9thodes <code>taille</code> des classes <code>Noeud</code> et <code>Arbre</code> permettant de calculer la taille d\u2019un arbre.</p> corrig\u00e9 <p>5. M\u00e9thode <code>taille</code>    de la classe <code>Noeud</code> : \ud83d\udc0d Script Python<pre><code>def taille(self):\n    if self.gauche is None and self.droit is None:\n        return 1\n    elif self.gauche is None:\n        return 1 + self.droit.taille()\n    elif self.droit is None:\n        return 1 + self.gauche.taille()\n    else:\n        return 1 + self.gauche.taille() + self.droit.taille()\n</code></pre> M\u00e9thode <code>taille</code>    de la classe <code>Arbre</code> :  \ud83d\udc0d Script Python<pre><code>def taille(self):\n    return self.racine.taille()\n</code></pre></p> <p>Question  6</p> <p>On souhaite \u00e9crire une m\u00e9thode <code>bien_construit</code> de la classe <code>Arbre</code> qui renvoie la valeur <code>True</code> si l\u2019arbre est \u00ab bien construit \u00bb et <code>False</code> sinon.</p> <p>On rappelle que la taille maximale d\u2019un arbre binaire de recherche de hauteur \\(\u210e\\) est \\(2^h - 1\\).</p> <p>a. Quelle est la taille minimale, not\u00e9e <code>min</code> d\u2019un arbre binaire de recherche \u00ab bien construit \u00bb de hauteur \\(\u210e\\) ? b. \u00c9crire la m\u00e9thode <code>bien_construit</code> demand\u00e9e.</p> corrig\u00e9 <p>6.a. La configuration minimale d'un arbre bien construit de hauteur \\(h\\) peut \u00eatre :</p> <p></p> <p>La taille minimale <code>min</code> est donc \u00e9gale \u00e0 \\(2^{h-1}\\).</p> <p>6.b. Intuitivement, un arbre est mal construit si sa hauteur est trop grande par rapport \u00e0 sa taille (trop \u00e9tir\u00e9).</p> <p>Donc un arbre est mal construit si sa taille est trop petite par rapport \u00e0 sa hauteur.</p> <p>Donc un arbre de taille \\(t\\) et de hauteur \\(h\\) est mal construit si \\(t &lt; 2^{h-1}\\), puisqu'on a d\u00e9montr\u00e9 que \\(2^{h-1}\\) \u00e9tait la taille minimale.</p> <p>Pour tester si un arbre est bien construit, on va donc juste v\u00e9rifier que \\(t \\geqslant 2^{h-1}\\) :</p> \ud83d\udc0d Script Python<pre><code>def bien_construit(self):\n    h = self.taille()\n    return self.taille() &gt;= 2**(h-1)\n</code></pre>"},{"location":"StructureDonnees/T3_4_arbre_recherche_BAC/#2021-polynesie","title":"2021, Polyn\u00e9sie","text":"<p>2021, Polyn\u00e9sie</p> <p>Cet exercice traite principalement du th\u00e8me \u00ab algorithmique, langages et programmation \u00bb et en particulier les arbres binaires de recherche. La premi\u00e8re partie aborde les arbres en mode d\u00e9branch\u00e9 via l'application d'un algorithme sur un exemple. La suivante porte sur la programmation orient\u00e9e objet. La derni\u00e8re partie fait le lien avec les algorithmes de tri.</p> <p>Partie A : \u00c9tude d'un exemple</p> <p>Consid\u00e9rons l'arbre binaire de recherche ci-dessous :</p> <pre><code>graph TD\n    A(5) --&gt; B(2) \n    B --&gt; D(\" \")\n    B --&gt; E(3)\n    A --&gt; C(7)\n    C --&gt; F(\" \")\n    C --&gt; G(8)\n    linkStyle 1 stroke-width:0px;\n    style D opacity:0;\n    linkStyle 4 stroke-width:0px;\n    style F opacity:0;</code></pre> <p>Question  A.1</p> <p>Indiquer quelle valeur a le n\u0153ud racine et quels sont les fils de ce n\u0153ud.</p> R\u00e9ponse <ul> <li>Racine : 5  </li> <li>Fils gauche : 2  </li> <li>Fils droit : 7  </li> </ul> <p>Question  A.2</p> <p>Indiquer quels sont les n\u0153uds de la branche qui se termine par la feuille qui a pour valeur 3.</p> R\u00e9ponse <p>5, 2 et 3</p> <p>Question  A.3</p> <p>Dessiner l\u2019arbre obtenu apr\u00e8s l\u2019ajout de la valeur 6.</p> R\u00e9ponse <pre><code>graph TD\n    A(5) --&gt; B(2) \n    B --&gt; D(\" \")\n    B --&gt; E(3)\n    A --&gt; C(7)\n    C --&gt; F(6)\n    C --&gt; G(8)\n    linkStyle 1 stroke-width:0px;\n    style D opacity:0;</code></pre> <p>Partie B : Impl\u00e9mentation en Python</p> <p>Voici un extrait d\u2019une impl\u00e9mentation en Python d'une classe mod\u00e9lisant un arbre binaire de recherche.</p> \ud83d\udc0d Script Python<pre><code>class ABR:\n\"\"\"Impl\u00e9mentation d\u2019un arbre binaire de recherche (ABR)\"\"\"\n    def __init__(self, valeur=None):\n        self.valeur = valeur\n        self.fg = None\n        self.fd = None\n\n    def estVide(self):\n        return self.valeur == None\n\n    def insererElement(self, e):\n        if self.estVide():\n            self.valeur = e\n        else:\n            if e &lt; self.valeur:\n                if self.fg:\n                    self.fg.insererElement(e)\n                else:\n                    self.fg = ABR(e)\n            if e &gt; self.valeur:\n                if self.fd:\n                    self.fd.insererElement(e)\n                else:\n                    self.fd = ABR(e)\n</code></pre> <p>Question  B.1</p> <p>Expliquer le r\u00f4le de la fonction <code>__init__</code>.</p> R\u00e9ponse <p>C\u2019est un constructeur qui permet d\u2019initialiser les attributs de l\u2019instance.</p> <p>Question  B.2</p> <p>Dans cette impl\u00e9mentation, expliquer ce qui se passe si on ajoute un \u00e9l\u00e9ment d\u00e9j\u00e0 pr\u00e9sent dans l\u2019arbre.</p> R\u00e9ponse <p>Il ne se passe rien.</p> <p>Question  B.3</p> <p>Recopier et compl\u00e9ter les pointill\u00e9s ci-dessous permettant de cr\u00e9er l\u2019arbre de la partie A. \ud83d\udc0d Script Python<pre><code>arbre = ABR(.......... )\narbre.insererElement(2)\narbre.insererElement(.......... )\narbre.insererElement(7)\narbre.insererElement(.......... )\n</code></pre></p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>arbre = ABR(5) \narbre.insereElement(2) \narbre.insereElement(3) \narbre.insereElement(7) \narbre.insereElement(8)\n</code></pre> <p>Partie C : Tri par arbre binaire de recherche</p> <p>On souhaite trier un ensemble de valeurs enti\u00e8res distinctes gr\u00e2ce \u00e0 un arbre binaire de recherche. Pour cela, on ajoute un \u00e0 un les \u00e9l\u00e9ments de l\u2019ensemble dans un arbre initialement vide. Il ne reste plus qu\u2019\u00e0 parcourir l\u2019arbre afin de lire et de stocker dans un tableau r\u00e9sultat les valeurs dans l\u2019ordre croissant.</p> <p>Question  C.1</p> <p>Donner le nom du parcours qui permet de visiter les valeurs d\u2019un arbre binaire de recherche dans l\u2019ordre croissant.</p> R\u00e9ponse <p>Parcours infixe.</p> <p>Question  C.2</p> <p>Comparer la complexit\u00e9 de cette m\u00e9thode de tri avec celle du tri par insertion ou du tri par s\u00e9lection.</p> R\u00e9ponse <p>Elle est en \\(O(nlog(n))\\) alors que les autres sont en \\(O(n^2)\\). Elle est plus efficace.</p>"},{"location":"StructureDonnees/T3_4_arbre_recherche_BAC/#2021-centres-etrangers-sujet-1","title":"2021, Centres \u00c9trangers, sujet 1","text":"<p>2021, Centres Etrangers, sujet 1</p> <p>Un arbre binaire est soit vide, soit un n\u0153ud qui a une valeur et au plus deux fils (le sous-arbre gauche et le sous-arbre droit).</p> <pre><code>graph TD\n    X(\"X\") --&gt; G1(\"G1\") \n    G1 --&gt; G2(\"G2\")\n    G1 --&gt; G3(\"G3\")\n    X --&gt; D1(\"D1\")\n    D1 --&gt; D2(\"D2\")\n    D1 --&gt; D3(\"D3\")\n</code></pre> <ul> <li>X est un n\u0153ud, sa valeur est X.valeur</li> <li>G1 est le fils gauche de X, not\u00e9 X.fils_gauche</li> <li>D1 est le fils droit de X, not\u00e9 X.fils_droit</li> </ul> <p>Un arbre binaire de recherche est ordonn\u00e9 de la mani\u00e8re suivante :</p> <p>Pour chaque n\u0153ud X,</p> <ul> <li>les valeurs de tous les n\u0153uds du sous-arbre gauche sont strictement inf\u00e9rieures \u00e0 la valeur du n\u0153ud X</li> <li>les valeurs de tous les n\u0153uds du sous-arbre droit sont sup\u00e9rieures ou \u00e9gales \u00e0 la valeur du n\u0153ud X.</li> </ul> <p>Ainsi, par exemple, toutes les valeurs des n\u0153uds G1, G2 et G3 sont strictement inf\u00e9rieures \u00e0 la valeur du n\u0153ud X et toutes les valeurs des n\u0153uds D1, D2 et D3 sont sup\u00e9rieures ou \u00e9gales \u00e0 la valeur du n\u0153ud X.</p> <p>Voici un exemple d'arbre binaire de recherche dans lequel on a stock\u00e9 dans cet ordre les valeurs : <code>[26, 3, 42, 15, 29, 19, 13, 1, 32, 37, 30]</code> </p> <p>L'\u00e9tiquette d'un n\u0153ud indique la valeur du n\u0153ud suivie du nom du n\u0153ud. Les n\u0153uds ont \u00e9t\u00e9 nomm\u00e9s dans l'ordre de leur insertion dans l'arbre ci-dessous.</p> <p><code>'29, noeud04'</code> signifie que le n\u0153ud nomm\u00e9 <code>noeud04</code> poss\u00e8de la valeur 29.</p> <pre><code>graph TD\n    A(\"26, noeud00\") --&gt; B(\"3, noeud01\") \n    B --&gt; D(\"1, noeud07\")\n    B --&gt; E(\"15, noeud03\")\n    A --&gt; C(\"42, noeud02\")\n    C --&gt; F(\"29, noeud04\")\n    C --&gt; G(\" \")\n    D --&gt; H(\" \")\n    D --&gt; D1(\" \" )\n    E --&gt; E1(\"13, noeud06\")\n    E --&gt; E2(\"19, noeud05\")\n    F --&gt; F1(\" \")\n    F --&gt; M(\"32, noeud08\")\n    M --&gt; G1(\"30, noeud10\")\n    M --&gt; G2(\"37, noeud09\")\n    style G opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style H opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style D1 opacity:0;\n    style F1 opacity:0;</code></pre> <p>Question  1</p> <p>On ins\u00e8re la valeur 25 dans l'arbre, dans un nouveau n\u0153ud nomm\u00e9 n\u0153ud11.</p> <p>Recopier l'arbre binaire de recherche \u00e9tudi\u00e9 et placer la valeur 25 sur cet arbre en coloriant en rouge le chemin parcouru.</p> <p>Pr\u00e9ciser sous quel n\u0153ud la valeur 25 sera ins\u00e9r\u00e9e et si elle est ins\u00e9r\u00e9e en fils gauche ou en fils droit, et expliquer toutes les \u00e9tapes de la d\u00e9cision.</p> R\u00e9ponse <p><pre><code>graph TD\n    A(\"26, noeud00\") --&gt; B(\"3, noeud01\") \n    B --&gt; D(\"1, noeud07\")\n    B --&gt; E(\"15, noeud03\")\n    A --&gt; C(\"42, noeud02\")\n    C --&gt; F(\"29, noeud04\")\n    C --&gt; G(\" \")\n    D --&gt; H(\" \")\n    D --&gt; D1(\" \" )\n    E --&gt; E1(\"13, noeud06\")\n    E --&gt; E2(\"19, noeud05\")\n    F --&gt; F1(\" \")\n    F --&gt; M(\"32, noeud08\")\n    M --&gt; G1(\"30, noeud10\")\n    M --&gt; G2(\"37, noeud09\")\n    E2 --&gt; O(\" \")\n    E2 --&gt; P(\"25, noeud11\")\n    style G opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style H opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style D1 opacity:0;\n    style F1 opacity:0;\n    linkStyle 14 stroke-width:0px;\n    style O opacity:0;\n    linkStyle 0 stroke:red;\n    linkStyle 2 stroke:red;\n    linkStyle 9 stroke:red;\n    linkStyle 15 stroke:red;</code></pre> On d\u00e9sire ins\u00e9rer le noeud11 (valeur 25). On part de la racine (noeud00 de valeur 26), 25 est plus petit que 26, on consid\u00e8re donc le sous-arbre gauche et on se retrouve au niveau du noeud01 (valeur 3).  25 est plus grand que 3, on consid\u00e8re donc le sous-arbre droit au noeud01 et on se retrouve au niveau du noeud03 (valeur 15). 25 est plus grand que 15, on consid\u00e8re donc le sous-arbre droit au noeud03 et on se retrouve au niveau du noeud05 (valeur 19). 25 est plus grand que 19, on consid\u00e8re donc le sous-arbre droit du noeud05, ce sous-arbre droit est vide et on ins\u00e8re donc le noeud11 \u00e0 cet emplacement. Le noeud11 est donc ins\u00e9r\u00e9 sous le noeud5 en fils droit</p> <p>Question  2</p> <p>Pr\u00e9ciser toutes les valeurs enti\u00e8res que l\u2019on peut stocker dans le n\u0153ud fils gauche du n\u0153ud04 (vide pour l'instant), en respectant les r\u00e8gles sur les arbres binaires de recherche ? </p> R\u00e9ponse <p>Question  3</p> <p>Voici un algorithme r\u00e9cursif permettant de parcourir et d'afficher les valeurs de l'arbre :</p> \ud83d\udc0d Script Python<pre><code>Parcours(A)  # A est un arbre binaire de recherche\n    Afficher(A.valeur)\n    Parcours(A.fils_gauche)\n    Parcours(A.fils_droit)\n</code></pre> R\u00e9ponse <p>Il est possible de stocker toutes les valeurs comprises entre 26 et 29, c\u2019est \u00e0 dire : 26, 27 et 28 (on peut prendre 26 car il est pr\u00e9cis\u00e9 dans l\u2019\u00e9nonc\u00e9 que \u201cles valeurs de tous les n\u0153uds du sous-arbre droit sont sup\u00e9rieures ou \u00e9gales \u00e0 la valeur du n\u0153ud X\u201d</p> <p>Question  3</p> <p>a. \u00c9crire la liste de toutes les valeurs dans l'ordre o\u00f9 elles seront affich\u00e9es. b. Choisir le type de parcours d'arbres binaires de recherche r\u00e9alis\u00e9 parmi les propositions suivantes : Pr\u00e9fixe, Suffixe ou Infixe.  </p> R\u00e9ponse <p>a. 26 - 3 - 1 - 15 - 13 - 19 - 25 - 42 - 29 - 32  - 30 - 37 b. C\u2019est un parcours  pr\u00e9fixe</p> <p>Question  4</p> <p>En vous inspirant de l\u2019algorithme pr\u00e9c\u00e9dent, \u00e9crire un algorithme Parcours2 permettant de parcourir et d'afficher les valeurs de l'arbre A dans l'ordre croissant.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>Parcours2(A) \n    Parcours2(A.fils_gauche) \n    Afficher(A.valeur) \n    Parcours2(A.fils_droit)\n</code></pre>"},{"location":"StructureDonnees/T4_1_Dictionnaires/","title":"Macro Rendering Error","text":"<p>File: <code>StructureDonnees/T4_1_Dictionnaires.md</code></p> <p>KeyError: 9</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 9\n</code></pre>"},{"location":"StructureDonnees/T4_2_dictionnaires/","title":"Macro Rendering Error","text":"<p>File: <code>StructureDonnees/T4_2_dictionnaires.md</code></p> <p>KeyError: 19</p> \ud83d\udccb Texte<pre><code>Traceback (most recent call last):\n  File \"/home/michael/.local/lib/python3.8/site-packages/mkdocs_macros/plugin.py\", line 523, in render\n    return md_template.render(**page_variables)\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 1301, in render\n    self.environment.handle_exception()\n  File \"/usr/local/lib/python3.8/dist-packages/jinja2/environment.py\", line 936, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 7, in top-level template code\n  File \"/mnt/TRAVAIL/4_NSI/NSI2024/NSITerm2024/main.py\", line 623, in titre_chapitre\n    titre_bis = env.variables['progression_'+niveau][numero][1]\nKeyError: 19\n</code></pre>"},{"location":"StructureDonnees/TP_Labyrinthe/","title":"R\u00e9solution d'un labyrinthe","text":"<p>TP extrait du site de M.Glassus</p>"},{"location":"StructureDonnees/TP_Labyrinthe/#presentation-du-probleme","title":"Pr\u00e9sentation du probl\u00e8me","text":"<p>Consid\u00e9rons le labyrinthe suivant : </p> <p>Affectons une lettre \u00e0 chaque case de ce labyrinthe.</p> <p></p> <p>Notre objectif est de trouver comment aller de A en P.</p>"},{"location":"StructureDonnees/TP_Labyrinthe/#modelisation-par-un-graphe","title":"Mod\u00e9lisation par un graphe","text":"<p>Dessiner le graphe (dont les noeuds seront des lettres) qui mod\u00e9lise ce labyrinthe.</p> <p>Proposer deux \u00abformes\u00bb possibles pour ce graphe.</p> Correction <p></p> <p></p>"},{"location":"StructureDonnees/TP_Labyrinthe/#implementation-du-graphe-en-python","title":"Impl\u00e9mentation du graphe en Python","text":"<p>En utilisant une classe <code>Graphe</code>, impl\u00e9menter le graphe de ce labyrinthe.</p> Correction \ud83d\udc0d Script Python<pre><code>class Graphe:\n    def __init__(self, liste_sommets):\n        self.liste_sommets = liste_sommets\n        self.adjacents = {sommet : [] for sommet in liste_sommets}\n\n    def ajoute_arete(self, sommetA, sommetB):\n        self.adjacents[sommetA].append(sommetB)\n        self.adjacents[sommetB].append(sommetA)\n\n    def voisins(self, sommet):\n        return self.adjacents[sommet]\n\n    def sont_voisins(self, sommetA, sommetB):\n        return sommetB in self.adjacents[sommetA]\n\ng = Graphe(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'])\ng.ajoute_arete('A', 'E')\ng.ajoute_arete('E', 'F')\ng.ajoute_arete('F', 'B')\ng.ajoute_arete('B', 'C')\ng.ajoute_arete('C', 'G')\ng.ajoute_arete('G', 'H')\ng.ajoute_arete('H', 'D')\ng.ajoute_arete('G', 'K')\ng.ajoute_arete('F', 'J')\ng.ajoute_arete('J', 'I')\ng.ajoute_arete('I', 'M')\ng.ajoute_arete('M', 'N')\ng.ajoute_arete('N', 'O')\ng.ajoute_arete('O', 'K')\ng.ajoute_arete('K', 'L')\ng.ajoute_arete('L', 'P')\n</code></pre>"},{"location":"StructureDonnees/TP_Labyrinthe/#recherche-du-plus-court-chemin","title":"Recherche du plus court chemin","text":"<p>En utilisant la fonction <code>recherche_chemin</code> du cours, \u00e9tablir le plus court chemin pour aller de A vers P dans ce labyrinthe.</p> Correction \ud83d\udc0d Script Python<pre><code>def recherche_chemin(g, depart, arrivee):\n'''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    decouverts = [depart]\n    en_attente = [depart]\n    parent = {}\n    while en_attente != [] :\n        sommet = en_attente.pop(0)\n        voisins = g.voisins(sommet)\n        for voisin in voisins:\n            if voisin not in decouverts:\n                decouverts.append(voisin)\n                en_attente.append(voisin)\n                parent[voisin] = sommet\n                if voisin == arrivee:\n                    return remonte_chemin(depart, arrivee, parent)\n        traites.append(sommet)\n    return \"non trouv\u00e9\"  \n\n\ndef remonte_chemin(depart, arrivee, parent):\n    sommet = arrivee\n    chemin = arrivee\n    while sommet != depart:\n        sommet = parent[sommet]\n        chemin = sommet + chemin\n    return chemin\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_chemin(g, 'A', 'P')\n'AEFBCGKLP'\n</code></pre>"},{"location":"StructureDonnees/TP_Labyrinthe/#conclusion","title":"Conclusion","text":"<p>Sur un labyrinthe un peu plus imposant, voici l'illustration de notre m\u00e9thode de r\u00e9solution :</p> <p></p> <ul> <li>le parcours en largeur part d\u00e9couvrir les cases dans toutes les directions.</li> <li>lorsque la case cherch\u00e9e (ici, la rouge) est trouv\u00e9e, on remonte \u00e0 chaque case pr\u00e9c\u00e9dente gr\u00e2ce au dictionnaire <code>parent</code>, et ainsi le chemin de sortie du labyrinthe est g\u00e9n\u00e9r\u00e9. </li> </ul> <p>Code de cette animation (en Pygame)</p>"},{"location":"StructureDonnees/index_structDonnees/","title":"\u27a1 Th\u00e8me : Structures de donn\u00e9es","text":"<p>En informatique, une structure de donn\u00e9es est une mani\u00e8re d'organiser les donn\u00e9es pour les traiter plus facilement. Une structure de donn\u00e9es est une mise en \u0153uvre concr\u00e8te d'un type abstrait. </p> <p>Pour un type abstrait donn\u00e9, il faut absolument diff\u00e9rencier l'interface de l'impl\u00e9mentation:</p> <ul> <li>interface : ensemble des m\u00e9thodes qui permettent de manipuler le type abstrait;</li> <li>impl\u00e9mentation: code (Python en ce qui nous concerne) qui permet de construire les m\u00e9thodes.</li> </ul> <p>On choisit un type abstrait en fonction du probl\u00e8me \u00e0 r\u00e9soudre (choisir le bon type, c'est d\u00e9j\u00e0 r\u00e9soudre la majeure partie du probl\u00e8me) et des m\u00e9thodes \u00e0 envisager (et de leur co\u00fbt), appel\u00e9es \u00e9galement primitives.</p> <p>Info</p> <p>\ud83d\uddf9 Structure de donn\u00e9es abstraites( file) : interface et impl\u00e9mentation \ud83d\uddf9 Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets  \ud83d\uddf9 Listes, piles, files : structures lin\u00e9aires.  \ud83d\uddf9 Dictionnaires, index et cl\u00e9 \ud83d\uddf9 Arbres : structures hi\u00e9rarchiques. Arbres binaires : n\u0153uds, racines, feuilles, sous-arbres gauches, sous-arbres droits</p>"},{"location":"StructureDonnees/test/","title":"Test","text":"<pre><code>gantt\n    title My Product Roadmap\n    dateFormat  YYYY-MM-DD\n    section Cool Feature\n    A task           :a1, 2022-02-25, 30d\n    Another task     :after a1, 20d\n    section Rad Feature\n    Task in sequence :2022-03-04, 12d\n    Task, No. 2      :24d</code></pre> <pre><code>graph LR\n    A(\".\") --&gt; B(\"bin\")\n    A --&gt; C(\"etc\")\n    A --&gt; D(\"home\")\n    A --&gt; E(\"tmp\")\n    C --&gt; F(\"morgane\")\n    F --&gt; G(\"lyc\u00e9e\")\n    G --&gt; H(\"fran\u00e7ais\")\n    G --&gt; I(\"NSI\")\n    I --&gt; J(\"info.txt\")\n    I --&gt; K(\"image1.jpg\")\n    F --&gt; L(\"perso\")</code></pre> <pre><code>graph TD\n    A(\" \") --&gt; B(\" \") \n    B --&gt; C(\" \")\n    B --&gt; D(\" \")\n    C --&gt; E(\" \")\n    C --&gt; C1(\" \")\n    E --&gt; E1(\" \")\n    E --&gt; E2(\" \")\n    C1 --&gt; C2(\" \")\n    C1 --&gt; C3(\" \")\n    A --&gt; F(\" \")\n    F --&gt; J(\" \")\n    F --&gt; K(\" \")\n    J --&gt; L(\" \")\n    J --&gt; N(\" \")\n    D --&gt; D1(\" \")\n    D --&gt; D2(\" \")\n    D1 --&gt; D3(\" \")\n    D1 --&gt; D4(\" \")\n    D2 --&gt; D5(\" \")\n    D2 --&gt; D6(\" \")\n    L --&gt; L3(\" \")\n    L --&gt; L4(\" \")\n    N --&gt; N1(\" \")\n    N --&gt; N2(\" \")\n    K --&gt; K1(\" \")\n    K --&gt; K2(\" \")\n    K1 --&gt; K3(\" \")\n    K1 --&gt; K4(\" \")\n    K2 --&gt; K5(\" \")\n    K2 --&gt; K6(\" \") </code></pre> <pre><code>graph TD\n    A(\"dfifi\") --&gt; B(\"annieji\") \n    B --&gt; D(\"aalice\")\n    B --&gt; E(\"celine\")\n    A --&gt; H(\"helene\")\n    E --&gt; F(\" \")\n    E --&gt;G(\"davaidbg\")\n    H --&gt; I(\" \")\n    H --&gt; J(\"papicoeur\")\n    linkStyle 4 stroke-width:0px;\n    style F opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style I opacity:0;</code></pre> <pre><code>graph TD\n    A(\"9617\") --&gt; B(\"9794\") \n    A --&gt; D(\"9750\")\n    A --&gt; E(\"9697\")\n    A --&gt; H(\"9657\")\n    B --&gt; I(\"9795\")</code></pre> <pre><code>graph TD\n    A(\"construire(0,8)\") --&gt; B(\"construire(0,4)\") \n    B --&gt; D(\"construire(0,2)\")\n    B --&gt; E(\"construire(2,4)\")\n    A --&gt; H(\"construire(4,8)\")\n    H --&gt; I(\"construire(4,6)\")\n    H --&gt; J(\"construire(6,8)\")</code></pre> <pre><code>graph TD\n    A(3) --&gt; B(2) \n    B --&gt; D(1)\n    B --&gt; E(1)\n    A --&gt; C(4)\n    C --&gt; F(3)\n    C --&gt; G(7)</code></pre> <pre><code>graph TD\n    A(\"26, noeud00\") --&gt; B(\"3, noeud01\") \n    B --&gt; D(\"1, noeud07\")\n    B --&gt; E(\"15, noeud03\")\n    A --&gt; C(\"42, noeud02\")\n    C --&gt; F(\"29, noeud04\")\n    C --&gt; G(\" \")\n    D --&gt; H(\" \")\n    D --&gt; D1(\" \" )\n    E --&gt; E1(\"13, noeud06\")\n    E --&gt; E2(\"19, noeud05\")\n    F --&gt; F1(\" \")\n    F --&gt; M(\"32, noeud08\")\n    M --&gt; G1(\"30, noeud10\")\n    M --&gt; G2(\"37, noeud09\")\n    E2 --&gt; O(\" \")\n    E2 --&gt; P(\"25, noeud11\")\n    style G opacity:0;\n    linkStyle 6 stroke-width:0px;\n    style H opacity:0;\n    linkStyle 7 stroke-width:0px;\n    style D1 opacity:0;\n    style F1 opacity:0;\n    linkStyle 14 stroke-width:0px;\n    style O opacity:0;\n    linkStyle 0 stroke:red;\n    linkStyle 2 stroke:red;\n    linkStyle 9 stroke:red;\n    linkStyle 15 stroke:red;</code></pre>"},{"location":"T2_BasesDonnees/Modele_Relationnel/","title":"C1 Le Mod\u00e9le relationnel","text":"<p>Programme Terminale</p> Contenus Capacit\u00e9s attendues Commentaires Mod\u00e8le relationel : relation, attribut, domaine, clef primaire, clef \u00e9trang\u00e8re, sch\u00e9ma relationnel Identifier les concepts d\u00e9finissant le mod\u00e8le relationnel Ces concept permettent d'exprimer les contraites d'int\u00e9grit\u00e9 (domaine, relation et r\u00e9f\u00e9rence) <p>L\u2019ann\u00e9e derni\u00e8re nous avons eu l\u2019occasion de travailler sur des donn\u00e9es structur\u00e9es en les stockant dans des fichiers au format CSV. M\u00eame si cette m\u00e9thode de stockage de l\u2019information peut s\u2019av\u00e9rer pratique dans certains cas pr\u00e9cis, il est souvent souhaitable d\u2019utiliser une base de donn\u00e9es pour stocker des donn\u00e9es.  </p> <p>En effet si le nombre de donn\u00e9es \u00e0 stocker devient tr\u00e8s grand, est-ce que ma solution choisie pourra les g\u00e9rer ?  (on peut par exemple m\u00e9diter sur le cas du Royaume-Uni dont le comptage des patients positifs au Covid est devenu faux car il a d\u00e9pass\u00e9 les limites de leur feuille Excel)</p> <ul> <li> <p>Est-ce que d'autres personnes que moi sont susceptibles de consulter ou modifier ces donn\u00e9es, \u00e9ventuellement en m\u00eame temps que moi ?</p> </li> <li> <p>Si une donn\u00e9e se retrouve \u00e0 plusieurs endroits dans mes donn\u00e9es, devrais-je aller modifier cette donn\u00e9e partout o\u00f9 elle se trouve ou bien une seule fois ?</p> </li> </ul> <p>L'\u00e9tude des Bases de Donn\u00e9es tente d'apporter des r\u00e9ponses \u00e0 toutes ces questions.</p> <p>Dans une base de donn\u00e9es, l\u2019information est stock\u00e9e dans des fichiers, mais \u00e0 la diff\u00e9rence des fichiers au format CSV, il n\u2019est pas possible de travailler sur ces donn\u00e9es avec un simple \u00e9diteur de texte. Pour manipuler les donn\u00e9es pr\u00e9sentes dans une base de donn\u00e9es (\u00e9crire, lire ou encore modifier), il est n\u00e9cessaire d\u2019utiliser un type de logiciel appel\u00e9 \"syst\u00e8me de gestion de base de donn\u00e9es\" tr\u00e8s souvent abr\u00e9g\u00e9 en SGBD. Il existe une multitude de SGBD : des gratuites, des payantes, des libres ou bien encore des propri\u00e9taires. Les SGBD permettent de grandement simplifier la gestion des bases de donn\u00e9es :  </p> <ul> <li>les SGBD permettent de g\u00e9rer la lecture, l\u2019\u00e9criture ou la modification des informations contenues dans une base de donn\u00e9es  </li> <li>les SGBD permettent de g\u00e9rer les autorisations d\u2019acc\u00e8s \u00e0 une base de donn\u00e9es. Il est en effet souvent n\u00e9cessaire de contr\u00f4ler les acc\u00e8s par exemple en permettant \u00e0 l\u2019utilisateur A de lire et d\u2019\u00e9crire dans la base de donn\u00e9es alors que l\u2019utilisateur B aura uniquement la possibilit\u00e9 de lire les informations contenues dans cette m\u00eame base de donn\u00e9es.  </li> <li>les fichiers des bases de donn\u00e9es sont stock\u00e9s sur des disques durs dans des ordinateurs, ces ordinateurs peuvent subir des pannes. Il est souvent n\u00e9cessaire que l\u2019acc\u00e8s aux informations contenues dans une base de donn\u00e9es soit maintenu, m\u00eame en cas de panne mat\u00e9rielle. Les bases de donn\u00e9es sont donc dupliqu\u00e9es sur plusieurs ordinateurs afin qu\u2019en cas de panne d\u2019un ordinateur A, un ordinateur B contenant une copie de la base de donn\u00e9es pr\u00e9sente dans A, puisse prendre le relais. Tout cela est tr\u00e8s complexe \u00e0 g\u00e9rer, en effet toute modification de la base de donn\u00e9es pr\u00e9sente sur l\u2019ordinateur A doit entra\u00eener la m\u00eame modification de la base de donn\u00e9es pr\u00e9sente sur l\u2019ordinateur B. Cette synchronisation entre A et B doit se faire le plus rapidement possible, il est fondamental d\u2019avoir des copies parfaitement identiques en permanence. C\u2019est aussi les SGBD qui assurent la maintenance des diff\u00e9rentes copies de la base de donn\u00e9es.  </li> <li>plusieurs personnes peuvent avoir besoin d\u2019acc\u00e9der aux informations contenues dans une base donn\u00e9es en m\u00eame temps. Cela peut parfois poser probl\u00e8me, notamment si les 2 personnes d\u00e9sirent modifier la m\u00eame donn\u00e9e au m\u00eame moment (on parle d\u2019acc\u00e8s concurrent). Ces probl\u00e8mes d\u2019acc\u00e8s concurrent sont aussi g\u00e9r\u00e9s par les SGBD.  </li> </ul> <p>Comme nous venons de la voir, les SGBD jouent un r\u00f4le fondamental. L\u2019utilisation des SGBD explique en partie la sup\u00e9riorit\u00e9 de l\u2019utilisation des bases de donn\u00e9es sur des solutions plus simples \u00e0 mettre en oeuvre, mais aussi beaucoup plus limit\u00e9es comme les fichiers au format CSV.</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#le-modele-relationnel","title":"Le mod\u00e8le relationnel","text":"<p>Le programme de Terminale NSI pr\u00e9voit uniquement l'\u00e9tude du mod\u00e8le relationnel.</p> <p> Th\u00e9oris\u00e9 en 1970 par le Britannique Edgard J. Codd,  le mod\u00e8le relationnel est \u00e0 ce jour le mod\u00e8le de base de donn\u00e9es le plus utilis\u00e9, m\u00eame si l'\u00e8re actuelle du Big Data tend \u00e0 mettre en avant d'autres mod\u00e8les non relationnels (nous en reparlerons).</p> <p>Les principes de base du mod\u00e8le relationnel</p> <ul> <li>Les donn\u00e9es sont regroup\u00e9es dans diff\u00e9rentes tables (qu'on appellera plut\u00f4t relations et qui donnent son nom au mod\u00e8le). Chaque relation contient des \u00e9l\u00e9ments directement en lien avec le sujet g\u00e9n\u00e9ral de la table.</li> <li>Autant que possible, des donn\u00e9es identiques ne doivent pas se trouver dans des tables diff\u00e9rentes : on \u00e9vite la redondance des donn\u00e9es.</li> <li>Les donn\u00e9es ne doivent pas contenir elles-m\u00eames d'autres donn\u00e9es : on parle d'atomicit\u00e9 des donn\u00e9es.</li> </ul> <p>Un mod\u00e8le relationnel est donc bas\u00e9 sur des... relations.</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#premiere-relation","title":"Premi\u00e8re relation","text":"<p>Prenons l'exemple d'une biblioth\u00e8que dont la base de donn\u00e9es poss\u00e8de une relation \u00ablivres\u00bb :</p> <p>Relation \u00abLivres\u00bb </p> <p></p> <p>Vocabulaire</p> <ul> <li>relation , ou table : c'est l'endroit o\u00f9 sont rang\u00e9es les donn\u00e9es. L'ordre des lignes (que l'on appelera des enregistrements) n'a pas d'importance.</li> <li>enregistrement, ou tuple, ou n-uplet, ou t-uplet, ou vecteur : cela correspond \u00e0 une ligne du tableau, et donc un ensemble de valeurs li\u00e9es entre elles : l'auteur \u00abBradbury\u00bb a bien \u00e9crit le livre \u00abFahreneit 451\u00bb.  Il est interdit que deux enregistrements soient totalement identiques.  Le nombre d'enregistrements d'une relation s'appelle son cardinal.</li> <li>attribut : c'est l'\u00e9quivalent d'une colonne. Il y a dans notre relation un attribut \u00abcode\u00bb, un attribut \u00abTitre\u00bb, etc.</li> <li>domaine : le domaine d\u00e9signe \u00able type\u00bb (au sens type <code>Int</code>, <code>Float</code>, <code>String</code>). L'attribut \u00abAuteur\u00bb est une cha\u00eene de caract\u00e8res, par contre l'attribut \u00abcode\u00bb est un nombre. </li> <li>sch\u00e9ma : le sch\u00e9ma d'une relation est le regroupement de tous les attributs et de leur domaine respectif. Ici notre sch\u00e9ma serait <code>((Code, Entier), (Titre, Cha\u00eene de caract\u00e8res), (Auteur, Cha\u00eene de caract\u00e8res), (ann_publi, date), (note, Entier))</code> </li> </ul>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#contrainte-dintegrite-contrainte-de-domaine","title":"Contrainte d\u2019int\u00e9grit\u00e9 : Contrainte de domaine","text":"<p>Pour chaque attribut d\u2019une relation, il est n\u00e9cessaire de d\u00e9finir un domaine : Le domaine d\u2019un attribut donn\u00e9 correspond \u00e0 un ensemble fini ou infini de valeurs admissibles.  </p> <ul> <li>Par exemple, le domaine de l\u2019attribut \"code\" correspond \u00e0 l\u2019ensemble des entiers (not\u00e9 INT) : la colonne \"code\" devra obligatoirement contenir des entiers.  </li> <li>Autre exemple, le domaine de l\u2019attribut \"titre\" correspond \u00e0 l\u2019ensemble des cha\u00eenes de caract\u00e8res (not\u00e9 TEXT ou CHAR).  </li> <li>Dernier exemple, le domaine de l\u2019attribut \"note\" correspond \u00e0 l\u2019ensemble des entiers positifs.  </li> </ul> <p>Au moment de la cr\u00e9ation d\u2019une relation, il est n\u00e9cessaire de renseigner le domaine de chaque attribut. Le SGBD s\u2019assure qu\u2019un \u00e9l\u00e9ment ajout\u00e9 \u00e0 une relation respecte bien le domaine de l\u2019attribut correspondant : si par exemple vous essayez d\u2019ajouter une note non enti\u00e8re (par exemple 8.5), le SGBD signalera cette erreur et n\u2019autorisera pas l\u2019\u00e9criture de cette nouvelle donn\u00e9e.</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#contrainte-dintegrite-cle-primaire","title":"Contrainte d\u2019int\u00e9grit\u00e9 :  Cl\u00e9 Primaire","text":"<p>Cl\u00e9 primaire </p> <p>Une cl\u00e9 primaire est un attribut (ou une r\u00e9union d'attributs) dont la connaissance suffit \u00e0 identifier avec certitude un unique enregistrement.</p> <p>Par exemple, la cl\u00e9 primaire de la relation des personnes n\u00e9es en France pourrait \u00eatre leur num\u00e9ro de S\u00e9curit\u00e9 Sociale.</p> <p>Observons, dans notre relation pr\u00e9c\u00e9dente, ce qui peut \u00eatre une cl\u00e9 primaire et ce qui ne peut pas l'\u00eatre.</p> <ul> <li>Titre : cet attribut pourrait jouer le r\u00f4le de cl\u00e9 primaire. En effet, notre table ne contient pas deux livres ayant le m\u00eame titre. Mais en r\u00e9alit\u00e9, \u00e0 \u00e9viter car des livres peuvent avoir le m\u00eame nom parfois.</li> <li>Auteur : cet attribut ne pourrait pas jouer le r\u00f4le de cl\u00e9 primaire. En effet, notre table contient des livres ayant le m\u00eame auteur.</li> <li>ann_publi : cet attribut ne peut pas jouer le r\u00f4le de cl\u00e9 primaire. En effet, la donn\u00e9e de l'attribut \u00ab1951\u00bb renvoie vers plusieurs livres diff\u00e9rents.</li> <li>note : cet attribut ne peut pas jouer le r\u00f4le de cl\u00e9 primaire.</li> <li>Code : cet attribut peut jouer le r\u00f4le de cl\u00e9 primaire. En effet, notre table ne contient pas deux livre ayant le m\u00eame code.</li> </ul> <p>Alors, quelle cl\u00e9 primaire choisir ?  </p> <p>Il faut pour cela r\u00e9fl\u00e9chir \u00e0 ce que deviendrait notre relation si elle contenait 1000 livres au lieu de 10. Il est fort probable que deux livres aient alors le m\u00eame auteur : l'attribut \u00abAuteur\u00bb ne serait donc plus une cl\u00e9 primaire. Il peut arriver aussi que deux livres aient le m\u00eame titre : l'attribut \u00abTitre\u00bb n'est donc pas une bonne cl\u00e9 primaire.</p> <p>L'attribut \u00abCode\u00bb, qui correspond \u00e0 une nomenclature \u00abmaison\u00bb, c'est donc une cl\u00e9 primaire qu'on qualifiera d'\u00abartificielle\u00bb.  </p> <p>Attention, il ne peut pas y avoir deux cl\u00e9s primaires dans une table. La cl\u00e9 primaire choisie ici serait sans aucun doute l'attribut \u00abCode\u00bb.</p> <p>On note : (Code : Entier, Titre : Cha\u00eene de caract\u00e8res, Auteur : Cha\u00eene de caract\u00e8res, ann_publi : date, note : Entier)</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#contrainte-dintegrite-cle-etrangere","title":"Contrainte d\u2019int\u00e9grit\u00e9 : cl\u00e9 \u00e9trang\u00e8re","text":"<p>Ajoutons maintenant les relations ci-dessous :</p> <p>Relation \u00abEmprunts\u00bb </p> id_emprunteur date Nom Pr\u00e9nom titre auteur code 845 12/10/2020 DURAND Michel Fondation Asimov 3 125 13/10/2020 MARTIN Jean Blade Runner K.Dick 9 125 13/10/2020 MARTIN Jean De la Terre \u00e0 la Lune Verne 16 <p>Relation \u00abEmprunteurs\u00bb </p> id_emprunteur Nom Pr\u00e9nom 129 DUPOND Marcel 845 DURAND Michel 125 MARTIN Jean <p>L'attribut \u00abid_emprunteur\u00bb est une cl\u00e9 primaire de la relation \u00abEmprunteurs\u00bb.</p> <p>Notion de cl\u00e9 \u00e9trang\u00e8re </p> <p>Y-a-t-il une cl\u00e9 primaire dans la relation \u00abEmprunts\u00bb ? </p> <p>\u00abid_emprunteur\u00bb est bien une cl\u00e9 primaire (d'\u00abEmprunteurs\u00bb) mais ne peut pas \u00eatre une cl\u00e9 primaire d'\u00abEmprunts\u00bb, car une personne peut prendre plusieurs livres \u00e0 la fois : on dit que c'est une cl\u00e9 \u00e9trang\u00e8re. </p> <p>Cl\u00e9 \u00e9trang\u00e8re </p> <p>Une cl\u00e9 \u00e9trang\u00e8re est une cl\u00e9 primaire d'une autre relation.</p> <p>\u00abcode\u00bb est aussi une cl\u00e9 \u00e9trang\u00e8re : c'est une cl\u00e9 primaire (de la relation \u00ablivres\u00bb) mais elle ne peut pas jouer le r\u00f4le de cl\u00e9 primaire pour la relation emprunt, car un m\u00eame livre pourra \u00eatre pris \u00e0 diff\u00e9rentes dates.</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#redondance-des-donnees","title":"Redondance des donn\u00e9es","text":"<p>La relation \u00abEmprunts\u00bb contient des informations qui sont d\u00e9j\u00e0 disponibles dans d'autres relations : on dit qu'elle est redondante, et c'est quelque chose qu'il faut \u00e9viter. \u00c0 la fois pour des raisons d'espace de stockage mais aussi de coh\u00e9rence : si une modification doit \u00eatre faite (un emprunteur change de pr\u00e9nom), cette modification ne doit \u00eatre faite qu'\u00e0 un seul endroit de notre base de donn\u00e9es.</p> <p>Une version non-redondante de la relation \u00abEmprunteurs\u00bb serait donc celle-ci :</p> <p>Relation \u00abEmprunts\u00bb </p> id_emprunteur date code 845 12/10/2020 3 125 13/10/2020 9 125 13/10/2020 16"},{"location":"T2_BasesDonnees/Modele_Relationnel/#resume-contraintes-dintegrite","title":"R\u00e9sum\u00e9 : Contraintes d'int\u00e9grit\u00e9","text":""},{"location":"T2_BasesDonnees/Modele_Relationnel/#contrainte-de-domaine","title":"Contrainte de domaine","text":"<p>Contrainte de domaine </p> <p>Tout attribut d'un enregistrement doit respecter le domaine indiqu\u00e9 dans le sch\u00e9ma relationnel.</p> <p>Attention, certains domaines sont subtils. Par exemple, si une relation poss\u00e8de un attribut \"Code Postal\", le domaine de cet attribut devra \u00eatre <code>String</code> plut\u00f4t que <code>Entier</code> . Dans le cas contraire, un enregistrement poss\u00e9dant le code postal <code>03150</code> serait converti en <code>3150</code> (car pour les entiers, 03150 = 3150). Or le code postal <code>3150</code> n'existe pas.</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#contrainte-de-relation","title":"Contrainte de relation","text":"<p>Cl\u00e9 primaire </p> <p>La contrainte de relation impose que tout enregistrement soit unique : cette contrainte est r\u00e9alis\u00e9e par l'existence obligatoire d'une cl\u00e9 primaire. Cette cl\u00e9 primaire est souvent cr\u00e9\u00e9e de mani\u00e8re artificielle (voir <code>id_emprunteurs</code>  dans la table ci-dessus par exemple).</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#contrainte-de-reference","title":"Contrainte de r\u00e9f\u00e9rence","text":"<p>Cl\u00e9 primaire </p> <p>La coh\u00e9rence entre les diff\u00e9rentes tables d'une base de donn\u00e9es est assur\u00e9e par les cl\u00e9s \u00e9trang\u00e8res : dans une table, la valeur d'un attribut qui est cl\u00e9 \u00e9trang\u00e8re doit obligatoirement pouvoir \u00eatre retrouv\u00e9e dans la table dont cet attribut est cl\u00e9 primaire.</p> <p>Par exemple, la relation \u00abEmprunts_v2\u00bb ci-dessous n'est pas valable :</p> <p>Relation \u00abEmprunts_v2\u00bb </p> id_emprunteur date code 845 12/10/2020 3 125 13/10/2020 9 125 13/10/2020 27 <p>En effet, le code 27 (cl\u00e9 \u00e9trang\u00e8re de la table \u00abEmprunts_v2\u00bb) ne correspond \u00e0 aucun enregistrement dans la table dont il est cl\u00e9 primaire (la table \u00abLivres\u00bb) :</p> <p>Donc ma relation \u00abEmprunts_v2\u00bb ne respecte pas la contrainte de r\u00e9f\u00e9rence, et provoquerait une erreur du SGBD.</p>"},{"location":"T2_BasesDonnees/Modele_Relationnel/#representation-usuelles-des-bases-de-donnees-en-modele-relationnel","title":"Repr\u00e9sentation usuelles des bases de donn\u00e9es en mod\u00e8le relationnel","text":"<p>Consid\u00e9rons la base de donn\u00e9es Tour de France 2020, contenant les relations suivantes : (d'apr\u00e8s une id\u00e9e de Didier Boulle)</p> <p>relation \u00c9quipes</p> codeEquipe nomEquipe ALM AG2R La Mondiale AST Astana Pro Team TBM Bahrain - McLaren BOH BORA - hansgrohe CCC CCC Team COF Cofidis, Solutions Cr\u00e9dits DQT Deceuninck - Quick Step EF1 EF Pro Cycling GFC Groupama - FDJ LTS Lotto Soudal ... ... <p>Le sch\u00e9ma relationnel de cette table s'\u00e9crira souvent : Equipes ( codeEquipe <code>String</code>,  nomEquipe <code>String</code> ) </p> <p>Notez le soulignement sous le mot \u00abcodeEquipe\u00bb, qui signifie que cet attribut est une cl\u00e9 primaire.  Les cl\u00e9s \u00e9trang\u00e8res, lorsqu'elles existent, peuvent \u00eatre signal\u00e9es par une ast\u00e9risque * ou #.</p> <p>relation Coureurs</p> dossard nomCoureur pr\u00e9nomCoureur codeEquipe 141 L\u00d3PEZ Miguel \u00c1ngel AST 142 FRAILE Omar AST 143 HOULE Hugo AST 11 ROGLI\u010c Primo\u017e TJV 12 BENNETT George TJV 41 ALAPHILIPPE Julian DQT 44 CAVAGNA R\u00e9mi DQT 45 DECLERCQ Tim DQT 121 MARTIN Guillaume COF 122 CONSONNI Simone COF 123 EDET Nicolas COF \u2026 \u2026 \u2026 \u2026 <p>Sch\u00e9ma :  Equipes ( dossard <code>Int</code>,  nomCoureur <code>String</code>,  pr\u00e9nomCoureur <code>String</code>,   #codeEquipe <code>String</code> ) </p> <p>relation \u00c9tapes</p> num\u00e9roEtape villeD\u00e9part villeArriv\u00e9e km 1 Nice Nice 156 2 Nice Nice 185 3 Nice Sisteron 198 4 Sisteron Orci\u00e8res-Merlette 160 5 Gap Privas 198 ... ... ... ... <p>Sch\u00e9ma :  \u00c9tapes ( num\u00e9roEtape <code>Int</code>,  villeD\u00e9part <code>String</code>,  villeArriv\u00e9e <code>String</code>,   km <code>Int</code> ) </p> <p>relation Temps</p> dossard num\u00e9roEtape tempsR\u00e9alis\u00e9 41 2 04:55:27 121 4 04:07:47 11 5 04:21:22 122 5 04:21:22 41 4 04:08:24 ... ... ... <p>Sch\u00e9ma :  Temps ( #dossard <code>Int</code>,  #num\u00e9roEtape <code>Int</code>,  tempsR\u00e9alis\u00e9 <code>String</code>) </p> <p>Remarquez que la cl\u00e9 primaire de cette relation est le couple dossard-num\u00e9roEtape.</p> <p>Repr\u00e9sentation graphique</p> <p></p>"},{"location":"T2_BasesDonnees/index_bd/","title":"\u27a1  Th\u00e8me : Bases de donn\u00e9es","text":"<p>Le d\u00e9veloppement des traitements informatiques n\u00e9cessite la manipulation de donn\u00e9es de plus en plus nombreuses. Leur organisation et leur stockage constituent un enjeu essentiel de performance. Le recours aux bases de donn\u00e9es relationnelles est aujourd\u2019hui une solution tr\u00e8s r\u00e9pandue. Ces bases de donn\u00e9es permettent d\u2019organiser, de stocker, de mettre \u00e0 jour et d\u2019interroger des donn\u00e9es structur\u00e9es volumineuses utilis\u00e9es simultan\u00e9ment par diff\u00e9rents programmes ou diff\u00e9rents utilisateurs. Cela est impossible avec les repr\u00e9sentations tabulaires \u00e9tudi\u00e9es en classe de premi\u00e8re.</p> <p> </p> <p>Des syst\u00e8mes de gestion de bases de donn\u00e9es (SGBD) de tr\u00e8s grande taille (de l\u2019ordre du p\u00e9taoctet) sont au centre de nombreux dispositifs de collecte, de stockage et de production d\u2019informations. L\u2019acc\u00e8s aux donn\u00e9es d\u2019une base de donn\u00e9es relationnelle s\u2019effectue gr\u00e2ce \u00e0 des requ\u00eates d\u2019interrogation et de mise \u00e0 jour qui peuvent par exemple \u00eatre r\u00e9dig\u00e9es dans le langage SQL (Structured Query Language). Les traitements peuvent conjuguer le recours au langage SQL et \u00e0 un langage de programmation.</p> <p>Info</p> <p>\u25a1 Mod\u00e8le relationnel : relation, attribut, domaine, clef primaire, clef \u00e9trang\u00e8re, sch\u00e9ma relationnel  \u25a1 Base de donn\u00e9es relationnelle et SGBD. \u25a1 Langage SQL : requ\u00eates d'interrogation et de mise \u00e0 jour d'une base de donn\u00e9es  </p>"},{"location":"divers/Consigne_EP/","title":"Epreuve Pratique - Consigne","text":""},{"location":"divers/Consigne_EP/#deroulement-de-lepreuve-pratique","title":"D\u00e9roulement de l\u2019\u00e9preuve pratique","text":"<p>Chaque session d\u2019\u00e9preuve pratique dure une heure. Une fois l\u2019\u00e9preuve lanc\u00e9e, l\u2019examinateur laisse les candidats en autonomie pendant 5 \u00e0 10 minutes, puis l\u2019examinateur passe ensuite \u00e0 tour de r\u00f4le aupr\u00e8s de chaque candidat afin d\u2019installer un dialogue avec ce candidat. Durant l\u2019\u00e9preuve, l\u2019examinateur doit s\u2019adresser aux candidats en faisant preuve de discr\u00e9tion, afin de ne pas g\u00eaner les autres candidats ou afin de ne pas leur procurer une aide non demand\u00e9e.</p> <p>Chaque heure d\u2019\u00e9preuve est suivie d\u2019un quart d\u2019heure de Pr\u00e9paration/Accueil. Durant ce quart d\u2019heure :  </p> <ul> <li>l\u2019examinateur remplit les fiches d\u2019\u00e9valuation individuelles des candidats ;  </li> <li>le r\u00e9f\u00e9rent informatique installe sur les postes les nouveaux sujets ;  </li> <li>l\u2019examinateur accueille les candidats de la session suivante, v\u00e9rifie leur identit\u00e9 et leur fait signer la feuille d\u2019\u00e9margement.</li> </ul>"},{"location":"divers/Consigne_EP/#evaluation-du-candidat","title":"Evaluation du candidat","text":""},{"location":"divers/Consigne_EP/#grille-devaluation","title":"Grille d\u2019\u00e9valuation","text":"<p>Lors de l\u2019\u00e9valuation, il est attendu une \u00e9valuation pr\u00e9cise des comp\u00e9tences qui peut prendre appui sur l\u2019exemple de grille d\u2019\u00e9valuation de la note de service du 16-3-2021 jointe en annexe 1. Cette grille est un exemple de grille de comp\u00e9tence pour aider les examinateurs ; elle n'a aucun caract\u00e8re prescriptif . Chaque exercice est not\u00e9 sur 4 points et doit faire l'objet d'une notation. Les notes des deux exercices sont exprim\u00e9es \u00e0 0,5 point pr\u00e9s. Pour chaque exercice, le professeur examinateur peut attribuer au candidat des notes du types 3 \u2013 3,5 \u2013 4 mais pas 3,75. La note sur 8 points attribu\u00e9e au candidat est la somme de ces deux notes. Cette somme est laiss\u00e9e telle quelle sans \u00eatre arrondie. Par exemple, un candidat qui a obtenue 3 points sur 4 au premier exercice et 3,5 points sur 4 au deuxi\u00e8me exercice se voit attribu\u00e9 la note de 6,5 points sur 8. L'aspect oral fait pleinement partie de l'\u00e9preuve pratique. Il est donc conseill\u00e9 de poser une ou plusieurs questions sur le code pour chaque exercice. Concernant la notation des exercices, il est recommand\u00e9 d'appliquer le bar\u00e8me suivant : - 3 points pour la programmation - 1 point pour l'expression orale.  </p> <p>Pour la programmation, il faut donner a minima 2,5 points si le code est coh\u00e9rent m\u00eame si le programme ne \u00ab tourne \u00bb pas. </p> <p></p>"},{"location":"divers/EP_2022/","title":"Epreuve Pratique 2022","text":"Th\u00e8me  : Epreuve Pratique                           22              TD : Sujet E.P 2022"},{"location":"divers/EP_2022/#sujet-01","title":"Sujet 01","text":"<p>Exercice  01.1</p> Enonc\u00e9 <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> Correction \ud83d\udc0d Script Python<pre><code>def nb_occurrences(caractere, mot):\n    nb_occ = 0\n    for lettre in mot:\n        if lettre == caractere:\n            nb_occ += 1\n    return nb_occ\n</code></pre> <p>ou  \ud83d\udc0d Script Python<pre><code>def nb_occurrences(caractere, mot):\n    nb_occ = 0\n    for i in range(len(mot)):\n        if mot[i] == caractere:\n            nb_occ += 1\n    return nb_occ\n</code></pre></p>"},{"location":"divers/EpreuvePratique/","title":"\u00c9preuve pratique \ud83d\udcbb","text":"<p>Vous trouverez ci-dessous un s\u00e9rie de sujets de l'\u00e9preuve pratique, disponibles publiquement sur la Banque Nationale des Sujets (novembre 2021). </p> <p>Une nouvelle version (qui sera a priori en grande partie semblable \u00e0 celle-ci) sera publi\u00e9e en janvier 2022 sur le site Eduscol.</p>"},{"location":"divers/EpreuvePratique/#exercice-041","title":"Exercice 04.1 \ud83d\uddf9","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1,2,3,4,5,6,7] == 4\nassert moyenne([1,2]) == 1.5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-042","title":"Exercice 04.2 \ud83d\uddf9","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9Correction <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide.</p> <p>L'algorithme est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False,1</code> , <code>False,2</code> et <code>False,3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False,2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if tab = []:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False,2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-051","title":"Exercice 05.1 \ud83d\uddf9","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9Correction <p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(T):\n\"\"\"\n    T est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau T\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def convertir(T):\n    puissance = 0\n    total = 0\n    for i in range(len(T)-1, -1, -1):\n        total += T[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-052","title":"Exercice 05.2 \ud83d\uddf9","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>L</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n\n    # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_insertion([2,5,-1,7,0,28])\n[-1, 0, 2, 5, 7, 28]\n&gt;&gt;&gt; tri_insertion([10,9,8,7,6,5,4,3,2,1,0])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if L == []:\n        return L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; e:\n            i = i - 1\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,-1):\n                L[k] = L[k-1]\n            L[i] = e\n    return L\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-061","title":"Exercice 06.1 \ud83d\uddf9","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse au probl\u00e8me du rendu de monnaie. On suppose qu\u2019on dispose d\u2019un nombre infini de billets de 5 euros, de pi\u00e8ces de 2 euros et de pi\u00e8ces de 1 euro. Le but est d\u2019\u00e9crire une fonction nomm\u00e9e <code>rendu</code> dont le param\u00e8tre est un entier positif non nul <code>somme_a_rendre</code> et qui retourne une liste de trois entiers <code>n1</code>, <code>n2</code> et <code>n3</code> qui correspondent aux nombres de billets de 5 euros (<code>n1</code>) de pi\u00e8ces de 2 euros (<code>n2</code>) et de pi\u00e8ces de 1 euro (<code>n3</code>) \u00e0 rendre afin que le total rendu soit \u00e9gal \u00e0 <code>somme_a_rendre</code>.</p> <p>On utilisera un algorithme glouton : on commencera par rendre le nombre maximal de billets de 5 euros, puis celui des pi\u00e8ces de 2 euros et enfin celui des pi\u00e8ces de 1 euros.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(13)\n[2,1,1]\n&gt;&gt;&gt; rendu(64)\n[12,2,0]\n&gt;&gt;&gt; rendu(89)\n[17,2,0]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    pieces = [5, 2, 1]\n    retour = [0, 0, 0]\n    reste_a_rendre = somme_a_rendre\n    for i in range(3):\n        retour[i] = reste_a_rendre // pieces[i]\n        reste_a_rendre = reste_a_rendre % pieces[i]\n    return retour\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-062","title":"Exercice 06.2 \ud83d\uddf9","text":"<p>\u00e0 noter une erreur dans la version officielle, sur la m\u00e9thode <code>enfile()</code> </p> <p>Exercice 06.2</p> \u00c9nonc\u00e9Correction <p>On veut \u00e9crire une classe pour g\u00e9rer une file \u00e0 l\u2019aide d\u2019une liste cha\u00een\u00e9e. On dispose d\u2019une classe <code>Maillon</code> permettant la cr\u00e9ation d\u2019un maillon de la cha\u00eene, celui-ci \u00e9tant constitu\u00e9 d\u2019une valeur et d\u2019une r\u00e9f\u00e9rence au maillon suivant de la cha\u00eene :</p> <p>\ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</code></pre> Compl\u00e9ter la classe <code>File suivante</code> o\u00f9 l\u2019attribut <code>dernier_file</code> contient le maillon correspondant \u00e0 l\u2019\u00e9l\u00e9ment arriv\u00e9 en dernier dans la file :</p> <p>\ud83d\udc0d Script Python<pre><code>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...)\n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> On pourra tester le fonctionnement de la classe en utilisant les commandes suivantes dans la console Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; F = File()\n&gt;&gt;&gt; F.est_vide()\nTrue\n&gt;&gt;&gt; F.enfile(2)\n&gt;&gt;&gt; F.affiche()\n2\n&gt;&gt;&gt; F.est_vide()\nFalse\n&gt;&gt;&gt; F.enfile(5)\n&gt;&gt;&gt; F.enfile(7)\n&gt;&gt;&gt; F.affiche()\n7\n5\n2\n&gt;&gt;&gt; F.defile()\n2\n&gt;&gt;&gt; F.defile()\n5\n&gt;&gt;&gt; F.affiche()\n7\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n\nclass File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(element)\n        nouveau_maillon.suivant =  self.dernier_file\n        self.dernier_file = nouveau_maillon\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != None :\n            print(maillon.valeur)\n            maillon = maillon.suivant\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = self.dernier_file\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = maillon.suivant.valeur\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-071","title":"Exercice 07.1 \ud83d\uddf9","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par <code>U1 = 1</code>, <code>U2 = 1</code> et, pour tout entier naturel <code>n</code>, par <code>Un+2 = Un+1 + Un</code>.</p> <p>Elle s\u2019appelle la suite de Fibonacci.</p> <p>\u00c9crire la fonction <code>fibonacci</code> qui prend un entier <code>n &gt; 0</code> et qui renvoie l\u2019\u00e9l\u00e9ment d\u2019indice <code>n</code> de cette suite.</p> <p>On utilisera une programmation dynamique (pas de r\u00e9cursivit\u00e9).</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre> <p>On utilise un dictionnaire pour stocker au fur et \u00e0 mesure les valeurs. \ud83d\udc0d Script Python<pre><code>def fibonnaci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre></p>"},{"location":"divers/EpreuvePratique/#exercice-072","title":"Exercice 07.2 \ud83d\uddf9","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9Correction <p>Les variables <code>liste_eleves</code> et <code>liste_notes</code> ayant \u00e9t\u00e9 pr\u00e9alablement d\u00e9finies et \u00e9tant de m\u00eame longueur, la fonction <code>meilleures_notes</code> renvoie la note maximale qui a \u00e9t\u00e9 attribu\u00e9e, le nombre d\u2019\u00e9l\u00e8ves ayant obtenu cette note et la liste des noms de ces \u00e9l\u00e8ves.</p> <p>Compl\u00e9ter le code Python de la fonction <code>meilleures_notes</code> ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi = ...\n\n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> <p>Une fois compl\u00e9t\u00e9, le code ci-dessus donne</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; meilleures_notes()\n(80, 3, ['c', 'f', 'h'])\n</code></pre> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = 0\n    liste_maxi = []\n\n    for compteur in range(len(liste_eleves)):\n        if liste_notes[compteur] == note_maxi:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[compteur])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = 1\n            liste_maxi = [liste_eleves[compteur]]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-081","title":"Exercice 08.1 \ud83d\uddf9","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(caractere, mot):\n    somme = 0\n    for lettre in mot:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-082","title":"Exercice 08.2 \ud83d\uddf9","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets - le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>pieces=[100, 50, 20, 10, 5, 2, 1]</code> - (on supposera qu\u2019il n\u2019y a pas de limitation quant \u00e0 leur nombre), on cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre pour une somme donn\u00e9e en argument. Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> <p>\ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(68,[],0)\n[50, 10, 5, 2, 1]\n&gt;&gt;&gt;rendu_glouton(291,[],0)\n[100, 100, 50, 20, 20, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, i+1)\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-151","title":"Exercice 15.1 \ud83d\uddf9","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>rechercheMinMax</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9s <code>tab</code>, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s \u2018min\u2019 et \u2018max\u2019. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rechercheMinMax(tab):\n    if tab==[]:\n        return {'min': None, 'max': None}\n    else:\n        d = {}\n        d['min'] = tab[0]\n        d['max'] = tab[0]\n        for val in tab:\n            if val &lt; d['min']:\n                d['min'] = val\n            if val &gt; d['max']:\n                d['max'] = val\n        return d\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-152","title":"Exercice 15.2 \ud83d\uddf9","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019un programme permettant de cr\u00e9er un objet de type <code>PaquetDeCarte</code>, selon les \u00e9l\u00e9ments indiqu\u00e9s dans le code ci-dessous. Compl\u00e9ter ce code aux endroits indiqu\u00e9s par <code>#A compl\u00e9ter</code>, puis ajouter des assertions dans l\u2019initialiseur de <code>Carte</code>, ainsi que dans la m\u00e9thode <code>getCarteAt()</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str(self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        #A compl\u00e9ter\n\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        #A compl\u00e9ter\n</code></pre> Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; unPaquet = PaquetDeCarte()\n&gt;&gt;&gt; unPaquet.remplir()\n&gt;&gt;&gt; uneCarte = unPaquet.getCarteAt(20)\n&gt;&gt;&gt; print(uneCarte.getNom() + \" de \" + uneCarte.getCouleur())\n8 de carreau\n</code></pre> <p>Attention, le code propos\u00e9 ne respecte pas les standards de notation :</p> <ul> <li>il ne faut pas de majuscules sur les noms des attributs</li> <li>la docstring se place \u00e0 l'int\u00e9rieur de la fonction et non au dessus.</li> </ul> \ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        assert c in range(1,5)\n        assert v in range(1,14)\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        for nb_coul in range(1,5):\n            for val in range(1,14):\n                self.contenu.append(Carte(nb_coul, val))\n\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        assert pos&lt;52,'erreur position'\n        return self.contenu[pos]\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-191","title":"Exercice 19.1 \ud83d\uddf9","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>. Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-192","title":"Exercice 19.2 \ud83d\uddf9","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9Correction <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019\u2026) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve et <code>-1</code> sinon. La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if lettre in ALPHABET:\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !',4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !',-5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for lettre in message:\n        if lettre in ALPHABET:\n            indice = (position_alphabet(lettre) + decalage) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = resultat + lettre\n    return resultat\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-201","title":"Exercice 20.1 \ud83d\uddf9","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9Correction <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres le tableau <code>releve</code> des relev\u00e9s et le tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-202","title":"Exercice 20.2 \ud83d\uddf9","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9Correction <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ''\n    for caractere in chaine:\n        result = caractere + result\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse\n\ndef est_nbre_palindrome(nbre):\n    chaine = str(nbre)\n    return est_palindrome(chaine)\n</code></pre>"},{"location":"divers/EpreuvePratique/#exercice-291","title":"Exercice 29.1 \ud83d\uddf9","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9Correction <p>Soit un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 1 :</p> <ul> <li>s'il est pair, on le divise par 2 ;</li> <li>s\u2019il est impair, on le multiplie par 3 et on ajoute 1.</li> </ul> <p>Puis on recommence ces \u00e9tapes avec le nombre entier obtenu, jusqu\u2019\u00e0 ce que l\u2019on obtienne la valeur 1.</p> <p>On d\u00e9finit ainsi la suite \\((U_n)\\) par :</p> <ul> <li>\\(U_0=k\\), o\u00f9 \\(k\\) est un entier choisi initialement;</li> <li>\\(U_{n+1} = \\dfrac{U_n}{2}\\) si \\(U_n\\) est pair;</li> <li>\\(U_{n+1} = 3 \\times U_n + 1\\) si \\(U_n\\) est impair.</li> </ul> <p>On admet que, quel que soit l'entier <code>k</code> choisi au d\u00e9part, la suite finit toujours sur la valeur 1.</p> <p>\u00c9crire une fonction <code>calcul</code> prenant en param\u00e8tres un entier <code>n</code> strictement positif et qui renvoie la liste des valeurs de la suite, en partant de <code>n</code> et jusqu'\u00e0 atteindre 1.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; calcul(7)\n[7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n</code></pre></p>"},{"location":"divers/EpreuvePratique/#exercice-292","title":"Exercice 29.2 \ud83d\uddf9","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9Correction <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n[50, 1612112, False]\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n[37, 1121914, True]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = 0\n    for c in mot :\n        code_c = code_c + str(dico[c])\n        code_a = code_a + dico[c]\n    code_c = int(code_c)\n    if code_c % code_a == 0:\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre>"},{"location":"divers/Exercice_Bac_2_Correction/","title":"TD n\u00b021 - Exercices BAC 2","text":"Th\u00e8me  : BAC                           22              TD : Exercices Divers BAC - Programmation Sujet  4 :  la programmation en g\u00e9n\u00e9ral et la r\u00e9cursivit\u00e9 en particulier.  <p>On consid\u00e8re un tableau de nombres de \\(n\\) lignes et \\(p\\) colonnes. Les lignes sont num\u00e9rot\u00e9es de 0 \u00e0 \\(n-1\\) et les colonnes sont num\u00e9rot\u00e9es de 0 \u00e0 \\(p-1\\). La case en haut \u00e0 gauche est rep\u00e9r\u00e9e par (0, 0) et la case en bas \u00e0 droite par \\((n - 1, p - 1)\\). On appelle chemin une succession de cases allant de la case (0, 0) \u00e0 la case \\((n - 1, p - 1)\\), en n\u2019autorisant que des d\u00e9placements case par case : soit vers la droite, soit vers le bas. On appelle somme d\u2019un chemin la somme des entiers situ\u00e9s sur ce chemin. Par exemple, pour le tableau T suivant :</p> <p></p> <ul> <li>Un chemin est (0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 3) (en gras sur le tableau) ;  </li> <li>La somme du chemin pr\u00e9c\u00e9dent est 14.  </li> <li>(0, 0), (0, 2), (2, 2), (2, 3) n\u2019est pas un chemin.</li> </ul> <p>L\u2019objectif de cet exercice est de d\u00e9terminer la somme maximale pour tous les chemins possibles allant de la case (0, 0) \u00e0 la case \\((n - 1, p - 1)\\).  </p> <p>Question 1</p> Enonc\u00e9Solution 1.1Solution 1.2 <p>On consid\u00e8re tous les chemins allant de la case (0, 0) \u00e0 la case (2, 3) du tableau T donn\u00e9 en exemple.</p> <ol> <li>Un tel chemin comprend n\u00e9cessairement 3 d\u00e9placements vers la droite. Combien de d\u00e9placements vers le bas comprend-il ?  </li> <li>La longueur d\u2019un chemin est \u00e9gal au nombre de cases de ce chemin. Justifier que tous les chemins allant de (0, 0) \u00e0 (2, 3) ont une longueur \u00e9gale \u00e0 6.</li> </ol> <p>Le chemin comprend 2 d\u00e9placements vers le bas</p> <p>Sachant que les d\u00e9placements en diagonale ne sont pas autoris\u00e9s, il faudra obligatoirement se d\u00e9placer 3 fois vers la droite (parcours 4 cases) et 2 fois vers le bas (parcours 2 cases suppl\u00e9mentaires) quel que soit l\u2019ordre de ces d\u00e9placements. On aura donc bien un chemin de longueur \u00e9gale \u00e0 6 quel que soit le chemin emprunt\u00e9.</p> <p>Question 2</p> Enonc\u00e9Solution <p>En listant tous les chemins possibles allant de (0, 0) \u00e0 (2, 3) du tableau T, d\u00e9terminer un chemin qui permet d\u2019obtenir la somme maximale et la valeur de cette somme.</p> <p> avec le parcours 0,0 -&gt; 1,0 -&gt; 2,0 -&gt; 2,1 -&gt; 2,2 -&gt; 2,3 on obtient la somme 4 + 2 + 3 + 1 + 5 + 1 = 16 qui est la somme maximale.</p> <p>Question 3</p> Enonc\u00e9Solution 3.1Solution 3.2 <p>On veut cr\u00e9er le tableau <code>T\u2019</code> o\u00f9 chaque \u00e9l\u00e9ment <code>T\u2019[i][j]</code> est la somme maximale pour tous les chemins possibles allant de (0, 0) \u00e0 \\((i, j)\\).  </p> <ol> <li>Compl\u00e9ter et recopier sur votre copie le tableau <code>T\u2019</code> donn\u00e9 ci-dessous associ\u00e9 au tableau  </li> </ol> <p></p> <ol> <li>Justifier que si \\(j\\) est diff\u00e9rent de 0, alors : <code>T\u2019[0][j] = T[0][j] + T\u2019[0][j-1]</code> </li> </ol> <p></p> <p>La somme obtenue \u00e0 la colonne \\(j\\) est \u00e9gale \u00e0 la somme obtenue \u00e0 la colonne \\(j-1\\) (\u00e0 gauche de \\(j\\)) plus la valeur de la case \\(0,j\\) (puisque l\u2019on peut uniquement aller \u00e0 droite) d\u2019o\u00f9 <code>T'[0][j] = T[0][j] + T'[0][j-1]</code></p> <p>Question 4</p> Enonc\u00e9Solution <p>Justifier que si \\(i\\) et \\(j\\) sont diff\u00e9rents de 0, alors : <code>T\u2019[i][j] = T[i][j] + max(T\u2019[i-1][j], T\u2019[i][j-1])</code>.  </p> <p>Quand on se trouve \u00e0 la case \\((i,j)\\), on vient :  </p> <ul> <li>soit de la case \\((i-1,j)\\) (case situ\u00e9e au-dessus de \\((i,j)\\)),  </li> <li> <p>soit de la case \\((i, j-1)\\) (case situ\u00e9e \u00e0 gauche de \\((i,j)\\)).  Donc on doit ajouter \u00e0 la valeur de la case <code>T[i][j]</code> </p> </li> <li> <p>soit la somme obtenue \u00e0 la case \\((i-1,j)\\),  </p> </li> <li>soit la somme obtenue \u00e0 la case \\((i, j-1)\\) (on prendra la somme maximum).  d\u2019o\u00f9 : <code>T'[i][j] = T[i][j] + max(T'[i-1][j], T'[i][j-1])</code></li> </ul> <p>Question 5</p> Enonc\u00e9Solution 5.1Solution 5.2Solution 5.3 <p>On veut cr\u00e9er la fonction r\u00e9cursive somme_max ayant pour param\u00e8tres un tableau T, un entier \\(i\\) et un entier \\(j\\). Cette fonction renvoie la somme maximale pour tous les chemins possibles allant de la case (0, 0) \u00e0 la case \\((i, j)\\).  </p> <ol> <li>Quel est le cas de base, \u00e0 savoir le cas qui est trait\u00e9 directement sans faire appel \u00e0 la fonction somme_max ? Que renvoie-t-on dans ce cas ?  </li> <li>\u00c0 l\u2019aide de la question pr\u00e9c\u00e9dente, \u00e9crire en Python la fonction r\u00e9cursive <code>somme_max</code> .  </li> <li>Quel appel de fonction doit-on faire pour r\u00e9soudre le probl\u00e8me initial ?  </li> </ol> <p>Le cas de base est le cas o\u00f9 i = 0 et j = 0, on renvoie alors la valeur <code>T[0][0]</code></p> \ud83d\udc0d Script Python<pre><code>def somme_max(T,i,j):\n    if i==0 and j==0:\n        return T[0][0]\n    else :\n        if i==0:\n            return T[0][j]+somme_max(T,0,j-1)\n        elif j==0:\n            return T[i][0]+somme_max(T,i-1,0)\n        else:\n            return T[i][j]+max(somme_max(T,i-1,j), somme_max(T,i,j-1))\n</code></pre> <p>Pour r\u00e9soudre le probl\u00e8me initial, on doit effectuer l\u2019appel suivant : <code>somme_max(T, 2, 3)</code></p> Sujet  5 :  la programmation en g\u00e9n\u00e9ral et la r\u00e9cursivit\u00e9 en particulier.  <p>Cet exercice porte sur la programmation en g\u00e9n\u00e9ral et la r\u00e9cursivit\u00e9 en particulier.</p> <p>On s\u2019int\u00e9resse dans cet exercice \u00e0 un algorithme de m\u00e9lange des \u00e9l\u00e9ments d\u2019une liste.</p> <p>Question 1.</p> Enonc\u00e9Solution <p>Pour la suite, il sera utile de disposer d'une fonction echange qui permet d'\u00e9changer dans une liste lst les \u00e9l\u00e9ments d'indice <code>i1</code> et <code>i2</code>. Expliquer pourquoi le code Python ci-dessous ne r\u00e9alise pas cet \u00e9change et en proposer une modification.</p> \ud83d\udc0d Script Python<pre><code>def echange(lst, i1, i2):\n    lst[i2] = lst[i1]\n    lst[i1] = lst[i2]\n</code></pre> <p>Prenons un exemple o\u00f9 au d\u00e9part on a : <code>lst[i1] = 3</code> et <code>lst[2] = 8</code> Apr\u00e8s la ligne <code>lst[i2] = lst[i1]</code>, nous avons <code>lst[i2] = 3</code> Apr\u00e8s la ligne <code>lst[i1] = lst[i2]</code>, nous avons <code>lst[i1] = 3</code> Le r\u00e9sultat attendu \u00e9tait <code>lst[i1] = 8</code> et <code>lst[2] = 3</code>, le r\u00e9sultat obtenu est <code>lst[i1] = 3</code> et <code>lst[2] = 3</code>, le code Python propos\u00e9 ne r\u00e9alise pas l\u2019\u00e9change attendu. Il faut utiliser une variable temporaire pour que cela fonctionne : \ud83d\udc0d Script Python<pre><code>temp = lst[i2]\nlst[i2] = lst[i1]\nlst[i1] = temp\n</code></pre></p> <p>Question 2.</p> Enonc\u00e9Solution <p>La documentation du module random de Python fournit les informations cidessous concernant la fonction randint(a,b) : \ud83d\udc0d Script Python<pre><code>Renvoie un entier al\u00e9atoire N tel que a &lt;= N &lt;= b. Alias pour randrange(a,b+1).\n</code></pre> Parmi les valeurs ci-dessous, quelles sont celles qui peuvent \u00eatre renvoy\u00e9es par l'appel randint(0, 10) ?  </p> <p>\u25a1 0  \u25a1 1  \u25a1 3.5  \u25a1 9  \u25a1 10  \u25a1 11</p> <p>Les valeurs qui pourront \u00eatre renvoy\u00e9es par randint(0, 10) sont : 0, 1, 9 et 10</p> <p>Question 3.</p> Enonc\u00e9Solution 3.aSolution 3.bSolution 3.cSolution 3.d <p>Le m\u00e9lange de Fischer Yates est un algorithme permettant de permuter al\u00e9atoirement les \u00e9l\u00e9ments d'une liste. On donne ci-dessous une mise en \u0153uvre r\u00e9cursive de cet algorithme en Python.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef melange(lst, ind):\n    print(lst)\n    if ind &gt; 0:\n        j = randint(0, ind)\n        echange(lst, ind, j)\n        melange(lst, ind-1)\n</code></pre> <p>a. Expliquer pourquoi la fonction <code>melange</code> se termine toujours. b. Lors de l\u2019appel de la fonction <code>melange</code>, la valeur du param\u00e8tre <code>ind</code> doit \u00eatre \u00e9gal au plus grand indice possible de la liste <code>lst</code>. Pour une liste de longueur \u074a, quel est le nombre d'appels r\u00e9cursifs de la fonction <code>melange</code> effectu\u00e9s, sans compter l\u2019appel initial ? c. On consid\u00e8re le script ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>lst = [v for v in range(5)]\nmelange(lst, 4)\n</code></pre> <p>On suppose que les valeurs successivement renvoy\u00e9es par la fonction <code>randint</code> sont 2, 1, 2 et 0.</p> <p>Les deux premiers affichages produits par l'instruction <code>print(lst)</code> de la fonction <code>melange</code> sont : \ud83d\udccb Texte<pre><code>[0, 1, 2, 3, 4]\n[0, 1, 4, 3, 2]\n</code></pre> Donner les affichages suivants produits par la fonction melange. d. Proposer une version it\u00e9rative du m\u00e9lange de Fischer Yates. </p> <p>Nous avons un appel r\u00e9cursif avec melange(lst, ind-1). \u00c0 chaque appel r\u00e9cursif on soustrait 1 au param\u00e8tre ind. Au bout d\u2019un certain nombre d\u2019appels r\u00e9cursifs, le param\u00e8tre sera \u00e9gal \u00e0 0, les instructions \u201ccontenues\u201d dans le \u201cif\u201d (if ind&gt;0) ne seront plus ex\u00e9cut\u00e9es et le programme s'arr\u00eatera.</p> <p>Pour l\u2019appel initial de la fonction nous avons ind = n-1. Pour le premier appel r\u00e9cursif nous avons ind = n-2. Pour le dernier appel r\u00e9cursif nous avons ind = 0, nous avons donc eu n-1 appels r\u00e9cursifs.</p> <p></p> \ud83d\udc0d Script Python<pre><code>def melange(lst):\n    ind = len(lst)-1\n    while ind &gt; 0 :\n        j = randint(0, ind)\n        echange (lst, ind, j)\n        ind = ind - 1\n</code></pre> Sujet  6 :  la programmation objet.  <p>Cryptage selon le \u00ab Code de C\u00e9sar \u00bb</p> <p>Dans cet exercice, on \u00e9tudie une m\u00e9thode de chiffrement de cha\u00eenes de caract\u00e8res alphab\u00e9tiques. Pour des raisons historiques, cette m\u00e9thode de chiffrement est appel\u00e9e \"code de C\u00e9sar\". On consid\u00e8re que les messages ne contiennent que les lettres capitales de l\u2019alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" et la m\u00e9thode de chiffrement  utilise un nombre entier fix\u00e9 appel\u00e9 la cl\u00e9 de chiffrement.</p> <p>Question 1.</p> Enonc\u00e9Solution <p>Soit la classe CodeCesar d\u00e9finie ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>class CodeCesar:\n    def __init__(self, cle): \n        self.cle = cle\n        self.alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    def decale(self, lettre):\n        num1 = self.alphabet.find(lettre)\n        num2 = num1+self.cle\n        if num2 &gt;= 26:\n            num2 = num2-26\n        if num2 &lt; 0:\n            num2 = num2+26\n            nouvelle_lettre = self.alphabet[num2]\n        return nouvelle_lettre\n</code></pre> <p>On rappelle que la m\u00e9thode str.find(lettre) renvoie l'indice (index) de la lettre dans la cha\u00eene de caract\u00e8res str  Repr\u00e9senter le r\u00e9sultat d\u2019ex\u00e9cution du code Python suivant : </p> \ud83d\udc0d Script Python<pre><code>code1 = CodeCesar(3)\nprint(code1.decale('A'))\nprint(code1.decale('X'))\n</code></pre> <p>R\u00e9sultat d\u2019ex\u00e9cution : D A  </p> <p>Question 2.</p> Enonc\u00e9Solution <p>La m\u00e9thode de chiffrement du \u00ab code C\u00e9sar \u00bb consiste \u00e0 d\u00e9caler les lettres du message dans l\u2019alphabet d'un nombre de rangs fix\u00e9 par la cl\u00e9. Par exemple, avec la cl\u00e9 3, toutes les lettres sont d\u00e9cal\u00e9es de 3 rangs vers la droite : le A devient le D, le B devient le E, etc.  Ajouter une m\u00e9thode cryptage(self, texte) dans la classe CodeCesar d\u00e9finie \u00e0 la question pr\u00e9c\u00e9dente, qui re\u00e7oit en param\u00e8tre une cha\u00eene de caract\u00e8res (le message \u00e0 crypter) et qui retourne une cha\u00eene de caract\u00e8res (le message crypt\u00e9).  </p> <p>Cette m\u00e9thode cryptage(self, texte) doit crypter la cha\u00eene texte avec la cl\u00e9 de l'objet de la classe CodeCesar qui a \u00e9t\u00e9 instanci\u00e9. Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; code1 = CodeCesar(3)\n&gt;&gt;&gt; code1.cryptage(\"NSI\")\n'QVL'\n</code></pre> \ud83d\udc0d Script Python<pre><code>def cryptage(self,texte):\n    c = \"\"\n    for lettre in texte:\n        c = c + self.decale(lettre)\n    return c\n</code></pre> <p>Question 3.</p> Enonc\u00e9Solution <p>Ecrire un programme qui : </p> <ul> <li>demande de saisir la cl\u00e9 de chiffrement  </li> <li>cr\u00e9e un objet de classe CodeCesar  </li> <li>demande de saisir le texte \u00e0 chiffrer  </li> <li>affiche le texte chiffr\u00e9 en appelant la m\u00e9thode cryptage</li> </ul> \ud83d\udc0d Script Python<pre><code>cle = input(\"saisir la cl\u00e9 de chiffrement : \")\ncle = int(cle)\nc = CodeCesar(cle)\ntxt = input(\"saisir le texte \u00e0 chiffrer : \")\nprint(\"le message chiffr\u00e9 est : \"+c.cryptage(txt))\n</code></pre> <p>Question 4.</p> Enonc\u00e9Solution <p>On ajoute la m\u00e9thode <code>transforme(texte)</code> \u00e0 la classe <code>CodeCesar</code> :       </p> \ud83d\udc0d Script Python<pre><code>def transforme(self, texte):\n    self.cle = -self.cle\n    message = self.cryptage(texte)\n    self.cle = -self.cle\n    return message\n</code></pre> <p>On ex\u00e9cute la ligne suivante : <code>print(CodeCesar(10).transforme(\"PSX\"))</code> </p> <p>Que va-t-il s\u2019afficher ? Expliquer votre r\u00e9ponse. </p> <p>La ligne <code>print(CodeCesar(10).transforme(\"PSX\"))</code> va permettre d\u2019afficher FIN</p> Sujet  7 : programmation Python, tuples et listes.  <p>L\u2019objectif de cet exercice est de mettre en place une mod\u00e9lisation d\u2019un jeu de labyrinthe en langage Python.  </p> <p>On d\u00e9cide de repr\u00e9senter un labyrinthe par un tableau carr\u00e9 de taille n, dans lequel les cases seront des 0 si l\u2019on peut s\u2019y d\u00e9placer et des 1 s\u2019il s\u2019agit d\u2019un mur.   Voici un exemple de repr\u00e9sentation d\u2019un labyrinthe : </p> <p></p> <p>L\u2019entr\u00e9e du labyrinthe se situe \u00e0 la premi\u00e8re case du tableau (celle en haut \u00e0 gauche) et la sortie du labyrinthe se trouve \u00e0 la derni\u00e8re case (celle en bas \u00e0 droite).</p> <p>Question 1.</p> Enonc\u00e9Solution <p>Proposer, en langage Python, une fonction mur, prenant en param\u00e8tre un tableau repr\u00e9sentant un labyrinthe et deux entiers \\(i\\) et \\(j\\) compris entre 0 et <code>n1</code> et qui renvoie un bool\u00e9en indiquant la pr\u00e9sence ou non d\u2019un mur. Par exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;mur(laby, 2, 3)\nTrue\n&gt;&gt;mur(laby, 1, 8)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def mur(l,i,j):\n    return l[i][j]==1\n</code></pre> <p>Un parcours dans le labyrinthe va \u00eatre repr\u00e9sent\u00e9 par une liste de cases. Il s\u2019agit de couples (i,j) o\u00f9 i et j correspondent respectivement aux num\u00e9ros de ligne et de colonne des cases successivement visit\u00e9es au long du parcours. Ainsi, la liste suivante  <code>[(1,4),(1,5),(1,6),(2,6),(3,6),(3,5),(3,4)]</code> correspond au parcours rep\u00e9r\u00e9 par des \u00e9toiles ci-dessous : </p> <p></p> <p>La liste <code>[(0,0),(1,0),(1,1),(5,1),(6,1)]</code> ne peut correspondre au parcours d\u2019un labyrinthe car toutes les cases parcourues successivement ne sont pas adjacentes.  </p> <p>Question 2.</p> Enonc\u00e9Solution 2.a <p>On consid\u00e8re la fonction voisine ci-dessous, \u00e9crite en langage Python, qui prend en param\u00e8tres deux cases donn\u00e9es sous forme de couple. \ud83d\udc0d Script Python<pre><code>def voisine(case1, case2) :\n    l1, c1 = case1\n    l2, c2 = case2\n    # on vous rappelle que **2 signifie puissance 2\n    d = (l1-l2)**2 + (c1-c2)**2\n    return (d == 1)\n</code></pre></p> <p>2.a. Apr\u00e8s avoir remarqu\u00e9 que les quantit\u00e9s l1-l2 et c1-c2 sont des entiers, expliquer pourquoi la fonction voisine indique si deux cases donn\u00e9es sous forme de tuples <code>(l,c)</code> sont adjacentes. 2.b. En d\u00e9duire une fonction adjacentes qui re\u00e7oit une liste de cases et renvoie un bool\u00e9en indiquant si la liste des cases forme une cha\u00eene de cases adjacentes. </p> <p>La variable d repr\u00e9sente le carr\u00e9 de la distance entre entre les cases case1 et case2. Deux cases adjacentes ont une distance \u00e9gale \u00e0 1. Donc d==1 (et donc la fonction voisine) renvoie True si case1 et case2 sont adjacentes et False dans le cas contraire. Un parcours sera qualifi\u00e9 de compatible avec le labyrinthe lorsqu\u2019il s\u2019agit d\u2019une succession de cases adjacentes accessibles (non mur\u00e9es). On donne la fonction <code>teste(cases, laby)</code> qui indique si le chemin cases est un chemin possible compatible avec le labyrinthe laby : \ud83d\udc0d Script Python<pre><code>def teste(cases, laby) :\n    if not adjacentes(cases) :\n        return False\n    possible = True\n    i = 0\n    while i &lt; len(cases) and possible:\n        if mur(laby, cases[i][0], cases[i][1]) :\n            possible = False\n            i = i + 1\n    return possible\n</code></pre></p> <p>Question 3.</p> <p>Justifier que la boucle de la fonction pr\u00e9c\u00e9dente se termine.</p> <p>Question 4.</p> <p>En d\u00e9duire une fonction <code>echappe(cases, laby)</code> qui indique par un bool\u00e9en si le chemin cases permet d\u2019aller de l\u2019entr\u00e9e \u00e0 la sortie du labyrinthe <code>laby</code>. </p> <p>Adaptation en TP : Lien vers TP Capytale</p> Sujet  8 : structure de donn\u00e9es (tableaux, dictionnaires) et langages et programmation (sp\u00e9cification).  <p>Objectif de l\u2019exercice : </p> <p>Les Aventuriers du Rail\u00a9 est un jeu de soci\u00e9t\u00e9 dans lequel les joueurs doivent construire des lignes de chemin de fer entre diff\u00e9rentes villes d'un pays. La carte des liaisons possibles dans la r\u00e9gion Occitanie est donn\u00e9e en annexe 1 de l\u2019exercice.  Dans l\u2019annexe 2 de l\u2019exercice, les liaisons poss\u00e9d\u00e9es par le joueur 1 sont en noir, et celles du joueur 2 en blanc. Les liaisons en gris sont encore en jeu.  </p> <p>Codages des structures de donn\u00e9es utilis\u00e9es :  </p> <ul> <li>Liste des liaisons d'un joueur : Toutes les liaisons directes (sans ville interm\u00e9diaire) construites par un joueur seront enregistr\u00e9es dans une variable de type \"tableau de tableaux\".  </li> </ul> <p>Le joueur 1 poss\u00e8de les lignes directes \"Toulouse-Muret\", \"Toulouse-Montauban\", \"Gaillac-St Sulpice\" et \"Muret-Pamiers\" (liaisons indiqu\u00e9es en noir dans l\u2019annexe 2 de l\u2019exercice). Ces liaisons sont m\u00e9moris\u00e9es dans la variable ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>liaisonsJoueur1 = [\n [\"Toulouse\",\"Muret\"],\n [\"Toulouse\",\"Montauban\"],\n[\"Gaillac\",\"St Sulpice\"],\n [\"Muret\",\"Pamiers\"]\n]\n</code></pre> <p>Remarque : Seules les liaisons directes existent, par exemple <code>[\"Toulouse\",\"Muret\"]</code> ou <code>[\"Muret\",\"Toulouse\"]</code>. Par contre, le tableau <code>[\"Toulouse\",\"Mazamet\"]</code>  n'existe pas, puisque la ligne Toulouse-Mazamet passe par Castres.  </p> <ul> <li>Dictionnaire associ\u00e9 \u00e0 un joueur : On code la liste des villes et des trajets poss\u00e9d\u00e9e par un joueur en utilisant un dictionnaire de tableaux. Chaque clef de ce dictionnaire est une ville de d\u00e9part, et chaque valeur est un tableau contenant les villes d'arriv\u00e9e possibles en fonction des liaisons poss\u00e9d\u00e9es par le joueur.  </li> </ul> <p>Le dictionnaire de tableaux du joueur 1 est donn\u00e9 ci-dessous : \ud83d\udc0d Script Python<pre><code>DictJoueur1 = {\n\"Toulouse\":[\"Muret\",\"Montauban\"],\n\"Montauban\":[\"Toulouse\"],\n\"Gaillac\":[\"St Sulpice\"],\n\"St Sulpice\":[\"Gaillac\"],\n\"Muret\":[\"Toulouse\",\"Pamiers\"],\n\"Pamiers\":[\"Muret\"]}\n</code></pre></p> <p>Question 1.</p> <p>Expliquer pourquoi la liste des liaisons suivante n'est pas valide : \ud83d\udc0d Script Python<pre><code>tableauliaisons = [[\"Toulouse\",\"Auch\"], [\"Luchon\",\"Muret\"], [\"Quillan\",\"Limoux\"] ]\n</code></pre></p> <p>Question 2.</p> <p>Cette question concerne le joueur n\u00b02 (Rappel : les liaisons poss\u00e9d\u00e9es par le joueur n\u00b02 sont repr\u00e9sent\u00e9es par un rectangle blanc dans l\u2019annexe 2 de l\u2019exercice 2). a) Donner le tableau liaisonsJoueur2, des liaisons poss\u00e9d\u00e9es par le joueur n\u00b02. b) Recopier et compl\u00e9ter le dictionnaire suivant, associ\u00e9 au joueur n\u00b02 : \ud83d\udc0d Script Python<pre><code>DictJoueur2 = {\n    \"Toulouse\":[\"Castres\",\"Castelnaudary\"],\u2026\n    }\n</code></pre></p> <p>Question 3.</p> <p>\u00c0 partir du tableau de tableaux contenant les liaisons d'un joueur, on souhaite construire le dictionnaire correspondant au joueur. Une premi\u00e8re proposition a abouti \u00e0 la fonction <code>construireDict</code> ci-dessous.  </p> \ud83d\udc0d Script Python<pre><code>def construireDict(listeLiaisons):\n\"\"\"\n    listeLiaisons est un tableau de tableaux repr\u00e9sentant la\n    liste des liaisons d'un joueur comme d\u00e9crit dans le probl\u00e8me\n    \"\"\"\n    Dict={}\n    for liaison in listeLiaisons :\n        villeA = liaison[0]\n        villeB = liaison[1]\n        if not villeA in Dict.keys() :\n            Dict[villeA]=[villeB]\n        else :\n            destinationsA = Dict[villeA]\n            if not villeB in destinationsA :\n                destinationsA.append(villeB)\n    return Dict\n</code></pre> <p>a) \u00c9crire sur votre copie un <code>assert</code> dans la fonction <code>construireDict</code> qui permet de v\u00e9rifier que la <code>listeLiaisons</code> n\u2019est pas vide. b) Sur votre copie, donner le r\u00e9sultat de cette fonction ayant comme argument la variable <code>liaisonsJoueur1</code> donn\u00e9e dans l\u2019\u00e9nonc\u00e9 et expliquer en quoi cette fonction ne r\u00e9pond que partiellement \u00e0 la demande. c) La fonction <code>construireDict</code>, d\u00e9finie ci-dessus, est donc partiellement inexacte. Compl\u00e9ter la fonction <code>construireDict</code> pour qu\u2019elle g\u00e9n\u00e8re bien l\u2019ensemble du dictionnaire de tableaux correspondant \u00e0 la liste de liaisons donn\u00e9es en argument. \u00c0 l\u2019aide des num\u00e9ros de lignes, on pr\u00e9cisera o\u00f9 est ins\u00e9r\u00e9 ce code. </p> <p></p> <p></p>"},{"location":"divers/Exercice_Bac__2/","title":"TD n\u00b022 - Exercices BAC n\u00b02","text":"Th\u00e8me  : BAC                           22              TD : Exercices Divers BAC - Programmation"},{"location":"divers/Exercice_Bac__2/#sujet-4-la-programmation-en-general-et-la-recursivite-en-particulier","title":"Sujet  4 :  la programmation en g\u00e9n\u00e9ral et la r\u00e9cursivit\u00e9 en particulier.","text":"<p>On consid\u00e8re un tableau de nombres de \\(n\\) lignes et \\(p\\) colonnes. Les lignes sont num\u00e9rot\u00e9es de 0 \u00e0 \\(n-1\\) et les colonnes sont num\u00e9rot\u00e9es de 0 \u00e0 \\(p-1\\). La case en haut \u00e0 gauche est rep\u00e9r\u00e9e par (0, 0) et la case en bas \u00e0 droite par \\((n - 1, p - 1)\\). On appelle chemin une succession de cases allant de la case (0, 0) \u00e0 la case \\((n - 1, p - 1)\\), en n\u2019autorisant que des d\u00e9placements case par case : soit vers la droite, soit vers le bas. On appelle somme d\u2019un chemin la somme des entiers situ\u00e9s sur ce chemin. Par exemple, pour le tableau T suivant :</p> <p></p> <ul> <li>Un chemin est (0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 3) (en gras sur le tableau) ;  </li> <li>La somme du chemin pr\u00e9c\u00e9dent est 14.  </li> <li>(0, 0), (0, 2), (2, 2), (2, 3) n\u2019est pas un chemin.</li> </ul> <p>L\u2019objectif de cet exercice est de d\u00e9terminer la somme maximale pour tous les chemins possibles allant de la case (0, 0) \u00e0 la case \\((n - 1, p - 1)\\).  </p> <p>Question 1</p> <p>On consid\u00e8re tous les chemins allant de la case (0, 0) \u00e0 la case (2, 3) du tableau T donn\u00e9 en exemple.</p> <ol> <li>Un tel chemin comprend n\u00e9cessairement 3 d\u00e9placements vers la droite. Combien de d\u00e9placements vers le bas comprend-il ?  </li> <li>La longueur d\u2019un chemin est \u00e9gal au nombre de cases de ce chemin. Justifier que tous les chemins allant de (0, 0) \u00e0 (2, 3) ont une longueur \u00e9gale \u00e0 6.</li> </ol> <p>Question 2</p> <p>En listant tous les chemins possibles allant de (0, 0) \u00e0 (2, 3) du tableau T, d\u00e9terminer un chemin qui permet d\u2019obtenir la somme maximale et la valeur de cette somme.</p> <p>Question 3</p> <p>On veut cr\u00e9er le tableau <code>T\u2019</code> o\u00f9 chaque \u00e9l\u00e9ment <code>T\u2019[i][j]</code> est la somme maximale pour tous les chemins possibles allant de (0, 0) \u00e0 \\((i, j)\\).  </p> <ol> <li>Compl\u00e9ter et recopier sur votre copie le tableau <code>T\u2019</code> donn\u00e9 ci-dessous associ\u00e9 au tableau  </li> </ol> <p></p> <ol> <li>Justifier que si \\(j\\) est diff\u00e9rent de 0, alors : <code>T\u2019[0][j] = T[0][j] + T\u2019[0][j-1]</code> </li> </ol> <p>Question 4</p> <p>Justifier que si \\(i\\) et \\(j\\) sont diff\u00e9rents de 0, alors : <code>T\u2019[i][j] = T[i][j] + max(T\u2019[i-1][j], T\u2019[i][j-1])</code>.  </p> <p>Question 5</p> <p>On veut cr\u00e9er la fonction r\u00e9cursive somme_max ayant pour param\u00e8tres un tableau T, un entier \\(i\\) et un entier \\(j\\). Cette fonction renvoie la somme maximale pour tous les chemins possibles allant de la case (0, 0) \u00e0 la case \\((i, j)\\).  </p> <ol> <li>Quel est le cas de base, \u00e0 savoir le cas qui est trait\u00e9 directement sans faire appel \u00e0 la fonction somme_max ? Que renvoie-t-on dans ce cas ?  </li> <li>\u00c0 l\u2019aide de la question pr\u00e9c\u00e9dente, \u00e9crire en Python la fonction r\u00e9cursive <code>somme_max</code> .  </li> <li>Quel appel de fonction doit-on faire pour r\u00e9soudre le probl\u00e8me initial ?  </li> </ol>"},{"location":"divers/Exercice_Bac__2/#sujet-5-la-programmation-en-general-et-la-recursivite-en-particulier","title":"Sujet  5 :  la programmation en g\u00e9n\u00e9ral et la r\u00e9cursivit\u00e9 en particulier.","text":"<p>Cet exercice porte sur la programmation en g\u00e9n\u00e9ral et la r\u00e9cursivit\u00e9 en particulier.</p> <p>On s\u2019int\u00e9resse dans cet exercice \u00e0 un algorithme de m\u00e9lange des \u00e9l\u00e9ments d\u2019une liste.</p> <p>Question 1.</p> <p>Pour la suite, il sera utile de disposer d'une fonction echange qui permet d'\u00e9changer dans une liste lst les \u00e9l\u00e9ments d'indice <code>i1</code> et <code>i2</code>. Expliquer pourquoi le code Python ci-dessous ne r\u00e9alise pas cet \u00e9change et en proposer une modification.</p> \ud83d\udc0d Script Python<pre><code>def echange(lst, i1, i2):\n    lst[i2] = lst[i1]\n    lst[i1] = lst[i2]\n</code></pre> <p>Question 2.</p> <p>La documentation du module random de Python fournit les informations cidessous concernant la fonction randint(a,b) : \ud83d\udc0d Script Python<pre><code>Renvoie un entier al\u00e9atoire N tel que a &lt;= N &lt;= b. Alias pour randrange(a,b+1).\n</code></pre> Parmi les valeurs ci-dessous, quelles sont celles qui peuvent \u00eatre renvoy\u00e9es par l'appel randint(0, 10) ?  </p> <p>\u25a1 0  \u25a1 1  \u25a1 3.5  \u25a1 9  \u25a1 10  \u25a1 11</p> <p>Question 3.</p> <p>Le m\u00e9lange de Fischer Yates est un algorithme permettant de permuter al\u00e9atoirement les \u00e9l\u00e9ments d'une liste. On donne ci-dessous une mise en \u0153uvre r\u00e9cursive de cet algorithme en Python.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef melange(lst, ind):\n    print(lst)\n    if ind &gt; 0:\n        j = randint(0, ind)\n        echange(lst, ind, j)\n        melange(lst, ind-1)\n</code></pre> <p>a. Expliquer pourquoi la fonction <code>melange</code> se termine toujours. b. Lors de l\u2019appel de la fonction <code>melange</code>, la valeur du param\u00e8tre <code>ind</code> doit \u00eatre \u00e9gal au plus grand indice possible de la liste <code>lst</code>. Pour une liste de longueur \u074a, quel est le nombre d'appels r\u00e9cursifs de la fonction <code>melange</code> effectu\u00e9s, sans compter l\u2019appel initial ? c. On consid\u00e8re le script ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>lst = [v for v in range(5)]\nmelange(lst, 4)\n</code></pre> <p>On suppose que les valeurs successivement renvoy\u00e9es par la fonction <code>randint</code> sont 2, 1, 2 et 0.</p> <p>Les deux premiers affichages produits par l'instruction <code>print(lst)</code> de la fonction <code>melange</code> sont : \ud83d\udccb Texte<pre><code>[0, 1, 2, 3, 4]\n[0, 1, 4, 3, 2]\n</code></pre> Donner les affichages suivants produits par la fonction melange. d. Proposer une version it\u00e9rative du m\u00e9lange de Fischer Yates. </p>"},{"location":"divers/Exercice_Bac__2/#sujet-6-la-programmation-objet","title":"Sujet  6 :  la programmation objet.","text":"<p>Cryptage selon le \u00ab Code de C\u00e9sar \u00bb</p> <p>Dans cet exercice, on \u00e9tudie une m\u00e9thode de chiffrement de cha\u00eenes de caract\u00e8res alphab\u00e9tiques. Pour des raisons historiques, cette m\u00e9thode de chiffrement est appel\u00e9e \"code de C\u00e9sar\". On consid\u00e8re que les messages ne contiennent que les lettres capitales de l\u2019alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" et la m\u00e9thode de chiffrement  utilise un nombre entier fix\u00e9 appel\u00e9 la cl\u00e9 de chiffrement.</p> <p>Question 1.</p> <p>Soit la classe CodeCesar d\u00e9finie ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>class CodeCesar:\n    def __init__(self, cle): \n        self.cle = cle\n        self.alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    def decale(self, lettre):\n        num1 = self.alphabet.find(lettre)\n        num2 = num1+self.cle\n        if num2 &gt;= 26:\n            num2 = num2-26\n        if num2 &lt; 0:\n            num2 = num2+26\n            nouvelle_lettre = self.alphabet[num2]\n        return nouvelle_lettre\n</code></pre> <p>On rappelle que la m\u00e9thode str.find(lettre) renvoie l'indice (index) de la lettre dans la cha\u00eene de caract\u00e8res str  Repr\u00e9senter le r\u00e9sultat d\u2019ex\u00e9cution du code Python suivant : </p> \ud83d\udc0d Script Python<pre><code>code1 = CodeCesar(3)\nprint(code1.decale('A'))\nprint(code1.decale('X'))\n</code></pre> <p>Question 2.</p> <p>La m\u00e9thode de chiffrement du \u00ab code C\u00e9sar \u00bb consiste \u00e0 d\u00e9caler les lettres du message dans l\u2019alphabet d'un nombre de rangs fix\u00e9 par la cl\u00e9. Par exemple, avec la cl\u00e9 3, toutes les lettres sont d\u00e9cal\u00e9es de 3 rangs vers la droite : le A devient le D, le B devient le E, etc.  Ajouter une m\u00e9thode cryptage(self, texte) dans la classe CodeCesar d\u00e9finie \u00e0 la question pr\u00e9c\u00e9dente, qui re\u00e7oit en param\u00e8tre une cha\u00eene de caract\u00e8res (le message \u00e0 crypter) et qui retourne une cha\u00eene de caract\u00e8res (le message crypt\u00e9).  </p> <p>Cette m\u00e9thode cryptage(self, texte) doit crypter la cha\u00eene texte avec la cl\u00e9 de l'objet de la classe CodeCesar qui a \u00e9t\u00e9 instanci\u00e9. Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; code1 = CodeCesar(3)\n&gt;&gt;&gt; code1.cryptage(\"NSI\")\n'QVL'\n</code></pre> <p>Question 3.</p> <p>Ecrire un programme qui : </p> <ul> <li>demande de saisir la cl\u00e9 de chiffrement  </li> <li>cr\u00e9e un objet de classe CodeCesar  </li> <li>demande de saisir le texte \u00e0 chiffrer  </li> <li>affiche le texte chiffr\u00e9 en appelant la m\u00e9thode cryptage</li> </ul> <p>Question 4.</p> <p>On ajoute la m\u00e9thode <code>transforme(texte)</code> \u00e0 la classe <code>CodeCesar</code> :       </p> \ud83d\udc0d Script Python<pre><code>def transforme(self, texte):\n    self.cle = -self.cle\n    message = self.cryptage(texte)\n    self.cle = -self.cle\n    return message\n</code></pre> <p>On ex\u00e9cute la ligne suivante : <code>print(CodeCesar(10).transforme(\"PSX\"))</code> </p> <p>Que va-t-il s\u2019afficher ? Expliquer votre r\u00e9ponse. </p>"},{"location":"divers/Exercice_Bac__2/#sujet-7-programmation-python-tuples-et-listes","title":"Sujet  7 : programmation Python, tuples et listes.","text":"<p>L\u2019objectif de cet exercice est de mettre en place une mod\u00e9lisation d\u2019un jeu de labyrinthe en langage Python.  </p> <p>On d\u00e9cide de repr\u00e9senter un labyrinthe par un tableau carr\u00e9 de taille n, dans lequel les cases seront des 0 si l\u2019on peut s\u2019y d\u00e9placer et des 1 s\u2019il s\u2019agit d\u2019un mur.   Voici un exemple de repr\u00e9sentation d\u2019un labyrinthe : </p> <p></p> <p>L\u2019entr\u00e9e du labyrinthe se situe \u00e0 la premi\u00e8re case du tableau (celle en haut \u00e0 gauche) et la sortie du labyrinthe se trouve \u00e0 la derni\u00e8re case (celle en bas \u00e0 droite).</p> <p>Question 1.</p> <p>Proposer, en langage Python, une fonction mur, prenant en param\u00e8tre un tableau repr\u00e9sentant un labyrinthe et deux entiers \\(i\\) et \\(j\\) compris entre 0 et <code>n1</code> et qui renvoie un bool\u00e9en indiquant la pr\u00e9sence ou non d\u2019un mur. Par exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;mur(laby, 2, 3)\nTrue\n&gt;&gt;mur(laby, 1, 8)\nFalse\n</code></pre></p> <p>Un parcours dans le labyrinthe va \u00eatre repr\u00e9sent\u00e9 par une liste de cases. Il s\u2019agit de couples (i,j) o\u00f9 i et j correspondent respectivement aux num\u00e9ros de ligne et de colonne des cases successivement visit\u00e9es au long du parcours. Ainsi, la liste suivante  <code>[(1,4),(1,5),(1,6),(2,6),(3,6),(3,5),(3,4)]</code> correspond au parcours rep\u00e9r\u00e9 par des \u00e9toiles ci-dessous : </p> <p></p> <p>La liste <code>[(0,0),(1,0),(1,1),(5,1),(6,1)]</code> ne peut correspondre au parcours d\u2019un labyrinthe car toutes les cases parcourues successivement ne sont pas adjacentes.  </p> <p>Question 2.</p> <p>On consid\u00e8re la fonction voisine ci-dessous, \u00e9crite en langage Python, qui prend en param\u00e8tres deux cases donn\u00e9es sous forme de couple. \ud83d\udc0d Script Python<pre><code>def voisine(case1, case2) :\n    l1, c1 = case1\n    l2, c2 = case2\n    # on vous rappelle que **2 signifie puissance 2\n    d = (l1-l2)**2 + (c1-c2)**2\n    return (d == 1)\n</code></pre></p> <p>2.a. Apr\u00e8s avoir remarqu\u00e9 que les quantit\u00e9s l1-l2 et c1-c2 sont des entiers, expliquer pourquoi la fonction voisine indique si deux cases donn\u00e9es sous forme de tuples <code>(l,c)</code> sont adjacentes. 2.b. En d\u00e9duire une fonction adjacentes qui re\u00e7oit une liste de cases et renvoie un bool\u00e9en indiquant si la liste des cases forme une cha\u00eene de cases adjacentes. </p> <p>Un parcours sera qualifi\u00e9 de compatible avec le labyrinthe lorsqu\u2019il s\u2019agit d\u2019une succession de cases adjacentes accessibles (non mur\u00e9es). On donne la fonction <code>teste(cases, laby)</code> qui indique si le chemin cases est un chemin possible compatible avec le labyrinthe laby : \ud83d\udc0d Script Python<pre><code>def teste(cases, laby) :\n    if not adjacentes(cases) :\n        return False\n    possible = True\n    i = 0\n    while i &lt; len(cases) and possible:\n        if mur(laby, cases[i][0], cases[i][1]) :\n            possible = False\n            i = i + 1\n    return possible\n</code></pre></p> <p>Question 3.</p> <p>Justifier que la boucle de la fonction pr\u00e9c\u00e9dente se termine.</p> <p>Question 4.</p> <p>En d\u00e9duire une fonction <code>echappe(cases, laby)</code> qui indique par un bool\u00e9en si le chemin cases permet d\u2019aller de l\u2019entr\u00e9e \u00e0 la sortie du labyrinthe <code>laby</code>. </p> <p>Adaptation en TP : Lien vers TP Capytale</p>"},{"location":"divers/Exercice_Bac__2/#sujet-8-structure-de-donnees-tableaux-dictionnaires-et-langages","title":"Sujet  8 : structure de donn\u00e9es (tableaux, dictionnaires) et langages","text":"<p>et programmation (sp\u00e9cification).</p> <p>Objectif de l\u2019exercice : </p> <p>Les Aventuriers du Rail\u00a9 est un jeu de soci\u00e9t\u00e9 dans lequel les joueurs doivent construire des lignes de chemin de fer entre diff\u00e9rentes villes d'un pays. La carte des liaisons possibles dans la r\u00e9gion Occitanie est donn\u00e9e en annexe 1 de l\u2019exercice.  Dans l\u2019annexe 2 de l\u2019exercice, les liaisons poss\u00e9d\u00e9es par le joueur 1 sont en noir, et celles du joueur 2 en blanc. Les liaisons en gris sont encore en jeu.  </p> <p>Codages des structures de donn\u00e9es utilis\u00e9es :  </p> <ul> <li>Liste des liaisons d'un joueur : Toutes les liaisons directes (sans ville interm\u00e9diaire) construites par un joueur seront enregistr\u00e9es dans une variable de type \"tableau de tableaux\".  </li> </ul> <p>Le joueur 1 poss\u00e8de les lignes directes \"Toulouse-Muret\", \"Toulouse-Montauban\", \"Gaillac-St Sulpice\" et \"Muret-Pamiers\" (liaisons indiqu\u00e9es en noir dans l\u2019annexe 2 de l\u2019exercice). Ces liaisons sont m\u00e9moris\u00e9es dans la variable ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>liaisonsJoueur1 = [\n [\"Toulouse\",\"Muret\"],\n [\"Toulouse\",\"Montauban\"],\n[\"Gaillac\",\"St Sulpice\"],\n [\"Muret\",\"Pamiers\"]\n]\n</code></pre> <p>Remarque : Seules les liaisons directes existent, par exemple <code>[\"Toulouse\",\"Muret\"]</code> ou <code>[\"Muret\",\"Toulouse\"]</code>. Par contre, le tableau <code>[\"Toulouse\",\"Mazamet\"]</code>  n'existe pas, puisque la ligne Toulouse-Mazamet passe par Castres.  </p> <ul> <li>Dictionnaire associ\u00e9 \u00e0 un joueur : On code la liste des villes et des trajets poss\u00e9d\u00e9e par un joueur en utilisant un dictionnaire de tableaux. Chaque clef de ce dictionnaire est une ville de d\u00e9part, et chaque valeur est un tableau contenant les villes d'arriv\u00e9e possibles en fonction des liaisons poss\u00e9d\u00e9es par le joueur.  </li> </ul> <p>Le dictionnaire de tableaux du joueur 1 est donn\u00e9 ci-dessous : \ud83d\udc0d Script Python<pre><code>DictJoueur1 = {\n\"Toulouse\":[\"Muret\",\"Montauban\"],\n\"Montauban\":[\"Toulouse\"],\n\"Gaillac\":[\"St Sulpice\"],\n\"St Sulpice\":[\"Gaillac\"],\n\"Muret\":[\"Toulouse\",\"Pamiers\"],\n\"Pamiers\":[\"Muret\"]}\n</code></pre></p> <p>Question 1.</p> <p>Expliquer pourquoi la liste des liaisons suivante n'est pas valide : \ud83d\udc0d Script Python<pre><code>tableauliaisons = [[\"Toulouse\",\"Auch\"], [\"Luchon\",\"Muret\"], [\"Quillan\",\"Limoux\"] ]\n</code></pre></p> <p>Question 2.</p> <p>Cette question concerne le joueur n\u00b02 (Rappel : les liaisons poss\u00e9d\u00e9es par le joueur n\u00b02 sont repr\u00e9sent\u00e9es par un rectangle blanc dans l\u2019annexe 2 de l\u2019exercice 2). a) Donner le tableau liaisonsJoueur2, des liaisons poss\u00e9d\u00e9es par le joueur n\u00b02. b) Recopier et compl\u00e9ter le dictionnaire suivant, associ\u00e9 au joueur n\u00b02 : \ud83d\udc0d Script Python<pre><code>DictJoueur2 = {\n    \"Toulouse\":[\"Castres\",\"Castelnaudary\"],\u2026\n    }\n</code></pre></p> <p>Question 3.</p> <p>\u00c0 partir du tableau de tableaux contenant les liaisons d'un joueur, on souhaite construire le dictionnaire correspondant au joueur. Une premi\u00e8re proposition a abouti \u00e0 la fonction <code>construireDict</code> ci-dessous.  </p> \ud83d\udc0d Script Python<pre><code>def construireDict(listeLiaisons):\n\"\"\"\n    listeLiaisons est un tableau de tableaux repr\u00e9sentant la\n    liste des liaisons d'un joueur comme d\u00e9crit dans le probl\u00e8me\n    \"\"\"\n    Dict={}\n    for liaison in listeLiaisons :\n        villeA = liaison[0]\n        villeB = liaison[1]\n        if not villeA in Dict.keys() :\n            Dict[villeA]=[villeB]\n        else :\n            destinationsA = Dict[villeA]\n            if not villeB in destinationsA :\n                destinationsA.append(villeB)\n    return Dict\n</code></pre> <p>a) \u00c9crire sur votre copie un <code>assert</code> dans la fonction <code>construireDict</code> qui permet de v\u00e9rifier que la <code>listeLiaisons</code> n\u2019est pas vide. b) Sur votre copie, donner le r\u00e9sultat de cette fonction ayant comme argument la variable <code>liaisonsJoueur1</code> donn\u00e9e dans l\u2019\u00e9nonc\u00e9 et expliquer en quoi cette fonction ne r\u00e9pond que partiellement \u00e0 la demande. c) La fonction <code>construireDict</code>, d\u00e9finie ci-dessus, est donc partiellement inexacte. Compl\u00e9ter la fonction <code>construireDict</code> pour qu\u2019elle g\u00e9n\u00e8re bien l\u2019ensemble du dictionnaire de tableaux correspondant \u00e0 la liste de liaisons donn\u00e9es en argument. \u00c0 l\u2019aide des num\u00e9ros de lignes, on pr\u00e9cisera o\u00f9 est ins\u00e9r\u00e9 ce code. </p> <p></p> <p></p>"},{"location":"divers/Exercices_Bac/","title":"TD n\u00b021 - Exercices BAC","text":"Th\u00e8me  : BAC                           21              TD : Exercices Divers BAC - Programmation"},{"location":"divers/Exercices_Bac/#sujet-1-tableaux-et-programmation","title":"Sujet  1 : Tableaux et Programmation","text":"<p>On rappelle que len est une fonction qui prend un tableau en param\u00e8tre et renvoie sa longueur. C\u2019est-\u00e0-dire le nombre d\u2019\u00e9l\u00e9ments pr\u00e9sents dans le tableau.  </p> <p>Exemple : <code>len([12, 54, 34, 57])</code> vaut 4.</p> <p>Le but de cet exercice est de programmer diff\u00e9rentes r\u00e9ductions pour un site de vente de v\u00eatements en ligne. On rappelle que si le prix d\u2019un article avant r\u00e9duction est de x euros,  </p> <ul> <li>son prix vaut 0, 5x si on lui applique une r\u00e9duction de 50%,  </li> <li>son prix vaut 0, 6x si on lui applique une r\u00e9duction de 40%,  </li> <li>son prix vaut 0, 7x si on lui applique une r\u00e9duction de 30%,  </li> <li>son prix vaut 0, 8x si on lui applique une r\u00e9duction de 20%,  </li> <li>son prix vaut 0, 9x si on lui applique une r\u00e9duction de 10%.  </li> </ul> <p>Dans le syst\u00e8me informatique du site de vente, l\u2019ensemble des articles qu\u2019un client veut acheter, appel\u00e9 panier, est mod\u00e9lis\u00e9 par un tableau de flottants. Par exemple, si un client veut acheter un pantalon \u00e0 30,50 euros, un tee-shirt \u00e0 15 euros, une paire de chaussettes \u00e0 6 euros, une jupe \u00e0 20 euros, une paire de  collants \u00e0 5 euros, une robe \u00e0 35 euros et un short \u00e0 10,50 euros, le syst\u00e8me informatique aura le tableau suivant :  </p> \ud83d\udc0d Script Python<pre><code>tab = [30.5, 15.0, 6.0, 20.0, 5.0, 35.0, 10.5]\n</code></pre> <p>Question 1. (a)</p> <p>\u00c9crire une fonction Python total_hors_reduction ayant pour argument le tableau des prix des articles du panier d\u2019un client et renvoyant le total des prix de ces articles. </p> <p>Question  1. (b)</p> <p>Le site de vente propose la promotion suivante comme offre de bienvenue : 20% de r\u00e9duction sur le premier article de la liste, 30% de r\u00e9duction sur le deuxi\u00e8me article de la liste (s\u2019il y a au moins deux articles) et aucune r\u00e9duction sur le reste des articles (s\u2019il y en a). Recopier sur la copie et compl\u00e9ter la fonction Python offre_bienvenue prenant en param\u00e8tre le tableau tab des prix des articles du panier d\u2019un client et renvoyant le total \u00e0 payer lorsqu\u2019on leur applique l\u2019offre de bienvenue.  </p> \ud83d\udc0d Script Python<pre><code>def offre_bienvenue (tab ):\n\"\"\" tableau -&gt; float \"\"\"\n    somme =0\n    longueur =len(tab )\n    if longueur &gt; 0 :\n        somme =tab [0]*...\n    if longueur &gt; 1 :\n        somme = somme + ...\n    if longueur &gt; 2 :\n        for i in range (2, longueur ):\n            somme =...\n    return ...\n</code></pre> <p>Pour toute la suite de l\u2019exercice, on pourra utiliser la fonction total_hors_reduction m\u00eame si la question 1 n\u2019a pas \u00e9t\u00e9 trait\u00e9e.</p> <p>Question 2.</p> <p>Lors de la p\u00e9riode des soldes, le site de vente propose les r\u00e9ductions suivantes :  </p> <ul> <li>si le panier contient 5 articles ou plus, une r\u00e9duction globale de 50%,  </li> <li>si le panier contient 4 articles, une r\u00e9duction globale de 40%,  </li> <li>si le panier contient 3 articles, une r\u00e9duction globale de 30%,  </li> <li>si le panier contient 2 articles, une r\u00e9duction globale de 20%,  </li> <li>si le panier contient 1 article, une r\u00e9duction globale de 10%.  </li> </ul> <p>Proposer une fonction Python prix_solde ayant pour argument le tableau tab des prix des articles du panier d\u2019un client et renvoyant le total des prix de ces articles lorsqu\u2019on leur applique la r\u00e9duction des soldes.</p> <p>Question 3. (a)</p> <p>\u00c9crire une fonction minimum qui prend en param\u00e8tre un tableau tab de nombres et renvoie la valeur minimum pr\u00e9sente dans le tableau.</p> <p>Question 3. (b)</p> <p>Pour ses bons clients, le site de vente propose une offre promotionnelle, \u00e0 partir de 2 articles achet\u00e9s, l\u2019article le moins cher des articles command\u00e9s est  offert. \u00c9crire une fonction Python offre_bon_client ayant pour param\u00e8tre le tableau des prix des articles du panier d\u2019un client et renvoyant le total \u00e0 payer lorsqu\u2019on leur applique l\u2019offre bon client.</p> <p>Question 4. Afin de diminuer le stock de ses articles dans ses entrep\u00f4ts, l\u2019entreprise imagine faire l\u2019offre suivante \u00e0 ses clients : en suivant l\u2019ordre des articles dans le panier du client, elle consid\u00e8re les 3 premiers articles et offre le moins cher, puis les 3 suivants et offre le moins cher et ainsi de suite jusqu\u2019\u00e0 ce qu\u2019il reste au plus 2 articles qui n\u2019ont alors droit \u00e0 aucune r\u00e9duction. Exemple : Si le panier du client contient un pantalon \u00e0 30,50 euros, un tee-shirt \u00e0 15 euros, une paire de chaussettes \u00e0 6 euros, une jupe \u00e0 20 euros, une paire de collants \u00e0 5 euros, une robe \u00e0 35 euros et un short \u00e0 10,50 euros, ce panier est repr\u00e9sent\u00e9 par le tableau suivant : \ud83d\udc0d Script Python<pre><code>tab = [30.5, 15.0, 6.0, 20.0, 5.0, 35.0, 10.5]\n</code></pre>  Pour le premier groupe (le pantalon \u00e0 30,50 euros, le tee-shirt \u00e0 15 euros, la paire de chaussettes \u00e0 6 euros), l\u2019article le moins cher, la paire de chaussettes \u00e0 6 euros, est offert. Pour le second groupe (la jupe \u00e0 20 euros, la paire de collants \u00e0 5 euros, la robe \u00e0 35 euros), la paire de collants \u00e0 5 euros est offerte.  Donc le total apr\u00e8s promotion de d\u00e9stockage est 111 euros.  On constate que le prix apr\u00e8s promotion de d\u00e9stockage d\u00e9pend de l\u2019ordre dans lequel se pr\u00e9sentent les articles dans le panier.</p> <p>Question 4.(a)</p> <p>Proposer un panier contenant les m\u00eames articles que ceux de l\u2019exemple mais ayant un prix apr\u00e8s promotion de d\u00e9stockage diff\u00e9rent de 111 euros.</p> <p>Question 4. (b)</p> <p>Proposer un panier contenant les m\u00eames articles mais ayant le prix apr\u00e8s promotion de d\u00e9stockage le plus bas possible.</p> <p>Question 4. (c)</p> <p>Une fois ses articles choisis, quel algorithme le client peut-il utiliser pour modifier son panier afin de s\u2019assurer qu\u2019il obtiendra le prix apr\u00e8s promotion de d\u00e9stockage le plus bas possible ? On ne demande pas d\u2019\u00e9crire cet algorithme.</p>"},{"location":"divers/Exercices_Bac/#sujet-2-programmation-en-general","title":"Sujet  2 : Programmation en G\u00e9n\u00e9ral","text":"<p>Cet exercice porte sur la programmation en g\u00e9n\u00e9ral. </p> <p>\u00c9tant donn\u00e9 un tableau non vide de nombres entiers relatifs, on appelle sous-s\u00e9quence une suite non vide d'\u00e9l\u00e9ments voisins de ce tableau. On cherche dans cet  exercice \u00e0 d\u00e9terminer la plus grande somme possible obtenue en additionnant les \u00e9l\u00e9ments d'une sous-s\u00e9quence.  </p> <p>Par exemple, pour le tableau ci-dessous, la somme maximale vaut 18. Elle est obtenue en additionnant les \u00e9l\u00e9ments de la sous-s\u00e9quence encadr\u00e9e en gras ci-dessous (6 ; 8 ; -6 ; 10).</p> <p></p> <p>Question 1. a.</p> <p>Quelle est la solution du probl\u00e8me si les \u00e9l\u00e9ments du tableau sont tous positifs ?</p> <p>Question 1. b.</p> <p>Quelle est la solution du probl\u00e8me si tous les \u00e9l\u00e9ments sont n\u00e9gatifs ?</p> <p>Dans cette question, on examine toutes les sous-s\u00e9quences possibles.</p> <p>Question 2. a.</p> <p>\u00c9crire le code Python d'une fonction <code>somme_sous_sequence(lst, i, j)</code> qui prend en argument une liste et deux entiers <code>i, j</code> et renvoie la somme de la sous-s\u00e9quence d\u00e9limit\u00e9e par les indices i et j (inclus).</p> <p>Question 2. b.</p> <p>La fonction <code>pgsp</code> ci-dessous permet de d\u00e9terminer la plus grande des  sommes obtenues en additionnant les \u00e9l\u00e9ments de toutes les sous-s\u00e9quences possibles du tableau lst.</p> <p>\ud83d\udc0d Script Python<pre><code>def pgsp(lst):\n    n = len(lst)\n    somme_max = lst[0]\n    for i in range(n):\n        for j in range(i, n):\n            s = somme_sous_sequence(lst, i, j)\n            if s &gt; somme_max :\n                somme_max = s\n    return somme_max\n</code></pre> Parmi les quatre choix suivants, quel est le nombre de comparaisons effectu\u00e9es par cette fonction si le tableau lst pass\u00e9 en param\u00e8tre contient 10 \u00e9l\u00e9ments ?  </p> <ul> <li>10  </li> <li>55  </li> <li>100  </li> <li>1055  </li> </ul> <p>Question 2. c.</p> <p>Recopier et modifier la fonction pgsp pour qu'elle renvoie un tuple contenant la somme maximale et les indices qui d\u00e9limitent la sous-s\u00e9quence correspondant \u00e0 cette somme maximale.</p> <p>Question 3. On consid\u00e8re dans cette question une approche plus \u00e9labor\u00e9e. Son principe consiste, pour toutes les valeurs possibles de l\u2019indice \u0745, \u00e0 d\u00e9terminer la somme maximale \u0735(\u0745) des sous-s\u00e9quences qui se terminent \u00e0 l'indice \u0745. En d\u00e9signant par <code>lst[\u0745]</code> l\u2019\u00e9l\u00e9ment de lst d\u2019indice \u0745, on peut v\u00e9rifier que </p> <ul> <li>S(0) = lst[0]</li> <li>et pour \u0745\\(i \\geq 1\\) : <ul> <li>\\(S\u0735(i) = lst[\u0745i]\\) si \u0735\\((\u0745i- 1) \u2264 0\\) ;</li> <li>\\(i = lst[\u0745i] + \u0735S(\u0745i-1)\\) si \u0735\\(S(\u0745i-1) &gt; 0\\).  </li> </ul> </li> </ul> <p>Question 3. a.</p> <p>Recopier et compl\u00e9ter le tableau ci-dessous avec les valeurs de \u0735\\(S(\u0745i)\\) pour la liste consid\u00e9r\u00e9e en exemple.</p> <p></p> <p>Question 3. b.</p> <p>La solution au probl\u00e8me \u00e9tant la plus grande valeur des \u0735\\(S(\u0745i)\\), on demande de compl\u00e9ter la fonction <code>pgsp2</code> ci-dessous, de sorte que la variable sommes_max contienne la liste des valeurs \u0735\\(S(\u0745i)\\).  </p> \ud83d\udc0d Script Python<pre><code>def pgsp2(lst):\n    sommes_max = [lst[0]]\n    for i in range(1, len(lst)):\n         # \u00e0 compl\u00e9ter\n\nreturn max(sommes_max)\n</code></pre> <p>Question 3. c.</p> <p>En quoi la solution obtenue par cette approche est-elle plus avantageuse que celle de la question 2.b. ? </p>"},{"location":"divers/Exercices_Bac/#sujet-3-tableau-parcours-programmation-en-general","title":"Sujet  3 : Tableau - Parcours - Programmation en G\u00e9n\u00e9ral","text":"<p>Cet exercice porte sur l\u2019algorithmique et la programmation en Python. Il aborde les notions de tableaux de tableaux et d\u2019algorithmes de parcours de tableaux. </p> <p>Partie A : Repr\u00e9sentation d\u2019un labyrinthe </p> <p>On mod\u00e9lise un labyrinthe par un tableau \u00e0 deux dimensions \u00e0 \u074a\\(n\\) lignes et \u0749\\(m\\) colonnes avec \u074a\\(n\\) et \u0749\\(m\\) des entiers strictement positifs. Les lignes sont num\u00e9rot\u00e9es de 0 \u00e0 \u074a\\(n-1\\) et les colonnes de 0 \u00e0 \\(m-1\\). La case en haut \u00e0 gauche est rep\u00e9r\u00e9e par \\((0,0)\\) et la case en bas \u00e0 droite par \\((n-1,m-1)\\).  </p> <p>Dans ce tableau :  </p> <ul> <li>0 repr\u00e9sente une case vide, hors case de d\u00e9part et arriv\u00e9e,  </li> <li>1 repr\u00e9sente un mur,  </li> <li>2 repr\u00e9sente le d\u00e9part du labyrinthe,  </li> <li>3 repr\u00e9sente l'arriv\u00e9e du labyrinthe.  </li> </ul> <p>Ainsi, en Python, le labyrinthe ci-dessous est repr\u00e9sent\u00e9e par le tableau de tableaux <code>lab1</code>.  </p> <p></p> <p>Question A.1.</p> <p>Le labyrinthe ci-dessous est cens\u00e9 \u00eatre repr\u00e9sent\u00e9 par le tableau de tableaux lab2.  Cependant, dans ce tableau, un mur se trouve \u00e0 la place du d\u00e9part du labyrinthe. Donner une instruction permettant de placer le d\u00e9part au bon endroit dans lab2.</p> <p></p> <p>Question A.2.</p> <p>\u00c9crire une fonction <code>est_valide(i, j, n, m)</code> qui renvoie <code>True</code> si le couple \\((i,j)\\) correspond \u00e0 des coordonn\u00e9es valides pour un labyrinthe de taille \\((n,m)\\), et <code>False</code> sinon. On donne ci-dessous des exemples d'appels.  </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_valide(5, 2, 10, 10)\nTrue\n&gt;&gt;&gt; est_valide(-3, 4, 10, 10)\nFalse\n</code></pre> <p>Question A.3.</p> <p>On suppose que le d\u00e9part d'un labyrinthe est toujours indiqu\u00e9, mais on ne fait aucune supposition sur son emplacement. Compl\u00e9ter la fonction depart(lab)ci-dessous de sorte qu'elle renvoie, sous la forme d'un tuple, les coordonn\u00e9es du d\u00e9part d'un labyrinthe (repr\u00e9sent\u00e9 par le param\u00e8tre lab).  Par exemple, l'appel depart(lab1) doit renvoyer le tuple (5, 0).  </p> \ud83d\udc0d Script Python<pre><code>def depart(lab) :\n    n = len(lab)\n    m = len(lab[0])\n    ...\n</code></pre> <p>Question A.4.</p> <p>\u00c9crire une fonction nb_cases_vides(lab) qui renvoie le nombre de cases vides d'un labyrinthe (comprenant donc l'arriv\u00e9e et le d\u00e9part). Par exemple, l'appel nb_cases_vides(lab2) doit renvoyer la valeur 19.</p> <p>Partie B : Recherche d\u2019une solution dans un labyrinthe </p> <p>On suppose dans cette partie que les labyrinthes poss\u00e8dent un unique chemin allant du d\u00e9part \u00e0 l\u2019arriv\u00e9e sans repasser par la m\u00eame case. Dans la suite, c\u2019est ce chemin que l\u2019on appellera solution du labyrinthe. Pour d\u00e9terminer la solution d'un labyrinthe, on parcourt les cases vides de proche en proche. Lors d\u2019un tel parcours, afin d\u2019\u00e9viter de tourner en rond, on choisit de marquer les cases visit\u00e9es. Pour cela, on remplace la valeur d'une case visit\u00e9e dans le tableau repr\u00e9sentant le labyrinthe par la valeur 4.  </p> <p>Question B.1.</p> <p>On dit que deux cases d'un labyrinthe sont voisines si elles ont un c\u00f4t\u00e9 commun. On consid\u00e8re une fonction <code>voisines(i, j, lab)</code> qui prend en arguments deux entiers \u0745\\(i\\) et \u0746\\(j\\) repr\u00e9sentant les coordonn\u00e9es d\u2019une case et un tableau <code>lab</code> qui repr\u00e9sente un labyrinthe. Cette fonction renvoie la liste des coordonn\u00e9es des cases voisines de la case de coordonn\u00e9es \\((i,j)\\) qui sont valides, non visit\u00e9es et qui ne sont pas des murs. L'ordre des \u00e9l\u00e9ments de cette liste n'importe pas. Ainsi, l'appel <code>voisines(1, 1, [[1, 1, 1], [4, 0, 0], [1, 0, 1]])</code> renvoie la liste <code>[(2, 1), (1, 2)]</code>. Que renvoie l'appel <code>voisines(1, 2, [[1, 1, 4], [0, 0, 0], [1, 1, 0]])</code> ?</p> <p>Question 2. On souhaite stocker la solution dans une liste chemin. Cette liste contiendra les coordonn\u00e9es des cases de la solution, dans l'ordre. Pour cela, on proc\u00e8de de la fa\u00e7on suivante.  </p> <ul> <li>Initialement :<ul> <li>d\u00e9terminer les coordonn\u00e9es du d\u00e9part : c'est la premi\u00e8re case \u00e0 visiter ;</li> <li>ajouter les coordonn\u00e9es de la case d\u00e9part \u00e0 la liste chemin.</li> </ul> </li> <li>Tant que l'arriv\u00e9e n'a pas \u00e9t\u00e9 atteinte :<ul> <li>on marque la case visit\u00e9e avec la valeur 4 ;</li> <li>si la case visit\u00e9e poss\u00e8de une case voisine libre, la premi\u00e8re case de la liste renvoy\u00e9e par la fonction <code>voisines</code> devient la prochaine case \u00e0 visiter et on ajoute \u00e0 la liste chemin ;  </li> <li>sinon, il s'agit d'une impasse. On supprime alors la derni\u00e8re case dans la liste chemin. La prochaine case \u00e0 visiter est celle qui est d\u00e9sormais en derni\u00e8re position de la liste chemin. </li> </ul> </li> </ul> <p>Question B.2. a.</p> <p>Le tableau de tableaux lab3 ci-dessous repr\u00e9sente un labyrinthe.  </p> \ud83d\udc0d Script Python<pre><code>lab3 =  [[1, 1, 1, 1, 1, 1],\n        [2, 0, 0, 0, 0, 3],\n        [1, 0, 1, 0, 1, 1],\n        [1, 1, 1, 0, 0, 1]]\n</code></pre> <p>La suite d'instructions ci-dessous simule le d\u00e9but des modifications subies par la liste chemin lorsque l'on applique la m\u00e9thode pr\u00e9sent\u00e9e. \ud83d\udc0d Script Python<pre><code># entr\u00e9e: (1, 0), sortie (1, 5)\nchemin = [(1, 0)]\nchemin.append((1, 1))\nchemin.append((2, 1))\nchemin.pop()\nchemin.append((1, 2))\nchemin.append((1, 3))\nchemin.append((2, 3))\n</code></pre></p> <p>Compl\u00e9ter cette suite d'instructions jusqu'\u00e0 ce que la liste chemin repr\u00e9sente la solution. Rappel : la m\u00e9thode pop supprime le dernier \u00e9l\u00e9ment d'une liste et renvoie cet \u00e9l\u00e9ment.</p> <p>Question B.2. b.</p> <p>Recopier et compl\u00e9ter la fonction solution(lab) donn\u00e9e ci-dessous de sorte qu'elle renvoie le chemin solution du labyrinthe repr\u00e9sent\u00e9 par le param\u00e8tre lab.  </p> <p>On pourra pour cela utiliser la fonction voisines.</p> \ud83d\udc0d Script Python<pre><code>def solution(lab):\n    chemin = [depart(lab)]\n    case = chemin[0]\n    i = case[0]\n    j = case[1]\n    ---\n</code></pre> <p>Par exemple, l 'appel <code>solution(lab2)</code> doit renvoyer <code>[(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5)]</code>. </p>"},{"location":"divers/Exercices_Bac_Correction/","title":"TD n\u00b021 - Exercices BAC","text":"Th\u00e8me  : BAC                           21              TD : Exercices Divers BAC - Programmation Sujet  1 : Tableaux et Programmation  <p>On rappelle que len est une fonction qui prend un tableau en param\u00e8tre et renvoie sa longueur. C\u2019est-\u00e0-dire le nombre d\u2019\u00e9l\u00e9ments pr\u00e9sents dans le tableau.  </p> <p>Exemple : <code>len([12, 54, 34, 57])</code> vaut 4.</p> <p>Le but de cet exercice est de programmer diff\u00e9rentes r\u00e9ductions pour un site de vente de v\u00eatements en ligne. On rappelle que si le prix d\u2019un article avant r\u00e9duction est de x euros,  </p> <ul> <li>son prix vaut 0, 5x si on lui applique une r\u00e9duction de 50%,  </li> <li>son prix vaut 0, 6x si on lui applique une r\u00e9duction de 40%,  </li> <li>son prix vaut 0, 7x si on lui applique une r\u00e9duction de 30%,  </li> <li>son prix vaut 0, 8x si on lui applique une r\u00e9duction de 20%,  </li> <li>son prix vaut 0, 9x si on lui applique une r\u00e9duction de 10%.  </li> </ul> <p>Dans le syst\u00e8me informatique du site de vente, l\u2019ensemble des articles qu\u2019un client veut acheter, appel\u00e9 panier, est mod\u00e9lis\u00e9 par un tableau de flottants. Par exemple, si un client veut acheter un pantalon \u00e0 30,50 euros, un tee-shirt \u00e0 15 euros, une paire de chaussettes \u00e0 6 euros, une jupe \u00e0 20 euros, une paire de  collants \u00e0 5 euros, une robe \u00e0 35 euros et un short \u00e0 10,50 euros, le syst\u00e8me informatique aura le tableau suivant :  </p> \ud83d\udc0d Script Python<pre><code>tab = [30.5, 15.0, 6.0, 20.0, 5.0, 35.0, 10.5]\n</code></pre> <p>Question 1. (a)</p> Enonc\u00e9Solution <p>\u00c9crire une fonction Python total_hors_reduction ayant pour argument le tableau des prix des articles du panier d\u2019un client et renvoyant le total des prix de ces articles. </p> \ud83d\udc0d Script Python<pre><code>def total_hors_reduction(tab):\n    total = 0\n    for pa in tab:\n        total = total + pa\n    return total\n</code></pre> <p>Question  1. (b)</p> Enonc\u00e9Solution <p>Le site de vente propose la promotion suivante comme offre de bienvenue : 20% de r\u00e9duction sur le premier article de la liste, 30% de r\u00e9duction sur le deuxi\u00e8me article de la liste (s\u2019il y a au moins deux articles) et aucune r\u00e9duction sur le reste des articles (s\u2019il y en a). Recopier sur la copie et compl\u00e9ter la fonction Python offre_bienvenue prenant en param\u00e8tre le tableau tab des prix des articles du panier d\u2019un client et renvoyant le total \u00e0 payer lorsqu\u2019on leur applique l\u2019offre de bienvenue.  </p> \ud83d\udc0d Script Python<pre><code>def offre_bienvenue (tab ):\n\"\"\" tableau -&gt; float \"\"\"\n    somme =0\n    longueur =len(tab )\n    if longueur &gt; 0 :\n        somme =tab [0]*...\n    if longueur &gt; 1 :\n        somme = somme + ...\n    if longueur &gt; 2 :\n        for i in range (2, longueur ):\n            somme =...\n    return ...\n</code></pre> \ud83d\udc0d Script Python<pre><code>def offre_bienvenue(tab):\n    somme = 0\n    longueur=len(tab)\n    if longueur &gt; 0:\n        somme = tab[0]*0.8\n    if longueur &gt; 1:\n        somme = somme + tab[1]*0.7\n    if longueur &gt; 2:\n        for i in range(2,longueur):\n            somme=somme+tab[i]\n    return somme\n</code></pre> <p>Pour toute la suite de l\u2019exercice, on pourra utiliser la fonction total_hors_reduction m\u00eame si la question 1 n\u2019a pas \u00e9t\u00e9 trait\u00e9e.</p> <p>Question 2.</p> Enonc\u00e9Solution <p>Lors de la p\u00e9riode des soldes, le site de vente propose les r\u00e9ductions suivantes :  </p> <ul> <li>si le panier contient 5 articles ou plus, une r\u00e9duction globale de 50%,  </li> <li>si le panier contient 4 articles, une r\u00e9duction globale de 40%,  </li> <li>si le panier contient 3 articles, une r\u00e9duction globale de 30%,  </li> <li>si le panier contient 2 articles, une r\u00e9duction globale de 20%,  </li> <li>si le panier contient 1 article, une r\u00e9duction globale de 10%.  </li> </ul> <p>Proposer une fonction Python prix_solde ayant pour argument le tableau tab des prix des articles du panier d\u2019un client et renvoyant le total des prix de ces articles lorsqu\u2019on leur applique la r\u00e9duction des soldes.</p> \ud83d\udc0d Script Python<pre><code>def prix_solde(tab):\n    longueur = len(tab)\n    reduc = 1\n    if longueur == 1 :\n        reduc = 0.9\n    if longueur == 2 :\n        reduc = 0.8\n    if longueur == 3  :\n        reduc = 0.7\n    if longueur == 4 :\n        reduc = 0.6\n    if longueur &gt;= 5 :\n        reduc = 0.5\n    return reduc*total_hors_reduction(tab)\n    ```\n\n    autre possibilit\u00e9 plus \u201ccourte\u201d :\n```python\ndef prix_soldeb(tab):\n    return total_hors_reduction(tab)*(1-0.1*min(5,len(tab)))\n</code></pre> <p>Question 3. (a)</p> Enonc\u00e9Solution <p>\u00c9crire une fonction minimum qui prend en param\u00e8tre un tableau tab de nombres et renvoie la valeur minimum pr\u00e9sente dans le tableau.</p> <p>Dans cette question nous partons du principe que tab n\u2019est pas vide. \ud83d\udc0d Script Python<pre><code>def minimum(tab):\n    mini = tab[0]\n    for pa in tab:\n        if pa &lt; mini:\n            mini = pa\n    return mini\n</code></pre></p> <p>Question 3. (b)</p> Enonc\u00e9Solution <p>Pour ses bons clients, le site de vente propose une offre promotionnelle, \u00e0 partir de 2 articles achet\u00e9s, l\u2019article le moins cher des articles command\u00e9s est  offert. \u00c9crire une fonction Python offre_bon_client ayant pour param\u00e8tre le tableau des prix des articles du panier d\u2019un client et renvoyant le total \u00e0 payer lorsqu\u2019on leur applique l\u2019offre bon client.</p> \ud83d\udc0d Script Python<pre><code>def offre_bon_client(tab):\n    longueur = len(tab)\n    total = total_hors_reduction(tab)\n    if longueur &gt;= 2:\n        total = total - minimum(tab)\n    return total\n</code></pre> <p>Question 4. Afin de diminuer le stock de ses articles dans ses entrep\u00f4ts, l\u2019entreprise imagine faire l\u2019offre suivante \u00e0 ses clients : en suivant l\u2019ordre des articles dans le panier du client, elle consid\u00e8re les 3 premiers articles et offre le moins cher, puis les 3 suivants et offre le moins cher et ainsi de suite jusqu\u2019\u00e0 ce qu\u2019il reste au plus 2 articles qui n\u2019ont alors droit \u00e0 aucune r\u00e9duction. Exemple : Si le panier du client contient un pantalon \u00e0 30,50 euros, un tee-shirt \u00e0 15 euros, une paire de chaussettes \u00e0 6 euros, une jupe \u00e0 20 euros, une paire de collants \u00e0 5 euros, une robe \u00e0 35 euros et un short \u00e0 10,50 euros, ce panier est repr\u00e9sent\u00e9 par le tableau suivant : \ud83d\udc0d Script Python<pre><code>tab = [30.5, 15.0, 6.0, 20.0, 5.0, 35.0, 10.5]\n</code></pre>  Pour le premier groupe (le pantalon \u00e0 30,50 euros, le tee-shirt \u00e0 15 euros, la paire de chaussettes \u00e0 6 euros), l\u2019article le moins cher, la paire de chaussettes \u00e0 6 euros, est offert. Pour le second groupe (la jupe \u00e0 20 euros, la paire de collants \u00e0 5 euros, la robe \u00e0 35 euros), la paire de collants \u00e0 5 euros est offerte.  Donc le total apr\u00e8s promotion de d\u00e9stockage est 111 euros.  On constate que le prix apr\u00e8s promotion de d\u00e9stockage d\u00e9pend de l\u2019ordre dans lequel se pr\u00e9sentent les articles dans le panier.</p> <p>Question 4.(a)</p> Enonc\u00e9Solution <p>Proposer un panier contenant les m\u00eames articles que ceux de l\u2019exemple mais ayant un prix apr\u00e8s promotion de d\u00e9stockage diff\u00e9rent de 111 euros.</p> <p>plusieurs solutions possibles [30.5, 20.0, 35.0, 15.0, 6.0, 5.0, 10.5] =&gt; total apr\u00e8s promotion = 122 - 20 - 5 = 97</p> <p>Question 4. (b)</p> Enonc\u00e9Solution <p>Proposer un panier contenant les m\u00eames articles mais ayant le prix apr\u00e8s promotion de d\u00e9stockage le plus bas possible.</p> <p>[35, 30.5, 20.0, 15.0, 10.5, 6.0, 5.0] =&gt; total apr\u00e8s promotion = 122 - 20 - 6 = 96</p> <p>Question 4. (c)</p> <p>=== \"Enonc\u00e9\u00e9      Une fois ses articles choisis, quel algorithme le client peut-il utiliser pour modifier son panier afin de s\u2019assurer qu\u2019il obtiendra le prix apr\u00e8s promotion de d\u00e9stockage le plus bas possible ? On ne demande pas d\u2019\u00e9crire cet algorithme.</p> Solution <p>Pour avoir le prix apr\u00e8s promotion de d\u00e9stockage le plus bas possible, il faut trier le tableau dans l\u2019ordre d\u00e9croissant. On peut donc utiliser un algorithme de tri (tri par s\u00e9lection, tri par insertion ou tri fusion)</p> Sujet  2 : Programmation en G\u00e9n\u00e9ral  <p>Cet exercice porte sur la programmation en g\u00e9n\u00e9ral. </p> <p>\u00c9tant donn\u00e9 un tableau non vide de nombres entiers relatifs, on appelle sous-s\u00e9quence une suite non vide d'\u00e9l\u00e9ments voisins de ce tableau. On cherche dans cet  exercice \u00e0 d\u00e9terminer la plus grande somme possible obtenue en additionnant les \u00e9l\u00e9ments d'une sous-s\u00e9quence.  </p> <p>Par exemple, pour le tableau ci-dessous, la somme maximale vaut 18. Elle est obtenue en additionnant les \u00e9l\u00e9ments de la sous-s\u00e9quence encadr\u00e9e en gras ci-dessous (6 ; 8 ; -6 ; 10).</p> <p></p> <p>Question 1. a.</p> Enonc\u00e9Solution <p>Quelle est la solution du probl\u00e8me si les \u00e9l\u00e9ments du tableau sont tous positifs ?</p> <p>Si les \u00e9l\u00e9ments du tableau sont tous positifs, il suffit d\u2019additionner tous les \u00e9l\u00e9ments du tableau pour obtenir la somme maximale (la sous-s\u00e9quence correspond \u00e0 l\u2019ensemble du tableau).</p> <p>Question 1. b.</p> Enonc\u00e9Solution <p>Quelle est la solution du probl\u00e8me si tous les \u00e9l\u00e9ments sont n\u00e9gatifs ?</p> <p>Si les \u00e9l\u00e9ments du tableau sont tous n\u00e9gatifs, il suffit de prendre l\u2019\u00e9l\u00e9ment le plus grand du tableau (la sous-s\u00e9quence est r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment)</p> <p>Dans cette question, on examine toutes les sous-s\u00e9quences possibles.</p> <p>Question 2. a.</p> Enonc\u00e9Solution <p>\u00c9crire le code Python d'une fonction <code>somme_sous_sequence(lst, i, j)</code> qui prend en argument une liste et deux entiers <code>i, j</code> et renvoie la somme de la sous-s\u00e9quence d\u00e9limit\u00e9e par les indices i et j (inclus).</p> \ud83d\udc0d Script Python<pre><code>def somme_sous_sequence(lst, i, j):\n    somme = 0\n    for ind in range(i,j+1):\n        somme = somme + lst[ind]\n    return somme\n</code></pre> <p>Question 2. b.</p> Enonc\u00e9Solution <p>La fonction <code>pgsp</code> ci-dessous permet de d\u00e9terminer la plus grande des  sommes obtenues en additionnant les \u00e9l\u00e9ments de toutes les sous-s\u00e9quences possibles du tableau lst.</p> <p>\ud83d\udc0d Script Python<pre><code>def pgsp(lst):\n    n = len(lst)\n    somme_max = lst[0]\n    for i in range(n):\n        for j in range(i, n):\n            s = somme_sous_sequence(lst, i, j)\n            if s &gt; somme_max :\n                somme_max = s\n    return somme_max\n</code></pre> Parmi les quatre choix suivants, quel est le nombre de comparaisons effectu\u00e9es par cette fonction si le tableau lst pass\u00e9 en param\u00e8tre contient 10 \u00e9l\u00e9ments ?  </p> <ul> <li>10  </li> <li>55  </li> <li>100  </li> <li>1055  </li> </ul> <p>Pour un tableau de 10 \u00e9l\u00e9ments, nous avons 55 comparaisons \\((10+9+8+7+6+5+4+3+2+1=55)\\).</p> <p>Question 2. c.</p> Enonc\u00e9Solution <p>Recopier et modifier la fonction pgsp pour qu'elle renvoie un tuple contenant la somme maximale et les indices qui d\u00e9limitent la sous-s\u00e9quence correspondant \u00e0 cette somme maximale.</p> <p><code>python     def pgsp(lst):         n = len(lst)         somme_max = lst[0]         i_max = 0         j_max = 0         for i in range(n):             for j in range(i,n):                 s = somme_sous_sequence(lst,i,j)                 if s &gt; somme_max:                     somme_max = s                     i_max = i                     j_max = j         return (somme_max, i_max, j_max)</code></p> <p>Question 3. On consid\u00e8re dans cette question une approche plus \u00e9labor\u00e9e. Son principe consiste, pour toutes les valeurs possibles de l\u2019indice \u0745, \u00e0 d\u00e9terminer la somme maximale \u0735(\u0745) des sous-s\u00e9quences qui se terminent \u00e0 l'indice \u0745. En d\u00e9signant par <code>lst[\u0745]</code> l\u2019\u00e9l\u00e9ment de lst d\u2019indice \u0745, on peut v\u00e9rifier que </p> <ul> <li>S(0) = lst[0]</li> <li>et pour \u0745\\(i \\geq 1\\) : <ul> <li>\\(S\u0735(i) = lst[\u0745i]\\) si \u0735\\((\u0745i- 1) \u2264 0\\) ;</li> <li>\\(i = lst[\u0745i] + \u0735S(\u0745i-1)\\) si \u0735\\(S(\u0745i-1) &gt; 0\\).  </li> </ul> </li> </ul> <p>Question 3. a.</p> Enonc\u00e9Solution <p>Recopier et compl\u00e9ter le tableau ci-dessous avec les valeurs de \u0735\\(S(\u0745i)\\) pour la liste consid\u00e9r\u00e9e en exemple.</p> <p></p> <p></p> <p>Question 3. b.</p> Enonc\u00e9Solution <p>La solution au probl\u00e8me \u00e9tant la plus grande valeur des \u0735\\(S(\u0745i)\\), on demande de compl\u00e9ter la fonction <code>pgsp2</code> ci-dessous, de sorte que la variable sommes_max contienne la liste des valeurs \u0735\\(S(\u0745i)\\).  </p> \ud83d\udc0d Script Python<pre><code>def pgsp2(lst):\n    sommes_max = [lst[0]]\n    for i in range(1, len(lst)):\n        # \u00e0 compl\u00e9ter\n\nreturn max(sommes_max)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def pgsp2(lst):\n    somme_max = [lst[0]]\n    for i in range (1,len(lst)):\n        if somme_max[i-1] &lt;= 0:\n            somme_max.append(lst[i])\n        else :\n            somme_max.append(lst[i]+somme_max[i-1])\n    return max(somme_max)\n</code></pre> <p>Question 3. c.</p> Enonc\u00e9Solution <p>En quoi la solution obtenue par cette approche est-elle plus avantageuse que celle de la question 2.b. ? </p> <p>Cette solution est plus avantageuse, car la complexit\u00e9 en temps de l\u2019algorithme est en \\(O(n)\\) alors que dans le cas pr\u00e9c\u00e9dent il \u00e9tait en \\(O(n^2)\\).</p> Sujet  3 : Tableau - Parcours - Programmation en G\u00e9n\u00e9ral  <p>Cet exercice porte sur l\u2019algorithmique et la programmation en Python. Il aborde les notions de tableaux de tableaux et d\u2019algorithmes de parcours de tableaux. </p> <p>Partie A : Repr\u00e9sentation d\u2019un labyrinthe </p> <p>On mod\u00e9lise un labyrinthe par un tableau \u00e0 deux dimensions \u00e0 \u074a\\(n\\) lignes et \u0749\\(m\\) colonnes avec \u074a\\(n\\) et \u0749\\(m\\) des entiers strictement positifs. Les lignes sont num\u00e9rot\u00e9es de 0 \u00e0 \u074a\\(n-1\\) et les colonnes de 0 \u00e0 \\(m-1\\). La case en haut \u00e0 gauche est rep\u00e9r\u00e9e par \\((0,0)\\) et la case en bas \u00e0 droite par \\((n-1,m-1)\\).  </p> <p>Dans ce tableau :  </p> <ul> <li>0 repr\u00e9sente une case vide, hors case de d\u00e9part et arriv\u00e9e,  </li> <li>1 repr\u00e9sente un mur,  </li> <li>2 repr\u00e9sente le d\u00e9part du labyrinthe,  </li> <li>3 repr\u00e9sente l'arriv\u00e9e du labyrinthe.  </li> </ul> <p>Ainsi, en Python, le labyrinthe ci-dessous est repr\u00e9sent\u00e9e par le tableau de tableaux <code>lab1</code>.  </p> <p></p> <p>Question A.1.</p> Enonc\u00e9 <p>Le labyrinthe ci-dessous est cens\u00e9 \u00eatre repr\u00e9sent\u00e9 par le tableau de tableaux lab2.  Cependant, dans ce tableau, un mur se trouve \u00e0 la place du d\u00e9part du labyrinthe. Donner une instruction permettant de placer le d\u00e9part au bon endroit dans lab2.</p> <p>```</p> <p></p> Solution \ud83d\udc0d Script Python<pre><code>lab2[1][0] = 2\n</code></pre> <p>Question A.2.</p> Enonc\u00e9Solution <p>\u00c9crire une fonction <code>est_valide(i, j, n, m)</code> qui renvoie <code>True</code> si le couple \\((i,j)\\) correspond \u00e0 des coordonn\u00e9es valides pour un labyrinthe de taille \\((n,m)\\), et <code>False</code> sinon. On donne ci-dessous des exemples d'appels.  </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_valide(5, 2, 10, 10)\nTrue\n&gt;&gt;&gt; est_valide(-3, 4, 10, 10)\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def est_valide(i,j,n,m):\n    return i&gt;=0 and j&gt;=0 and i&lt;n and j&lt;m\n</code></pre> <p>Question A.3.</p> <p>=== \"Enonc\u00e9     On suppose que le d\u00e9part d'un labyrinthe est toujours indiqu\u00e9, mais on ne fait aucune supposition sur son emplacement. Compl\u00e9ter la fonction depart(lab)ci-dessous de sorte qu'elle renvoie, sous la forme d'un tuple, les coordonn\u00e9es du d\u00e9part d'un labyrinthe (repr\u00e9sent\u00e9 par le param\u00e8tre lab).      Par exemple, l'appel depart(lab1) doit renvoyer le tuple (5, 0).  </p> \ud83d\udccb Texte<pre><code>```python\ndef depart(lab) :\n    n = len(lab)\n    m = len(lab[0])\n    ...\n```\n</code></pre> Solution \ud83d\udc0d Script Python<pre><code>def depart(lab):\n    n = len(lab)\n    m = len(lab[0])\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j]==2:\n                return (i,j)\n</code></pre> <p>Question A.4.</p> Enonc\u00e9Solution <p>\u00c9crire une fonction nb_cases_vides(lab) qui renvoie le nombre de cases vides d'un labyrinthe (comprenant donc l'arriv\u00e9e et le d\u00e9part). Par exemple, l'appel nb_cases_vides(lab2) doit renvoyer la valeur 19.</p> \ud83d\udc0d Script Python<pre><code>def nb_cases_vides(lab):\n    n = len(lab)\n    m = len(lab[0])\n    compt = 0\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j]==2 or lab[i][j]==3 or lab[i][j]==0:\n                compt = compt + 1\n    return compt\n</code></pre> <p>Partie B : Recherche d\u2019une solution dans un labyrinthe </p> <p>On suppose dans cette partie que les labyrinthes poss\u00e8dent un unique chemin allant du d\u00e9part \u00e0 l\u2019arriv\u00e9e sans repasser par la m\u00eame case. Dans la suite, c\u2019est ce chemin que l\u2019on appellera solution du labyrinthe. Pour d\u00e9terminer la solution d'un labyrinthe, on parcourt les cases vides de proche en proche. Lors d\u2019un tel parcours, afin d\u2019\u00e9viter de tourner en rond, on choisit de marquer les cases visit\u00e9es. Pour cela, on remplace la valeur d'une case visit\u00e9e dans le tableau repr\u00e9sentant le labyrinthe par la valeur 4.  </p> <p>Question B.1.</p> Enonc\u00e9Solution <p>On dit que deux cases d'un labyrinthe sont voisines si elles ont un c\u00f4t\u00e9 commun. On consid\u00e8re une fonction <code>voisines(i, j, lab)</code> qui prend en arguments deux entiers \u0745\\(i\\) et \u0746\\(j\\) repr\u00e9sentant les coordonn\u00e9es d\u2019une case et un tableau <code>lab</code> qui repr\u00e9sente un labyrinthe. Cette fonction renvoie la liste des coordonn\u00e9es des cases voisines de la case de coordonn\u00e9es \\((i,j)\\) qui sont valides, non visit\u00e9es et qui ne sont pas des murs. L'ordre des \u00e9l\u00e9ments de cette liste n'importe pas. Ainsi, l'appel <code>voisines(1, 1, [[1, 1, 1], [4, 0, 0], [1, 0, 1]])</code> renvoie la liste <code>[(2, 1), (1, 2)]</code>. Que renvoie l'appel <code>voisines(1, 2, [[1, 1, 4], [0, 0, 0], [1, 1, 0]])</code> ?</p> <p>L\u2019appel de la fonction renvoie : [(2, 2), (1, 1)]</p> <p>Question 2. On souhaite stocker la solution dans une liste chemin. Cette liste contiendra les coordonn\u00e9es des cases de la solution, dans l'ordre. Pour cela, on proc\u00e8de de la fa\u00e7on suivante.  </p> <ul> <li>Initialement :<ul> <li>d\u00e9terminer les coordonn\u00e9es du d\u00e9part : c'est la premi\u00e8re case \u00e0 visiter ;</li> <li>ajouter les coordonn\u00e9es de la case d\u00e9part \u00e0 la liste chemin.</li> </ul> </li> <li>Tant que l'arriv\u00e9e n'a pas \u00e9t\u00e9 atteinte :<ul> <li>on marque la case visit\u00e9e avec la valeur 4 ;</li> <li>si la case visit\u00e9e poss\u00e8de une case voisine libre, la premi\u00e8re case de la liste renvoy\u00e9e par la fonction <code>voisines</code> devient la prochaine case \u00e0 visiter et on ajoute \u00e0 la liste chemin ;  </li> <li>sinon, il s'agit d'une impasse. On supprime alors la derni\u00e8re case dans la liste chemin. La prochaine case \u00e0 visiter est celle qui est d\u00e9sormais en derni\u00e8re position de la liste chemin. </li> </ul> </li> </ul> <p>Question B.2. a.</p> <p>=== \"Enonc\u00e9     Le tableau de tableaux lab3 ci-dessous repr\u00e9sente un labyrinthe.  </p> \ud83d\udccb Texte<pre><code>```python\nlab3 =  [[1, 1, 1, 1, 1, 1],\n        [2, 0, 0, 0, 0, 3],\n        [1, 0, 1, 0, 1, 1],\n        [1, 1, 1, 0, 0, 1]]\n```\n\nLa suite d'instructions ci-dessous simule le d\u00e9but des modifications subies par la liste chemin lorsque l'on applique la m\u00e9thode pr\u00e9sent\u00e9e.  \n```python\n# entr\u00e9e: (1, 0), sortie (1, 5)\nchemin = [(1, 0)]\nchemin.append((1, 1))\nchemin.append((2, 1))\nchemin.pop()\nchemin.append((1, 2))\nchemin.append((1, 3))\nchemin.append((2, 3))\n```\n\nCompl\u00e9ter cette suite d'instructions jusqu'\u00e0 ce que la liste chemin repr\u00e9sente la solution.  \nRappel : la m\u00e9thode pop supprime le dernier \u00e9l\u00e9ment d'une liste et renvoie cet \u00e9l\u00e9ment.\n</code></pre> Solution \ud83d\udc0d Script Python<pre><code># entr\u00e9e: (1, 0), sortie (1, 5)\nchemin = [(1, 0)]\nchemin.append((1,1))\nchemin.append((2,1))\nchemin.pop()\nchemin.append((1,2))\nchemin.append((1,3))\nchemin.append((2,3))\nchemin.append((3,3))\nchemin.append((3,4))\nchemin.pop()\nchemin.pop()\nchemin.pop()\nchemin.append((1,4))\nchemin.append((1,5))\n</code></pre> <p>Question B.2. b.</p> Enonc\u00e9Solution <p>Recopier et compl\u00e9ter la fonction solution(lab) donn\u00e9e ci-dessous de sorte qu'elle renvoie le chemin solution du labyrinthe repr\u00e9sent\u00e9 par le param\u00e8tre lab.  </p> <p>On pourra pour cela utiliser la fonction voisines.</p> \ud83d\udc0d Script Python<pre><code>def solution(lab):\n    chemin = [depart(lab)]\n    case = chemin[0]\n    i = case[0]\n    j = case[1]\n    ---\n</code></pre> <p>Par exemple, l 'appel <code>solution(lab2)</code> doit renvoyer <code>[(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5)]</code>. *</p> \ud83d\udc0d Script Python<pre><code>def solution(lab):\n    chemin = [depart(lab)]\n    case = chemin[0]\n    i = case[0]\n    j = case[1]\n    while lab[i][j] != 3:\n        lab[i][j]=4\n        v = voisines(i,j,lab)\n        if len(v) != 0 :\n            prochaine = v.pop()\n            chemin.append(prochaine)\n            i = prochaine[0]\n            j = prochaine[1]\n        else :\n            chemin.pop()\n            n = len(chemin)\n            i = chemin[n-1][0]\n            j = chemin[n-1][1]\n    return chemin\n</code></pre>"},{"location":"divers/bns22/","title":"BNS 2022 : passage en revue des sujets","text":""},{"location":"divers/bns22/#sujet-1","title":"Sujet 1","text":""},{"location":"divers/bns22/#exercice-11","title":"Exercice 1.1","text":""},{"location":"divers/bns22/#lenonce","title":"L'\u00e9nonc\u00e9","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p>"},{"location":"divers/bns22/#commentaires","title":"Commentaires","text":"<p>Pas grand chose mis \u00e0 part  cette distinction caract\u00e8re/cha\u00eene de caract\u00e8res qui n'existe  pas en  Python. La  personne qui  a r\u00e9dig\u00e9  est s\u00fbrement  une habitu\u00e9e d'Ocaml en pr\u00e9pa :) Il y  a aussi cette espace  apr\u00e8s la virgule  des appels de <code>recherche</code>  plus ou moins existante... Enfin le choix du  nom <code>recherche</code> est discutable car cela  ferait plus penser \u00e0 un test renvoyant un bool\u00e9en (je recherche <code>i</code> dans <code>mississippi</code>). On aurait pu choisr <code>compte_lettres</code>, <code>nb_occurrences</code>, <code>compte_occurrences</code>, etc.</p>"},{"location":"divers/bns22/#exercice-12","title":"Exercice 1.2","text":""},{"location":"divers/bns22/#lenonce_1","title":"L'\u00e9nonc\u00e9","text":"<p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets - le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>pieces=[100, 50, 20, 10, 5, 2, 1]</code> - (on supposera qu\u2019il n\u2019y a pas de limitation quant \u00e0 leur nombre), on cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre pour une somme donn\u00e9e en argument. Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>Pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n        if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton_r(68,[],0)\n[50, 10, 5, 2, 1]\n&gt;&gt;&gt;rendu_glouton_r(291,[],0)\n[100, 100, 50, 20, 20, 1]\n2/3\n</code></pre>"},{"location":"divers/bns22/#commentaires_1","title":"Commentaires","text":"<p>Une erreur grossi\u00e8re sur 4 de la version  2021 de cet exercice a disparu mais il en reste 3...</p> <p>On fermerait presque les yeux sur l'erreur d'indentation de la premi\u00e8re ligne du bloc de la fonction, de l'oubli du <code>_r</code> en suffixe du nom de la fonction dans le code de celle-ci, du  <code>P</code> majuscule de <code>pieces</code>...Mais le pire est  \u00e0 venir : la param\u00e8tre par  d\u00e9faut mutable. La personne  qui a r\u00e9dig\u00e9 semble  s'en \u00eatre rendu compte puisqu'elle remet l'argument par d\u00e9faut  dans l'appel de la fonction mais alors on  se demande vraiment  pourquoi il  y a eu  un param\u00e8tre par  d\u00e9faut. Le raisonnement a s\u00fbrement \u00e9t\u00e9  : \" oh \u00e7a marche p\u00f4 ! Je  vais remettre le param\u00e8tre par d\u00e9faut dans l'appel pour voir...ah tiens \u00e7a marche\".</p>"},{"location":"divers/bns22/#pourquoi-un-parametre-par-defaut-mutable-cest-le-mal","title":"Pourquoi un param\u00e8tre par d\u00e9faut mutable, c'est le mal ?","text":"<p>Si on utilise le code propos\u00e9 dans le sujet 1 (en r\u00e9tablissant l'indentation, en corrigeant les coquilles) :</p> \ud83d\udc0d Script Python<pre><code>pieces = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton_r(arendre, solution=[], i = 0):\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton_r(arendre - p, solution, i)\n    else :\n        return rendu_glouton_r(arendre, solution, i + 1)\n</code></pre> <p>On obtient :</p> \ud83d\udc0d Script Python<pre><code>In [2]: rendu_glouton_r(68)\nOut[4]: [50, 10, 5, 2, 1]\n\nIn [5]: rendu_glouton_r(68)\nOut[5]: [50, 10, 5, 2, 1, 50, 10, 5, 2, 1]\n\nIn [6]: rendu_glouton_r(68)\nOut[6]: [50, 10, 5, 2, 1, 50, 10, 5, 2, 1, 50, 10, 5, 2, 1]\n</code></pre> <p>L'id\u00e9e de la personne qui a propos\u00e9 ce code est s\u00fbrement de retrouver l'id\u00e9e de r\u00e9cursion terminale ch\u00e8re aux utilisateurs de Ocaml en pr\u00e9pa. Mais ici, on travaille en Python...Le code de la fonction est cr\u00e9\u00e9 une bonne fois pour toute \u00e0 la cr\u00e9ation de la fonction i.e. le param\u00e8tre par d\u00e9faut est li\u00e9 une bonne fois pour toute \u00e0 <code>solution</code>. Quand on appelle la fonction, on l'appelle toujours avec le m\u00eame param\u00e8tre par d\u00e9faut. Le probl\u00e8me est que <code>solution</code> est ici mutable et va donc \u00e9voluer \u00e0 chaque ex\u00e9cution de la fonction. Une erreur classique mais d\u00e9licate \u00e0 comprendre pour les \u00e9l\u00e8ves et qu'on attend s\u00fbrement pas \u00e0 trouver dans un sujet.</p>"},{"location":"divers/bns22/#comment-faire","title":"Comment faire ?","text":"<p>On pouvait dire\u2026 Oh ! Dieu !\u2026 bien des choses en somme\u2026 La 1\u00e8re id\u00e9e est de prendre un param\u00e8tre par d\u00e9faut non mutable comme un <code>tuple</code> mais on ne pourra pas le faire \u00e9voluer car il est par essence non mutable. On peut prendre <code>None</code> : il n'y a pas de solution au d\u00e9part. Le probl\u00e8me est que ce n'est pas ce qu'on a envie d'avoir. Mais on peut bidouiller ainsi :</p> \ud83d\udc0d Script Python<pre><code>pieces = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton_r(arendre, solution = None, i = 0):\n    if solution is None:\n        solution = []\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton_r(arendre - p, solution, i)\n    else :\n        return rendu_glouton_r(arendre, solution, i + 1)\n</code></pre> <p>Ou on peut simuler de la r\u00e9cursion terminale (inutile en python) avec une fonction auxiliaire.</p> <p>Ou on ne cherche pas \u00e0 rendre la r\u00e9cursion terminale car c'est totalement inutile en Python :</p> \ud83d\udc0d Script Python<pre><code>def rendu_glouton_r(arendre, i = 0):\n    if arendre == 0:\n        return []\n    p = pieces[i]\n    if p &lt;= arendre :\n        return rendu_glouton_r(arendre - p, i) + [p]\n    else :\n        return rendu_glouton_r(arendre, i + 1)\n</code></pre> <p>Petit bonus : la visualisation avec Pythontutor</p>"},{"location":"divers/bns22/#sujet-2","title":"Sujet 2","text":""},{"location":"divers/bns22/#exercice-21","title":"Exercice 2.1","text":""},{"location":"divers/bns22/#enonce","title":"\u00c9nonc\u00e9","text":"<p>Soit le couple (<code>note</code>,<code>coefficient</code>):</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier positif.</li> </ul> <p>Les r\u00e9sultats aux \u00e9valuations d'un \u00e9l\u00e8ve sont regroup\u00e9s dans une liste compos\u00e9e de couples (<code>note</code>,<code>coefficient</code>).</p> <p>\u00c9crire une fonction moyenne qui renvoie la moyenne pond\u00e9r\u00e9e de cette liste donn\u00e9e en param\u00e8tre.</p> <p>Par exemple, l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer le r\u00e9sultat du calcul suivant :</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p>"},{"location":"divers/bns22/#commentaires_2","title":"Commentaires","text":"<p>Pas grand chose  \u00e0 dire, \u00e0 part que  c'est plus facile \u00e0 \u00e9crire qu'un  tri ou un algo glouton comme on en demande dans d'autres sujets. Attend-on une gestion de la liste vide, des coefficients n\u00e9gatifs ?</p>"},{"location":"divers/bns22/#exercice-22","title":"Exercice 2.2","text":""},{"location":"divers/bns22/#enonce_1","title":"\u00c9nonc\u00e9","text":"<p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal. Dans ce tableau de forme triangulaire, chaque ligne commence et se termine par le nombre 1. Par ailleurs, la valeur qui occupe une case situ\u00e9e \u00e0 l\u2019int\u00e9rieur du tableau s\u2019obtient en ajoutant les valeurs des deux cases situ\u00e9es juste au-dessus, comme l\u2019indique la figure suivante :</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s. Elle doit renvoyer une liste correspondant au triangle de Pascal de la ligne <code>1</code> \u00e0 la ligne <code>n</code> o\u00f9 <code>n</code> est un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 <code>2</code> (le tableau sera contenu dans la variable <code>C</code>). La variable <code>Ck</code> doit, quant \u00e0 elle, contenir, \u00e0 l\u2019\u00e9tape num\u00e9ro <code>k</code>, la <code>k</code>-i\u00e8me ligne du tableau.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir :</p> Bash Session<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> <p>Pour <code>n = 5</code>, voici ce qu'on devra obtenir :</p> Bash Session<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre>"},{"location":"divers/bns22/#commentaires_3","title":"Commentaires","text":"<p>Un sujet un peu math\u00e9matique (apr\u00e8s la moyenne en 1) d'un professeur fran\u00e7ais n\u00e9 avant 2000 qui pense encore aux coefficients binomiaux \u00e9crits sous la forme \\(C_n^k\\) :) Les  \u00e9l\u00e8ves   ayant  vu  la  formule   de  Pascal  en  maths   seront  avantag\u00e9s mais...ah...on  me parle  dans mon  \u00e9couteur...cela  a disparu  du programme  de sp\u00e9cialit\u00e9  terminale  depuis  la  r\u00e9forme...mais   cela  a  subsist\u00e9  en  maths compl\u00e9mentaires...j'ai d\u00fb mal comprendre.</p> <p>Encore du laisser-aller dans les espaces entre les op\u00e9rateurs binaires.</p> <p>Une liste pr\u00e9sent\u00e9e en \"triangle rectangle\" aurait peut-\u00eatre \u00e9t\u00e9 plus facile \u00e0 visualiser et la gestion des bornes des <code>range</code> est \u00e0 mener avec attention.</p> <p>Le choix des indices est peut-\u00eatre perturbant car on a plus l'habitude de <code>i</code> et <code>j</code> mais je pinaille.</p> <p>Je suppose qu'on attend \u00e7a:</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C = [[1]]\n    for k in range(1, n + 1):\n        Ck = [1]\n        for i in range(1, k):\n            Ck.append(C[k-1][i-1] + C[k-1][i])\n        Ck.append(1)\n        C.append(Ck)\n    return C\n</code></pre> <p>Je  suppose aussi  que  les coups  des  1 en  bordure vont  se  r\u00e9gler par  essais successifs.</p> <p>On est presque content qu'il n'y ait pas de grosse absurdit\u00e9 ici...</p>"},{"location":"divers/bns22/#sujet-3","title":"Sujet 3","text":""},{"location":"divers/bns22/#exercice-31","title":"Exercice 3.1","text":""},{"location":"divers/bns22/#enonce_2","title":"\u00c9nonc\u00e9","text":"<p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es assez petites n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches.</p> <p>Programmer la fonction <code>delta</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n42\n</code></pre>"},{"location":"divers/bns22/#commentaires_4","title":"Commentaires","text":"<p>Allez, la coquille, la coquille, la coquille  ! Oui, bien s\u00fbr, vous l'avez vue : <code>delta([42])</code> doit renvoyer <code>[42]</code> et non pas <code>42</code>, \u00e0 moins que la personne qui a test\u00e9 le sujet n'ait utilis\u00e9 Deep Thought et recherchait la r\u00e9ponse \u00e0 la question ultime sur la vie, l'univers et tout le reste.</p> <p>Puisqu'on ne peut  pas modifier les sujets,  encore un \u00e0 jeter \u00e0  la poubelle en plus du  1 et du  2 pour ne  pas favoriser les maths  comps. On esp\u00e8re  qu'on va bient\u00f4t en trouver un de publiable.</p> <p>Sinon, il y a quand m\u00eame des pi\u00e8ges...</p> <p>On peut penser \u00e0 un changement en place :</p> \ud83d\udc0d Script Python<pre><code>def delta1(xs):\n    for i in range(1, len(xs)):\n        xs[i] = xs[i] - xs[i - 1]\n    return xs\n</code></pre> <p>mais \u00e7a pose probl\u00e8me:</p> Bash Session<pre><code>In [142]:  delta1([1000, 800, 802, 1000, 1003])\nOut[142]: [1000, -200, 1002, -2, 1005]\n</code></pre> <p>Donc en bon habitu\u00e9  de la programmation fonctionnelle qui ne fait  pas de mal \u00e0 ses arguments, on pr\u00e9f\u00e8rera \u00e7a :</p> \ud83d\udc0d Script Python<pre><code>def delta2(xs):\n    ys = [xs[0]] # mais il y a le probl\u00e8me de la liste vide\n    for i in range(1, len(xs)):\n        ys.append(xs[i] - xs[i - 1])\n    return ys\n</code></pre> <p>mais on aura un probl\u00e8me avec la liste vide.</p> <p>On peut arranger comme \u00e7a :</p> \ud83d\udc0d Script Python<pre><code>def delta3(xs):\n    ys = xs[:] # il faut conna\u00eetre les probl\u00e8mes de copie de liste\n    for i in range(1, len(xs)):\n        ys[i] = xs[i] - xs[i - 1]\n    return ys\n</code></pre> <p>mais il faut savoir faire une copie de liste car sinon avec \u00e7a :</p> <p>\ud83d\udc0d Script Python<pre><code>def delta4(xs):\n    ys = xs \n    for i in range(1, len(xs)):\n        ys[i] = xs[i] - xs[i - 1]\n    return ys\n</code></pre> on a ce probl\u00e8me :</p> Bash Session<pre><code>In [146]:  delta4([1000, 800, 802, 1000, 1003])\nOut[146]: [1000, -200, 1002, -2, 1005]\n</code></pre> <p>On peut aussi penser \u00e0 \u00e7a:</p> \ud83d\udc0d Script Python<pre><code>def delta5(xs):\n    return [xs[0]] + [xs[i] - xs[i - 1] for i in range(1, len(xs))] \n</code></pre> <p>Bref, il y a quand m\u00eame des pi\u00e8ges.</p>"},{"location":"divers/bns22/#exercice-32","title":"Exercice 3.2","text":""},{"location":"divers/bns22/#enonce_3","title":"\u00c9nonc\u00e9","text":"<p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212,\u00d7,\u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[3 \\times (8 + 7) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire. Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ...\n    if ...:\n        return s\n\n    return '('+ s +')'\n</code></pre>"},{"location":"divers/bns22/#commentaire","title":"Commentaire","text":"<p>Ouh  la, c'est  pas \u00e9vident  \u00e9vident ici.  J'ai r\u00e9pondu  un peu  au hasard  pour \u00e9quilibrer les \u00e9critures et \u00e7a a march\u00e9.</p> <p>Je suppose qu'on attend \u00e7a :</p> \ud83d\udc0d Script Python<pre><code>def expression_infixe(e):\n    s = ''\n    if e.gauche is not None:\n        s = s + expression_infixe(e.gauche)\n    s = s + str(e.valeur) \n    if e.droit is not None:\n        s = s + expression_infixe(e.droit)\n    if e.est_une_feuille():\n        return s \n    return '('+ s +')'\n</code></pre> <p>Cette construction  de plusieurs <code>if</code> successifs  sans <code>else</code> me met  tr\u00e8s mal \u00e0 l'aise. </p> <p>Je ne pense pas non plus que les candidats comprennent grand chose \u00e0 cette fonction et vont faire des essais jusqu'\u00e0 ce que \u00e7a marche ou vont utiliser les aides de la personne qui les examine.</p> <p>Un exercice \u00e0 \u00e9viter de prendre dans sa liste.</p>"},{"location":"divers/bns22/#sujet-4","title":"Sujet 4","text":""},{"location":"divers/bns22/#exercice-41","title":"Exercice 4.1","text":""},{"location":"divers/bns22/#enonce_4","title":"\u00c9nonc\u00e9","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code>, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; recherche([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; recherche([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; recherche([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p>"},{"location":"divers/bns22/#commentaires_5","title":"Commentaires","text":"<p>Tiens, encore une recherche...Sauf que c'est  une toute autre recherche que dans le sujet 1. On peut donc l'appeler <code>recherche_consecutifs</code> peut-\u00eatre.</p> <p>Ensuite la liste  en param\u00e8tre est d\u00e9sign\u00e9e  comme \u00e9tant un tableau  et la liste renvoy\u00e9e est  d\u00e9sign\u00e9e comme \u00e9tant une  liste. Comme M. Preskovic,  je suis dans toutes mes confuses avec un tel \u00e9nonc\u00e9.</p> <p>Je suppose qu'on attend quelque chose comme \u00e7a:</p> \ud83d\udc0d Script Python<pre><code>def recherche(tab):\n    couples = []\n    for i in range(len(tab) - 1):\n        if tab[i + 1] - tab[i] == 1:\n            couples.append((tab[i], tab[i + 1]))\n    return couples\n</code></pre>"},{"location":"divers/bns22/#exercice-42","title":"Exercice 4.2","text":""},{"location":"divers/bns22/#enonce_5","title":"\u00c9nonc\u00e9","text":"<p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code>, deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M,2,1,3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== ...:\n        return None\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, ..., val)\n</code></pre> <p>Exemple :</p> Bash Session<pre><code>&gt;&gt;&gt; M = [[0,0,1,0],[0,1,0,1],[1,1,1,0],[0,1,1,0]]\n&gt;&gt;&gt; propager(M,2,1,3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre>"},{"location":"divers/bns22/#commentaires_6","title":"Commentaires","text":"<p>Je vais  \u00eatre d\u00e9sagr\u00e9able  mais cet  exercice n'a  strictement aucun  int\u00e9r\u00eat en l'\u00e9tat si ce n'est \u00eatre capable de comprendre un \u00e9nonc\u00e9 pas clair.</p> <p>Ensuite,  on  peut compl\u00e9ter  les  trous  sans  du  tout chercher  \u00e0  comprendre l'algo. Je le sais puisque c'est comme \u00e7a que j'ai fait. </p> <p>\u00c0 \u00e9viter donc.</p> <p>Ah, voici le jeu des devinettes \u00e0 la Pif Gadget :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== 0:\n        return None\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == 1):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((i + 1) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, i + 1, j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((j - 1) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, j - 1, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((j + 1) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, j + 1, val)\n</code></pre>"},{"location":"divers/bns22/#sujet-5","title":"Sujet 5","text":""},{"location":"divers/bns22/#exercice-51","title":"Exercice 5.1","text":""},{"location":"divers/bns22/#enonce_6","title":"\u00c9nonc\u00e9","text":"<p>\u00c9crire une fonction <code>rechercheMinMax</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9s <code>tab</code>, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s \u2018min\u2019 et \u2018max\u2019. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n</code></pre></p>"},{"location":"divers/bns22/#commentaires_7","title":"Commentaires","text":"<p>Tiens, une fonction recherche...Celle-ci a un suffixe. Mais avec une \u00e9criture de Haskellien. On doit \u00eatre patient. Un  jour les personnes qui r\u00e9digent les sujets liront la PEP 8. On aurait aim\u00e9 un <code>recherche_min_max</code>.</p> <p>On ne  parlera pas  du choix de  nom un peu  perturbant pour  qui a fait  un peu d'algo.</p> <p>On trouve encore ici le nom de tableau. Au moins, on ne parle pas de liste juste apr\u00e8s.</p> <p>Bon, sinon  c'est du  quatre en  un: recherche  d'un max  et d'un  min et manipulation d'un  dictionnaire et  faire attention \u00e0  l'initialisation avec les <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>def recherche_min_max(tab):\n    if len(tab) == 0:\n        return  {'min': None, 'max': None}\n    dic = {'min': tab[0], 'max': tab[0]}\n    for nombre in tab[1:]:\n        if nombre &lt; dic['min']:\n            dic['min'] = nombre\n        if nombre &gt; dic['max']:\n            dic['max'] = nombre\n    return dic\n</code></pre>"},{"location":"divers/bns22/#exercice-52","title":"Exercice 5.2","text":""},{"location":"divers/bns22/#enonce_7","title":"\u00c9nonc\u00e9","text":"<p>On dispose d\u2019un programme permettant de cr\u00e9er un objet de type <code>PaquetDeCarte</code>, selon les \u00e9l\u00e9ments indiqu\u00e9s dans le code ci-dessous. Compl\u00e9ter ce code aux endroits indiqu\u00e9s par <code>#A compl\u00e9ter</code>, puis ajouter des assertions dans l\u2019initialiseur de <code>Carte</code>, ainsi que dans la m\u00e9thode <code>getCarteAt()</code>.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str(self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        #A compl\u00e9ter\n\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        #A compl\u00e9ter\n</code></pre>"},{"location":"divers/bns22/#commentaires_8","title":"Commentaires","text":"<p>Bon, vous allez encore dire que je ne suis jamais content. </p> <ul> <li>les docstrings sont mises n'importe o\u00f9. Pas pro.</li> <li>des majuscules pour les noms d'attributs.</li> <li>les noms \u00e0 la Haskell au lieu de les \u00e9crire \u00e0 la Python</li> <li>on aurait  pu  utiliser un  dictionnaire pour  ces  associations valeur:  nom   puisque c'est au programme et plus joli.</li> <li>Les assertions, c'est limite. Et de  toute fa\u00e7on, c'est pr\u00e9vu pour le d\u00e9bugage   seulement. </li> </ul> <p>\u00c7a c'est des d\u00e9tails. Ensuite, je n'ai pas compris la question (mon c\u00f4t\u00e9 un peu maniaco-depressif). \u00c7a veut dire quoi remplir le paquet de carte ? Avec quoi ? Ensuite, selon la mani\u00e8re dont on remplit le jeu, la carte num\u00e9ro 20 ne sera pas celle du test propos\u00e9 (moi j'ai eu le roi de tr\u00e8fle).</p> <p>Encore un sujet \u00e0 \u00e9viter.</p> <p>Une proposition:</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        if c not in range(1, 5) or v not in range(1, 14):\n            raise ValueError(\"Hauteur ou couleur invalide(s)\")\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str(self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        # self.contenu = [Carte(couleur, valeur) for couleur in range(1, 5) for valeur in range(1, 14)] \n        # ou \n        self.contenu = [Carte(couleur, valeur) for valeur in range(1, 14) for couleur in range(1, 5)] \n\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        if pos not in range(52):\n            raise ValueError(\"Y a que 52 cartes, tricheur\")\n        return self.contenu[pos]\n</code></pre>"},{"location":"divers/conseil/","title":"Conseils de travail","text":""},{"location":"divers/conseil/#conditions-materielles","title":"Conditions mat\u00e9rielles","text":"<p>Lorsqu'on ne travaillera pas sur les notebook de capytale, il est conseill\u00e9 de travailler avec 3 espaces :</p> <ul> <li>l'\u00e9cran de l'ordinateur partitionn\u00e9 avec les 2 premiers espaces: ce site et un IDE (Spyder ou Thonny par exemple);</li> </ul> <p>C'est en codant qu'on apprend \u00e0 coder</p> <p>Tous les exemples de code dans le cours doivent \u00eatre retap\u00e9s (r\u00e9sistez \u00e0 l'envie du copier-coller).</p> <p>Cela permet de :</p> <ul> <li>m\u00e9moriser la syntaxe ;</li> <li>v\u00e9rifier si le code propos\u00e9 ne contient pas d'erreur ;</li> </ul> <p>et le plus important :</p> <ul> <li>faire ses propres tests et modifications pour v\u00e9rifier sa bonne compr\u00e9hension. </li> </ul> <ul> <li>et un troisi\u00e8me espace essentiel : un cahier \u00e0 spirale et un stylo !</li> </ul> <p></p>"},{"location":"divers/conseil/#dossiers-fichiers-et-versionning","title":"Dossiers, fichiers et versionning","text":"<p>Cette ann\u00e9e en NSI nous allons manipuler un certain nombre de fichiers qui sont dans capytale sur l'ENT. Pensez \u00e0 les \"\u00e9tiqueter\", de plus il est possible de les t\u00e9l\u00e9charger sur cl\u00e9 usb, dans ce cas il est important de les nommer et les classer de fa\u00e7on rigoureuse pour les retrouver rapidement et les partager.</p> <p>Conseils</p> <ul> <li>Utilisez des dossiers pour classer vos fichiers. Il n'y en a jamais assez.</li> <li>Prenez l'habitude de faire plusieurs sauvegardes de vos documents (sur le r\u00e9seau du lyc\u00e9e, sur l'ENT, sur cl\u00e9 USB).</li> <li>\u00c9vitez dans les noms de fichiers et de dossiers les espaces (utilisez plut\u00f4t _ ) ainsi que les caract\u00e8res accentu\u00e9s et les caract\u00e8res sp\u00e9ciaux.</li> <li>Un nom de fichier doit \u00eatre parlant (un peu comme une variable en fait). On \u00e9vitera de nommer ses codes Python <code>python1.py</code>, <code>python2.py</code>, <code>python3.py</code>, etc. Mais plut\u00f4t <code>NSI_T4_tri_selection.py</code> par exemple pour un exercice de programmation sur le tri par selection au th\u00e8me 4.</li> <li>Lorsqu'on travaille sur un projet ou un programme cons\u00e9quent, il peut \u00eatre utile de conserver des archives du travail \u00e0 plusieurs \u00e9tapes de l'\u00e9laboration, plut\u00f4t que de ne conserver que la derni\u00e8re version. \u00c0 cet effet on pourra num\u00e9roter : <code>NSI_projet_morpion_v1.py</code>, puis <code>NSI_projet_morpion_v2.py</code>, <code>NSI_projet_morpion_v3.py</code>, etc.</li> </ul>"},{"location":"divers/conseil/#usage-du-clavier","title":"Usage du clavier","text":"<p>Utiliser le clavier est souvent bien plus pratique et surtout plus rapide qu'utiliser la souris. Encore faut-il apprendre \u00e0 l'apprivoiser...</p> <p>La s\u00e9lection au clavier</p> <p>Outre les touches <code>DEBUT</code> et <code>FIN</code> qui permettent d'atteindre rapidement le d\u00e9but ou la fin d'une ligne, les fl\u00e8ches directionelles servent \u00e9videmment \u00e0 se d\u00e9placer dans du texte. Mais combin\u00e9es:</p> <ul> <li>\u00e0 la touche <code>CTRL</code> : elles permettent de se d\u00e9placer de mot en mot;</li> <li>\u00e0 la touche <code>MAJ</code> : elles permettent de s\u00e9lectionner un caract\u00e8re;</li> <li>aux touches <code>MAJ</code> et <code>CTRL</code>: elles permettent de s\u00e9lectionner une mot.</li> </ul> <p>De m\u00eame, en se pla\u00e7ant en d\u00e9but d'une ligne et en combinant la touche <code>MAJ</code> et <code>FIN</code>, on s\u00e9lectionne la ligne enti\u00e8re.</p> <p>Les raccourcis clavier</p> <p>Il existe de tr\u00e8s nombreux raccourcis clavier qui permettent d'ex\u00e9cuter des t\u00e2ches courantes sans passer par les menus du logiciel. Certains sont (quasi-)universels, c'est-\u00e0-dire que ce sont les m\u00eames sur tous les logiciels, d'autres sont sp\u00e9cifiques \u00e0 chaque logiciel. Il est important d'en conna\u00eetre quelques-uns pour \u00eatre plus efficace.</p> Les universelsIDENavigateur Web <ul> <li>La triplette magique <code>CTRL+X</code>, <code>CTRL+C</code>, <code>CTRL+V</code> pour couper, copier, coller;</li> <li><code>CTRL+O</code> pour ouvrir un fichier</li> <li><code>CTRL+N</code> pour cr\u00e9er un nouveau document;</li> <li><code>CTRL+S</code> pour sauvegarder le document en cours;</li> <li><code>CTRL+MAJ+S</code> pour sauvegarder en pr\u00e9cisant le nom du fichier;</li> <li><code>CTRL+Z</code> pour annuler la derni\u00e8re action, <code>CTRL+Y</code> ou <code>CTRL+MAJ+Z</code> pour la r\u00e9tablir;</li> <li><code>CTRL+W</code> pour fermer un onglet;</li> <li><code>CTRL+Q</code> ou <code>ALT+F4</code> pour fermer le logiciel;</li> <li><code>CTRL+A</code> pour s\u00e9lectionner tout (All).</li> </ul> <p>\u00c0 chercher de suite lorsqu'on utilise un nouvel IDE, les raccourcis pour les actions suivantes (entre parenth\u00e8ses ceux de Thonny):</p> <ul> <li>ex\u00e9cuter le code (<code>F5</code>)</li> <li>commenter/d\u00e9commenter une ligne (<code>CTRL+M</code>)</li> </ul> <ul> <li><code>CTRL+T</code> pour ouvrir un nouvel onglet;</li> <li><code>CTRL+H</code> pour ouvrir l'historique;</li> <li>combiner <code>CTRL</code> + clic pour forcer l'ouverture d'un lien dans un nouvel onglet;</li> <li>combiner <code>MAJ</code> + clic pour forcer l'ouverture d'un lien dans une nouvelle fen\u00eatre;</li> </ul> sources <ul> <li>site de C\u00e9dric Gouygou</li> </ul>"},{"location":"divers/ep/","title":"\u00c9preuve pratique \ud83d\udcbb","text":"<ul> <li> <p>Rappel des conditions de passation sur cette page</p> </li> <li> <p>Pdf de l'int\u00e9gralit\u00e9 des exercices</p> </li> </ul>"},{"location":"divers/ep/#exercice-011","title":"Exercice 01.1 \u25a1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"divers/ep/#exercice-012","title":"Exercice 01.2 \u25a1","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9Correction <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>On dispose d'une fonction <code>distance</code> et d'une fonction <code>plus_courte_distance</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre> Recopier sous Python (sans les commentaires) ces deux fonctions puis compl\u00e9ter leur code et ajouter une ou des d\u00e9clarations (<code>assert</code>) \u00e0 la fonction <code>distance</code> permettant de v\u00e9rifier la ou les pr\u00e9conditions.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = distance(point, depart)\n    for i in range (1, len(tab)):\n        if distance(tab[i], depart) &lt; min_dist:\n            point = tab[i]\n            min_dist = distance(tab[i], depart)\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre>"},{"location":"divers/ep/#exercice-021","title":"Exercice 02.1 \u25a1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code>   (type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide et affiche 'erreur' si le tableau est vide.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n'erreur'\n</code></pre></p> <p>L'\u00e9nonc\u00e9 n'est pas tr\u00e8s clair quand il dit \u00abd'afficher 'erreur'\u00bb (ce qui suppose un <code>print</code> et non un <code>return</code>). Nous choississons donc dans ce cas de renvoyer <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('erreur')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"divers/ep/#exercice-022","title":"Exercice 02.2 \u25a1","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (type <code>list</code> dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri,le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> <p> Zone de 0Zone non tri\u00e9eZone de 1 </p> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = ...\n    j = ...\n    while i != j :\n        if tab[i]== 0:\n            i = ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p> <p>\" \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = 0\n    j = len(tab) - 1\n    while i != j :\n        if tab[i]== 0:\n            i = i + 1\n        else :\n            valeur = tab[j]\n            tab[j] = tab[i]\n            tab[i] = valeur\n            j = j - 1\n    return tab\n</code></pre></p>"},{"location":"divers/ep/#exercice-031","title":"Exercice 03.1 \u25a1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>\u00c9nonc\u00e9 peu clair, on ne sait pas si <code>n1</code> et <code>n2</code> sont entiers naturels ou relatifs. Nous d\u00e9cidons qu'ils sont relatifs et donc qu'ils peuvent \u00eatre n\u00e9gatifs, auquel cas on utilise le fait que \\(5 \\\\times (-6)= - (5 \\\\times 6)\\). \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre></p>"},{"location":"divers/ep/#exercice-032","title":"Exercice 03.2 \u25a1","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9Correction <p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"divers/ep/#exercice-041","title":"Exercice 04.1 \u25a1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1,2,3,4,5,6,7] == 4\nassert moyenne([1,2]) == 1.5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"divers/ep/#exercice-042","title":"Exercice 04.2 \u25a1","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9Correction <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide.</p> <p>L'algorithme est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False,1</code> , <code>False,2</code> et <code>False,3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False,2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if tab = []:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False,2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"divers/ep/#exercice-051","title":"Exercice 05.1 \u25a1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9Correction <p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(T):\n\"\"\"\n    T est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau T\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def convertir(T):\n    puissance = 0\n    total = 0\n    for i in range(len(T)-1, -1, -1):\n        total += T[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"divers/ep/#exercice-052","title":"Exercice 05.2 \u25a1","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>L</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n\n    # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_insertion([2,5,-1,7,0,28])\n[-1, 0, 2, 5, 7, 28]\n&gt;&gt;&gt; tri_insertion([10,9,8,7,6,5,4,3,2,1,0])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if L == []:\n        return L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; e:\n            i = i - 1\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,-1):\n                L[k] = L[k-1]\n            L[i] = e\n    return L\n</code></pre>"},{"location":"divers/ep/#exercice-061","title":"Exercice 06.1 \u25a1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse au probl\u00e8me du rendu de monnaie. On suppose qu\u2019on dispose d\u2019un nombre infini de billets de 5 euros, de pi\u00e8ces de 2 euros et de pi\u00e8ces de 1 euro. Le but est d\u2019\u00e9crire une fonction nomm\u00e9e <code>rendu</code> dont le param\u00e8tre est un entier positif non nul <code>somme_a_rendre</code> et qui retourne une liste de trois entiers <code>n1</code>, <code>n2</code> et <code>n3</code> qui correspondent aux nombres de billets de 5 euros (<code>n1</code>) de pi\u00e8ces de 2 euros (<code>n2</code>) et de pi\u00e8ces de 1 euro (<code>n3</code>) \u00e0 rendre afin que le total rendu soit \u00e9gal \u00e0 <code>somme_a_rendre</code>.</p> <p>On utilisera un algorithme glouton : on commencera par rendre le nombre maximal de billets de 5 euros, puis celui des pi\u00e8ces de 2 euros et enfin celui des pi\u00e8ces de 1 euros.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(13)\n[2,1,1]\n&gt;&gt;&gt; rendu(64)\n[12,2,0]\n&gt;&gt;&gt; rendu(89)\n[17,2,0]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    pieces = [5, 2, 1]\n    retour = [0, 0, 0]\n    reste_a_rendre = somme_a_rendre\n    for i in range(3):\n        retour[i] = reste_a_rendre // pieces[i]\n        reste_a_rendre = reste_a_rendre % pieces[i]\n    return retour\n</code></pre>"},{"location":"divers/ep/#exercice-062","title":"Exercice 06.2 \u25a1","text":"<p>\u00e0 noter une erreur dans la version officielle, sur la m\u00e9thode <code>enfile()</code> </p> <p>Exercice 06.2</p> \u00c9nonc\u00e9Correction <p>On veut \u00e9crire une classe pour g\u00e9rer une file \u00e0 l\u2019aide d\u2019une liste cha\u00een\u00e9e. On dispose d\u2019une classe <code>Maillon</code> permettant la cr\u00e9ation d\u2019un maillon de la cha\u00eene, celui-ci \u00e9tant constitu\u00e9 d\u2019une valeur et d\u2019une r\u00e9f\u00e9rence au maillon suivant de la cha\u00eene :</p> <p>\ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</code></pre> Compl\u00e9ter la classe <code>File suivante</code> o\u00f9 l\u2019attribut <code>dernier_file</code> contient le maillon correspondant \u00e0 l\u2019\u00e9l\u00e9ment arriv\u00e9 en dernier dans la file :</p> <p>\ud83d\udc0d Script Python<pre><code>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...)\n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> On pourra tester le fonctionnement de la classe en utilisant les commandes suivantes dans la console Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; F = File()\n&gt;&gt;&gt; F.est_vide()\nTrue\n&gt;&gt;&gt; F.enfile(2)\n&gt;&gt;&gt; F.affiche()\n2\n&gt;&gt;&gt; F.est_vide()\nFalse\n&gt;&gt;&gt; F.enfile(5)\n&gt;&gt;&gt; F.enfile(7)\n&gt;&gt;&gt; F.affiche()\n7\n5\n2\n&gt;&gt;&gt; F.defile()\n2\n&gt;&gt;&gt; F.defile()\n5\n&gt;&gt;&gt; F.affiche()\n7\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n\nclass File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(element)\n        nouveau_maillon.suivant =  self.dernier_file\n        self.dernier_file = nouveau_maillon\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != None :\n            print(maillon.valeur)\n            maillon = maillon.suivant\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = self.dernier_file\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = maillon.suivant.valeur\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre>"},{"location":"divers/ep/#exercice-071","title":"Exercice 07.1 \u25a1","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par <code>U1 = 1</code>, <code>U2 = 1</code> et, pour tout entier naturel <code>n</code>, par <code>Un+2 = Un+1 + Un</code>.</p> <p>Elle s\u2019appelle la suite de Fibonnaci.</p> <p>\u00c9crire la fonction <code>fibonacci</code> qui prend un entier <code>n &gt; 0</code> et qui renvoie l\u2019\u00e9l\u00e9ment d\u2019indice <code>n</code> de cette suite.</p> <p>On utilisera une programmation dynamique (pas de r\u00e9cursivit\u00e9).</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre> <p>On utilise un dictionnaire pour stocker au fur et \u00e0 mesure les valeurs. \ud83d\udc0d Script Python<pre><code>def fibonnaci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre></p>"},{"location":"divers/ep/#exercice-072","title":"Exercice 07.2 \u25a1","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9Correction <p>Les variables <code>liste_eleves</code> et <code>liste_notes</code> ayant \u00e9t\u00e9 pr\u00e9alablement d\u00e9finies et \u00e9tant de m\u00eame longueur, la fonction <code>meilleures_notes</code> renvoie la note maximale qui a \u00e9t\u00e9 attribu\u00e9e, le nombre d\u2019\u00e9l\u00e8ves ayant obtenu cette note et la liste des noms de ces \u00e9l\u00e8ves.</p> <p>Compl\u00e9ter le code Python de la fonction <code>meilleures_notes</code> ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi = ...\n\n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> <p>Une fois compl\u00e9t\u00e9, le code ci-dessus donne</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; meilleures_notes()\n(80, 3, ['c', 'f', 'h'])\n</code></pre> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = 0\n    liste_maxi = []\n\n    for compteur in range(len(liste_eleves)):\n        if liste_notes[compteur] == note_maxi:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[compteur])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = 1\n            liste_maxi = [liste_eleves[compteur]]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre>"},{"location":"divers/ep/#exercice-081","title":"Exercice 08.1 \u25a1","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(caractere, mot):\n    somme = 0\n    for lettre in mot:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"divers/ep/#exercice-082","title":"Exercice 08.2 \u25a1","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets - le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>pieces=[100, 50, 20, 10, 5, 2, 1]</code> - (on supposera qu\u2019il n\u2019y a pas de limitation quant \u00e0 leur nombre), on cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre pour une somme donn\u00e9e en argument. Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> <p>\ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(68,[],0)\n[50, 10, 5, 2, 1]\n&gt;&gt;&gt;rendu_glouton(291,[],0)\n[100, 100, 50, 20, 20, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, i+1)\n</code></pre>"},{"location":"divers/ep/#exercice-091","title":"Exercice 09.1 \u25a1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9Correction <p>Soit le couple (<code>note</code>,<code>coefficient</code>):</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier positif.</li> </ul> <p>Les r\u00e9sultats aux \u00e9valuations d'un \u00e9l\u00e8ve sont regroup\u00e9s dans une liste compos\u00e9e de couples (<code>note</code>,<code>coefficient</code>).</p> <p>\u00c9crire une fonction moyenne qui renvoie la moyenne pond\u00e9r\u00e9e de cette liste donn\u00e9e en param\u00e8tre.</p> <p>Par exemple, l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer le r\u00e9sultat du calcul suivant :</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in tab:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"divers/ep/#exercice-092","title":"Exercice 09.2 \u25a1","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9Correction <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal. Dans ce tableau de forme triangulaire, chaque ligne commence et se termine par le nombre 1. Par ailleurs, la valeur qui occupe une case situ\u00e9e \u00e0 l\u2019int\u00e9rieur du tableau s\u2019obtient en ajoutant les valeurs des deux cases situ\u00e9es juste au-dessus, comme l\u2019indique la figure suivante :</p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s. Elle doit renvoyer une liste correspondant au triangle de Pascal de la ligne <code>1</code> \u00e0 la ligne <code>n</code> o\u00f9 <code>n</code> est un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 <code>2</code> (le tableau sera contenu dans la variable <code>C</code>). La variable <code>Ck</code> doit, quant \u00e0 elle, contenir, \u00e0 l\u2019\u00e9tape num\u00e9ro <code>k</code>, la <code>k</code>-i\u00e8me ligne du tableau.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C = [[1]]\n    for k in range(1,n+1):\n        Ck = [1]\n        for i in range(1,k):\n            Ck.append(C[k-1][i-1]+C[k-1][i] )\n        Ck.append(1)\n        C.append(Ck)\n    return C\n</code></pre>"},{"location":"divers/ep/#exercice-101","title":"Exercice 10.1 \u25a1","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p>"},{"location":"divers/ep/#exercice-102","title":"Exercice 10.2 \ud83d\uddf9","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9Correction <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>T1 = list(T)</code> fait une copie de <code>T</code>ind\u00e9pendante de <code>T</code>, que l\u2019expression <code>x = T.pop()</code> enl\u00e8ve le sommet de la pile <code>T</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>T.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>T</code>.</p> <p>Compl\u00e9ter le code Python de la fonction positif ci-dessous qui prend une pile <code>T</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>T</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1,0,5,-3,4,-6,10,9,-8 ])\nT = [-1, 0, 5, -3, 4, -6, 10, 9, -8]\n[0, 5, 4, 10, 9]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = list(T)\n    T3 = []\n    while T2 != []:\n        x = T2.pop()\n        if x &gt;= 0:\n            T3.append(x)\n    T2 = [] # &lt;- NB : cette ligne est inutile\n    while T3 != []:\n        x = T3.pop()\n        T2.append(x)\n    print('T = ',T)\n    return T2\n</code></pre>"},{"location":"divers/ep/#exercice-111","title":"Exercice 11.1 \u25a1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>conv_bin</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie un couple (<code>b,bit)</code> o\u00f9 :</p> <ul> <li><code>b</code> est une liste d'entiers correspondant \u00e0 la repr\u00e9sentation binaire de <code>n</code>;</li> <li><code>bit</code> correspond aux nombre de bits qui constituent <code>b</code>.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; conv_bin(9)\n([1,0,0,1],4)\n</code></pre></p> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p> \ud83d\udc0d Script Python<pre><code>def conv_bin(n):\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return (b, bits)\n</code></pre>"},{"location":"divers/ep/#exercice-112","title":"Exercice 11.2 \u25a1","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant. Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction <code>tri_bulles</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> \u00c9crire une autre version de l\u2019algorithme avec</p> <p>\ud83d\udc0d Script Python<pre><code>for i in range(n-1):\n</code></pre> en lieu et place de la troisi\u00e8me ligne du code pr\u00e9c\u00e9dent.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if T[j] &gt; T[j+1]:\n                temp = T[j]\n                T[j] = T[j+1]\n                T[j+1] = temp\n    return T\n\n#version 2\n\ndef tri_bulles(T):\n    n = len(T)\n    for i in range(n-1):\n        for j in range(n-1,i,-1):\n            if T[j] &lt; T[j-1]:\n                temp = T[j]\n                T[j] = T[j-1]\n                T[j-1] = temp\n    return T\n</code></pre>"},{"location":"divers/ep/#exercice-121","title":"Exercice 12.1 \u25a1","text":"<p>Ce sujet est le m\u00eame que le 10.1...  \u00af\\_(\u30c4)_/\u00af</p> <p>Exercice 12.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p>"},{"location":"divers/ep/#exercice-122","title":"Exercice 12.2 \u25a1","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>recherche</code> prend en param\u00e8tres deux chaines de caract\u00e8res <code>gene</code> et <code>seq_adn</code> et renvoie <code>True</code> si on retrouve <code>gene</code> dans <code>seq_adn</code> et <code>False</code> sinon. Compl\u00e9ter le code Python ci-dessous pour qu\u2019il impl\u00e9mente la fonction <code>recherche</code>.</p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(\"AATC\", \"GTACAAATCTTGCC\")\nTrue\n&gt;&gt;&gt; recherche(\"AGTC\", \"GTACAAATCTTGCC\")\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = 0\n    trouve = False\n    while i &lt; n-g and trouve == False :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            j += 1\n        if j == g:\n            trouve = True\n        i += 1\n    return trouve\n</code></pre>"},{"location":"divers/ep/#exercice-131","title":"Exercice 13.1 \u25a1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie le tableau tri\u00e9 par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1,52,6,-9,12])\n[-9, 1, 6, 12, 52]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"divers/ep/#exercice-132","title":"Exercice 13.2 \u25a1","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9Correction <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99. Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>. Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,100)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 0\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"divers/ep/#exercice-141","title":"Exercice 14.1 \u25a1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre et <code>tab</code> un tableau de nombres, et qui renvoie le tableau des indices de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et le tableau vide <code>[]</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(3, [3, 2, 1, 3, 2, 1])\n[0, 3]\n&gt;&gt;&gt; recherche(4, [1, 2, 3])\n[]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    tab_indices = []\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            tab_indices.append(i)\n    return tab_indices        \n</code></pre>"},{"location":"divers/ep/#exercice-142","title":"Exercice 14.2 \u25a1","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9Correction <p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ces \u00e9l\u00e8ves et lui renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ... in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n\ndef moyenne(nom):\n    if nom in resultats:\n        notes = resultats[nom]\n        total_points = 0\n        total_coefficients = 0\n        for valeurs in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + note * coefficient\n            total_coefficients = total_coefficients + coefficient\n        return round( total_points / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"divers/ep/#exercice-151","title":"Exercice 15.1 \u25a1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>rechercheMinMax</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9s <code>tab</code>, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s \u2018min\u2019 et \u2018max\u2019. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rechercheMinMax(tab):\n    d = {}\n    d['min'] = None\n    d['max'] = None\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"divers/ep/#exercice-152","title":"Exercice 15.2","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-161","title":"Exercice 16.1 \u25a1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"divers/ep/#exercice-162","title":"Exercice 16.2","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-171","title":"Exercice 17.1 \u25a1","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>indice_du_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indice_du_min([5])\n0\n&gt;&gt;&gt; indice_du_min([2, 4, 1])\n2\n&gt;&gt;&gt; indice_du_min([5, 3, 2, 2, 4])\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def indice_du_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"divers/ep/#exercice-172","title":"Exercice 17.2","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-181","title":"Exercice 18.1 \u25a1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"divers/ep/#exercice-182","title":"Exercice 18.2","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-191","title":"Exercice 19.1 \u25a1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>. Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p>"},{"location":"divers/ep/#exercice-192","title":"Exercice 19.2","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-201","title":"Exercice 20.1 \u25a1","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9Correction <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres le tableau <code>releve</code> des relev\u00e9s et le tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n12.5, 2016\n</code></pre></p>"},{"location":"divers/ep/#exercice-202","title":"Exercice 20.2","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-211","title":"Exercice 21.1 \u25a1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5,[2,5,3,5,6,9,5])\n3\n&gt;&gt;&gt; nb_repetitions('A',[ 'B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12,[1, '! ',7,21,36,44])\n0\n</code></pre></p>"},{"location":"divers/ep/#exercice-212","title":"Exercice 21.2","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-221","title":"Exercice 22.1 \u25a1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>t</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>t</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5,[])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5,[-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p>"},{"location":"divers/ep/#exercice-222","title":"Exercice 22.2","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-231","title":"Exercice 23.1 \u25a1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9Correction <p>L\u2019occurrence d\u2019un caract\u00e8re dans un phrase est le nombre de fois o\u00f9 ce caract\u00e8re est pr\u00e9sent.</p> <p>Exemples :</p> <ul> <li>l\u2019occurrence du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>\u00c9crire une fonction <code>occurence_lettres</code> prenant comme param\u00e8tre une variable <code>phrase</code> de type <code>str</code>. Cette fonction doit renvoyer un dictionnaire de type constitu\u00e9 des occurrences des caract\u00e8res pr\u00e9sents dans la phrase.</p>"},{"location":"divers/ep/#exercice-232","title":"Exercice 23.2","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-241","title":"Exercice 24.1 \u25a1","text":"<p>identique au 18.1</p> <p>Exercice 24.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p>"},{"location":"divers/ep/#exercice-242","title":"Exercice 24.2","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-251","title":"Exercice 25.1 \u25a1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code>, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; recherche([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; recherche([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; recherche([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p>"},{"location":"divers/ep/#exercice-252","title":"Exercice 25.2","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-261","title":"Exercice 26.1 \u25a1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>occurrence_max</code> prenant en param\u00e8tres une cha\u00eene de caract\u00e8res <code>chaine</code> et qui renvoie le caract\u00e8re le plus fr\u00e9quent de la cha\u00eene. La chaine ne contient que des lettres en minuscules sans accent. On pourra s\u2019aider du tableau</p> <p><code>alphabet=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o,','p','q','r','s','t','u','v','w','x','y','z']</code></p> <p>et du tableau <code>occurrence</code> de 26 \u00e9l\u00e9ments o\u00f9 l\u2019on mettra dans <code>occurrence[i]</code> le nombre d\u2019apparitions de <code>alphabet[i]</code> dans la chaine. Puis on calculera l\u2019indice <code>k</code> d\u2019un maximum du tableau <code>occurrence</code> et on affichera <code>alphabet[k]</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ch='je suis en terminale et je passe le bac et je souhaite poursuivre des etudes pour devenir expert en informatique\u2019\n&gt;&gt;&gt; occurrence_max(ch)\n\u2018e\u2019\n</code></pre></p>"},{"location":"divers/ep/#exercice-262","title":"Exercice 26.2","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-271","title":"Exercice 27.1 \u25a1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> prenant en param\u00e8tres une liste d\u2019entiers et qui renvoie la moyenne des valeurs de cette liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([10,20,30,40,60,110])\n45.0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"divers/ep/#exercice-272","title":"Exercice 27.2","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-281","title":"Exercice 28.1 \u25a1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153ud. On pourra distinguer les 4 cas o\u00f9 les deux \u00ab fils \u00bb du n\u0153ud sont <code>''</code>, le fils gauche seulement est <code>''</code>, le fils droit seulement est <code>''</code>, aucun des deux fils n\u2019est <code>''</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p>"},{"location":"divers/ep/#exercice-282","title":"Exercice 28.2","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-291","title":"Exercice 29.1 \u25a1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9Correction <p>Soit un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 1 :</p> <ul> <li>s'il est pair, on le divise par 2 ;</li> <li>s\u2019il est impair, on le multiplie par 3 et on ajoute 1.</li> </ul> <p>Puis on recommence ces \u00e9tapes avec le nombre entier obtenu, jusqu\u2019\u00e0 ce que l\u2019on obtienne la valeur 1.</p> <p>On d\u00e9finit ainsi la suite \\((U_n)\\) par :</p> <ul> <li>\\(U_0=k\\), o\u00f9 \\(k\\) est un entier choisi initialement;</li> <li>\\(U_{n+1} = \\dfrac{U_n}{2}\\) si \\(U_n\\) est pair;</li> <li>\\(U_{n+1} = 3 \\times U_n + 1\\) si \\(U_n\\) est impair.</li> </ul> <p>On admet que, quel que soit l'entier <code>k</code> choisi au d\u00e9part, la suite finit toujours sur la valeur 1.</p> <p>\u00c9crire une fonction <code>calcul</code> prenant en param\u00e8tres un entier <code>n</code> strictement positif et qui renvoie la liste des valeurs de la suite, en partant de <code>n</code> et jusqu'\u00e0 atteindre 1.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; calcul(7)\n[7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n</code></pre></p>"},{"location":"divers/ep/#exercice-292","title":"Exercice 29.2","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/ep/#exercice-301","title":"Exercice 30.1 \u25a1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"divers/ep/#exercice-302","title":"Exercice 30.2","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9Correction"},{"location":"divers/instal_python/","title":"Python","text":"<p>Le programme officiel de l'enseignement de sp\u00e9cialit\u00e9 nsi pr\u00e9cise que :</p> <p>Un langage de programmation est n\u00e9cessaire pour l\u2019\u00e9criture des programmes : un langage simple d\u2019usage, interpr\u00e9t\u00e9, concis, libre et gratuit, multiplateforme, largement r\u00e9pandu, riche de biblioth\u00e8ques adapt\u00e9es et b\u00e9n\u00e9ficiant d\u2019une vaste communaut\u00e9 d\u2019auteurs dans le monde \u00e9ducatif est \u00e0 privil\u00e9gier. Au moment de la conception de ce programme, le langage choisi est Python version 3 (ou sup\u00e9rieure).</p> <p>La pratique r\u00e9guli\u00e8re de la programmation en Python est primordiale pour r\u00e9ussir en NSI. Chaque \u00e9l\u00e8ve devrait donc disposer \u00e0 la maison d'un ordinateur \u00e9quip\u00e9 de Python et d'un environnement de d\u00e9veloppement (en anglais ide pour integrated development environment)</p>"},{"location":"divers/instal_python/#installation-de-python","title":"Installation de Python","text":""},{"location":"divers/instal_python/#sous-linux-ou-macos","title":"Sous Linux (ou MacOS)","text":"<p>Python fait normalement partie des principales distributions Linux et de MacOS, aucune installation n'est n\u00e9cessaire. Pour le v\u00e9rifier lancer un terminal et entrer simplement la commande <code>python</code> (ou \u00a0<code>python3</code>).</p>"},{"location":"divers/instal_python/#sous-windows","title":"Sous Windows","text":"<ol> <li>T\u00e9l\u00e9charger les fichiers d'installation sur python.org</li> <li>Lancer l'installation</li> <li> <p>Ouvrir un terminal et y taper simplement <code>python</code> pour v\u00e9rifier que tout s'est d\u00e9roul\u00e9 correctement</p> <p>En cas de difficult\u00e9s</p> <p>Consulter le tutoriel vid\u00e9o suivant :  </p> </li> </ol>"},{"location":"divers/instal_python/#installation-dun-ide","title":"Installation d'un ide","text":"<p>L'ide utilis\u00e9 en classe est VS Code (mais il y en a beaucoup d'autres), pour l'installer :</p> <ol> <li>Se rendre sur la page de t\u00e9l\u00e9chargement et s\u00e9lectionner le syst\u00e8me d'exploitation qui vous convient.</li> <li>Lancer la proc\u00e9dure d'installation</li> <li>Au premier lancement de VS Code, rechercher <code>python</code> dans les extensions (5eme icone de la barre lat\u00e9rale ou en tapant Ctrl\uff0bShift\uff0bX) et installer Python IntelliSense.</li> </ol>"},{"location":"divers/lien/","title":"S'entrainer en ligne pour l'\u00e9preuve pratique","text":""},{"location":"divers/lien/#sentrainer-en-ligne-pour-lepreuve-pratique","title":"S'entrainer en ligne pour l'\u00e9preuve pratique","text":"<p>Un collectif d'enseignants d'informatique propose des exercices de programmation, corrig\u00e9s utilisables en ligne sans rien installer sur votre ordinateur.</p> <ul> <li>Exercice de base pour demarrer</li> <li>Exercice du type exercice 1 de l'\u00e9preuve pratique du Bac</li> <li>Exercice du type exercice 2 de l'\u00e9preuve pratique du Bac</li> <li>Exercices plus d\u00e9licats</li> <li>Exercices avec une orientation math\u00e9matique</li> </ul>"},{"location":"divers/prog/","title":"Divers concours programmation","text":""},{"location":"divers/prog/#concours-et-initiation-ludiques-a-la-programmation","title":"Concours et initiation ludiques \u00e0 la programmation","text":"<ul> <li>py-rates r\u00e9soudre les huit niveaux d'un jeu de plateau \u00e0 l'aide de programmes en python.</li> <li>France IOI : site d'entra\u00eenement et de d\u00e9couverte de la programmation et de l'algorithmique.</li> <li>Concours Algorea : le site du concours de programmation organis\u00e9 chaque ann\u00e9e par France IOI.</li> <li>Checkio : un site de d\u00e9couverte ludique de la programmation (en anglais).</li> <li>Alkindi : d\u00e9couverte de la cryptographie.</li> <li>Projet Euler : un site d'exercices de programmation autour des math\u00e9matiques (an anglais). </li> <li>Prologin : concours de programmation.</li> <li>Python Challenge : un site d'\u00e9nigmes \u00e0 r\u00e9soudre en utilisant Python (en anglais).</li> <li>Codingame : site de d\u00e9fi de programmation, attention le niveau est \u00e9lev\u00e9.</li> </ul>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/","title":"Pr\u00e9sentation d'un probl\u00e8me de classification","text":"Th\u00e8me 5 : Algorithmique                           15              Algorihtme des k-plus proches voisins <p>Abr\u00e9g\u00e9 kppv en fran\u00e7ais. En anglais, on dit k nearest neighbors souvent abr\u00e9g\u00e9 knn.</p> <p>L\u2019algorithme des k plus proches voisins appartient \u00e0 la famille des algorithmes d\u2019apprentissage automatique (machine learning) qui constituent le poumon de l'intelligence artificielle actuellement.</p> <p>Pour simplifier, l'apprentissage automatique part souvent de donn\u00e9es (data) et essaye de dire quelque chose des donn\u00e9es qui n'ont pas encore \u00e9t\u00e9 vues : il s'agit de g\u00e9n\u00e9raliser, de pr\u00e9dire.</p> <p>On va utiliser l'algorithme des k plus proches voisins pour r\u00e9soudre un probl\u00e8me de classification : pr\u00e9dire la classe d'une donn\u00e9e inconnue \u00e0 partir de la classe des donn\u00e9es connues.</p> <p>Avant de d\u00e9crire cet algorithme, introduisons la situation et le probl\u00e8me.</p> In\u00a0[1]: Copied! <pre>import csv\nfichier = open('pokemons.csv', 'r', encoding = 'UTF-8')\nt = csv.DictReader(fichier, delimiter=';')\npokemons = [dict(ligne) for ligne in t]  # cr\u00e9ation et construction du tableau par compr\u00e9hension\nfichier.close()\n\npokemons  # pour voir les donn\u00e9es import\u00e9es\n</pre> import csv fichier = open('pokemons.csv', 'r', encoding = 'UTF-8') t = csv.DictReader(fichier, delimiter=';') pokemons = [dict(ligne) for ligne in t]  # cr\u00e9ation et construction du tableau par compr\u00e9hension fichier.close()  pokemons  # pour voir les donn\u00e9es import\u00e9es Out[1]: <pre>[{'Nom': 'Aligatueur', 'Type': 'Eau', 'Points de vie': '85', 'Attaque': '105'}, {'Nom': 'Bargantua', 'Type': 'Eau', 'Points de vie': '70', 'Attaque': '92'}, {'Nom': 'Carabaffe', 'Type': 'Eau', 'Points de vie': '59', 'Attaque': '63'}, {'Nom': 'Clamiral', 'Type': 'Eau', 'Points de vie': '95', 'Attaque': '100'}, {'Nom': 'Crefadet', 'Type': 'Psy', 'Points de vie': '75', 'Attaque': '125'}, {'Nom': 'Crocrodil', 'Type': 'Eau', 'Points de vie': '65', 'Attaque': '80'}, {'Nom': 'Deoxys', 'Type': 'Psy', 'Points de vie': '50', 'Attaque': '70'}, {'Nom': 'Deoxys', 'Type': 'Psy', 'Points de vie': '50', 'Attaque': '95'}, {'Nom': 'Deoxys', 'Type': 'Psy', 'Points de vie': '50', 'Attaque': '150'}, {'Nom': 'Deoxys', 'Type': 'Psy', 'Points de vie': '50', 'Attaque': '180'}, {'Nom': 'Ecayon', 'Type': 'Eau', 'Points de vie': '49', 'Attaque': '49'}, {'Nom': 'Eoko', 'Type': 'Psy', 'Points de vie': '75', 'Attaque': '50'}, {'Nom': 'Gamblast', 'Type': 'Eau', 'Points de vie': '71', 'Attaque': '73'}, {'Nom': 'Gobou', 'Type': 'Eau', 'Points de vie': '50', 'Attaque': '70'}, {'Nom': 'Groret', 'Type': 'Psy', 'Points de vie': '80', 'Attaque': '45'}, {'Nom': 'Mateloutre', 'Type': 'Eau', 'Points de vie': '75', 'Attaque': '75'}, {'Nom': 'Mesmerella', 'Type': 'Psy', 'Points de vie': '60', 'Attaque': '45'}, {'Nom': 'Mew', 'Type': 'Psy', 'Points de vie': '100', 'Attaque': '100'}, {'Nom': 'Mewtwo', 'Type': 'Psy', 'Points de vie': '106', 'Attaque': '110'}, {'Nom': 'Mewtwo', 'Type': 'Psy', 'Points de vie': '106', 'Attaque': '150'}, {'Nom': 'Mewtwo', 'Type': 'Psy', 'Points de vie': '106', 'Attaque': '190'}, {'Nom': 'Munna', 'Type': 'Psy', 'Points de vie': '76', 'Attaque': '25'}, {'Nom': 'Nucleos', 'Type': 'Psy', 'Points de vie': '45', 'Attaque': '30'}, {'Nom': 'Octillery', 'Type': 'Eau', 'Points de vie': '75', 'Attaque': '105'}, {'Nom': 'Okeoke', 'Type': 'Psy', 'Points de vie': '95', 'Attaque': '23'}, {'Nom': 'Phione', 'Type': 'Eau', 'Points de vie': '80', 'Attaque': '80'}, {'Nom': 'Poissoroy', 'Type': 'Eau', 'Points de vie': '80', 'Attaque': '92'}, {'Nom': 'Prinplouf', 'Type': 'Eau', 'Points de vie': '64', 'Attaque': '66'}, {'Nom': 'Rosabyss', 'Type': 'Eau', 'Points de vie': '55', 'Attaque': '84'}, {'Nom': 'Siderella', 'Type': 'Psy', 'Points de vie': '70', 'Attaque': '55'}, {'Nom': 'Spoink', 'Type': 'Psy', 'Points de vie': '60', 'Attaque': '25'}, {'Nom': 'Symbios', 'Type': 'Psy', 'Points de vie': '110', 'Attaque': '65'}, {'Nom': 'Tarpaud', 'Type': 'Eau', 'Points de vie': '90', 'Attaque': '75'}, {'Nom': 'Tiplouf', 'Type': 'Eau', 'Points de vie': '53', 'Attaque': '51'}]</pre> <p>On peut repr\u00e9senter ces donn\u00e9es graphiquement dans un rep\u00e8re orthonorm\u00e9, avec les valeurs d'attaque en abscisses et les points de vie en ordonn\u00e9es. Les Pok\u00e9mons de type \"Eau\" sont repr\u00e9sent\u00e9s pas les triangles bleus, et ceux de type \"Psy\" par les points rouges.</p> <p></p> <p>C'est ce que vous allez faire par la suite !</p> <p>Dans notre cas, chaque Pok\u00e9mon poss\u00e8de une abscisse \u00e9gale \u00e0 sa valeur d'attaque et une ordonn\u00e9e \u00e9gale \u00e0 ses points de vie. Ainsi, la formule de la distance entre deux pok\u00e9mons <code>p1</code> et <code>p2</code> se traduit ainsi :</p> <p>$$\\text{distance}(\\text{p1}, \\text{p2}) = \\sqrt{(\\text{valeur d'attaque de p2}-\\text{valeur d'attaque de p1})^2 + (\\text{points de vie de p2}-\\text{points de vie de p1})^2}.$$</p> <p>\u270d\ufe0f Question 1 : Calculez \u00e0 la main la distance entre les deux Pok\u00e9mons suivants.</p> <pre>p1 = {'Nom': 'Aligatueur', 'Type': 'Eau', 'Points de vie': '85', 'Attaque': '105'}\np2 = {'Nom': 'Bargantua', 'Type': 'Eau', 'Points de vie': '70', 'Attaque': '92'}\n</pre> <p>\ud83d\udcbb Question 2 : \u00c9crivez les instructions permettant d'acc\u00e9der :</p> <ul> <li>\u00e0 la valeur d'attaque de <code>p1</code></li> <li>au points de vie de <code>p2</code></li> </ul> In\u00a0[\u00a0]: Copied! <pre>p1 = {'Nom': 'Aligatueur', 'Type': 'Eau', 'Points de vie': '85', 'Attaque': '105'}\np2 = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}\n</pre> p1 = {'Nom': 'Aligatueur', 'Type': 'Eau', 'Points de vie': '85', 'Attaque': '105'} p2 = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'} In\u00a0[\u00a0]: Copied! <pre># \u00e0 vous de jouer !\n</pre> # \u00e0 vous de jouer !  In\u00a0[\u00a0]: Copied! <pre># \u00e0 vous de jouer !\n</pre> # \u00e0 vous de jouer !  <p>\ud83d\udcbb Question 3 : Compl\u00e9tez la fonction <code>distance_euclidienne(p1, p2)</code> suivante qui renvoie la distance euclidienne entre deux Pok\u00e9mons <code>p1</code> et <code>p2</code>.</p> <p>\u26a0\ufe0f Il faut bien veiller \u00e0 convertir les valeurs d'attaque et les points de vie en des nombres pour faire les calculs !*</p> In\u00a0[3]: Copied! <pre># \u00e0 vous de jouer !\nfrom math import sqrt  # pour utiliser la racine carr\u00e9e\n\ndef distance_euclidienne(p1, p2):\n    x1 = ...  # abscisse de la donn\u00e9e 1\n    y1 = ...  # ordonn\u00e9e de la donn\u00e9e 1\n    x2 = ...  # abscisse de la donn\u00e9e 2\n    y2 = ...  # ordonn\u00e9e de la donn\u00e9e 2\n    return sqrt(...)  # formule donnant la distance euclidienne\n</pre> # \u00e0 vous de jouer ! from math import sqrt  # pour utiliser la racine carr\u00e9e  def distance_euclidienne(p1, p2):     x1 = ...  # abscisse de la donn\u00e9e 1     y1 = ...  # ordonn\u00e9e de la donn\u00e9e 1     x2 = ...  # abscisse de la donn\u00e9e 2     y2 = ...  # ordonn\u00e9e de la donn\u00e9e 2     return sqrt(...)  # formule donnant la distance euclidienne <p>\ud83d\udcbb Question 4 : Appelez cette fonction pour v\u00e9rifier votre r\u00e9ponse \u00e0 la question 1.</p> In\u00a0[\u00a0]: Copied! <pre># \u00e0 vous de jouer !\n</pre> # \u00e0 vous de jouer !  In\u00a0[\u00a0]: Copied! <pre>def table_avec_distances(donnees, cible):\n    # \u00e0 vous de jouer !\n    \n\n\n\n# ESSAI\ncible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}\ndistances_voisins = table_avec_distances(pokemons, cible)\ndistances_voisins\n</pre> def table_avec_distances(donnees, cible):     # \u00e0 vous de jouer !         # ESSAI cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'} distances_voisins = table_avec_distances(pokemons, cible) distances_voisins In\u00a0[\u00a0]: Copied! <pre>help(sorted)\n</pre> help(sorted) <p>\ud83d\udcbb Question 6 : Cr\u00e9er une fonction <code>tri_distance(d)</code> qui servira de cl\u00e9 \u00e0 notre tri.</p> In\u00a0[\u00a0]: Copied! <pre># \u00e0 vous de jouer !\n</pre> # \u00e0 vous de jouer !  <p>\ud83d\udcbb Question 7 : Utilisez maintenant la fonction <code>sorted</code> pour cr\u00e9er une nouvelle table <code>distances_voisins_triee</code> contenant les donn\u00e9es de <code>distances_voisins</code> tri\u00e9s par ordre croissant de distance.</p> In\u00a0[\u00a0]: Copied! <pre>cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}\ndistances_voisins = table_avec_distances(pokemons, cible)\n\n# \u00e0 vous de jouer !\n</pre> cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'} distances_voisins = table_avec_distances(pokemons, cible)  # \u00e0 vous de jouer !     In\u00a0[\u00a0]: Copied! <pre># \u00e0 vous de jouer !\n</pre> # \u00e0 vous de jouer !  <p>\ud83d\udcbb Question 9 : V\u00e9rifiez qu'en appelant cette fonction avec k = 3 et <code>table</code> = <code>distances_voisins_triee</code> vous obtenez bien les 3 premiers \u00e9l\u00e9ments de <code>distances_voisins_triee</code>.</p> In\u00a0[\u00a0]: Copied! <pre># \u00e0 vous de jouer !\n</pre> # \u00e0 vous de jouer !  In\u00a0[\u00a0]: Copied! <pre># RECOPIE DES FONCTIONS UTILES :\n\nfrom math import sqrt\n# Calcul de la distance\ndef distance_euclidienne(d1, d2):\n    # recopiez le code \u00e9crit \u00e0 la question 3\n    pass\n\n# Fonction qui calcule et ajoute la distance entre la cible et chacune des donn\u00e9es\ndef table_avec_distances(donnees, cible):\n    # recopiez le code \u00e9crit \u00e0 la question 5\n    pass\n\n# Cl\u00e9 du tri\ndef tri_distance(d):\n    # recopiez le code \u00e9crit \u00e0 la question 6\n    pass\n    \ndef conserve_k_premiers(k,table):\n    # recopiez le code \u00e9crit \u00e0 la question 8\n    pass\n    \n# \u00c0 COMPL\u00c9TER :\n\ndef kppv(donnees, cible, k):    \n    # \u00e9tape 1 : cr\u00e9ation de la table avec les distances\n    distances_voisins = ...\n    \n    # \u00e9tape 2 : tri par distance croissante\n    distances_voisins_triee = ...\n    \n    # \u00e9tape 3 : r\u00e9cup\u00e9ration de k plus proches voisins\n    k_plus_proches_voisins = ...\n    \n    return ...\n</pre> # RECOPIE DES FONCTIONS UTILES :  from math import sqrt # Calcul de la distance def distance_euclidienne(d1, d2):     # recopiez le code \u00e9crit \u00e0 la question 3     pass  # Fonction qui calcule et ajoute la distance entre la cible et chacune des donn\u00e9es def table_avec_distances(donnees, cible):     # recopiez le code \u00e9crit \u00e0 la question 5     pass  # Cl\u00e9 du tri def tri_distance(d):     # recopiez le code \u00e9crit \u00e0 la question 6     pass      def conserve_k_premiers(k,table):     # recopiez le code \u00e9crit \u00e0 la question 8     pass      # \u00c0 COMPL\u00c9TER :  def kppv(donnees, cible, k):         # \u00e9tape 1 : cr\u00e9ation de la table avec les distances     distances_voisins = ...          # \u00e9tape 2 : tri par distance croissante     distances_voisins_triee = ...          # \u00e9tape 3 : r\u00e9cup\u00e9ration de k plus proches voisins     k_plus_proches_voisins = ...          return ...  <p>\ud83d\udcbb Question 11 : Appelez la fonction la fonction <code>kppv</code> pour conna\u00eetre les 3 plus proches voisins de notre cible <code>{'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}</code>.</p> In\u00a0[\u00a0]: Copied! <pre>cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}\n# \u00e0 vous de jouer !\n</pre> cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'} # \u00e0 vous de jouer !  <p>\ud83d\udcbb Question 12 : M\u00eame question pour les 5 plus proches voisins puis pour les 9 plus proches voisins.</p> In\u00a0[\u00a0]: Copied! <pre># \u00e0 vous de jouer !\n</pre> # \u00e0 vous de jouer !  <p>\u270d\ufe0f Question 13 : Donnez la classe majoritaire parmi les plus proches voisins lorsque k = 3, 5 puis 9. Pour chaque valeur de k, quelle serait la pr\u00e9diction pour notre Pok\u00e9mon cible inconnu ?</p> R\u00e9ponse :    <p>Moralit\u00e9 : La valeur du param\u00e8tre <code>k</code> est importante car elle a une influence forte sur la pr\u00e9diction. En pratique, elle doit \u00eatre judicieusement choisie : \ud83d\udc49 voir dans le cours comment trouver exp\u00e9rimentalement une bonne valeur de k.</p> In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\n\nliste_abscisses = [0, 2, 5, 9, 7]  # tableau avec les abscisses\nliste_ordonnees = [5, 7, 12, 3, 8]  # tableau avec les ordonn\u00e9es\n\nplt.plot(liste_abscisses, liste_ordonnees,'ro')  # r pour red, o pour un cercle\n\nplt.xlim(-2, 12)  # pour d\u00e9finir la fen\u00eatre en abscisse\nplt.ylim(0, 14)  # pour d\u00e9finir la fen\u00eatre en ordonn\u00e9e\nplt.gca().set_aspect('equal', adjustable='box')  # pour que le rep\u00e8re soit orthonorm\u00e9 (m\u00eame unit\u00e9 sur chaque axe)\n\nplt.show()  # affichage du graphique\n</pre> import matplotlib.pyplot as plt  liste_abscisses = [0, 2, 5, 9, 7]  # tableau avec les abscisses liste_ordonnees = [5, 7, 12, 3, 8]  # tableau avec les ordonn\u00e9es  plt.plot(liste_abscisses, liste_ordonnees,'ro')  # r pour red, o pour un cercle  plt.xlim(-2, 12)  # pour d\u00e9finir la fen\u00eatre en abscisse plt.ylim(0, 14)  # pour d\u00e9finir la fen\u00eatre en ordonn\u00e9e plt.gca().set_aspect('equal', adjustable='box')  # pour que le rep\u00e8re soit orthonorm\u00e9 (m\u00eame unit\u00e9 sur chaque axe)  plt.show()  # affichage du graphique <p>Pour repr\u00e9senter nos Pok\u00e9mons sous forme de nuages de points (valeur d'attaque en abscisse et points de vie en ordonn\u00e9e), il suffit alors de cr\u00e9er un tableau contenant les abscisses (valeur d'attaque) et un tableau contenant les ordonn\u00e9es (points de vie) puis d'utiliser la fonction <code>plot</code> pour construire les points.</p> <p>Pour bien visualiser les deux classes, on va cr\u00e9er un nuage de points pour chaque classe : les Pok\u00e9mons de type \"Eau\" seront repr\u00e9sent\u00e9s par des points bleus et les Pok\u00e9mons \"Psy\" par des points rouges. On cr\u00e9e aussi le point correspondant \u00e0 notre Pok\u00e9mon cible en cyan :</p> In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\n\n# construction des Pok\u00e9mons de type 'Eau'\nvaleur_attaque_eau = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Eau']  # tableau des abscisses\npoints_de_vie_eau = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Eau']  # tableau des orodonn\u00e9es\nplt.plot(valeur_attaque_eau, points_de_vie_eau, 'bv')  # construction du graphique avec des triangles bleus\n\n# construction des Pok\u00e9mons de type 'Psy'\nvaleur_attaque_psy = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Psy']\npoints_de_vie_psy = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Psy']\nplt.plot(valeur_attaque_psy, points_de_vie_psy, 'ro')  # construction du graphique avec des cercles rouges\n\n# construction du Pok\u00e9mon cible\ncible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}\nvaleur_attaque_cible = int(cible['Attaque'])\npoints_de_vie_cible = int(cible['Points de vie'])\nplt.plot(valeur_attaque_cible, points_de_vie_cible, 'cD')\n\n\n# Pour d\u00e9finir le titre, noms de axes et la l\u00e9gende\nplt.title(\"Pok\u00e9mons\")\nplt.xlabel(\"Valeur d'attaque\")\nplt.ylabel(\"Points de vie\")\nplt.legend([\"Type Eau\", \"Type Psy\"], loc='upper center', bbox_to_anchor=(1.2, 0.8))\n\nplt.xlim(0, 200)\nplt.ylim(40, 120)\nplt.gca().set_aspect('equal', adjustable='box')\n\nplt.show()\n</pre> import matplotlib.pyplot as plt  # construction des Pok\u00e9mons de type 'Eau' valeur_attaque_eau = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Eau']  # tableau des abscisses points_de_vie_eau = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Eau']  # tableau des orodonn\u00e9es plt.plot(valeur_attaque_eau, points_de_vie_eau, 'bv')  # construction du graphique avec des triangles bleus  # construction des Pok\u00e9mons de type 'Psy' valeur_attaque_psy = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Psy'] points_de_vie_psy = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Psy'] plt.plot(valeur_attaque_psy, points_de_vie_psy, 'ro')  # construction du graphique avec des cercles rouges  # construction du Pok\u00e9mon cible cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'} valeur_attaque_cible = int(cible['Attaque']) points_de_vie_cible = int(cible['Points de vie']) plt.plot(valeur_attaque_cible, points_de_vie_cible, 'cD')   # Pour d\u00e9finir le titre, noms de axes et la l\u00e9gende plt.title(\"Pok\u00e9mons\") plt.xlabel(\"Valeur d'attaque\") plt.ylabel(\"Points de vie\") plt.legend([\"Type Eau\", \"Type Psy\"], loc='upper center', bbox_to_anchor=(1.2, 0.8))  plt.xlim(0, 200) plt.ylim(40, 120) plt.gca().set_aspect('equal', adjustable='box')  plt.show() <p>\ud83d\udcbb Question 14 : Compl\u00e9tez ci-dessous le programme pr\u00e9c\u00e9dent pour construire \u00e9galement le nuage de points correspondant aux k plus plus proches voisins d\u00e9termin\u00e9s par notre algorithme. V\u00e9rifiez ensuite graphiquement pour diff\u00e9rentes valeurs de k que les plus proches voisins sont les bons.</p> In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\n\n# construction des Pok\u00e9mons de type 'Eau'\nvaleur_attaque_eau = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Eau']  # tableau des abscisses\npoints_de_vie_eau = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Eau']  # tableau des orodonn\u00e9es\nplt.plot(valeur_attaque_eau, points_de_vie_eau, 'bv')  # construction du graphique avec des triangles bleus\n\n# construction des Pok\u00e9mons de type 'Psy'\nvaleur_attaque_psy = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Psy']\npoints_de_vie_psy = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Psy']\nplt.plot(valeur_attaque_psy, points_de_vie_psy, 'ro')  # construction du graphique avec des cercles rouges\n\n# construction du Pok\u00e9mon cible\ncible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}\nvaleur_attaque_cible = int(cible['Attaque'])\npoints_de_vie_cible = int(cible['Points de vie'])\nplt.plot(valeur_attaque_cible, points_de_vie_cible, 'cD')\n\n\n# construction des KPPV\n# \u00c0 COMPL\u00c9TER :\n\n\n\n\n\n# Pour d\u00e9finir le titre, noms de axes et la l\u00e9gende\nplt.title(\"Pok\u00e9mons\")\nplt.xlabel(\"Valeur d'attaque\")\nplt.ylabel(\"Points de vie\")\nplt.legend([\"Type Eau\", \"Type Psy\"], loc='upper center', bbox_to_anchor=(1.2, 0.8))\n\nplt.xlim(0, 200)\nplt.ylim(40, 120)\nplt.gca().set_aspect('equal', adjustable='box')\n\nplt.show()\n</pre> import matplotlib.pyplot as plt  # construction des Pok\u00e9mons de type 'Eau' valeur_attaque_eau = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Eau']  # tableau des abscisses points_de_vie_eau = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Eau']  # tableau des orodonn\u00e9es plt.plot(valeur_attaque_eau, points_de_vie_eau, 'bv')  # construction du graphique avec des triangles bleus  # construction des Pok\u00e9mons de type 'Psy' valeur_attaque_psy = [int(p['Attaque']) for p in pokemons if p['Type'] == 'Psy'] points_de_vie_psy = [int(p['Points de vie']) for p in pokemons if p['Type'] == 'Psy'] plt.plot(valeur_attaque_psy, points_de_vie_psy, 'ro')  # construction du graphique avec des cercles rouges  # construction du Pok\u00e9mon cible cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'} valeur_attaque_cible = int(cible['Attaque']) points_de_vie_cible = int(cible['Points de vie']) plt.plot(valeur_attaque_cible, points_de_vie_cible, 'cD')   # construction des KPPV # \u00c0 COMPL\u00c9TER :      # Pour d\u00e9finir le titre, noms de axes et la l\u00e9gende plt.title(\"Pok\u00e9mons\") plt.xlabel(\"Valeur d'attaque\") plt.ylabel(\"Points de vie\") plt.legend([\"Type Eau\", \"Type Psy\"], loc='upper center', bbox_to_anchor=(1.2, 0.8))  plt.xlim(0, 200) plt.ylim(40, 120) plt.gca().set_aspect('equal', adjustable='box')  plt.show() In\u00a0[\u00a0]: Copied! <pre># d\u00e9finition de la distance utilis\u00e9e\ndef distance_manhattan(d1, d2):\n    x1 = float(d1['Attaque'])\n    y1 = float(d1['Points de vie'])\n    x2 = float(d2['Attaque'])\n    y2 = float(d2['Points de vie'])\n    return abs(x2-x1) + abs(y2-y1)  # abs est la fonction valeur absolue\n\ndef table_avec_distances(donnees, cible):\n    distances_voisins = [d for d in donnees]\n    for d in distances_voisins:\n        distance = distance_manhattan(d, cible)  # CHANGEMENT DE DISTANCE\n        d['distance'] = distance\n    return distances_voisins\n\ndef tri_distance(d):\n    return d['distance']\n\ndef kppv(donnees, cible, k):    \n    # \u00e9tape 1 : cr\u00e9ation de la table avec les distances\n    distances_voisins = table_avec_distances(donnees, cible)    \n    # \u00e9tape 2 : tri par distance croissante\n    distances_voisins_triee = sorted(distances_voisins, key=tri_distance)    \n    # \u00e9tape 3 : r\u00e9cup\u00e9ration de k plus proches voisins\n    k_plus_proches_voisins = conserve_k_premiers(k, distances_voisins_triee)\n    \n    return k_plus_proches_voisins\n</pre> # d\u00e9finition de la distance utilis\u00e9e def distance_manhattan(d1, d2):     x1 = float(d1['Attaque'])     y1 = float(d1['Points de vie'])     x2 = float(d2['Attaque'])     y2 = float(d2['Points de vie'])     return abs(x2-x1) + abs(y2-y1)  # abs est la fonction valeur absolue  def table_avec_distances(donnees, cible):     distances_voisins = [d for d in donnees]     for d in distances_voisins:         distance = distance_manhattan(d, cible)  # CHANGEMENT DE DISTANCE         d['distance'] = distance     return distances_voisins  def tri_distance(d):     return d['distance']  def kppv(donnees, cible, k):         # \u00e9tape 1 : cr\u00e9ation de la table avec les distances     distances_voisins = table_avec_distances(donnees, cible)         # \u00e9tape 2 : tri par distance croissante     distances_voisins_triee = sorted(distances_voisins, key=tri_distance)         # \u00e9tape 3 : r\u00e9cup\u00e9ration de k plus proches voisins     k_plus_proches_voisins = conserve_k_premiers(k, distances_voisins_triee)          return k_plus_proches_voisins  <p>En d\u00e9terminant les 3 plus proches voisins on obtient :</p> In\u00a0[\u00a0]: Copied! <pre>cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}\nkppv(pokemons, cible, 3)\n</pre> cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'} kppv(pokemons, cible, 3) <p>Dans ce cas, pour k = 3, on pr\u00e9dirait que notre Pok\u00e9mon inconnu est de type \"Eau\" (2 \"Eau\" contre 1 \"Psy\") et la pr\u00e9diction serait l'inverse de celle utilisant la distance euclidienne !</p> <p>Moralit\u00e9 : La distance utilis\u00e9e a \u00e9galement toute son importance puisque son choix peut aboutir \u00e0 des pr\u00e9dictions diff\u00e9rentes. De plus, nous n'avons parl\u00e9 ici que de distances g\u00e9om\u00e9triques s'appliquant \u00e0 des donn\u00e9es chiffr\u00e9es. Toutes les donn\u00e9es ne sont pas adapt\u00e9es \u00e0 ce type de distance : si on veut comparer la distance entre deux cha\u00eenes de caract\u00e8res (dans le but de pr\u00e9dire la langue d'origine de certains mots par exemple) d'autres types de distances sont \u00e0 consid\u00e9rer : la distance de Hamming ou la distance d'\u00e9dition qui seront abord\u00e9es en Terminale.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#presentation-dun-probleme-de-classification","title":"Pr\u00e9sentation d'un probl\u00e8me de classification\u00b6","text":""},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#le-jeu-de-donnees-sur-les-pokemons","title":"Le jeu de donn\u00e9es sur les Pok\u00e9mons\u00b6","text":"<p>On dispose de donn\u00e9es sur 34 Pok\u00e9mons : leur type (Psy ou Eau), leur points de vie et la valeur de leurs attaques.</p> <p>Ces donn\u00e9es sont stock\u00e9es dans le fichier CSV <code>pokemons.csv</code> que l'on s'empresse d'importer dans un tableau de dictionnaires appel\u00e9 <code>pokemons</code>:</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#probleme-peut-on-predire-le-type-dun-nouveau-pokemon-inconnu","title":"Probl\u00e8me : peut-on pr\u00e9dire le type d'un nouveau Pok\u00e9mon inconnu ?\u00b6","text":"<p>On consid\u00e8re maintenant que l'on poss\u00e8de des donn\u00e9es sur un nouveau Pok\u00e9mon inconnu et on aimerait pr\u00e9dire s'il s'agit d'un Pok\u00e9mon de type \"Eau\" ou de type \"Psy\".</p> <p></p> <p>Ce probl\u00e8me, qui demande \u00e0 pr\u00e9dire \u00e0 quelle cat\u00e9gorie, ou classe, appartient ce nouvel \u00e9l\u00e9ment donn\u00e9, est appel\u00e9 probl\u00e8me de classification. L'algorithme des k plus proches voisins permet de trouver les k voisins les plus proches de ce nouvel \u00e9l\u00e9ment dans le but de lui associer une classe plausible (Psy ou Eau, dans cet exemple). Par exemple, si k = 5 va chercher les 5 voisins les plus proches.</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#algorithme-des-kppv","title":"Algorithme des kppv\u00b6","text":""},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#enonce-et-specification","title":"\u00c9nonc\u00e9 et sp\u00e9cification\u00b6","text":"<p>\u00c0 partir d'un jeu de donn\u00e9es <code>donnees</code> (par exemple, les donn\u00e9es sur nos 34 Pok\u00e9mons) et d'une donn\u00e9e cible <code>cible</code> (le nouveau Pokemon \u00e0 classifier), l'algorithme de $k$ plus proches voisins doit d\u00e9terminer les $k$ donn\u00e9es les plus proches de la cible.</p> <p>Plus pr\u00e9cis\u00e9ment, la sp\u00e9cification de l'algorithme des kppv est la suivante :</p> <ul> <li>Entr\u00e9es :<ul> <li>une table <code>donnees</code> de taille n contenant les donn\u00e9es et leurs classes</li> <li>une donn\u00e9e cible : <code>cible</code></li> <li>un nombre <code>k</code></li> <li>une r\u00e8gle permettant de calculer la distance entre deux donn\u00e9es</li> </ul> </li> <li>Sortie : une table <code>k_plus_proches_voisins</code></li> <li>R\u00f4le : trouver les <code>k</code> donn\u00e9es les plus proches de <code>cible</code> parmi celles de la table <code>donnees</code> (\"plus proches\" au sens de la distance d\u00e9finie au d\u00e9part)</li> <li>Pr\u00e9condition : $n \\geq 1$ et $k &lt;= n$.</li> <li>Postcondition : <code>k_plus_proches_voisins</code> contient les k plus proches voisins de <code>cible</code> parmi les donn\u00e9es de la table <code>donnees</code></li> </ul>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#algorithme","title":"Algorithme\u00b6","text":"<p>L'algorithme naif des kppv s'exprime de mani\u00e8re simple :</p> <ol> <li>Cr\u00e9er une table <code>distances_voisins</code> contenant les \u00e9l\u00e9ments de la table <code>donnees</code> et leurs distances avec la donn\u00e9e <code>cible</code>.</li> <li>Trier les donn\u00e9es de la table <code>distances_voisins</code> selon la distance croissante avec la donn\u00e9e <code>cible</code></li> <li>Renvoyer les <code>k</code> premiers \u00e9l\u00e9ments de cette table tri\u00e9e (<code>k_plus_proches_voisins</code>)</li> </ol>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#implementation-de-lalgorithme","title":"Impl\u00e9mentation de l'algorithme\u00b6","text":"<p>L'algorithme des plus proches voisins repose presque enti\u00e8rement sur la distance entre deux donn\u00e9es. Il faut donc commencer par d\u00e9finir une distance entre deux donn\u00e9es.</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#etape-0-choix-et-implementation-de-la-distance","title":"\u00c9tape 0 : Choix et impl\u00e9mentation de la distance\u00b6","text":"<p>Dans la suite, on va choisir la distance \"naturelle\", c'est-\u00e0-dire celle \"\u00e0 vol d'oiseau\". On parle de distance euclidienne.</p> <p>Dans un rep\u00e8re orthonorm\u00e9, si $A$ et $B$ ont pour coordonn\u00e9es respectives $(x_A, y_A)$ et $(x_B, y_B)$ alors la distance (euclidienne) entre ces deux points est donn\u00e9e par la formule :</p> <p>$$\\text{distance}(A, B) = \\sqrt{(x_B-x_A)^2 + (y_B-y_A)^2}.$$</p> <p>Important: Sachez cependant qu'il existe d'autres distances possibles et que le choix de la distance n'est pas anodin car ce choix peut aboutir \u00e0 trouver des voisins les plus proches diff\u00e9rents et donc conduire \u00e0 des pr\u00e9dictions diff\u00e9rentes (voir le r\u00e9sum\u00e9 de cours !).</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#etape-1-creation-de-la-table-avec-les-distances","title":"\u00c9tape 1 : Cr\u00e9ation de la table avec les distances\u00b6","text":"<p>Maintenant que notre distance est d\u00e9finie, on peut passer \u00e0 l'impl\u00e9mentation de l'algorithme. On va donc commencer par cr\u00e9er la table <code>distances_voisins</code> contenant les distances entre toutes nos donn\u00e9es et la donn\u00e9e <code>cible</code>.</p> <p>On choisit de reprendre les dictionnaires de la table <code>pokemons</code> en leur ajoutant une cl\u00e9 correspondant \u00e0 la distance avec la cible. Par exemple, le premier \u00e9l\u00e9ment de <code>distances_voisins</code> sera un dictionnaire de la forme</p> <pre>{'Nom': 'Aligatueur', 'Type': 'Eau', 'Points de vie': '85', 'Attaque': '105', 'distance': dist}\n</pre> <p>dans lequel <code>dist</code> est la distance \u00e0 calculer entre le Pok\u00e9mon  <code>'Aligatueur'</code> et la cible.</p> <p>\ud83d\udcbb Question 5 : \u00c9crivez une fonction <code>table_avec_distances(donnees, cible)</code> qui renvoie la table <code>distances_voisins</code> contenant les \u00e9l\u00e9ments de la table <code>donnees</code> auxquels on a ajout\u00e9 la cl\u00e9 <code>distance</code> dont la valeur est leur distance avec la donn\u00e9e <code>cible</code>.</p> <p>Exemple: Si <code>cible = {'Nom': 'inconnu', 'Type': 'inconnu', 'Points de vie': '92', 'Attaque': '127'}</code> alors l'appel <code>table_avec_distances(pokemons, cible)</code> renvoie le tableau dont le d\u00e9but est le suivant :</p> <pre>[{'Nom': 'Aligatueur',\n  'Type': 'Eau',\n  'Points de vie': '85',\n  'Attaque': '105',\n  'distance': 23.08679276123039},\n {'Nom': 'Bargantua',\n  'Type': 'Eau',\n  'Points de vie': '70',\n  'Attaque': '92',\n  'distance': 41.340053217188775},\n ...\n]\n</pre>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#etape-2-tri-de-la-table-selon-la-distance-croissante","title":"\u00c9tape 2 : Tri de la table selon la distance croissante\u00b6","text":"<p>On va maintenant trier notre table de la plus petite \u00e0 la plus grande distance avec notre cible, soit du plus proche au plus \u00e9loign\u00e9 des voisins. Pour cela, on va utiliser la fonction <code>sorted</code> dont on peut afficher l'aide pour rappel :</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#etape-3-determination-des-k-plus-proches-voisins","title":"\u00c9tape 3 : D\u00e9termination des k plus proches voisins\u00b6","text":"<p>Le plus dur est fait, il ne reste plus qu'\u00e0 construire la table <code>k_plus_proches_voisins</code> contenant les k plus proches voisins. Comme la table <code>distances_voisins_triee</code> contient les voisins du plus proches au plus \u00e9loign\u00e9, il suffit de conserver les k premiers \u00e9l\u00e9ments de cette table !</p> <p>\ud83d\udcbb Question 8 : \u00c9crivez une fonction <code>conserve_k_premiers(k, table)</code> qui renvoie une nouvelle table contenant les <code>k</code> premiers \u00e9l\u00e9ments de la table <code>table</code> (o\u00f9 <code>k</code> est un entier positif inf\u00e9rieur ou \u00e9gale \u00e0 <code>len(table)</code>).</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#bilan","title":"Bilan\u00b6","text":"<p>On peut maintenant regrouper tout ce qui vient d'\u00eatre fait pour chaque \u00e9tape pour \u00e9crire une fonction <code>kppv(donnees, cible, k)</code> qui renvoie les <code>k</code> plus proches voisins de <code>cible</code> dans <code>donnees</code>.</p> <p>\ud83d\udcbb Question 10 : Compl\u00e9tez la fonction <code>kppv(donnees, cible, k)</code> suivante qui renvoie les <code>k</code> plus proches voisins de <code>cible</code> dans <code>donnees</code>.</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#et-notre-prediction-alors","title":"Et notre pr\u00e9diction alors ?\u00b6","text":"<p>L'algorithmes des kppv en lui-m\u00eame n'apporte pas la r\u00e9ponse \u00e0 notre probl\u00e8me de classification puisqu'il ne fournit que les k plus proches voisins (et leurs classes) de notre donn\u00e9e cible. Il reste donc une derni\u00e8re \u00e9tape pour pr\u00e9dire la classe de notre nouvel \u00e9l\u00e9ment : pour cela, on choisit la classe majoritaire (la plus pr\u00e9sente) dans les k plus proches voisins.</p> <p>On est contents si k est impair car il ne peut pas y avoir d'ex-aequo !</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#visualisation-graphique","title":"Visualisation graphique\u00b6","text":"<p>On peut utiliser le module <code>matplotlib</code> pour repr\u00e9senter graphiquement nos Pok\u00e9mons, et observer graphiquement les plus proches voisins selon la valeur de <code>k</code> choisies.</p> <p>Pour cr\u00e9er une nuage de points, il suffit d'utiliser la fonction <code>plot</code> qui prend en param\u00e8tres deux tableaux contenant respectivement la liste des abscisses et la liste des ordonn\u00e9es des points \u00e0 construire, ainsi qu'un param\u00e8tre permettant de d\u00e9finir le type de points et leur couleur :</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#et-si-on-change-de-distance","title":"Et si on change de distance ?\u00b6","text":"<p>On a utilis\u00e9 la distance euclidienne pour mesurer la distance entre nos donn\u00e9es et la cible. C'est la distance \"naturelle\" mais il existe d'autres distances. Par exemple, la distance de Manhattan entre deux donn\u00e9es $d_1(x_1, y_1)$ et $d_2(x_2, y_2)$ est d\u00e9finie ainsi $\\text{distance_manhattan}(d_1, d_2) = |x_2-x_1| + |y_2-y_1|$.</p> <p>Article Wikip\u00e9dia : Distance de Manhattan</p> <p>On peut modifier notre programme simplement en d\u00e9finissant et en utilisant cette nouvelle distance :</p>"},{"location":"files/C15/kppv_cours/kppv_Revision_Cours/#suivant-tp-iris","title":"SUIVANT : TP iris\u00b6","text":""},{"location":"files/C22/graphes_liste/","title":"Graphes liste","text":"In\u00a0[\u00a0]: Copied! <pre>class Graphe:\n\n    def __init__(self,sommets):\n        self.taille = len(sommets)\n        self.listes = {}\n        for s in sommets:\n            self.listes[s]=[]\n    \n    def ajoute_arete(self,depart,arrivee):\n        assert depart in self.listes.keys(), \"Le sommet de d\u00e9part n'existe pas\"\n        assert arrivee in self.listes.keys(), \"Le sommet d'arriv\u00e9e n'existe pas\"\n        if arrivee not in self.listes[depart]:\n            self.listes[depart].append(arrivee)\n    \n    def ajoute_sommet(self,sommet):\n        assert sommet not in self.listes.keys(), \"Le sommet existe d\u00e9j\u00e0\"\n        self.taille += 1\n        self.listes[sommet]=[]\n    \n    def voisins(self,sommet):\n        return self.listes[sommet]\n</pre> class Graphe:      def __init__(self,sommets):         self.taille = len(sommets)         self.listes = {}         for s in sommets:             self.listes[s]=[]          def ajoute_arete(self,depart,arrivee):         assert depart in self.listes.keys(), \"Le sommet de d\u00e9part n'existe pas\"         assert arrivee in self.listes.keys(), \"Le sommet d'arriv\u00e9e n'existe pas\"         if arrivee not in self.listes[depart]:             self.listes[depart].append(arrivee)          def ajoute_sommet(self,sommet):         assert sommet not in self.listes.keys(), \"Le sommet existe d\u00e9j\u00e0\"         self.taille += 1         self.listes[sommet]=[]          def voisins(self,sommet):         return self.listes[sommet]"},{"location":"files/C22/graphes_matrice/","title":"Graphes matrice","text":"In\u00a0[\u00a0]: Copied! <pre>class Graphe:\n\n    def __init__(self,sommets):\n        self.sommets=sommets\n        self.taille = len(sommets)\n        self.matrice = [[0]*self.taille for _ in range(self.taille)]\n    \n    def ajoute_arete(self,depart,arrivee):\n        assert depart in self.sommets and arrivee in self.sommets\n        lig = self.sommets.index(depart)\n        col = self.sommets.index(arrivee)\n        self.matrice[lig][col] = 1\n    \n    def supprime_arete(self,depart,arrivee):\n        assert depart in self.sommets and arrivee in self.sommets\n        lig = self.sommets.index(depart)\n        col = self.sommets.index(arrivee)\n        self.matrice[lig][col] = 0\n    \n    def get_voisin(self,sommet):\n        assert sommet in self.sommets\n        voisins = []\n        lig = self.sommets.index(sommet)\n        for col in range(self.taille):\n            if self.matrice[lig][col] == 1:\n                voisins.append(self.sommets[col])\n        return voisins\n</pre> class Graphe:      def __init__(self,sommets):         self.sommets=sommets         self.taille = len(sommets)         self.matrice = [[0]*self.taille for _ in range(self.taille)]          def ajoute_arete(self,depart,arrivee):         assert depart in self.sommets and arrivee in self.sommets         lig = self.sommets.index(depart)         col = self.sommets.index(arrivee)         self.matrice[lig][col] = 1          def supprime_arete(self,depart,arrivee):         assert depart in self.sommets and arrivee in self.sommets         lig = self.sommets.index(depart)         col = self.sommets.index(arrivee)         self.matrice[lig][col] = 0          def get_voisin(self,sommet):         assert sommet in self.sommets         voisins = []         lig = self.sommets.index(sommet)         for col in range(self.taille):             if self.matrice[lig][col] == 1:                 voisins.append(self.sommets[col])         return voisins In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"files/C7/exo5/","title":"Exo5","text":"In\u00a0[\u00a0]: Copied! <pre>def echange(liste,i,j):\n    liste[i],liste[j] = liste[j],liste[i]\n</pre> def echange(liste,i,j):     liste[i],liste[j] = liste[j],liste[i] In\u00a0[\u00a0]: Copied! <pre>def min_liste(liste,ind):\n    elt_min = liste[ind]\n    ind_min=ind\n    for k in range(ind,len(liste)):\n        if liste[k]&lt;elt_min:\n            elt_min=liste[k]\n            ind_min=k\n    return ind_min\n</pre> def min_liste(liste,ind):     elt_min = liste[ind]     ind_min=ind     for k in range(ind,len(liste)):         if liste[k] In\u00a0[\u00a0]: Copied! <pre>def tri_selection(liste):\n    longueur = len(liste)\n    for ind in range(longueur):\n        ind_min = min_liste(liste,ind)\n        echange(liste,ind,ind_min)\n</pre> def tri_selection(liste):     longueur = len(liste)     for ind in range(longueur):         ind_min = min_liste(liste,ind)         echange(liste,ind,ind_min) In\u00a0[\u00a0]: Copied! <pre>L=[12,19,10,13,11,15,9,14]\n</pre> L=[12,19,10,13,11,15,9,14] In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>def echange(liste,i,j):\n    liste[i],liste[j] = liste[j],liste[i]\n</pre> def echange(liste,i,j):     liste[i],liste[j] = liste[j],liste[i] In\u00a0[\u00a0]: Copied! <pre>def max_liste(liste,ind):\n    elt_max = liste[ind]\n    ind_max=ind\n    for k in range(ind,len(liste)):\n        if liste[k]&gt;elt_max:\n            elt_max=liste[k]\n            ind_max=k\n    return ind_max\n</pre> def max_liste(liste,ind):     elt_max = liste[ind]     ind_max=ind     for k in range(ind,len(liste)):         if liste[k]&gt;elt_max:             elt_max=liste[k]             ind_max=k     return ind_max In\u00a0[\u00a0]: Copied! <pre>def tri_selection_inverse(liste):\n    longueur = len(liste)\n    for ind in range(longueur):\n        ind_max = max_liste(liste,ind)\n        echange(liste,ind,ind_max)\n</pre> def tri_selection_inverse(liste):     longueur = len(liste)     for ind in range(longueur):         ind_max = max_liste(liste,ind)         echange(liste,ind,ind_max) In\u00a0[\u00a0]: Copied! <pre>L=[12,19,10,13,11,15,9,14]\n</pre> L=[12,19,10,13,11,15,9,14] In\u00a0[\u00a0]: Copied! <pre>def tri_insertion_inverse(liste):\n    for ind in range(0,len(liste)-1):\n        j = ind\n        while liste[j+1]&gt;liste[j] and j&gt;=0:\n            echange(liste,j+1,j)\n            j=j-1\n</pre> def tri_insertion_inverse(liste):     for ind in range(0,len(liste)-1):         j = ind         while liste[j+1]&gt;liste[j] and j&gt;=0:             echange(liste,j+1,j)             j=j-1 In\u00a0[\u00a0]: Copied! <pre>tri_insertion_inverse(L)\nprint(L)\n</pre> tri_insertion_inverse(L) print(L)"},{"location":"files/C7/exo6/","title":"Exo6","text":"In\u00a0[\u00a0]: Copied! <pre>def echange(liste,i,j):\n    liste[i],liste[j] = liste[j],liste[i]\n</pre> def echange(liste,i,j):     liste[i],liste[j] = liste[j],liste[i] In\u00a0[\u00a0]: Copied! <pre>def min_liste(liste,ind):\n    elt_min = liste[ind]\n    ind_min=ind\n    for k in range(ind,len(liste)):\n        if liste[k]&lt;elt_min:\n            elt_min=liste[k]\n            ind_min=k\n    return ind_min\n</pre> def min_liste(liste,ind):     elt_min = liste[ind]     ind_min=ind     for k in range(ind,len(liste)):         if liste[k] In\u00a0[\u00a0]: Copied! <pre>def tri_selection(liste):\n    liste_nouv=[]\n    for elt in liste:\n        liste_nouv.append(elt)\n    longueur = len(liste_nouv)\n    for ind in range(longueur):\n        ind_min = min_liste(liste_nouv,ind)\n        echange(liste_nouv,ind,ind_min)\n    return liste_nouv\n</pre> def tri_selection(liste):     liste_nouv=[]     for elt in liste:         liste_nouv.append(elt)     longueur = len(liste_nouv)     for ind in range(longueur):         ind_min = min_liste(liste_nouv,ind)         echange(liste_nouv,ind,ind_min)     return liste_nouv In\u00a0[\u00a0]: Copied! <pre>L=[12,19,10,13,11,15,9,14]\n</pre> L=[12,19,10,13,11,15,9,14] In\u00a0[\u00a0]: Copied! <pre>L1=tri_selection(L)\nprint(L)\nprint(L1)\n</pre> L1=tri_selection(L) print(L) print(L1) In\u00a0[\u00a0]: Copied! <pre>def tri_insertion(liste):\n    liste_nouv=[]\n    for elt in liste:\n        liste_nouv.append(elt)\n    for ind in range(0,len(liste_nouv)-1):\n        j = ind\n        while liste_nouv[j+1]&lt;liste_nouv[j] and j&gt;=0:\n            echange(liste_nouv,j,j+1)\n            j=j-1\n    return liste_nouv\n</pre> def tri_insertion(liste):     liste_nouv=[]     for elt in liste:         liste_nouv.append(elt)     for ind in range(0,len(liste_nouv)-1):         j = ind         while liste_nouv[j+1]=0:             echange(liste_nouv,j,j+1)             j=j-1     return liste_nouv In\u00a0[\u00a0]: Copied! <pre>L2=tri_insertion(L)\nprint(L)\nprint(L2)\n</pre> L2=tri_insertion(L) print(L) print(L2)"},{"location":"files/C7/exo7/","title":"Exo7","text":"In\u00a0[\u00a0]: Copied! <pre>def est_trie(liste):\n    long=len(liste)\n    for ind in range(long-1):\n        if liste[ind+1]&lt;liste[ind]:\n            return False\n    L_nv=L.reverse()\n    est_trie(L_nv)\n    return True\n</pre> def est_trie(liste):     long=len(liste)     for ind in range(long-1):         if liste[ind+1] In\u00a0[\u00a0]: Copied! <pre>L=[12,9,17,11,3]\nL_nv=L.reverse()\nprint(L_nv)\nL2=[1,2,3,4,5,6,7,8]\n</pre> L=[12,9,17,11,3] L_nv=L.reverse() print(L_nv) L2=[1,2,3,4,5,6,7,8] <p>print(est_trie(L))</p> <p>print(est_trie(L2))</p>"},{"location":"files/C7/sujet27_2/","title":"Sujet27 2","text":"In\u00a0[\u00a0]: Copied! <pre>def echange(tab, i, j):\n    tab[i], tab[j] = tab[j], tab[i]\n</pre> def echange(tab, i, j):     tab[i], tab[j] = tab[j], tab[i] In\u00a0[\u00a0]: Copied! <pre>def tri_iteratif(tab):\n    for k in range(len(tab)-1, 0, -1):\n        indice_max = k\n        for i in range(0, k):\n            if tab[i] &gt; tab[indice_max]:\n                indice_max = i\n        echange(tab, k, indice_max)\n    return tab\n</pre> def tri_iteratif(tab):     for k in range(len(tab)-1, 0, -1):         indice_max = k         for i in range(0, k):             if tab[i] &gt; tab[indice_max]:                 indice_max = i         echange(tab, k, indice_max)     return tab In\u00a0[\u00a0]: Copied! <pre>print(tri_iteratif([41, 55, 21, 18, 12, 6, 25]))\n</pre> print(tri_iteratif([41, 55, 21, 18, 12, 6, 25]))"},{"location":"files/C7/sujet38_1/","title":"Sujet38 1","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</pre> def tri_selection(tab):     for i in range(len(tab)-1):         indice_min = i         for j in range(i+1, len(tab)):             if tab[j] &lt; tab[indice_min]:                 indice_min = j         tab[i], tab[indice_min] = tab[indice_min], tab[i]     return tab <p>ou version plus d\u00e9coup\u00e9e, se rapprochant plus de la description de l'algo :</p> In\u00a0[\u00a0]: Copied! <pre>def minimum(tab, i):\n\"\"\"Recherche la position du minimum entre la position i et la fin du tableau tab\"\"\"\n    ind_minimum = i\n    for j in range(i+1, len(tab)):\n        if tab[j] &lt; tab[ind_minimum]:\n            ind_minimum = j\n    return ind_minimum\n</pre> def minimum(tab, i):     \"\"\"Recherche la position du minimum entre la position i et la fin du tableau tab\"\"\"     ind_minimum = i     for j in range(i+1, len(tab)):         if tab[j] &lt; tab[ind_minimum]:             ind_minimum = j     return ind_minimum In\u00a0[\u00a0]: Copied! <pre>def echange(tab, i, j):\n    tab[i], tab[j] = tab[j], tab[i]\n</pre> def echange(tab, i, j):     tab[i], tab[j] = tab[j], tab[i] In\u00a0[\u00a0]: Copied! <pre>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        ind_minimum = minimum(tab, i)\n        echange(tab, i, ind_minimum)\n    return tab\n</pre> def tri_selection(tab):     for i in range(len(tab)-1):         ind_minimum = minimum(tab, i)         echange(tab, i, ind_minimum)     return tab In\u00a0[\u00a0]: Copied! <pre>print(tri_selection([1,52,6,-9,12]))\n</pre> print(tri_selection([1,52,6,-9,12]))"},{"location":"files/C7/tri_insertion/","title":"Tri insertion","text":"In\u00a0[\u00a0]: Copied! <pre>from random import randint\n</pre> from random import randint In\u00a0[\u00a0]: Copied! <pre>def echange(liste,i,j):\n    liste[i],liste[j] = liste[j],liste[i]\n</pre> def echange(liste,i,j):     liste[i],liste[j] = liste[j],liste[i] In\u00a0[\u00a0]: Copied! <pre># Tri par insertion\ndef tri_insertion(liste):\n    for ind in range(len(liste)-1):\n        j = ind\n        \n        while liste[j+1]&lt;liste[j] and j&gt;=0:\n            print(liste)\n            echange(liste,j,j+1)\n            j=j-1\n</pre> # Tri par insertion def tri_insertion(liste):     for ind in range(len(liste)-1):         j = ind                  while liste[j+1]=0:             print(liste)             echange(liste,j,j+1)             j=j-1 <p>ex_liste = [randint(1,100) for _ in range(50)] L=[\"P\",\"R\",\"O\",\"G\",\"R\",\"A\",\"M\",\"M\",\"E\"]</p> In\u00a0[\u00a0]: Copied! <pre>L=[9,11,7,16]\ntri_insertion(L)\nprint(L)\n</pre> L=[9,11,7,16] tri_insertion(L) print(L)"},{"location":"files/C7/tri_selection/","title":"Tri selection","text":"In\u00a0[\u00a0]: Copied! <pre>from random import randint\n</pre> from random import randint In\u00a0[\u00a0]: Copied! <pre>def tri_selection(lst) :\n    for k in range(len(lst)-1):\n        indice_min = k\n        for i in range(k+1, len(lst)) :\n            if lst[i] &lt; lst[indice_min]:\n                indice_min = i\n        print(lst)\n        lst[k], lst[indice_min] = lst[indice_min], lst[k]\n        print(lst)\n</pre> def tri_selection(lst) :     for k in range(len(lst)-1):         indice_min = k         for i in range(k+1, len(lst)) :             if lst[i] &lt; lst[indice_min]:                 indice_min = i         print(lst)         lst[k], lst[indice_min] = lst[indice_min], lst[k]         print(lst) <p>ex_liste = [randint(1,100) for _ in range(50)]</p> <p>{L=[\"P\",\"R\",\"O\",\"G\",\"R\",\"A\",\"M\",\"M\",\"E\"] print(L)</p> In\u00a0[\u00a0]: Copied! <pre>L=[8,12,6,19]\ntri_selection(L)\n#print(L)\n</pre> L=[8,12,6,19] tri_selection(L) #print(L)"},{"location":"files/C8/act1/","title":"Act1","text":"In\u00a0[\u00a0]: Copied! <pre>def recherche(x,l):\n    for elt in l:\n        if elt==x:\n            return True\n    return False\n</pre> def recherche(x,l):     for elt in l:         if elt==x:             return True     return False In\u00a0[\u00a0]: Copied! <pre>L=[1,3,5,7,11,13]\n</pre> L=[1,3,5,7,11,13] In\u00a0[\u00a0]: Copied! <pre>def recherche_dichotomique(tab, val) :\n'''\n    renvoie True ou False suivant la pr\u00e9sence de la valeur val dans le tableau tri\u00e9 tab.\n    '''\n    i_debut = 0\n    i_fin = len(tab) - 1\n    while i_debut &lt;= i_fin :\n        i_centre = (i_debut + i_fin) // 2     # \n        val_centrale = tab[i_centre]          #  \n        if val_centrale == val:               #  \n            return True\n        if val_centrale &lt; val:                #  \n            i_debut = i_centre+1              #  \n        else :\n            i_fin = i_centre-1\n    return False\n</pre> def recherche_dichotomique(tab, val) :     '''     renvoie True ou False suivant la pr\u00e9sence de la valeur val dans le tableau tri\u00e9 tab.     '''     i_debut = 0     i_fin = len(tab) - 1     while i_debut &lt;= i_fin :         i_centre = (i_debut + i_fin) // 2     #          val_centrale = tab[i_centre]          #           if val_centrale == val:               #               return True         if val_centrale &lt; val:                #               i_debut = i_centre+1              #           else :             i_fin = i_centre-1     return False In\u00a0[\u00a0]: Copied! <pre>tab = [1, 5, 7, 9, 12, 13]\nrecherche_dichotomique(tab, 12)==True\nrecherche_dichotomique(tab, 17)==False\n</pre> tab = [1, 5, 7, 9, 12, 13] recherche_dichotomique(tab, 12)==True recherche_dichotomique(tab, 17)==False In\u00a0[\u00a0]: Copied! <pre>def dicho_rec_2(tab, val, i=0, j=None): # \n    if j is None:                       # \n        j = len(tab)-1\n    if i &gt; j :\n        return False\n    m = (i + j) // 2\n    if tab[m] &lt; val :\n        return dicho_rec_2(tab, val, m + 1, j)\n    elif tab[m] &gt; val :\n        return dicho_rec_2(tab, val, i, m - 1 )\n    else :\n        return True\n</pre> def dicho_rec_2(tab, val, i=0, j=None): #      if j is None:                       #          j = len(tab)-1     if i &gt; j :         return False     m = (i + j) // 2     if tab[m] &lt; val :         return dicho_rec_2(tab, val, m + 1, j)     elif tab[m] &gt; val :         return dicho_rec_2(tab, val, i, m - 1 )     else :         return True In\u00a0[\u00a0]: Copied! <pre>print(dicho_rec_2(tab, 17))\n</pre> print(dicho_rec_2(tab, 17))"},{"location":"files/C8/quart_tour/","title":"Quart tour","text":"In\u00a0[\u00a0]: Copied! <pre>from PIL import Image\n</pre> from PIL import Image In\u00a0[\u00a0]: Copied! <pre>def partage_quart(image):\n    n = image.width\n    if n &gt; 1:\n        q1 = image.crop((0,0,n//2,n//2))\n        q2 = image.crop((n//2,0,n,n//2))\n        q3 = image.crop((0,n//2,n//2,n))\n        q4 = image.crop((n//2,n//2,n,n))\n        return q1,q2,q3,q4\n</pre> def partage_quart(image):     n = image.width     if n &gt; 1:         q1 = image.crop((0,0,n//2,n//2))         q2 = image.crop((n//2,0,n,n//2))         q3 = image.crop((0,n//2,n//2,n))         q4 = image.crop((n//2,n//2,n,n))         return q1,q2,q3,q4 In\u00a0[\u00a0]: Copied! <pre>img_test = Image.open(\"image1.jpg\")\n</pre> img_test = Image.open(\"image1.jpg\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>def quart_tour(image):\n    n = image.width\n    # Partage de l'image en quatre quarts\n    if n&gt;1:\n        q1,q2,q3,q4 = partage_quart(image)\n        # Rotation de chacun des quarts\n        rq1 = quart_tour(q1)\n        rq2 = quart_tour(q2)\n        rq3 = quart_tour(q3)\n        rq4 = quart_tour(q4)\n        # Reconstruction de l'image\n        resultat = Image.new('RGB',image.size)\n        resultat.paste(rq2,(0,0))\n        resultat.paste(rq4,(n//2,0))\n        resultat.paste(rq1,(0,n//2))\n        resultat.paste(rq3,(n//2,n//2))\n        return resultat\n    else:\n        return image\n</pre> def quart_tour(image):     n = image.width     # Partage de l'image en quatre quarts     if n&gt;1:         q1,q2,q3,q4 = partage_quart(image)         # Rotation de chacun des quarts         rq1 = quart_tour(q1)         rq2 = quart_tour(q2)         rq3 = quart_tour(q3)         rq4 = quart_tour(q4)         # Reconstruction de l'image         resultat = Image.new('RGB',image.size)         resultat.paste(rq2,(0,0))         resultat.paste(rq4,(n//2,0))         resultat.paste(rq1,(0,n//2))         resultat.paste(rq3,(n//2,n//2))         return resultat     else:         return image In\u00a0[\u00a0]: Copied! <pre>im1=quart_tour(img_test)\n</pre> im1=quart_tour(img_test) In\u00a0[\u00a0]: Copied! <pre>im1.show()\n</pre> im1.show()"},{"location":"files/C8/tri_fusion/","title":"Tri fusion","text":"In\u00a0[\u00a0]: Copied! <pre>def partage(liste):\n    l1=[]\n    l2=[]\n    for k in range(len(liste)//2):\n        l1.append(liste[k])\n    for k in range(len(liste)//2,len(liste)):\n        l2.append(liste[k])\n    return l1,l2\n</pre> def partage(liste):     l1=[]     l2=[]     for k in range(len(liste)//2):         l1.append(liste[k])     for k in range(len(liste)//2,len(liste)):         l2.append(liste[k])     return l1,l2 In\u00a0[\u00a0]: Copied! <pre>liste=[38,27,43,3,9,82,10]\nl1,l2=partage(liste)\n</pre> liste=[38,27,43,3,9,82,10] l1,l2=partage(liste) In\u00a0[\u00a0]: Copied! <pre>def fusion(l1,l2):\n    ind1=0\n    ind2=0\n    l = []\n    while ind1&lt;len(l1) and ind2&lt;len(l2):\n        if l1[ind1]&lt;l2[ind2]:\n            l.append(l1[ind1])\n            ind1+=1\n        else:\n            l.append(l2[ind2])\n            ind2+=1\n    if ind1==len(l1):\n        for k in range(ind2,len(l2)):\n            l.append(l2[k])\n    else:\n        for k in range(ind1,len(l1)):\n            l.append(l1[k])\n    return l\n</pre> def fusion(l1,l2):     ind1=0     ind2=0     l = []     while ind1 In\u00a0[\u00a0]: Copied! <pre>print(fusion(l1,l2))\n</pre> print(fusion(l1,l2)) In\u00a0[\u00a0]: Copied! <pre>def tri_fusion(liste):\n    long = len(liste)\n    if long &lt;= 1:\n        return liste\n    else:\n        l1, l2 = partage(liste)\n        l1 = tri_fusion(l1)\n        l2 = tri_fusion(l2)\n    return fusion(l1,l2)\n</pre> def tri_fusion(liste):     long = len(liste)     if long &lt;= 1:         return liste     else:         l1, l2 = partage(liste)         l1 = tri_fusion(l1)         l2 = tri_fusion(l2)     return fusion(l1,l2)     In\u00a0[\u00a0]: Copied! <pre>print(tri_fusion(liste))\n</pre> print(tri_fusion(liste))"},{"location":"files/projets/cesar/cesar/","title":"Cesar","text":"In\u00a0[\u00a0]: Copied! <pre>ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n</pre> ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" In\u00a0[\u00a0]: Copied! <pre>def chiffre_caractere(caractere,cle):\n    if caractere in ALPHABET:\n        #recuperation du code ascii du caractere (voir la fonction ord de Python)\n        code_caractere=ord(caractere)\n        #decalage de cle emplacement\n        code_caractere = code_caractere + cle\n        #on prevoit le cas ou le code depasse celui de Z\n        if code_caractere &gt; ord(\"Z\"):\n            code_caractere=code_caractere - 26\n        if code_caractere &lt; ord(\"A\"):\n            code_caractere=code_caractere + 26\n        # recuperation du caractere a partir du code  (voir la fonction chr de Python)\n        nouveau_caractere = chr(code_caractere)\n        return nouveau_caractere\n    else:\n        return caractere\n</pre> def chiffre_caractere(caractere,cle):     if caractere in ALPHABET:         #recuperation du code ascii du caractere (voir la fonction ord de Python)         code_caractere=ord(caractere)         #decalage de cle emplacement         code_caractere = code_caractere + cle         #on prevoit le cas ou le code depasse celui de Z         if code_caractere &gt; ord(\"Z\"):             code_caractere=code_caractere - 26         if code_caractere &lt; ord(\"A\"):             code_caractere=code_caractere + 26         # recuperation du caractere a partir du code  (voir la fonction chr de Python)         nouveau_caractere = chr(code_caractere)         return nouveau_caractere     else:         return caractere In\u00a0[\u00a0]: Copied! <pre>def chiffre_texte(texte,cle):\n    texte_c = \"\"\n    for caractere in texte:\n        texte_c += chiffre_caractere(caractere,cle)\n    return texte_c\n</pre> def chiffre_texte(texte,cle):     texte_c = \"\"     for caractere in texte:         texte_c += chiffre_caractere(caractere,cle)     return texte_c In\u00a0[\u00a0]: Copied! <pre>texte = \"Ru yxdbbj dw yaxoxwm bxdyra, b'jbbrc mjwb bxw urc, b'jyydhjwc bda bxw yxuxlqxw. Ru yarc dw axvjw, ru u'xdearc, ru udc; vjrb ru w'h bjrbrbbjrc zd'dw rvkaxpurx lxwodb, ru kdcjrc \u00e0 cxdc rwbcjwc bda dw vxc mxwc ru rpwxajrc uj brpwrorljcrxw.\".upper()\nprint(texte)\nfor cle in range(9,10):\n    print(cle)\n    print(chiffre_texte(texte,-cle))\n</pre> texte = \"Ru yxdbbj dw yaxoxwm bxdyra, b'jbbrc mjwb bxw urc, b'jyydhjwc bda bxw yxuxlqxw. Ru yarc dw axvjw, ru u'xdearc, ru udc; vjrb ru w'h bjrbrbbjrc zd'dw rvkaxpurx lxwodb, ru kdcjrc \u00e0 cxdc rwbcjwc bda dw vxc mxwc ru rpwxajrc uj brpwrorljcrxw.\".upper() print(texte) for cle in range(9,10):     print(cle)     print(chiffre_texte(texte,-cle))"},{"location":"files/projets/forcebrute/fb_pass1/","title":"Fb pass1","text":"In\u00a0[\u00a0]: Copied! <pre>import fitz\n</pre> import fitz In\u00a0[\u00a0]: Copied! <pre>FILE = \"protege1.pdf\"\nDOC = fitz.Document(FILE)\n</pre> FILE = \"protege1.pdf\" DOC = fitz.Document(FILE) In\u00a0[\u00a0]: Copied! <pre>def test_password(password):\n'''Renvoie True lorsque password permet d'ouvrir le fichier FILE d\u00e9clar\u00e9 ci-dessus'''\n    return DOC.authenticate(password)\n</pre> def test_password(password):     '''Renvoie True lorsque password permet d'ouvrir le fichier FILE d\u00e9clar\u00e9 ci-dessus'''     return DOC.authenticate(password) In\u00a0[\u00a0]: Copied! <pre>for x in range(10000):\n    if test_password(str(x).zfill(4)):\n        print(f\"Ok : {x}\")\n</pre> for x in range(10000):     if test_password(str(x).zfill(4)):         print(f\"Ok : {x}\")"},{"location":"files/projets/forcebrute/force_brute/","title":"Force brute","text":"In\u00a0[\u00a0]: Copied! <pre>import fitz\nfrom time import time\n</pre> import fitz from time import time <p>Pour proteger un pdf avec mot de passe : pdftk source.pdf output destination.pdf user_pw password Fichier 1 : le mot de passe est un code de carte bancaire : XXXX : 0991 Fichier 2 : le mot de passe est une date de naissance : jjmmaaaa (aaaa &gt; 1900) : 28121969 Fichier 3 : le mot de passe est un mot de 7 lettres (\u00e9crit en minuscule) figurant dans le dictionnaire : carotte Fichier 4 : mot de passe faible issu du projet Richelieu (https://github.com/tarraschk/richelieu/blob/master/french_passwords_top20000.txt)  : blackangel Fichier 5 : le mot de passe est un pr\u00e9nom suivi d'un num\u00e9ro de d\u00e9partement : Gabriel77</p> In\u00a0[\u00a0]: Copied! <pre>FILE = \"/home/fenarius/Travail/Cours/fabricenativel.github.io/docs/Premiere/files/Projets/forcebrute/protege2.pdf\"\nDOC = fitz.Document(FILE)\n</pre> FILE = \"/home/fenarius/Travail/Cours/fabricenativel.github.io/docs/Premiere/files/Projets/forcebrute/protege2.pdf\" DOC = fitz.Document(FILE) In\u00a0[\u00a0]: Copied! <pre>def tp(file,password):\n    return DOC.authenticate(password)\n</pre> def tp(file,password):     return DOC.authenticate(password) In\u00a0[\u00a0]: Copied! <pre>debut = time()\nfor jj in range(1,32):\n    for mm in range(1,13):\n        for aaaa in range(1900,2023):\n            test_mdp = str(jj)+str(mm)+str(aaaa)\n            if tp(FILE,test_mdp):\n                print(f\"Mot de passe trouv\u00e9 : {test_mdp}\")\nfin = time()\n</pre> debut = time() for jj in range(1,32):     for mm in range(1,13):         for aaaa in range(1900,2023):             test_mdp = str(jj)+str(mm)+str(aaaa)             if tp(FILE,test_mdp):                 print(f\"Mot de passe trouv\u00e9 : {test_mdp}\") fin = time() In\u00a0[\u00a0]: Copied! <pre>print(fin-debut)\n</pre> print(fin-debut)"},{"location":"images/C7/insertion/","title":"Insertion","text":"In\u00a0[\u00a0]: Copied! <pre>''' Visualisation tri par s\u00e9lection '''\n</pre> ''' Visualisation tri par s\u00e9lection ''' In\u00a0[\u00a0]: Copied! <pre>import turtle\nfrom random import randint\nimport time\n</pre> import turtle from random import randint import time In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre># Les constantes\nLARGEUR_ECRAN = 1000\nHAUTEUR_ECRAN = 600\nNB = 6\nMARGE = 40\nECART = 20\nLARGEUR_CARTE = (LARGEUR_ECRAN-MARGE*2)//NB - ECART\nHAUTEUR_CARTE = HAUTEUR_ECRAN // 3 - 2 * MARGE\nVMIN = 0\nVMAX = 20\nCOULEUR_BASE = \"black\"\nCOULEUR_SPOT = \"red\"\nLIGNE_CARTE = MARGE + HAUTEUR_CARTE*2\nLIGNE_SPOT = LIGNE_CARTE - 20\nWAIT_BLINK = 0.4\nMOVE = 0.002\nPARCOURS = 0.5\n</pre> # Les constantes LARGEUR_ECRAN = 1000 HAUTEUR_ECRAN = 600 NB = 6 MARGE = 40 ECART = 20 LARGEUR_CARTE = (LARGEUR_ECRAN-MARGE*2)//NB - ECART HAUTEUR_CARTE = HAUTEUR_ECRAN // 3 - 2 * MARGE VMIN = 0 VMAX = 20 COULEUR_BASE = \"black\" COULEUR_SPOT = \"red\" LIGNE_CARTE = MARGE + HAUTEUR_CARTE*2 LIGNE_SPOT = LIGNE_CARTE - 20 WAIT_BLINK = 0.4 MOVE = 0.002 PARCOURS = 0.5 In\u00a0[\u00a0]: Copied! <pre># La tortue et l'\u00e9cran de jeu\npapier = turtle.Screen()\ncrayon = turtle.Turtle()\ntortue_spot = turtle.Turtle()\ntortue_carte = [turtle.Turtle() for _ in range(NB)]\ntortue_ligne = turtle.Turtle()\ntortue_pause = turtle.Turtle()\n</pre> # La tortue et l'\u00e9cran de jeu papier = turtle.Screen() crayon = turtle.Turtle() tortue_spot = turtle.Turtle() tortue_carte = [turtle.Turtle() for _ in range(NB)] tortue_ligne = turtle.Turtle() tortue_pause = turtle.Turtle() In\u00a0[\u00a0]: Copied! <pre># Taille et couleur du papier + coordonn\u00e9es\npapier.bgcolor(\"lightgray\")\npapier.title(\"Observer attentivement !\")\npapier.setup(width=LARGEUR_ECRAN,height=HAUTEUR_ECRAN)\npapier.setworldcoordinates(0,0,LARGEUR_ECRAN,HAUTEUR_ECRAN)\n</pre> # Taille et couleur du papier + coordonn\u00e9es papier.bgcolor(\"lightgray\") papier.title(\"Observer attentivement !\") papier.setup(width=LARGEUR_ECRAN,height=HAUTEUR_ECRAN) papier.setworldcoordinates(0,0,LARGEUR_ECRAN,HAUTEUR_ECRAN) In\u00a0[\u00a0]: Copied! <pre># Acc\u00e9l\u00e9ration des dessins\ncrayon.speed(0)\npapier.tracer(400)\n</pre> # Acc\u00e9l\u00e9ration des dessins crayon.speed(0) papier.tracer(400) In\u00a0[\u00a0]: Copied! <pre>def origine(tortue,x,y):\n    tortue.penup()\n    tortue.goto(x,y)\n    tortue.pendown()\n</pre> def origine(tortue,x,y):     tortue.penup()     tortue.goto(x,y)     tortue.pendown() In\u00a0[\u00a0]: Copied! <pre>def ecrit(tortue,x,y,texte,fonte):\n    origine(tortue,x,y)\n    tortue.write(texte,align=\"center\",font=fonte)\n</pre> def ecrit(tortue,x,y,texte,fonte):     origine(tortue,x,y)     tortue.write(texte,align=\"center\",font=fonte) In\u00a0[\u00a0]: Copied! <pre>def ligne(tortue,x,y,l,angle):\n'''Trace le segment de droite d'origne (x,y) et de longueur l dans la direction angle'''\n    origine(tortue,x,y)\n    tortue.setheading(angle)\n    tortue.forward(l)\n</pre> def ligne(tortue,x,y,l,angle):     '''Trace le segment de droite d'origne (x,y) et de longueur l dans la direction angle'''     origine(tortue,x,y)     tortue.setheading(angle)     tortue.forward(l) In\u00a0[\u00a0]: Copied! <pre>def rectangle(tortue,x,y,lx,ly):\n    origine(tortue,x,y)\n    tortue.begin_fill()\n    for _ in range(2):\n        tortue.forward(lx)\n        tortue.left(90)\n        tortue.forward(ly)\n        tortue.left(90)\n    tortue.end_fill()\n</pre> def rectangle(tortue,x,y,lx,ly):     origine(tortue,x,y)     tortue.begin_fill()     for _ in range(2):         tortue.forward(lx)         tortue.left(90)         tortue.forward(ly)         tortue.left(90)     tortue.end_fill() In\u00a0[\u00a0]: Copied! <pre>def cercle(tortue,x,y,r,angle=360):\n    origine(tortue,x+r,y)\n    tortue.setheading(90)\n    tortue.pendown()\n    tortue.begin_fill()\n    tortue.circle(r)\n    tortue.end_fill()\n</pre> def cercle(tortue,x,y,r,angle=360):     origine(tortue,x+r,y)     tortue.setheading(90)     tortue.pendown()     tortue.begin_fill()     tortue.circle(r)     tortue.end_fill() In\u00a0[\u00a0]: Copied! <pre>def set_crayon(tortue,epaisseur=1,couleur=\"black\",remplissage=\"white\",visible=False):\n    tortue.pensize(epaisseur)\n    tortue.color(couleur)\n    tortue.fillcolor(remplissage)\n    if visible:\n        tortue.showturtle()\n    else:\n        tortue.hideturtle()\n</pre> def set_crayon(tortue,epaisseur=1,couleur=\"black\",remplissage=\"white\",visible=False):     tortue.pensize(epaisseur)     tortue.color(couleur)     tortue.fillcolor(remplissage)     if visible:         tortue.showturtle()     else:         tortue.hideturtle() In\u00a0[\u00a0]: Copied! <pre>def dessine_carte(index,liste,couleur=None,visible=True,posx=0,posy=0):\n    if couleur==None:\n        couleur = tortue_carte[index].pencolor()\n    tortue_carte[index].reset()\n    if visible:\n        set_crayon(tortue_carte[index],epaisseur=5,couleur=couleur,remplissage=\"white\")\n        rectangle(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+posx,LIGNE_CARTE+posy,LARGEUR_CARTE,HAUTEUR_CARTE)\n        ecrit(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2+posx,LIGNE_CARTE+HAUTEUR_CARTE//2+posy,liste[index],fonte=(\"Arial\",24,\"bold\"))\n</pre> def dessine_carte(index,liste,couleur=None,visible=True,posx=0,posy=0):     if couleur==None:         couleur = tortue_carte[index].pencolor()     tortue_carte[index].reset()     if visible:         set_crayon(tortue_carte[index],epaisseur=5,couleur=couleur,remplissage=\"white\")         rectangle(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+posx,LIGNE_CARTE+posy,LARGEUR_CARTE,HAUTEUR_CARTE)         ecrit(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2+posx,LIGNE_CARTE+HAUTEUR_CARTE//2+posy,liste[index],fonte=(\"Arial\",24,\"bold\")) In\u00a0[\u00a0]: Copied! <pre>def dessine_liste(liste):\n    set_crayon(crayon,epaisseur=10,couleur=\"darkblue\",remplissage=\"lightgray\")\n    rectangle(crayon,0,0,LARGEUR_ECRAN-10,HAUTEUR_ECRAN-10)\n    couleur = COULEUR_BASE\n    for ind in range(NB):\n        dessine_carte(ind,liste,couleur)\n    pointille(0)\n</pre> def dessine_liste(liste):     set_crayon(crayon,epaisseur=10,couleur=\"darkblue\",remplissage=\"lightgray\")     rectangle(crayon,0,0,LARGEUR_ECRAN-10,HAUTEUR_ECRAN-10)     couleur = COULEUR_BASE     for ind in range(NB):         dessine_carte(ind,liste,couleur)     pointille(0) In\u00a0[\u00a0]: Copied! <pre>def pointille(index):\n    tortue_ligne.reset()\n    set_crayon(tortue_ligne,epaisseur=4,couleur=\"brown\")\n    start = MARGE*2\n    inc = 10\n    while start+inc&lt;HAUTEUR_ECRAN-MARGE*2:\n        ligne(tortue_ligne,MARGE+(LARGEUR_CARTE+ECART)*index-ECART//2,start,inc//4,90)\n        start=start+inc\n</pre> def pointille(index):     tortue_ligne.reset()     set_crayon(tortue_ligne,epaisseur=4,couleur=\"brown\")     start = MARGE*2     inc = 10     while start+inc In\u00a0[\u00a0]: Copied! <pre>def dessine_spot(index,visible=True,mid=False):\n    tortue_spot.reset()\n    offset=0\n    if mid: offset=(LARGEUR_CARTE+ECART)//2\n    if visible:\n        set_crayon(tortue_spot,couleur=COULEUR_SPOT,remplissage=COULEUR_SPOT)\n        tortue_spot.shapesize(2)\n        origine(tortue_spot,MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2+offset,LIGNE_SPOT)\n        tortue_spot.setheading(90)\n        tortue_spot.stamp()\n</pre> def dessine_spot(index,visible=True,mid=False):     tortue_spot.reset()     offset=0     if mid: offset=(LARGEUR_CARTE+ECART)//2     if visible:         set_crayon(tortue_spot,couleur=COULEUR_SPOT,remplissage=COULEUR_SPOT)         tortue_spot.shapesize(2)         origine(tortue_spot,MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2+offset,LIGNE_SPOT)         tortue_spot.setheading(90)         tortue_spot.stamp() In\u00a0[\u00a0]: Copied! <pre>def deplace_vertical(liste,i,vy,env = False):\n    signe = -int(abs(vy)/vy)\n    if env:\n        for y in range(vy*signe,0):\n            dessine_carte(i,liste,posy=y*signe)\n            time.sleep(MOVE)\n    else:\n        for y in range(0,-vy*signe):\n            dessine_carte(i,liste,posy=-y*signe)\n            time.sleep(MOVE)\n</pre> def deplace_vertical(liste,i,vy,env = False):     signe = -int(abs(vy)/vy)     if env:         for y in range(vy*signe,0):             dessine_carte(i,liste,posy=y*signe)             time.sleep(MOVE)     else:         for y in range(0,-vy*signe):             dessine_carte(i,liste,posy=-y*signe)             time.sleep(MOVE) In\u00a0[\u00a0]: Copied! <pre>def deplace_horizontal(liste,i,j,mid=False):\n    if i!=j:\n        offset=0\n        if mid: offset=(LARGEUR_CARTE+ECART)//2\n        signe = int(abs(i-j))//(i-j)\n        for x in range(0,signe*(i-j)*(LARGEUR_CARTE+ECART)):\n            dessine_carte(i,liste,posy=(-HAUTEUR_CARTE-ECART)*signe,posx=-x*signe+offset)\n            time.sleep(MOVE)\n</pre> def deplace_horizontal(liste,i,j,mid=False):     if i!=j:         offset=0         if mid: offset=(LARGEUR_CARTE+ECART)//2         signe = int(abs(i-j))//(i-j)         for x in range(0,signe*(i-j)*(LARGEUR_CARTE+ECART)):             dessine_carte(i,liste,posy=(-HAUTEUR_CARTE-ECART)*signe,posx=-x*signe+offset)             time.sleep(MOVE) In\u00a0[\u00a0]: Copied! <pre>def show_echange(liste,i,j):\n    if i!=j:\n        deplace_vertical(liste,i,HAUTEUR_CARTE+ECART)\n        deplace_vertical(liste,j,-HAUTEUR_CARTE-ECART)\n        deplace_horizontal(liste,i,j)\n        deplace_horizontal(liste,j,i)\n        liste[i],liste[j] = liste[j],liste[i]\n        tortue_carte[i],tortue_carte[j] = tortue_carte[j],tortue_carte[i]\n        deplace_vertical(liste,i,-HAUTEUR_CARTE-ECART,env=True)\n        deplace_vertical(liste,j,HAUTEUR_CARTE+ECART,env=True)\n</pre> def show_echange(liste,i,j):     if i!=j:         deplace_vertical(liste,i,HAUTEUR_CARTE+ECART)         deplace_vertical(liste,j,-HAUTEUR_CARTE-ECART)         deplace_horizontal(liste,i,j)         deplace_horizontal(liste,j,i)         liste[i],liste[j] = liste[j],liste[i]         tortue_carte[i],tortue_carte[j] = tortue_carte[j],tortue_carte[i]         deplace_vertical(liste,i,-HAUTEUR_CARTE-ECART,env=True)         deplace_vertical(liste,j,HAUTEUR_CARTE+ECART,env=True) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>def pause_tri(x,y):\n    global pause\n    pause = not pause\n    papier.update()\n    while pause:\n        set_crayon(tortue_pause)\n        origine(tortue_pause,LARGEUR_ECRAN//2,HAUTEUR_ECRAN-MARGE*2)\n        tortue_pause.color(\"red\")\n        tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))\n        time.sleep(WAIT_BLINK)\n        tortue_pause.color(\"black\")\n        tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))\n        time.sleep(WAIT_BLINK)\n        # papier.listen()\n</pre> def pause_tri(x,y):     global pause     pause = not pause     papier.update()     while pause:         set_crayon(tortue_pause)         origine(tortue_pause,LARGEUR_ECRAN//2,HAUTEUR_ECRAN-MARGE*2)         tortue_pause.color(\"red\")         tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))         time.sleep(WAIT_BLINK)         tortue_pause.color(\"black\")         tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))         time.sleep(WAIT_BLINK)         # papier.listen() In\u00a0[\u00a0]: Copied! <pre>pause = False\npapier.onscreenclick(pause_tri)\nliste = [randint(VMIN,VMAX) for _ in range(NB)]\ndessine_liste(liste)\ntime.sleep(3)\npapier.update()\nfor index in range(NB):\n    dessine_spot(index)\n    pointille(index+1)\n    k = index-1\n    while liste[k]&gt;liste[k+1] and k&gt;=0:\n        tortue_pause.reset()\n        for _ in range(3):\n            dessine_carte(k,liste,\"orange\")\n            dessine_carte(k+1,liste,\"red\")  \n            time.sleep(WAIT_BLINK)\n            dessine_carte(k,liste,\"red\")\n            dessine_carte(k+1,liste,\"orange\")  \n            time.sleep(WAIT_BLINK)\n        show_echange(liste,k,k+1)\n        k = k - 1\n        for i in range(index+1):\n            dessine_carte(i,liste,\"green\")  \n        tortue_pause.reset()\n    time.sleep(0.2)\npointille(NB)\npapier.update()\npapier.exitonclick()\n</pre> pause = False papier.onscreenclick(pause_tri) liste = [randint(VMIN,VMAX) for _ in range(NB)] dessine_liste(liste) time.sleep(3) papier.update() for index in range(NB):     dessine_spot(index)     pointille(index+1)     k = index-1     while liste[k]&gt;liste[k+1] and k&gt;=0:         tortue_pause.reset()         for _ in range(3):             dessine_carte(k,liste,\"orange\")             dessine_carte(k+1,liste,\"red\")               time.sleep(WAIT_BLINK)             dessine_carte(k,liste,\"red\")             dessine_carte(k+1,liste,\"orange\")               time.sleep(WAIT_BLINK)         show_echange(liste,k,k+1)         k = k - 1         for i in range(index+1):             dessine_carte(i,liste,\"green\")           tortue_pause.reset()     time.sleep(0.2) pointille(NB) papier.update() papier.exitonclick()"},{"location":"images/C7/selection/","title":"Selection","text":"In\u00a0[\u00a0]: Copied! <pre>''' Visualisation tri par s\u00e9lection '''\n</pre> ''' Visualisation tri par s\u00e9lection ''' In\u00a0[\u00a0]: Copied! <pre>import turtle\nfrom random import randint\nimport time\nimport argparse\n</pre> import turtle from random import randint import time import argparse In\u00a0[\u00a0]: Copied! <pre># Les constantes\nLARGEUR_ECRAN = 1000\nHAUTEUR_ECRAN = 600\nMARGE = 40\nECART = 20\nLARGEUR_CARTE = (LARGEUR_ECRAN-MARGE*2)//10 - ECART\nHAUTEUR_CARTE = HAUTEUR_ECRAN // 3 - 2 * MARGE\nVMIN = 100\nVMAX = 200\nCOULEUR_BASE = \"black\"\nCOULEUR_SPOT = \"red\"\nLIGNE_CARTE = MARGE + HAUTEUR_CARTE*2\nLIGNE_SPOT = LIGNE_CARTE - 20\nWAIT_BLINK = 0.3\nMOVE = 0.0005\nPARCOURS = 0.4\n</pre> # Les constantes LARGEUR_ECRAN = 1000 HAUTEUR_ECRAN = 600 MARGE = 40 ECART = 20 LARGEUR_CARTE = (LARGEUR_ECRAN-MARGE*2)//10 - ECART HAUTEUR_CARTE = HAUTEUR_ECRAN // 3 - 2 * MARGE VMIN = 100 VMAX = 200 COULEUR_BASE = \"black\" COULEUR_SPOT = \"red\" LIGNE_CARTE = MARGE + HAUTEUR_CARTE*2 LIGNE_SPOT = LIGNE_CARTE - 20 WAIT_BLINK = 0.3 MOVE = 0.0005 PARCOURS = 0.4 In\u00a0[\u00a0]: Copied! <pre># La tortue et l'\u00e9cran de jeu\npapier = turtle.Screen()\ncrayon = turtle.Turtle()\ntortue_spot = turtle.Turtle()\ntortue_carte = [turtle.Turtle() for _ in range(26)]\ntortue_ligne = turtle.Turtle()\ntortue_pause = turtle.Turtle()\n</pre> # La tortue et l'\u00e9cran de jeu papier = turtle.Screen() crayon = turtle.Turtle() tortue_spot = turtle.Turtle() tortue_carte = [turtle.Turtle() for _ in range(26)] tortue_ligne = turtle.Turtle() tortue_pause = turtle.Turtle() In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre># Taille et couleur du papier + coordonn\u00e9es\npapier.bgcolor(\"lightgray\")\npapier.title(\"Observer attentivement !\")\npapier.setup(width=LARGEUR_ECRAN,height=HAUTEUR_ECRAN)\npapier.setworldcoordinates(0,0,LARGEUR_ECRAN,HAUTEUR_ECRAN)\n</pre> # Taille et couleur du papier + coordonn\u00e9es papier.bgcolor(\"lightgray\") papier.title(\"Observer attentivement !\") papier.setup(width=LARGEUR_ECRAN,height=HAUTEUR_ECRAN) papier.setworldcoordinates(0,0,LARGEUR_ECRAN,HAUTEUR_ECRAN) In\u00a0[\u00a0]: Copied! <pre># Acc\u00e9l\u00e9ration des dessins\ncrayon.speed(0)\npapier.tracer(400)\n</pre> # Acc\u00e9l\u00e9ration des dessins crayon.speed(0) papier.tracer(400) In\u00a0[\u00a0]: Copied! <pre>def origine(tortue,x,y):\n    tortue.penup()\n    tortue.goto(x,y)\n    tortue.pendown()\n</pre> def origine(tortue,x,y):     tortue.penup()     tortue.goto(x,y)     tortue.pendown() In\u00a0[\u00a0]: Copied! <pre>def ecrit(tortue,x,y,texte,fonte):\n    origine(tortue,x,y)\n    tortue.write(texte,align=\"center\",font=fonte)\n</pre> def ecrit(tortue,x,y,texte,fonte):     origine(tortue,x,y)     tortue.write(texte,align=\"center\",font=fonte) In\u00a0[\u00a0]: Copied! <pre>def ligne(tortue,x,y,l,angle):\n'''Trace le segment de droite d'origne (x,y) et de longueur l dans la direction angle'''\n    origine(tortue,x,y)\n    tortue.setheading(angle)\n    tortue.forward(l)\n</pre> def ligne(tortue,x,y,l,angle):     '''Trace le segment de droite d'origne (x,y) et de longueur l dans la direction angle'''     origine(tortue,x,y)     tortue.setheading(angle)     tortue.forward(l) In\u00a0[\u00a0]: Copied! <pre>def rectangle(tortue,x,y,lx,ly):\n    origine(tortue,x,y)\n    tortue.begin_fill()\n    for _ in range(2):\n        tortue.forward(lx)\n        tortue.left(90)\n        tortue.forward(ly)\n        tortue.left(90)\n    tortue.end_fill()\n</pre> def rectangle(tortue,x,y,lx,ly):     origine(tortue,x,y)     tortue.begin_fill()     for _ in range(2):         tortue.forward(lx)         tortue.left(90)         tortue.forward(ly)         tortue.left(90)     tortue.end_fill() In\u00a0[\u00a0]: Copied! <pre>def cercle(tortue,x,y,r,angle=360):\n    origine(tortue,x+r,y)\n    tortue.setheading(90)\n    tortue.pendown()\n    tortue.begin_fill()\n    tortue.circle(r)\n    tortue.end_fill()\n</pre> def cercle(tortue,x,y,r,angle=360):     origine(tortue,x+r,y)     tortue.setheading(90)     tortue.pendown()     tortue.begin_fill()     tortue.circle(r)     tortue.end_fill() In\u00a0[\u00a0]: Copied! <pre>def set_crayon(tortue,epaisseur=1,couleur=\"black\",remplissage=\"white\",visible=False):\n    tortue.pensize(epaisseur)\n    tortue.color(couleur)\n    tortue.fillcolor(remplissage)\n    if visible:\n        tortue.showturtle()\n    else:\n        tortue.hideturtle()\n</pre> def set_crayon(tortue,epaisseur=1,couleur=\"black\",remplissage=\"white\",visible=False):     tortue.pensize(epaisseur)     tortue.color(couleur)     tortue.fillcolor(remplissage)     if visible:         tortue.showturtle()     else:         tortue.hideturtle() In\u00a0[\u00a0]: Copied! <pre>def dessine_carte(index,liste,couleur=None,visible=True,posx=0,posy=0):\n    if couleur==None:\n        couleur = tortue_carte[index].pencolor()\n    tortue_carte[index].reset()\n    if visible:\n        set_crayon(tortue_carte[index],epaisseur=5,couleur=couleur,remplissage=\"white\")\n        rectangle(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+posx,LIGNE_CARTE+posy,LARGEUR_CARTE,HAUTEUR_CARTE)\n        ecrit(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2+posx,LIGNE_CARTE+HAUTEUR_CARTE//2+posy,liste[index],fonte=(\"Arial\",24,\"bold\"))\n</pre> def dessine_carte(index,liste,couleur=None,visible=True,posx=0,posy=0):     if couleur==None:         couleur = tortue_carte[index].pencolor()     tortue_carte[index].reset()     if visible:         set_crayon(tortue_carte[index],epaisseur=5,couleur=couleur,remplissage=\"white\")         rectangle(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+posx,LIGNE_CARTE+posy,LARGEUR_CARTE,HAUTEUR_CARTE)         ecrit(tortue_carte[index],MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2+posx,LIGNE_CARTE+HAUTEUR_CARTE//2+posy,liste[index],fonte=(\"Arial\",24,\"bold\")) In\u00a0[\u00a0]: Copied! <pre>def dessine_liste(liste):\n    set_crayon(crayon,epaisseur=10,couleur=\"darkblue\",remplissage=\"lightgray\")\n    rectangle(crayon,0,0,LARGEUR_ECRAN-10,HAUTEUR_ECRAN-10)\n    couleur = COULEUR_BASE\n    for ind in range(len(liste)):\n        dessine_carte(ind,liste,couleur)\n    pointille(0)\n</pre> def dessine_liste(liste):     set_crayon(crayon,epaisseur=10,couleur=\"darkblue\",remplissage=\"lightgray\")     rectangle(crayon,0,0,LARGEUR_ECRAN-10,HAUTEUR_ECRAN-10)     couleur = COULEUR_BASE     for ind in range(len(liste)):         dessine_carte(ind,liste,couleur)     pointille(0) In\u00a0[\u00a0]: Copied! <pre>def pointille(index):\n    tortue_ligne.reset()\n    set_crayon(tortue_ligne,epaisseur=4,couleur=\"brown\")\n    start = MARGE*2\n    inc = 10\n    while start+inc&lt;HAUTEUR_ECRAN-MARGE*2:\n        ligne(tortue_ligne,MARGE+(LARGEUR_CARTE+ECART)*index-ECART//2,start,inc//4,90)\n        start=start+inc\n</pre> def pointille(index):     tortue_ligne.reset()     set_crayon(tortue_ligne,epaisseur=4,couleur=\"brown\")     start = MARGE*2     inc = 10     while start+inc In\u00a0[\u00a0]: Copied! <pre>def dessine_spot(index,visible=True):\n    tortue_spot.reset()\n    if visible:\n        set_crayon(tortue_spot,couleur=COULEUR_SPOT,remplissage=COULEUR_SPOT)\n        tortue_spot.shapesize(2)\n        origine(tortue_spot,MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2,LIGNE_SPOT)\n        tortue_spot.setheading(90)\n        tortue_spot.stamp()\n</pre> def dessine_spot(index,visible=True):     tortue_spot.reset()     if visible:         set_crayon(tortue_spot,couleur=COULEUR_SPOT,remplissage=COULEUR_SPOT)         tortue_spot.shapesize(2)         origine(tortue_spot,MARGE+(LARGEUR_CARTE+ECART)*index+LARGEUR_CARTE//2,LIGNE_SPOT)         tortue_spot.setheading(90)         tortue_spot.stamp() In\u00a0[\u00a0]: Copied! <pre>def deplace_vertical(liste,i,vy,env = False):\n    signe = -int(abs(vy)/vy)\n    if env:\n        for y in range(vy*signe,0):\n            dessine_carte(i,liste,posy=y*signe)\n            time.sleep(MOVE)\n    else:\n        for y in range(0,-vy*signe):\n            dessine_carte(i,liste,posy=-y*signe)\n            time.sleep(MOVE)\n</pre> def deplace_vertical(liste,i,vy,env = False):     signe = -int(abs(vy)/vy)     if env:         for y in range(vy*signe,0):             dessine_carte(i,liste,posy=y*signe)             time.sleep(MOVE)     else:         for y in range(0,-vy*signe):             dessine_carte(i,liste,posy=-y*signe)             time.sleep(MOVE) In\u00a0[\u00a0]: Copied! <pre>def deplace_horizontal(liste,i,j):\n    signe = int(abs(i-j))//(i-j)\n    for x in range(0,signe*(i-j)*(LARGEUR_CARTE+ECART)):\n        dessine_carte(i,liste,posy=(-HAUTEUR_CARTE-ECART)*signe,posx=-x*signe)\n        time.sleep(MOVE)\n</pre> def deplace_horizontal(liste,i,j):     signe = int(abs(i-j))//(i-j)     for x in range(0,signe*(i-j)*(LARGEUR_CARTE+ECART)):         dessine_carte(i,liste,posy=(-HAUTEUR_CARTE-ECART)*signe,posx=-x*signe)         time.sleep(MOVE) In\u00a0[\u00a0]: Copied! <pre>def show_echange(liste,i,j):\n    if i!=j:\n        deplace_vertical(liste,i,HAUTEUR_CARTE+ECART)\n        deplace_vertical(liste,j,-HAUTEUR_CARTE-ECART)\n        deplace_horizontal(liste,i,j)\n        deplace_horizontal(liste,j,i)\n        liste[i],liste[j] = liste[j],liste[i]\n        tortue_carte[i],tortue_carte[j] = tortue_carte[j],tortue_carte[i]\n        deplace_vertical(liste,i,-HAUTEUR_CARTE-ECART,env=True)\n        deplace_vertical(liste,j,HAUTEUR_CARTE+ECART,env=True)\n</pre> def show_echange(liste,i,j):     if i!=j:         deplace_vertical(liste,i,HAUTEUR_CARTE+ECART)         deplace_vertical(liste,j,-HAUTEUR_CARTE-ECART)         deplace_horizontal(liste,i,j)         deplace_horizontal(liste,j,i)         liste[i],liste[j] = liste[j],liste[i]         tortue_carte[i],tortue_carte[j] = tortue_carte[j],tortue_carte[i]         deplace_vertical(liste,i,-HAUTEUR_CARTE-ECART,env=True)         deplace_vertical(liste,j,HAUTEUR_CARTE+ECART,env=True) In\u00a0[\u00a0]: Copied! <pre>def pause_tri(x,y):\n    global pause\n    pause = not pause\n    papier.update()\n    while pause:\n        set_crayon(tortue_pause)\n        origine(tortue_pause,LARGEUR_ECRAN//2,HAUTEUR_ECRAN-MARGE*2)\n        tortue_pause.color(\"red\")\n        tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))\n        time.sleep(WAIT_BLINK)\n        tortue_pause.color(\"black\")\n        tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))\n        time.sleep(WAIT_BLINK)\n</pre> def pause_tri(x,y):     global pause     pause = not pause     papier.update()     while pause:         set_crayon(tortue_pause)         origine(tortue_pause,LARGEUR_ECRAN//2,HAUTEUR_ECRAN-MARGE*2)         tortue_pause.color(\"red\")         tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))         time.sleep(WAIT_BLINK)         tortue_pause.color(\"black\")         tortue_pause.write(chr(0x23F8),align=\"center\",font=(\"Arial\",42,\"bold\"))         time.sleep(WAIT_BLINK) In\u00a0[\u00a0]: Copied! <pre>pause = False\npapier.onscreenclick(pause_tri)\n</pre> pause = False papier.onscreenclick(pause_tri) In\u00a0[\u00a0]: Copied! <pre>parser = argparse.ArgumentParser(description=\"Visualisation du fonctionnement de l'algorithme du tri par insertion\")\nparser.add_argument('-l', type=str,help=\"Lettres \u00e0 trier dans l'ordre alphab\u00e9tique\")\nargs = vars(parser.parse_args())\nliste = list(args['l'])\nnb=len(liste)\ndessine_liste(liste)\npapier.update()\ntime.sleep(3)\nfor index in range(nb-1):\n    dessine_spot(index)\n    cmin = index\n    dessine_carte(index,liste,\"orange\")\n    for j in range(index+1,nb):\n        tortue_pause.reset()\n        dessine_carte(j,liste,\"lime\")\n        time.sleep(PARCOURS)\n        if liste[j]&lt;liste[cmin]:\n            dessine_carte(cmin,liste,COULEUR_BASE)\n            cmin = j\n            dessine_carte(cmin,liste,\"orange\")\n        else:\n            dessine_carte(j,liste,COULEUR_BASE)\n    for _ in range(3):\n        dessine_carte(cmin,liste,\"red\")\n        dessine_spot(index,visible=False)\n        time.sleep(WAIT_BLINK)\n        dessine_carte(cmin,liste,\"orange\")        \n        dessine_spot(index,visible=True)\n        time.sleep(WAIT_BLINK)\n    dessine_carte(cmin,liste,\"red\")\n    show_echange(liste,index,cmin)\n    dessine_carte(index,liste,\"green\")\n    pointille(index+1)\ndessine_carte(nb-1,liste,\"green\")\ndessine_spot(nb-1)\npointille(nb)\npapier.update()\n</pre> parser = argparse.ArgumentParser(description=\"Visualisation du fonctionnement de l'algorithme du tri par insertion\") parser.add_argument('-l', type=str,help=\"Lettres \u00e0 trier dans l'ordre alphab\u00e9tique\") args = vars(parser.parse_args()) liste = list(args['l']) nb=len(liste) dessine_liste(liste) papier.update() time.sleep(3) for index in range(nb-1):     dessine_spot(index)     cmin = index     dessine_carte(index,liste,\"orange\")     for j in range(index+1,nb):         tortue_pause.reset()         dessine_carte(j,liste,\"lime\")         time.sleep(PARCOURS)         if liste[j] In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>papier.exitonclick()\n</pre> papier.exitonclick()"},{"location":"notebook/kppv_Exo_BAC_ecrit/","title":"kppv Exo BAC ecrit","text":"Th\u00e8me 5 : Algorithmique                           17              Algorihtme des k-plus proches voisins : Application : classification des Iris. <p>On souhaite rechercher dans un tableau les k plus proches voisins d'un objet donn\u00e9.</p> <p>On dispose pour cela d'un tableau t non vide contenant des objets d'un m\u00eame type et d'une fonction <code>distance</code> qui renvoie la distance entre deux objets quelconques de ce type. Etant donn\u00e9 in objet <code>cible</code> du m\u00eame type que ceux du tableau t, on cherche \u00e0  d\u00e9terminer les indices des k \u00e9l\u00e9ments du tableau t qui sont les plus proches de cet objet (c'est-\u00e0-dire ceux dont la distance \u00e0 l'objet <code>cible</code> est la plus petite).</p> <p>Dans la suite, on suppose que $k \\geq 1$.</p> In\u00a0[1]: Copied! <pre>help(list.insert)\n</pre> help(list.insert) <pre>Help on method_descriptor:\n\ninsert(self, index, object, /)\n    Insert object before index.\n\n</pre>"},{"location":"notebook/kppv_Exo_BAC_ecrit/#question-1","title":"Question 1 :\u00b6","text":"<p>On suppose dans cette question que k=1. La fonction <code>plus_proche_voisin(t,cible)</code> ci-dessous prend en argument le tableau <code>t</code> et l'objet <code>cible</code>. Ecrire sur votre copie uniquement le bloc d'instructions manquant pour que la fonction renvoie l'indice d'un plus proche voisin de <code>cible</code>.</p> <pre>def plus_proche_voisins(t,cible):\n    dmin=distance(t[0],cible)\n    idx_ppv=0\n    n=len(t)\n    for idx in range(1,n):\n        ...\n        ...\n        ...\n    return idx_ppv\n</pre>"},{"location":"notebook/kppv_Exo_BAC_ecrit/#question-2","title":"Question 2 :\u00b6","text":"<p>On consid\u00e8re le co\u00fbt en temps du bloc manquant est constant. Quelle est la complexit\u00e9 de la fonction <code>plus_proche_voisin</code> quand k = 1 ?</p>"},{"location":"notebook/kppv_Exo_BAC_ecrit/#question-3","title":"Question 3 :\u00b6","text":"<p>Une approche na\u00efve consiste \u00e0 parcourir le tableau t pour trouver l'indice de l'\u00e9l\u00e8ment le plus proche de <code>cible</code>, puis \u00e0 recommencer pour trouver l'indice du deuxi\u00e8me \u00e9l\u00e8ment le plus proche de <code>cible</code>, et ainsi de suite. Cela implique de parcourir k fois tout le tableau. Afin de r\u00e9duire le nombre d'appels \u00e0 la fonction <code>distance</code>, la strat\u00e9gie suivante permet de ne parcourir le tableau t qu'une seule fois. Lors de ce parcours, on stocke dans une liste <code>kppv</code>, initialement vide, les tupples <code>(idx,d)</code>  o\u00f9 <code>idx</code> est l'indice d'un k plus proche voisin de <code>cible</code> d\u00e9ja rencontr\u00e9 et <code>d</code> la distance correspondante, tri\u00e8s dans l'ordre d\u00e9croissant de leur distance \u00e0 <code>cible</code>. La fonction <code>recherche_kppv(t,k,cible)</code> ci-apr\u00e9s renvoie ainsi la liste des tupples <code>(idx,d)</code> o\u00f9 <code>idx</code> est l'indice d'un k plus proche voisin de <code>cible</code> dans le tableau <code>t</code> et <code>d</code> la distance correspondante.</p> <p>On admet que la fonction <code>insertion(kppv,idx,d)</code> ins\u00e9re le tupple <code>(idx,d)</code> dans la liste <code>kppv</code> de sorte que celle-ci demeure tri\u00e9e dans l'ordre d\u00e9croissant des distances.</p> <pre>def recherche_kppv(t,k,cible):\n    kppv=[]\n    n=len(t)\n    for idx in range(n):\n        obj=t[idx]\n        if len(kppv) &lt; k:\n            insertion(kppv,idx,distance(obj,cible))\n        else:\n            i0,d0=kppv[0]\n            if distance(obj,cible)&lt; d0:\n                kppv.pop(0)  #supprime le 1er \u00e9l\u00e8ment de kppv\n                insertion(kppv,idx,distance(obj,cicle))\n    return kppv\n</pre> <p>a On remarque qu'il y a plusisuers appels identiques \u00e0 la fonction <code>distance(obj,cible)</code>. Comment ne faire qu'un seul appel \u00e0 cette fonction ? b Expliquer l'int\u00e9r\u00eat de maintenir la liste <code>kppv</code> tri\u00e9e. c Ecrire une fonction <code>insertion(kppv,idx,d)</code> qui ins\u00e9re le tupple <code>(idx,d)</code> dans la liste <code>kppv</code> pr\u00e9alablement tri\u00e8e en pr\u00e9servant l'ordre d\u00e9croissant selon l'\u00e9l\u00e8ment <code>d</code>.</p> <p>On pourra \u00e9ventuellement utiliser la m\u00e9thode <code>insert</code> dont la documentation, fournie par la commande <code>help(list.insert)</code>, est la suivante :</p> <pre>insert(self, index, object, /)\n    Ins\u00e8re l'object avant la position index dans l'objet appelant r\u00e9f\u00e9renc\u00e9 par self.\n</pre> <p>Exemple d'utilisation :</p> <pre>&gt;&gt;&gt;liste=[4,2,8,9]\n&gt;&gt;&gt;liste.insert(1,3)\n&gt;&gt;&gt;liste\n[4,3,2,8,9]\n</pre>"},{"location":"notebook/kppv_Revision_Iris/","title":"kppv Revision Iris","text":"In\u00a0[2]: Copied! <pre># Tous les imports du notebook, cellule \u00e0 ex\u00e9cuter d\u00e8s le d\u00e9but\nfrom math import sqrt\nfrom random import shuffle\nimport matplotlib.pyplot as plt\nimport csv\n</pre> # Tous les imports du notebook, cellule \u00e0 ex\u00e9cuter d\u00e8s le d\u00e9but from math import sqrt from random import shuffle import matplotlib.pyplot as plt import csv             Th\u00e8me 5 : Algorithmique                           16              Algorihtme des k-plus proches voisins : Application : classification des Iris. <p>En 1936, Edgar Anderson a collect\u00e9 des donn\u00e9es sur 3 esp\u00e8ces d'iris : \"iris setosa\", \"iris virginica\" et \"iris versicolor\" our chaque iris \u00e9tudi\u00e9, Anderson a mesur\u00e9 (en cm) :</p> <ul> <li>la largeur des s\u00e9pales</li> <li>la longueur des s\u00e9pales</li> <li>la largeur des p\u00e9tales</li> <li>la longueur des p\u00e9tales</li> </ul> Iris setosa Iris virginica Iris versicolor Diverses mesures <p>Les donn\u00e9es sont ici stock\u00e9es dans un fichier au format <code>.csv</code> , dont voici les deux premi\u00e8res lignes :</p> <pre><code>5.1,3.5,1.4,0.2,Iris-setosa\n4.9,3.0,1.4,0.2,Iris-setosa</code></pre> <p>Chaque ligne de donn\u00e9es est compos\u00e9e des descripteurs et d'une \u00e9tiquette (l'esp\u00e8ce de l'iris) , s\u00e9par\u00e9s par une virgule.</p> <p>Pour chacun de ces individus on dispose des champs :</p> <pre><code>- longueur_sepale : longueur des s\u00e9pales  \n\n- largeur_sepale  : largeur des s\u00e9pales  \n\n- longueur_petale : longueur des p\u00e9tales  \n\n- largeur_petale  : largeur des p\u00e9tales  \n\n- espece          : 'Iris-setosa', 'Irid_virginica' ou 'Iris-versicolor'\n</code></pre> In\u00a0[10]: Copied! <pre>def lirefichier(nomfichier):\n    fichierCSV = open(nomfichier,\"r\")\n    lignes = csv.reader(fichierCSV)\n    next(lignes)\n    data = list(lignes)\n    \n    for i in range(len(data)):\n        for j in range(len(data[i])-1):\n            data[i][j] = float(data[i][j])\n    \n    return data\n\nA=(2.5,0.75)\n\ndataset=lirefichier('iriscomplet.csv')\nprint(dataset[0])\n</pre> def lirefichier(nomfichier):     fichierCSV = open(nomfichier,\"r\")     lignes = csv.reader(fichierCSV)     next(lignes)     data = list(lignes)          for i in range(len(data)):         for j in range(len(data[i])-1):             data[i][j] = float(data[i][j])          return data  A=(2.5,0.75)  dataset=lirefichier('iriscomplet.csv') print(dataset[0]) <pre>[5.1, 3.5, 1.4, 0.2, 'Iris-setosa']\n</pre> In\u00a0[21]: Copied! <pre>def extraction_abs_et_ord(indice1,indice2):\n\"\"\"\n    Entr\u00e9e : deux entiers distinct entre 0 et 3\n    Sortie : deux listes de flottants\n    Extrait six listes de coordonn\u00e9es \u00e0 partir des donn\u00e9es de la liste dataset\n    \"\"\"\n    donnees_abscisses_setosa = [iris[indice1] for iris in dataset if iris[4] == 'Iris-setosa']\n    donnees_ordonnees_setosa = [iris[indice2] for iris in dataset if iris[4] == 'Iris-setosa']\n    donnees_abscisses_versicolor = [iris[indice1] for iris in dataset if iris[4] == 'Iris-versicolor']\n    donnees_ordonnees_versicolor = [iris[indice2] for iris in dataset if iris[4] == 'Iris-versicolor']\n    donnees_abscisses_virginica = [iris[indice1] for iris in dataset if iris[4] == 'Iris-virginica']\n    donnees_ordonnees_virginica = [iris[indice2] for iris in dataset if iris[4] == 'Iris-virginica']\n    return donnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica\n\n\ndonnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica = extraction_abs_et_ord(0,1)\n\n\n# Instanciation du graphique\nfig, axs = plt.subplots(2, 3, figsize=(20, 10))\n# D\u00e9finition des l\u00e9gendes\npoint_labels = [\"Iris Setosa\", \"Iris versicolor\", \"Iris virginica\"]\naxes_labels = [\"longueur des s\u00e9pales\" , \"largeur des s\u00e9pales\" , \"longueur des p\u00e9tales\"  , \"largeur des p\u00e9tales\"  ]\n# Dictionnaire associant la position du graphique avec les carat\u00e8res \u00e9tudi\u00e9s\ncorrespondance = {(0,0):(0,1) , (0,1):(0,2) , (0,2):(0,3) , (1,0):(1,2) , (1,1):(1,3) , (1,2):(2,3)}\n\n# Boucle permetant d'afficher les donn\u00e9es en choisissant les axes\ncompteur = 0\nfor i in range(0,2):\n    for j in range(0,3):\n        compteur += 1\n        # extraction des donn\u00e9es\n        indice1,indice2=correspondance[(i,j)]\n        donnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica = extraction_abs_et_ord(indice1,indice2)\n        plt1 = axs[i,j].plot(donnees_abscisses_setosa,donnees_ordonnees_setosa, 'ro',label='Iris setosa')\n        plt2 = axs[i,j].plot(donnees_abscisses_versicolor,donnees_ordonnees_versicolor , 'bv',label='Iris versicolor')\n        plt3 = axs[i,j].plot(donnees_abscisses_virginica,donnees_ordonnees_virginica , 'gs',label='Iris virginica')  \n        axs[i,j].set_xlabel(axes_labels[indice1])\n        axs[i,j].set_ylabel(axes_labels[indice2])\n        axs[i,j].set_title(\"Repr\u00e9sentation des donn\u00e9es #\"+str(compteur))\n\nfig.legend([plt1,plt2,plt3],     # The line objects\n           labels=point_labels,   # The labels for each line\n           loc=\"center right\",   # Position of legend\n           borderaxespad=0.1,    # Small spacing around legend box\n           title=\"Esp\u00e8ces\"  # Title for the legend\n           )    \n\nplt.show()\n</pre> def extraction_abs_et_ord(indice1,indice2):     \"\"\"     Entr\u00e9e : deux entiers distinct entre 0 et 3     Sortie : deux listes de flottants     Extrait six listes de coordonn\u00e9es \u00e0 partir des donn\u00e9es de la liste dataset     \"\"\"     donnees_abscisses_setosa = [iris[indice1] for iris in dataset if iris[4] == 'Iris-setosa']     donnees_ordonnees_setosa = [iris[indice2] for iris in dataset if iris[4] == 'Iris-setosa']     donnees_abscisses_versicolor = [iris[indice1] for iris in dataset if iris[4] == 'Iris-versicolor']     donnees_ordonnees_versicolor = [iris[indice2] for iris in dataset if iris[4] == 'Iris-versicolor']     donnees_abscisses_virginica = [iris[indice1] for iris in dataset if iris[4] == 'Iris-virginica']     donnees_ordonnees_virginica = [iris[indice2] for iris in dataset if iris[4] == 'Iris-virginica']     return donnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica   donnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica = extraction_abs_et_ord(0,1)   # Instanciation du graphique fig, axs = plt.subplots(2, 3, figsize=(20, 10)) # D\u00e9finition des l\u00e9gendes point_labels = [\"Iris Setosa\", \"Iris versicolor\", \"Iris virginica\"] axes_labels = [\"longueur des s\u00e9pales\" , \"largeur des s\u00e9pales\" , \"longueur des p\u00e9tales\"  , \"largeur des p\u00e9tales\"  ] # Dictionnaire associant la position du graphique avec les carat\u00e8res \u00e9tudi\u00e9s correspondance = {(0,0):(0,1) , (0,1):(0,2) , (0,2):(0,3) , (1,0):(1,2) , (1,1):(1,3) , (1,2):(2,3)}  # Boucle permetant d'afficher les donn\u00e9es en choisissant les axes compteur = 0 for i in range(0,2):     for j in range(0,3):         compteur += 1         # extraction des donn\u00e9es         indice1,indice2=correspondance[(i,j)]         donnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica = extraction_abs_et_ord(indice1,indice2)         plt1 = axs[i,j].plot(donnees_abscisses_setosa,donnees_ordonnees_setosa, 'ro',label='Iris setosa')         plt2 = axs[i,j].plot(donnees_abscisses_versicolor,donnees_ordonnees_versicolor , 'bv',label='Iris versicolor')         plt3 = axs[i,j].plot(donnees_abscisses_virginica,donnees_ordonnees_virginica , 'gs',label='Iris virginica')           axs[i,j].set_xlabel(axes_labels[indice1])         axs[i,j].set_ylabel(axes_labels[indice2])         axs[i,j].set_title(\"Repr\u00e9sentation des donn\u00e9es #\"+str(compteur))  fig.legend([plt1,plt2,plt3],     # The line objects            labels=point_labels,   # The labels for each line            loc=\"center right\",   # Position of legend            borderaxespad=0.1,    # Small spacing around legend box            title=\"Esp\u00e8ces\"  # Title for the legend            )      plt.show() In\u00a0[22]: Copied! <pre># Instanciation du graphique\nfig, axs = plt.subplots(2, 3, figsize=(20, 10))\n# D\u00e9finition des l\u00e9gendes\npoint_labels = [\"Iris Setosa\", \"Iris versicolor\", \"Iris virginica\", \"Iris Inconnu 1\",\"Iris Inconnu 2\"]\naxes_labels = [\"longueur des s\u00e9pales\" , \"largeur des s\u00e9pales\" , \"longueur des p\u00e9tales\"  , \"largeur des p\u00e9tales\"  ]\n# Dictionnaire associant la position du graphique avec les carat\u00e8res \u00e9tudi\u00e9s\ncorrespondance = {(0,0):(0,1) , (0,1):(0,2) , (0,2):(0,3) , (1,0):(1,2) , (1,1):(1,3) , (1,2):(2,3)}\niris1= [6,3.7,1.5,0.7,'inconnu 1']\niris2= [6.5, 3.1, 5, 1.2, 'inconnu 2']\n\n# Boucle permetant d'afficher les donn\u00e9es en choisissant les axes\ncompteur = 0\nfor i in range(0,2):\n    for j in range(0,3):\n        compteur += 1\n        # extraction des donn\u00e9es\n        indice1,indice2=correspondance[(i,j)]\n        donnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica = extraction_abs_et_ord(indice1,indice2)\n        plt1 = axs[i,j].plot(donnees_abscisses_setosa,donnees_ordonnees_setosa, 'ro',label='Iris setosa')\n        plt2 = axs[i,j].plot(donnees_abscisses_versicolor,donnees_ordonnees_versicolor , 'bo',label='Iris versicolor')\n        plt3 = axs[i,j].plot(donnees_abscisses_virginica,donnees_ordonnees_virginica , 'go',label='Iris virginica')  \n        plt4 = axs[i,j].plot(iris1[indice1],iris1[indice2] , marker = '*', color='black',label='Iris inconnu 1') \n        plt5 = axs[i,j].plot(iris2[indice1],iris2[indice2] , marker = '*', color='m',label='Iris inconnu 2')  \n        axs[i,j].set_xlabel(axes_labels[indice1])\n        axs[i,j].set_ylabel(axes_labels[indice2])\n        axs[i,j].set_title(\"Repr\u00e9sentation des donn\u00e9es #\"+str(compteur))\n\nfig.legend([plt1,plt2,plt3,plt4,plt5],     # The line objects\n           labels=point_labels,   # The labels for each line\n           loc=\"center right\",   # Position of legend\n           borderaxespad=0.1,    # Small spacing around legend box\n           title=\"Esp\u00e8ces\"  # Title for the legend\n           )    \n\nplt.show()\n</pre> # Instanciation du graphique fig, axs = plt.subplots(2, 3, figsize=(20, 10)) # D\u00e9finition des l\u00e9gendes point_labels = [\"Iris Setosa\", \"Iris versicolor\", \"Iris virginica\", \"Iris Inconnu 1\",\"Iris Inconnu 2\"] axes_labels = [\"longueur des s\u00e9pales\" , \"largeur des s\u00e9pales\" , \"longueur des p\u00e9tales\"  , \"largeur des p\u00e9tales\"  ] # Dictionnaire associant la position du graphique avec les carat\u00e8res \u00e9tudi\u00e9s correspondance = {(0,0):(0,1) , (0,1):(0,2) , (0,2):(0,3) , (1,0):(1,2) , (1,1):(1,3) , (1,2):(2,3)} iris1= [6,3.7,1.5,0.7,'inconnu 1'] iris2= [6.5, 3.1, 5, 1.2, 'inconnu 2']  # Boucle permetant d'afficher les donn\u00e9es en choisissant les axes compteur = 0 for i in range(0,2):     for j in range(0,3):         compteur += 1         # extraction des donn\u00e9es         indice1,indice2=correspondance[(i,j)]         donnees_abscisses_setosa,donnees_ordonnees_setosa,donnees_abscisses_versicolor,donnees_ordonnees_versicolor, donnees_abscisses_virginica,donnees_ordonnees_virginica = extraction_abs_et_ord(indice1,indice2)         plt1 = axs[i,j].plot(donnees_abscisses_setosa,donnees_ordonnees_setosa, 'ro',label='Iris setosa')         plt2 = axs[i,j].plot(donnees_abscisses_versicolor,donnees_ordonnees_versicolor , 'bo',label='Iris versicolor')         plt3 = axs[i,j].plot(donnees_abscisses_virginica,donnees_ordonnees_virginica , 'go',label='Iris virginica')           plt4 = axs[i,j].plot(iris1[indice1],iris1[indice2] , marker = '*', color='black',label='Iris inconnu 1')          plt5 = axs[i,j].plot(iris2[indice1],iris2[indice2] , marker = '*', color='m',label='Iris inconnu 2')           axs[i,j].set_xlabel(axes_labels[indice1])         axs[i,j].set_ylabel(axes_labels[indice2])         axs[i,j].set_title(\"Repr\u00e9sentation des donn\u00e9es #\"+str(compteur))  fig.legend([plt1,plt2,plt3,plt4,plt5],     # The line objects            labels=point_labels,   # The labels for each line            loc=\"center right\",   # Position of legend            borderaxespad=0.1,    # Small spacing around legend box            title=\"Esp\u00e8ces\"  # Title for the legend            )      plt.show() <p>Voici une r\u00e9pr\u00e9sentation en 2D de ce jeu de donn\u00e9es :</p>  * En abscisse : la longueur des p\u00e9tales * En ordonn\u00e9e : la largeur des p\u00e9tales     On trouve un nouvel iris dont dont la longueur des p\u00e9tales est 2 cm et la largeur 0,5 cm.  <p>En pla\u00e7ant le point de coordonn\u00e9es $(2; 0,5)$, on constate qu'il y a de fortes chances que cet iris soit \"iris-setosa\"</p>  On trouve un nouvel iris dont dont la longueur des p\u00e9tales est 2,5 cm et la largeur 0,75 cm.  <p>En pla\u00e7ant le point de coordonn\u00e9es $(2,5; 0,75)$, on constate qu'il est plus difficile de prendre une d\u00e9cision.</p> <p>C'est l'algorithme des k plus proches voisins qui va prendre la d\u00e9cision.</p>  La valeur de $k$ est le nombre de plus proches voisins(en terme de distance) avec lesquels le nouvel iris sera compar\u00e9.   <p>Dans l'exemple ci-contre, $k=3$, les trois plus proches voisins sont indiqu\u00e9s par des fl\u00e8ches.</p> <p>Parmi ces trois voisins, deux sont \u00e9tiquett\u00e9s \"setosa\" et un seul est \u00e9tiquett\u00e9 \"versicolor\".</p> <p>L'algorithme des 3 plus proches voisins choisira d'\u00e9tiquetter ce nouvel iris comme \"setosa\".</p> In\u00a0[\u00a0]: Copied! <pre>def calcul_distance(irisA,irisB):\n\"\"\"\n    Entr\u00e9e : 2 iris avec 4 variables pr\u00e9dictrices\n    Sortie : la distance (euclidienne) entre ces deux iris arrondie \u00e0 3 d\u00e9cimales\n    \"\"\"\n    # Votre code ici\n    return # Votre code ici\n</pre> def calcul_distance(irisA,irisB):     \"\"\"     Entr\u00e9e : 2 iris avec 4 variables pr\u00e9dictrices     Sortie : la distance (euclidienne) entre ces deux iris arrondie \u00e0 3 d\u00e9cimales     \"\"\"     # Votre code ici     return # Votre code ici In\u00a0[\u00a0]: Copied! <pre># Tests pour v\u00e9rifier votre fonction calcul_distance\nirisA , irisB =dataset[0] , dataset[1]\nassert calcul_distance(irisA , irisB ) == 0.539\nirisA , irisB =dataset[2] , dataset[3]\nassert calcul_distance(irisA , irisB ) == 0.245\n</pre> # Tests pour v\u00e9rifier votre fonction calcul_distance irisA , irisB =dataset[0] , dataset[1] assert calcul_distance(irisA , irisB ) == 0.539 irisA , irisB =dataset[2] , dataset[3] assert calcul_distance(irisA , irisB ) == 0.245 In\u00a0[\u00a0]: Copied! <pre>def distances_dataset(nouvel_iris,datas):\n    # Votre code ici\n    return # Votre code ici\n</pre> def distances_dataset(nouvel_iris,datas):     # Votre code ici     return # Votre code ici                   In\u00a0[\u00a0]: Copied! <pre>iris1= [6,3.7,1.5,0.7,'inconnu 1']\niris2= [6.5, 3.1, 5, 1.2, 'inconnu 2']\ndistances_iris1 = distances_dataset(iris1,dataset)\ndistances_iris2 = distances_dataset(iris2,dataset)\n</pre> iris1= [6,3.7,1.5,0.7,'inconnu 1'] iris2= [6.5, 3.1, 5, 1.2, 'inconnu 2'] distances_iris1 = distances_dataset(iris1,dataset) distances_iris2 = distances_dataset(iris2,dataset) <p>La suite va consister \u00e0 trier la liste obtenue \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente par ordre croissant de distance par rapport \u00e0 la nouvelle fleur. Ensuite il va falloir extraire les k plus proches voisins.</p> In\u00a0[\u00a0]: Copied! <pre>def extraire_proches_voisins(k,liste_distance):\n    # Votre code ici\n    return # Votre code ici\n</pre> def extraire_proches_voisins(k,liste_distance):     # Votre code ici     return # Votre code ici In\u00a0[\u00a0]: Copied! <pre># Test de la fonction extraire_proches_voisins\n\nassert extraire_proches_voisins(3,distances_iris2) == ['Iris-versicolor', 'Iris-versicolor', 'Iris-virginica']\nassert extraire_proches_voisins(5,distances_iris1) == ['Iris-setosa', 'Iris-setosa', 'Iris-setosa', 'Iris-setosa', 'Iris-setosa']\n</pre> # Test de la fonction extraire_proches_voisins  assert extraire_proches_voisins(3,distances_iris2) == ['Iris-versicolor', 'Iris-versicolor', 'Iris-virginica'] assert extraire_proches_voisins(5,distances_iris1) == ['Iris-setosa', 'Iris-setosa', 'Iris-setosa', 'Iris-setosa', 'Iris-setosa'] In\u00a0[\u00a0]: Copied! <pre>def element_majoritaire(etiquettes):\n    # elements est le dictionnaire des etiquettes sans doublons. La valeur associ\u00e9e \u00e0 chaque cl\u00e9 est par d\u00e9faut 0.\n    elements = {element:0 for element in set(etiquettes)}\n    # Compl\u00e9ter la ligne suivant pour que la valeur de chaque cl\u00e9 soit le nombre de fois o\u00f9 la cl\u00e9 apparait dans la liste etiquette\n    for cle in elements:\n        elements[cle] = # Votre code ici\n    # Ensuite, \u00e0 partir du dictionnaire pr\u00e9c\u00e9dent, trouver l'\u00e9l\u00e9ment majoritaire\n    max = 0\n    element_majoritaire = ''\n    for cle,valeur in elements.items():\n        # Votre code ici\n    return element_majoritaire\n</pre> def element_majoritaire(etiquettes):     # elements est le dictionnaire des etiquettes sans doublons. La valeur associ\u00e9e \u00e0 chaque cl\u00e9 est par d\u00e9faut 0.     elements = {element:0 for element in set(etiquettes)}     # Compl\u00e9ter la ligne suivant pour que la valeur de chaque cl\u00e9 soit le nombre de fois o\u00f9 la cl\u00e9 apparait dans la liste etiquette     for cle in elements:         elements[cle] = # Votre code ici     # Ensuite, \u00e0 partir du dictionnaire pr\u00e9c\u00e9dent, trouver l'\u00e9l\u00e9ment majoritaire     max = 0     element_majoritaire = ''     for cle,valeur in elements.items():         # Votre code ici     return element_majoritaire  In\u00a0[\u00a0]: Copied! <pre>#Des tests .\nassert element_majoritaire(['alice','bob','alice','alice','bob','alice','alice','bob','charly']) == 'alice'\nassert element_majoritaire(['Iris-versicolor', 'Iris-versicolor', 'Iris-virginica']) == 'Iris-versicolor'\n</pre> #Des tests . assert element_majoritaire(['alice','bob','alice','alice','bob','alice','alice','bob','charly']) == 'alice' assert element_majoritaire(['Iris-versicolor', 'Iris-versicolor', 'Iris-virginica']) == 'Iris-versicolor' In\u00a0[\u00a0]: Copied! <pre>def k_plus_proches_voisins(k,nouvel_iris,datas):\n    # Votre code ici\n    return # Votre code ici\n</pre> def k_plus_proches_voisins(k,nouvel_iris,datas):     # Votre code ici     return # Votre code ici In\u00a0[\u00a0]: Copied! <pre>iris1= [6,3.7,1.5,0.7,'inconnu 1']\niris2= [6.5, 3.1, 5, 1.2, 'inconnu 2']\n\n# Votre code ici\n</pre> iris1= [6,3.7,1.5,0.7,'inconnu 1'] iris2= [6.5, 3.1, 5, 1.2, 'inconnu 2']  # Votre code ici In\u00a0[\u00a0]: Copied! <pre># Jeu Apprentissage / Test\n#M\u00e9lange des donn\u00e9es\ndef creation_jeux(dataset,pourcentage_test):\n    # Votre code ici\n    return # Votre code ici\n\n\njeu_apprentissage,jeu_test = creation_jeux(dataset,20)\n</pre> # Jeu Apprentissage / Test #M\u00e9lange des donn\u00e9es def creation_jeux(dataset,pourcentage_test):     # Votre code ici     return # Votre code ici   jeu_apprentissage,jeu_test = creation_jeux(dataset,20)      In\u00a0[\u00a0]: Copied! <pre>def eval_erreurs(jeu_apprentissage,jeu_test,k):\n    # Votre code ici\n    return # Votre code ici\n\n\n# Ci-dessous, 100 it\u00e9rations sont effectu\u00e9s pour calculer la moyenne du nombre d'erreurs pour chaque valeur de k\n# Ensuite un graphique permet de visualiser le pourcentage d'erreurs en fonction de la valeur de k.\n# Comme la g\u00e9n\u00e9ration de la liste `erreurs` est en partie al\u00e9atoire, vos graphiques seront diff\u00e9rents \u00e0 chaque \u00e9x\u00e9cution de la cellule.\n# Mais cela donne une id\u00e9e de l'influence du param\u00e8tre k.\n# Attention, l'\u00e9x\u00e9cution de cette cellule peut prendre du temps.\n\nerreurs = []\nfor k in range(1,12):\n    erreur = 0\n    for i in range(100):\n        erreur += eval_erreurs(jeu_apprentissage,jeu_test,k)\n    moyenne = erreur/100\n    erreurs.append(moyenne)\n\n# erreurs = [eval_erreurs(jeu_apprentissage,jeu_test,k) for k in range(1,12)]\n\nprint(erreurs)\n\nfig, ax = plt.subplots()  # Create a figure and an axes.\nax.plot(list(range(1,12)), erreurs, label='Erreurs')  # Plot some data on the axes.\nax.set_xlabel('k')  # Add an x-label to the axes.\nax.set_ylabel(\"Pourcentage d'erreurs\")  # Add a y-label to the axes.\nax.set_title(\"Graphique du % d'erreurs en fonction des valeurs de k\")  # Add a title to the axes.\nax.legend()  # Add a legend.\n</pre> def eval_erreurs(jeu_apprentissage,jeu_test,k):     # Votre code ici     return # Votre code ici   # Ci-dessous, 100 it\u00e9rations sont effectu\u00e9s pour calculer la moyenne du nombre d'erreurs pour chaque valeur de k # Ensuite un graphique permet de visualiser le pourcentage d'erreurs en fonction de la valeur de k. # Comme la g\u00e9n\u00e9ration de la liste `erreurs` est en partie al\u00e9atoire, vos graphiques seront diff\u00e9rents \u00e0 chaque \u00e9x\u00e9cution de la cellule. # Mais cela donne une id\u00e9e de l'influence du param\u00e8tre k. # Attention, l'\u00e9x\u00e9cution de cette cellule peut prendre du temps.  erreurs = [] for k in range(1,12):     erreur = 0     for i in range(100):         erreur += eval_erreurs(jeu_apprentissage,jeu_test,k)     moyenne = erreur/100     erreurs.append(moyenne)  # erreurs = [eval_erreurs(jeu_apprentissage,jeu_test,k) for k in range(1,12)]  print(erreurs)  fig, ax = plt.subplots()  # Create a figure and an axes. ax.plot(list(range(1,12)), erreurs, label='Erreurs')  # Plot some data on the axes. ax.set_xlabel('k')  # Add an x-label to the axes. ax.set_ylabel(\"Pourcentage d'erreurs\")  # Add a y-label to the axes. ax.set_title(\"Graphique du % d'erreurs en fonction des valeurs de k\")  # Add a title to the axes. ax.legend()  # Add a legend. In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebook/kppv_Revision_Iris/#durant-ce-tp-vous-allez-chercher-a-determiner-les-espece-diris-a-partir-des-mesures-des-petales-et-sepales","title":"Durant ce TP, vous allez chercher \u00e0 d\u00e9terminer les esp\u00e8ce d'iris \u00e0 partir des mesures des p\u00e9tales et s\u00e9pales.\u00b6","text":"<p>On va donc chercher, \u00e0 partir des quatre descripteurs longueur_sepale, largeur_sepale, longueur_petale et largeur_petale, \u00e0 effectuer une pr\u00e9diction de l'\u00e9tiquette espece.</p>"},{"location":"notebook/kppv_Revision_Iris/#chargement-des-donnees","title":"Chargement des donn\u00e9es\u00b6","text":""},{"location":"notebook/kppv_Revision_Iris/#exercice-1","title":"Exercice 1\u00b6","text":"<ol> <li>Quel est le type de donn\u00e9es de la variable <code>dataset</code></li> <li>De quels types sont les 5 \u00e9l\u00e9ments stock\u00e9s dans <code>dataset[0]</code> ?</li> </ol>"},{"location":"notebook/kppv_Revision_Iris/#reponses","title":"R\u00e9ponses :\u00b6","text":""},{"location":"notebook/kppv_Revision_Iris/#affichage-des-donnees","title":"Affichage des donn\u00e9es\u00b6","text":"<p>Dans notre exemple, nous avons 4 variables descriptives. Or il n'est pas possible de tracer un graphique avec 4 axes. Une solution est de repr\u00e9senter les donn\u00e9es en choisissant deux axes parmi les variables descritives, cela donne :</p> Abscisse Ordonn\u00e9e Graphique 1 largeur des s\u00e9pales longueur des s\u00e9pales Graphique 2 largeur des s\u00e9pales largeur des p\u00e9tales Graphique 3 largeur des s\u00e9pales longueur des p\u00e9tales Graphique 4 longueur des s\u00e9pales largeur des p\u00e9tales Graphique 5 longueur des s\u00e9pales longueur des p\u00e9tales Graphique 6 largeur des p\u00e9tales longueur des p\u00e9tales <p>Voici, ci-dessous, le r\u00e9sultat obtenu.</p> <p>Notes :</p> <ul> <li>le code ci-dessous n'est pas \u00e0 savoir reproduire, mais vous pouvez chercher \u00e0 le comprendre</li> <li>Une autre fa\u00e7on de faire est de choisir 3 axes et de tracer un graphique en 3 dimensions.</li> </ul>"},{"location":"notebook/kppv_Revision_Iris/#exercice-2","title":"Exercice 2\u00b6","text":"<ol> <li>Une des esp\u00e8ce vous parra\u00eet-elle plus facile \u00e0 distinguer des autres ? Si oui, laquelle et pourquoi ?</li> <li>La repr\u00e9sentation des donn\u00e9es #1 est-elle la plus adapt\u00e9e pour faire des pr\u00e9dictions ? Si non, lesquelles sont plus pertinentes ?</li> <li>Pensez-vous que l'algorithme des plus proches voisins va fonctionner ?</li> </ol>"},{"location":"notebook/kppv_Revision_Iris/#reponses","title":"R\u00e9ponses :\u00b6","text":""},{"location":"notebook/kppv_Revision_Iris/#fonctionnement-de-lalgorithme","title":"Fonctionnement de l'algorithme\u00b6","text":"<p>Flora se prom\u00e8ne dans la nature et trouve deux iris dont elle mesure les p\u00e9tales et s\u00e9pales (ceci est r\u00e9ellement arriv\u00e9 bien s\u00fbr !) Elle trouve les dimensions suivantes :</p> largeur des s\u00e9pales longueur des s\u00e9pales largeur des p\u00e9tales longueur des p\u00e9tales Iris 1 6 3.7 1.5 0.7 Iris 2 6.5 3.1 5 1.2 <p>Les 2 iris inconnus sont plac\u00e9s dans les repr\u00e9sentations graphiques ci-dessous.</p>"},{"location":"notebook/kppv_Revision_Iris/#exercice-3","title":"Exercice 3\u00b6","text":"<ol> <li>Selon vous, quelles sont les esp\u00e8ces de ces deux iris ? Justifiez votre choix.</li> <li>Expliquer pourquoi la classification de l'iris 2 est plus d\u00e9licate.</li> </ol>"},{"location":"notebook/kppv_Revision_Iris/#reponses","title":"R\u00e9ponses :\u00b6","text":""},{"location":"notebook/kppv_Revision_Iris/#fonctionnement-de-lalgorithme","title":"Fonctionnement de l'algorithme\u00b6","text":"<p>Pour avoir une r\u00e8gle plus pr\u00e9cise de d\u00e9cision, nous allons utliser l'algorithme des plus proches voisins.</p> <p>On rappelle le principe de l\u2019algorithme des k plus proches voisins :</p> <ol> <li>On calcule les distances entre la donn\u00e9e et chaque donn\u00e9e appartenant aux donn\u00e9es d\u2019apprentissage.</li> <li>On retient les k donn\u00e9es les plus proches de la nouvelle donn\u00e9e.</li> <li>On attribue \u00e0 la nouvelle donn\u00e9e l\u2019\u00e9tiquette la plus fr\u00e9quente parmi les k donn\u00e9es les plus proches.</li> </ol>"},{"location":"notebook/kppv_Revision_Iris/#rappel-avant-de-continuer","title":"Rappel avant de continuer :\u00b6","text":"<ul> <li>La distance dont il s'agit ici est la distance euclidienne dans un rep\u00e8re orthonorm\u00e9 entre deux points $A(x_{A};y_{A})$ et $B(x_{B};y_{B})$ :</li> </ul>  $AB=\\sqrt{(x_{B}-x_{A})\u00b2+(y_{B}-y_{A})\u00b2}$  <ul> <li>Cette formule ce g\u00e9n\u00e9ralise en dimension sup\u00e9rieure de la fa\u00e7on suivante :</li> </ul>  $AB=\\sqrt{(x_{B}-x_{A})\u00b2+(y_{B}-y_{A})\u00b2+(z_{B}-z_{A})\u00b2 + ...}$"},{"location":"notebook/kppv_Revision_Iris/#programmation-de-lalgorithme","title":"Programmation de l'algorithme\u00b6","text":""},{"location":"notebook/kppv_Revision_Iris/#calculer-la-distance-dun-point-a-chacun-des-points-du-dataset","title":"Calculer la distance d'un point \u00e0 chacun des points du dataset.\u00b6","text":""},{"location":"notebook/kppv_Revision_Iris/#exercice-4","title":"Exercice 4 :\u00b6","text":"<p>Compl\u00e9ter la fonction ci-dessous. Elle doit v\u00e9rifier les containtes suivantes :</p> <ul> <li>deux param\u00e8tres en entr\u00e9e : deux listes ayant comme param\u00e8tres longueur_sepale, largeur_sepale, longueur_petale, largeur_petale comme ceux pr\u00e9sents dans table_iris</li> <li>renvoie la distance arrondie \u00e0 trois d\u00e9cimales entre ces deux iris en prenant en compte les valeurs de ces quatre champs.</li> </ul> <p>Deux assertions qui doivent \u00eatre v\u00e9rifi\u00e9es par votre fonction sont donn\u00e9es ensuite.</p> <p>Rappels :</p> <ul> <li><p>On utilisera <code>sqrt</code> du module <code>math</code> pour calculer la racine carr\u00e9e et <code>**</code> pour mettre au carr\u00e9.</p> </li> <li><p>On utilisera <code>round(x, 3)</code> pour arrondir un nombre <code>x</code> en ne gardant que trois d\u00e9cimales.</p> </li> </ul>"},{"location":"notebook/kppv_Revision_Iris/#exercice-5","title":"Exercice 5 :\u00b6","text":"<p>Maintenant, pour une nouvelle fleur, il va falloir calculer les distances entre chaque iris du jeu de donn\u00e9e et la nouvelle fleur. Pour cela, nous allons \u00e9crire une fonction qui ayant :</p> <ul> <li>en entr\u00e9e :<ul> <li>une liste correspondant \u00e0 la nouvelle fleur</li> <li>le jeu de donn\u00e9es , dans notre exemple c'est <code>dataset</code></li> </ul> </li> <li>en sortie : une copie du jeu de donn\u00e9e avec un nouveau champ pour chaque iris correspondant \u00e0 la distance de cet iris avec la nouvelle fleur.</li> </ul> <p>Remarques :</p> <ul> <li>Pour copier une liste nomm\u00e9e <code>liste_originale</code> dans une liste nomm\u00e9e <code>liste_copiee</code>, on peut utliser la commande <code>liste_copiee = liste_originale[:]</code>. Ce proc\u00e9d\u00e9 permet de garder la liste orginale intacte et de proc\u00e9der \u00e0 des modification sur la copie.</li> </ul>"},{"location":"notebook/kppv_Revision_Iris/#exercice-6","title":"Exercice 6 :\u00b6","text":"<p>Pour cela, nous allons \u00e9crire une fonction qui ayant :</p> <ul> <li>en entr\u00e9e :<ul> <li>une entier k (le nombre de plus proches voisins)</li> <li>le jeu de donn\u00e9es , dans notre exemple c'est <code>dataset</code>, avec le champs distance (obtenu \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente)</li> </ul> </li> <li>en sortie : La liste des \u00e9tiquettes des k plus proches voisins</li> </ul> <p>Aide : La fonction <code>sorted</code> permet de faire un tri 'en place' (la liste initiale est remplac\u00e9e par la liste tri\u00e9e) en fonction d'un des champs d'une liste. <code>sorted(liste, key=lambda liste: liste[2]) </code> permet de trier la liste en fonction du champs d'indice 2.</p>"},{"location":"notebook/kppv_Revision_Iris/#exercice-7","title":"Exercice 7 :\u00b6","text":"<p>Ensuite il faut cr\u00e9er une fonction qui permet de d\u00e9terminer l'\u00e9tiquette majoritaire dans la liste des k plus proches voisins.</p> <p>Compl\u00e9ter la fonction <code>element_majoritaire(etiquettes)</code> :</p> <ul> <li>Entr\u00e9es :<ul> <li>La liste <code>etiquettes</code></li> </ul> </li> <li>Sortie: l'\u00e9l\u00e9ment majoritaire dans la liste <code>etiquettes</code></li> </ul>"},{"location":"notebook/kppv_Revision_Iris/#exercice-8","title":"Exercice 8 :\u00b6","text":"<p>Int\u00e9grez tout ce qui pr\u00e9cd\u00e8de dans une unique fonction <code>k_plus_proches_voisins</code> qui prend en param\u00e8tres :</p> <ul> <li><p>un nombre entier <code>k</code>,</p> </li> <li><p>une table d'iris \u00e9tiquet\u00e9s <code>table_iris</code>,</p> </li> <li><p>et un iris non \u00e9tiquet\u00e9 <code>nouvel_iris</code></p> </li> </ul> <p>et renvoie l'\u00e9tiquette de <code>iris_a_etiqueter</code> obtenue selon l'algorithme des k plus proches voisins.</p>"},{"location":"notebook/kppv_Revision_Iris/#exercice-9","title":"Exercice 9 :\u00b6","text":"<p>En d\u00e9duire une pr\u00e9diction pour chacun des deux iris inconnus de l'exercice 4 et v\u00e9rifier la coh\u00e9rence avec vos r\u00e9ponses.</p>"},{"location":"notebook/kppv_Revision_Iris/#tester-la-fiabilite-de-cet-algorithme","title":"Tester la fiabilit\u00e9 de cet algorithme.\u00b6","text":"<p>Pour entra\u00eener ou tester un algorithme d'apprentissage automatique, une technique classique est de partager le jeu de donn\u00e9es en deux parties :</p> <ul> <li>un jeu de donn\u00e9es d'apprentissage, qui sert \u00e0 construire le mod\u00e8le</li> <li>un jeu de test qui va servir \u00e0 tester notre mod\u00e8le.</li> </ul> <p>Dans le jeu de test, nous connaissons les \u00e9tiquettes \"r\u00e9elles\", nous pouvons donc utiliser notre mod\u00e8le sur ce jeu de donn\u00e9e 'de test' pour pr\u00e9dire des \u00e9tiquettes. Ensuite, en comparant les \u00e9tiquettes pr\u00e9dites avec les \u00e9tiquettes 'r\u00e9elles', nous pouvons compter les erreurs faites par le mod\u00e8le pour \u00e9valuer celui-ci. Dans le cas des k plus proches voisins nous pouvons ainsi \u00e9valuer le poucentage d'erreurs en fonction de la valeur de k qui est choisie.</p>"},{"location":"notebook/kppv_Revision_Iris/#exercice-10","title":"Exercice 10 :\u00b6","text":"<p>Cr\u00e9er une fonction qui permet de s\u00e9parer le jeu de donn\u00e9es en deux jeux apprentissage/test.</p> <p>Compl\u00e9ter la fonction <code>creation_jeux</code> :</p> <ul> <li>Entr\u00e9es :<ul> <li>le jeux de donn\u00e9es : une liste</li> <li>pourcentage_test , un flotant entre 0 et 100 qui repr\u00e9sente le % de donn\u00e9es consacr\u00e9es aux tests</li> </ul> </li> <li>Sortie: deux jeux apprentissage/test - 2 listes</li> </ul> <p>La fonction shuffle du module random peut aider (voir la documentation sur internet)</p>"},{"location":"notebook/kppv_Revision_Iris/#exercice-11","title":"Exercice 11 :\u00b6","text":"<p>Cr\u00e9er une fonction qui permet de s\u00e9parer le jeu de donn\u00e9es en deux jeux apprentissage/test.</p> <p>Compl\u00e9ter la fonction <code>eval_erreurs</code> :</p> <ul> <li>Entr\u00e9es :<ul> <li>le jeux d'apprentissage : une liste</li> <li>le jeux de tests : une liste</li> <li>k un entier sup\u00e9rieur ou \u00e9gal \u00e0 1</li> </ul> </li> <li>Sortie: le pourcentage d'erreurs r\u00e9alis\u00e9s par l'algorithme sur le jeu de test (en se servant du jeu d'apprentissage comme jeu de donn\u00e9es)</li> </ul>"},{"location":"notebook/kppv_Revision_Iris/#suivant-exercice-bac-ecrit","title":"SUIVANT : Exercice BAC \u00e9crit\u00b6","text":""},{"location":"officiels/def%20ep2023%28annee%29%3A/","title":"Def ep2023(annee):","text":"In\u00a0[\u00a0]: Copied! <pre>def ep2023(annee):\n        aff=\"\\n\"\n        aff+= \"|Num\u00e9ro | Enonc\u00e9 en ligne | Lien de t\u00e9l\u00e9chargement| Th\u00e8me exercice 1 | Th\u00e8me exercice 2  | Code fourni |Correction|\\n\"\n        aff+= \"|-------|---| -----------------------|------------------|-------------------|-------------|----------|\\n\"\n        FNAME = f\"../officiels/Annales/EP/{annee}/l{annee}.txt\"\n        icones = {\"N\":\":star:\",\"B\":\"&lt;span class='rouge'&gt;:material-bug:&lt;/span&gt;\",\"D\":\"&lt;span class='navy'&gt;:material-bomb:&lt;/span&gt;\",\"M\":\":fontawesome-solid-square-root-variable:\",\"W\":\"&lt;span class='orange'&gt;:fontawesome-solid-triangle-exclamation:&lt;/span&gt;\"}\n        with open(FNAME,\"r\",encoding=\"utf-8\") as f:\n            nums=1\n            for s in f:\n                lf=s.split(\",\")\n                if '0' in lf[3]:\n                    correction = f\"Voir 2022\"\n                else:\n                    dossier=f\"[{annee}-S{str(nums).zfill(2)}-ex1]({annee}-S{str(nums).zfill(2)}_1)\"\n                    correction = f\"[{annee}-S{str(nums).zfill(2)}](../../Corriges/{annee}-S{str(nums).zfill(2)}/)\"\n                    \n                    #enonce1 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{dossier}/)\"\n                    #enonce2 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{annee}-S{str(nums)_2)/{enonce}.zfill(2)}/)\"\n                dnums =\"**\" +str(nums)+\"** \"\n                for letter in icones:\n                    if letter in lf[5]:\n                        dnums = dnums + icones[letter]\n                aff+=f\"|{dnums}| |[Sujet N\u00b0{nums}](../../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.pdf) | {lf[2]} | {lf[3]} | [:material-download: Code](../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.py) | {correction} |\\n\"\n                nums+=1\n                print(correction)\n                print(lf)\n        return aff\n</pre> def ep2023(annee):         aff=\"\\n\"         aff+= \"|Num\u00e9ro | Enonc\u00e9 en ligne | Lien de t\u00e9l\u00e9chargement| Th\u00e8me exercice 1 | Th\u00e8me exercice 2  | Code fourni |Correction|\\n\"         aff+= \"|-------|---| -----------------------|------------------|-------------------|-------------|----------|\\n\"         FNAME = f\"../officiels/Annales/EP/{annee}/l{annee}.txt\"         icones = {\"N\":\":star:\",\"B\":\":material-bug:\",\"D\":\":material-bomb:\",\"M\":\":fontawesome-solid-square-root-variable:\",\"W\":\":fontawesome-solid-triangle-exclamation:\"}         with open(FNAME,\"r\",encoding=\"utf-8\") as f:             nums=1             for s in f:                 lf=s.split(\",\")                 if '0' in lf[3]:                     correction = f\"Voir 2022\"                 else:                     dossier=f\"[{annee}-S{str(nums).zfill(2)}-ex1]({annee}-S{str(nums).zfill(2)}_1)\"                     correction = f\"[{annee}-S{str(nums).zfill(2)}](../../Corriges/{annee}-S{str(nums).zfill(2)}/)\"                                          #enonce1 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{dossier}/)\"                     #enonce2 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{annee}-S{str(nums)_2)/{enonce}.zfill(2)}/)\"                 dnums =\"**\" +str(nums)+\"** \"                 for letter in icones:                     if letter in lf[5]:                         dnums = dnums + icones[letter]                 aff+=f\"|{dnums}| |[Sujet N\u00b0{nums}](../../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.pdf) | {lf[2]} | {lf[3]} | [:material-download: Code](../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.py) | {correction} |\\n\"                 nums+=1                 print(correction)                 print(lf)         return aff In\u00a0[\u00a0]: Copied! <pre>ep2023(2023)\n</pre> ep2023(2023)"},{"location":"officiels/Annales/EE/def%20ep2023%28annee%29%3A/","title":"Def ep2023(annee):","text":"In\u00a0[\u00a0]: Copied! <pre>def ep2023(annee):\n        aff=\"\\n\"\n        aff+= \"|Num\u00e9ro | Enonc\u00e9 en ligne | Lien de t\u00e9l\u00e9chargement| Th\u00e8me exercice 1 | Th\u00e8me exercice 2  | Code fourni |Correction|\\n\"\n        aff+= \"|-------|---| -----------------------|------------------|-------------------|-------------|----------|\\n\"\n        FNAME = f\"officiels/Annales/EP/{annee}/l{annee}.txt\"\n        icones = {\"N\":\":star:\",\"B\":\"&lt;span class='rouge'&gt;:material-bug:&lt;/span&gt;\",\"D\":\"&lt;span class='navy'&gt;:material-bomb:&lt;/span&gt;\",\"M\":\":fontawesome-solid-square-root-variable:\",\"W\":\"&lt;span class='orange'&gt;:fontawesome-solid-triangle-exclamation:&lt;/span&gt;\"}\n        with open(FNAME,\"r\",encoding=\"utf-8\") as f:\n            nums=1\n            for s in f:\n                lf=s.split(\",\")\n                if '0' in lf[3]:\n                    correction = f\"Voir 2022\"\n                else:\n                    #dossier={annee}-S{str(nums).zfill(2)}\n                    correction = f\"[{annee}-S{str(nums).zfill(2)}](../../Corriges/{annee}-S{str(nums).zfill(2)}/)\"\n                    #enonce1 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{dossier}/)\"\n                    #enonce2 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{annee}-S{str(nums)_2)/{enonce}.zfill(2)}/)\"\n                dnums =\"**\" +str(nums)+\"** \"\n                for letter in icones:\n                    if letter in lf[5]:\n                        dnums = dnums + icones[letter]\n                aff+=f\"|{dnums}| |[Sujet N\u00b0{nums}](../../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.pdf) | {lf[2]} | {lf[3]} | [:material-download: Code](../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.py) | {correction} |\\n\"\n                nums+=1\n        return aff\n</pre> def ep2023(annee):         aff=\"\\n\"         aff+= \"|Num\u00e9ro | Enonc\u00e9 en ligne | Lien de t\u00e9l\u00e9chargement| Th\u00e8me exercice 1 | Th\u00e8me exercice 2  | Code fourni |Correction|\\n\"         aff+= \"|-------|---| -----------------------|------------------|-------------------|-------------|----------|\\n\"         FNAME = f\"officiels/Annales/EP/{annee}/l{annee}.txt\"         icones = {\"N\":\":star:\",\"B\":\":material-bug:\",\"D\":\":material-bomb:\",\"M\":\":fontawesome-solid-square-root-variable:\",\"W\":\":fontawesome-solid-triangle-exclamation:\"}         with open(FNAME,\"r\",encoding=\"utf-8\") as f:             nums=1             for s in f:                 lf=s.split(\",\")                 if '0' in lf[3]:                     correction = f\"Voir 2022\"                 else:                     #dossier={annee}-S{str(nums).zfill(2)}                     correction = f\"[{annee}-S{str(nums).zfill(2)}](../../Corriges/{annee}-S{str(nums).zfill(2)}/)\"                     #enonce1 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{dossier}/)\"                     #enonce2 = f\"[{annee}-S{str(nums).zfill(2)}](../../../officiels/Annales/EP/{annee}/{annee}-S{str(nums)_2)/{enonce}.zfill(2)}/)\"                 dnums =\"**\" +str(nums)+\"** \"                 for letter in icones:                     if letter in lf[5]:                         dnums = dnums + icones[letter]                 aff+=f\"|{dnums}| |[Sujet N\u00b0{nums}](../../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.pdf) | {lf[2]} | {lf[3]} | [:material-download: Code](../../officiels/Annales/EP/{annee}/{lf[0]}/{lf[0]}.py) | {correction} |\\n\"                 nums+=1         return aff In\u00a0[\u00a0]: Copied! <pre>ep2023(2023)\n</pre> ep2023(2023)"},{"location":"officiels/Annales/EP/2021/rename/","title":"Rename","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>for num  in range(1,30):\n    snum=str(num).zfill(2)\n    os.system(f\"mv ./21-NSI-{snum}/21_NSI_{snum}.pdf ./21-NSI-{snum}/21-NSI-{snum}.pdf \")\n</pre> for num  in range(1,30):     snum=str(num).zfill(2)     os.system(f\"mv ./21-NSI-{snum}/21_NSI_{snum}.pdf ./21-NSI-{snum}/21-NSI-{snum}.pdf \")"},{"location":"officiels/Annales/EP/2021/21-NSI-01/21-NSI-01/","title":"21 NSI 01","text":"In\u00a0[\u00a0]: Copied! <pre>from math import sqrt   # import de la fonction racine carr\u00e9e\n</pre> from math import sqrt   # import de la fonction racine carr\u00e9e In\u00a0[\u00a0]: Copied! <pre>def distance(point1, point2): \n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n</pre> def distance(point1, point2):      \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"     return sqrt((...)**2 + (...)**2) In\u00a0[\u00a0]: Copied! <pre>assert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n</pre> assert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\" In\u00a0[\u00a0]: Copied! <pre>def plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus     \n    courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</pre> def plus_courte_distance(tab, depart):     \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus          courte distance du point depart.\"\"\"     point = tab[0]     min_dist = ...     for i in range (1, ...):         if distance(tab[i], depart)...:             point = ...             min_dist = ...     return point In\u00a0[\u00a0]: Copied! <pre>assert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == [2, 5], \"erreur\"\n</pre> assert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == [2, 5], \"erreur\""},{"location":"officiels/Annales/EP/2021/21-NSI-02/21-NSI-02/","title":"21 NSI 02","text":"In\u00a0[\u00a0]: Copied! <pre>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice. \n    #Au debut, la zone non triee est le tableau entier.\n    i= ...\n    j= ...\n    while i != j :\n        if tab[i]== 0:\n            i= ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j= ...\n    ...\n</pre> def tri(tab):     #i est le premier indice de la zone non triee, j le dernier indice.      #Au debut, la zone non triee est le tableau entier.     i= ...     j= ...     while i != j :         if tab[i]== 0:             i= ...         else :             valeur = tab[j]             tab[j] = ...             ...             j= ...     ..."},{"location":"officiels/Annales/EP/2021/21-NSI-03/21-NSI-03/","title":"21 NSI 03","text":"In\u00a0[\u00a0]: Copied! <pre>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n\n    debut = 0 \n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n             fin = ...\t\t\t\n    return ...\n</pre> def dichotomie(tab, x):     \"\"\"         tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant         x : nombre entier         La fonction renvoie True si tab contient x et False sinon     \"\"\"      debut = 0      fin = len(tab) - 1     while debut &lt;= fin:         m = ...         if x == tab[m]:             return ...         if x &gt; tab[m]:             debut = m + 1         else:              fin = ...\t\t\t     return ..."},{"location":"officiels/Annales/EP/2021/21-NSI-04/21-NSI-04/","title":"21 NSI 04","text":"In\u00a0[\u00a0]: Copied! <pre>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau tri\u00e9 dans l\u2019ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False,2\n    \n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\t\t\t\n    return ...\n</pre> def dichotomie(tab, x):     \"\"\"         tab : tableau tri\u00e9 dans l\u2019ordre croissant         x : nombre entier         La fonction renvoie True si tab contient x et False sinon     \"\"\"     # cas du tableau vide     if ...:         return False,1      # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames     if (x &lt; tab[0]) or ...:         return False,2          debut = 0     fin = len(tab) - 1     while debut &lt;= fin:         m = ...         if x == tab[m]:             return ...         if x &gt; tab[m]:             debut = m + 1         else:             fin = ...\t\t\t     return ..."},{"location":"officiels/Annales/EP/2021/21-NSI-05/21-NSI-05/","title":"21 NSI 05","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n        while  i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n        \n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n        # vers la droite et on place L[j] en position i\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</pre> def tri_insertion(L):     n = len(L)      # cas du tableau vide     if ...:         return L      for j in range(1,n):         e = L[j]         i = j      # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9     # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant     # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].         while  i &gt; 0 and L[i-1] &gt; ...:             i = ...                  # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran         # vers la droite et on place L[j] en position i         if i != j:             for k in range(j,i,...):                 L[k] = L[...]             L[i] = ...     return L"},{"location":"officiels/Annales/EP/2021/21-NSI-06/21-NSI-06/","title":"21 NSI 06","text":"In\u00a0[\u00a0]: Copied! <pre>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</pre> class Maillon :     def __init__(self,v) :         self.valeur = v         self.suivant = None In\u00a0[\u00a0]: Copied! <pre>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(... , self.dernier_file)\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</pre> class File :     def __init__(self) :         self.dernier_file = None      def enfile(self,element) :         nouveau_maillon = Maillon(... , self.dernier_file)         self.dernier_file = ...      def est_vide(self) :         return self.dernier_file == None      def affiche(self) :         maillon = self.dernier_file         while maillon != ... :             print(maillon.valeur)             maillon = ...      def defile(self) :         if not self.est_vide() :             if self.dernier_file.suivant == None :                 resultat = self.dernier_file.valeur                 self.dernier_file = None                 return resultat             maillon = ...             while maillon.suivant.suivant != None :                 maillon = maillon.suivant             resultat = ...             maillon.suivant = None             return resultat         return None"},{"location":"officiels/Annales/EP/2021/21-NSI-07/21-NSI-07/","title":"21 NSI 07","text":"In\u00a0[\u00a0]: Copied! <pre>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n</pre> liste_eleves = ['a','b','c','d','e','f','g','h','i','j'] liste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24] In\u00a0[\u00a0]: Copied! <pre>def meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi =  ...\n    \n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n            \n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</pre> def meilleures_notes():     note_maxi = 0     nb_eleves_note_maxi = ...     liste_maxi =  ...          for compteur in range(...):         if liste_notes[compteur] == ...:             nb_eleves_note_maxi = nb_eleves_note_maxi + 1             liste_maxi.append(liste_eleves[...])         if liste_notes[compteur] &gt; note_maxi:             note_maxi = liste_notes[compteur]             nb_eleves_note_maxi = ...             liste_maxi = [...]                  return (note_maxi,nb_eleves_note_maxi,liste_maxi)"},{"location":"officiels/Annales/EP/2021/21-NSI-08/21-NSI-08/","title":"21 NSI 08","text":"In\u00a0[\u00a0]: Copied! <pre>Pieces = [100,50,20,10,5,2,1]\ndef rendu_glouton(arendre, solution=[], i=0):\n       if arendre == 0:\n       return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        return rendu_glouton(arendre - p, solution.append(...),i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</pre> Pieces = [100,50,20,10,5,2,1] def rendu_glouton(arendre, solution=[], i=0):        if arendre == 0:        return ...     p = pieces[i]     if p &lt;= ... :         return rendu_glouton(arendre - p, solution.append(...),i)     else :         return rendu_glouton(arendre, solution, ...)"},{"location":"officiels/Annales/EP/2021/21-NSI-09/21-NSI-09/","title":"21 NSI 09","text":"In\u00a0[\u00a0]: Copied! <pre>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</pre> def pascal(n):     C= [[1]]     for k in range(1,...):         Ck = [...]         for i in range(1,k):             Ck.append(C[...][i-1]+C[...][...] )         Ck.append(...)         C.append(Ck)     return C"},{"location":"officiels/Annales/EP/2021/21-NSI-10/21-NSI-10/","title":"21 NSI 10","text":"In\u00a0[\u00a0]: Copied! <pre>def positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</pre> def positif(T):     T2 = ...(T)     T3 = ...     while T2 != []:         x = ...         if ... &gt;= 0:             T3.append(...)     T2 = []     while T3 != ...:         x = T3.pop()         ...     print('T = ',T)     return T2"},{"location":"officiels/Annales/EP/2021/21-NSI-11/21-NSI-11/","title":"21 NSI 11","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</pre> def tri_bulles(T):     n = len(T)     for i in range(...,...,-1):         for j in range(i):             if T[j] &gt; T[...]:                 ... = T[j]                 T[j] = T[...]                 T[j+1] = temp     return T"},{"location":"officiels/Annales/EP/2021/21-NSI-12/21-NSI-12/","title":"21 NSI 12","text":"In\u00a0[\u00a0]: Copied! <pre>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</pre> def recherche(gene, seq_adn):     n = len(seq_adn)     g = len(gene)     i = ...     trouve = False     while i &lt; ... and trouve == ... :         j = 0         while j &lt; g and gene[j] == seq_adn[i+j]:             ...         if j == g:             trouve = True         ...     return trouve"},{"location":"officiels/Annales/EP/2021/21-NSI-13/21-NSI-13/","title":"21 NSI 13","text":"In\u00a0[\u00a0]: Copied! <pre>from random import randint\n</pre> from random import randint In\u00a0[\u00a0]: Copied! <pre>def plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</pre> def plus_ou_moins():     nb_mystere = randint(1,...)     nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))     compteur = ...      while nb_mystere != ... and compteur &lt; ... :         compteur = compteur + ...         if nb_mystere ... nb_test:             nb_test = int(input(\"Trop petit ! Testez encore : \"))         else:             nb_test = int(input(\"Trop grand ! Testez encore : \"))      if nb_mystere == nb_test:         print (\"Bravo ! Le nombre \u00e9tait \",...)         print(\"Nombre d'essais: \",...)     else:         print (\"Perdu ! Le nombre \u00e9tait \",...)"},{"location":"officiels/Annales/EP/2021/21-NSI-14/21-NSI-14/","title":"21 NSI 14","text":"In\u00a0[\u00a0]: Copied! <pre>resultats = {'Dupont':{'DS1' : [15.5, 4],\n                       'DM1' : [14.5, 1],\n                       'DS2' : [13, 4],\n                       'PROJET1' : [16, 3],\n                       'DS3' : [14, 4]},\n             'Durand':{'DS1' : [6 , 4],\n                       'DM1' : [14.5, 1],\n                       'DS2' : [8, 4],\n                       'PROJET1' : [9, 3],\n                       'IE1' : [7, 2],\n                       'DS3' : [8, 4],\n                       'DS4' :[15, 4]}}\n</pre> resultats = {'Dupont':{'DS1' : [15.5, 4],                        'DM1' : [14.5, 1],                        'DS2' : [13, 4],                        'PROJET1' : [16, 3],                        'DS3' : [14, 4]},              'Durand':{'DS1' : [6 , 4],                        'DM1' : [14.5, 1],                        'DS2' : [8, 4],                        'PROJET1' : [9, 3],                        'IE1' : [7, 2],                        'DS3' : [8, 4],                        'DS4' :[15, 4]}} In\u00a0[\u00a0]: Copied! <pre>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</pre> def moyenne(nom):     if nom in ...:         notes = resultats[nom]         total_points = ...         total_coefficients = ...         for ...  in notes.values():             note , coefficient = valeurs             total_points = total_points + ... * coefficient             total_coefficients = ... + coefficient         return round( ... / total_coefficients , 1 )     else:         return -1"},{"location":"officiels/Annales/EP/2021/21-NSI-15/21-NSI-15/","title":"21 NSI 15","text":"In\u00a0[\u00a0]: Copied! <pre>class Carte:\n\"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, \n       Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur]\n</pre> class Carte:     \"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"     def __init__(self, c, v):         self.Couleur = c         self.Valeur = v      \"\"\"Renvoie le nom de la Carte As, 2, ... 10,         Valet, Dame, Roi\"\"\"     def getNom(self):         if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):             return str( self.Valeur)         elif self.Valeur == 11:             return \"Valet\"         elif self.Valeur == 12:             return \"Dame\"         elif self.Valeur == 13:             return \"Roi\"         else:             return \"As\"      \"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"     def getCouleur(self):         return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur] In\u00a0[\u00a0]: Copied! <pre>class PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n\t#A compl\u00e9ter\n\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        #A compl\u00e9ter\n</pre> class PaquetDeCarte:     def __init__(self):         self.contenu = []      \"\"\"Remplit le paquet de cartes\"\"\"     def remplir(self): \t#A compl\u00e9ter      \"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"     def getCarteAt(self, pos):         #A compl\u00e9ter"},{"location":"officiels/Annales/EP/2021/21-NSI-16/21-NSI-16/","title":"21 NSI 16","text":"In\u00a0[\u00a0]: Copied! <pre>def dec_to_bin(a):\n    bin_a = ...\n    a = a//2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</pre> def dec_to_bin(a):     bin_a = ...     a = a//2     while a ... :         bin_a = ... + bin_a         a = ...     return bin_a"},{"location":"officiels/Annales/EP/2021/21-NSI-17/21-NSI-17/","title":"21 NSI 17","text":"In\u00a0[\u00a0]: Copied! <pre>def separe(tab):\n    i = 0\n    j = ...\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = ...\n        else :\n            tab[i], tab[j] = ...\n            j = ...\n    return tab\n</pre> def separe(tab):     i = 0     j = ...     while i &lt; j :         if tab[i] == 0 :             i = ...         else :             tab[i], tab[j] = ...             j = ...     return tab"},{"location":"officiels/Annales/EP/2021/21-NSI-18/21-NSI-18/","title":"21 NSI 18","text":"In\u00a0[\u00a0]: Copied! <pre>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... : \n      l[i+1] = ...\n      l[i] = a\n      i = ...\n    return l\n</pre> def insere(a, tab):     l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab     l.append(a)     i = ...     while a &lt; ... :        l[i+1] = ...       l[i] = a       i = ...     return l"},{"location":"officiels/Annales/EP/2021/21-NSI-19/21-NSI-19/","title":"21 NSI 19","text":"In\u00a0[\u00a0]: Copied! <pre>ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n</pre> ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ' In\u00a0[\u00a0]: Copied! <pre>def position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n</pre> def position_alphabet(lettre):     return ALPHABET.find(lettre) In\u00a0[\u00a0]: Copied! <pre>def cesar(message, decalage):\n    resultat = ''\n    for ... in message :\n        if lettre in ALPHABET :\n            indice = ( ... )%26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</pre> def cesar(message, decalage):     resultat = ''     for ... in message :         if lettre in ALPHABET :             indice = ( ... )%26             resultat = resultat + ALPHABET[indice]         else:             resultat = ...     return resultat"},{"location":"officiels/Annales/EP/2021/21-NSI-20/21-NSI-20/","title":"21 NSI 20","text":"In\u00a0[\u00a0]: Copied! <pre>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n       result = ...\n    return result\n</pre> def inverse_chaine(chaine):     result = ...     for caractere in chaine:        result = ...     return result In\u00a0[\u00a0]: Copied! <pre>def est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n</pre> def est_palindrome(chaine):     inverse = inverse_chaine(chaine)     return ... In\u00a0[\u00a0]: Copied! <pre>def est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</pre> def est_nbre_palindrome(nbre):     chaine = ...     return est_palindrome(chaine)"},{"location":"officiels/Annales/EP/2021/21-NSI-21/21-NSI-21/","title":"21 NSI 21","text":"In\u00a0[\u00a0]: Copied! <pre>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</pre> def binaire(a):     bin_a = str(...)     a = a // 2     while a ... :         bin_a = ...(a%2) + ...         a = ...     return bin_a"},{"location":"officiels/Annales/EP/2021/21-NSI-22/21-NSI-22/","title":"21 NSI 22","text":"In\u00a0[\u00a0]: Copied! <pre>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</pre> def rendu_monnaie_centimes(s_due, s_versee):     pieces = [1, 2, 5, 10, 20, 50, 100, 200]     rendu = ...     a_rendre = ...     i = len(pieces) - 1     while a_rendre &gt; ... :         if pieces[i] &lt;= a_rendre :             rendu.append(...)             a_rendre = ...         else :             i = ...     return rendu"},{"location":"officiels/Annales/EP/2021/21-NSI-23/21-NSI-23/","title":"21 NSI 23","text":"In\u00a0[\u00a0]: Copied! <pre>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n    \tL12[i] = ...\n    \ti1 = i1 + 1\n    \ti = ...\n    while i2 &lt; n2:\n    \tL12[i] = ...\n    \ti2 = i2 + 1\n    \ti = ...\n    return L12\n</pre> def fusion(L1,L2):     n1 = len(L1)     n2 = len(L2)     L12 = [0]*(n1+n2)     i1 = 0     i2 = 0     i = 0     while i1 &lt; n1 and ... :         if L1[i1] &lt; L2[i2]:             L12[i] = ...             i1 = ...         else:             L12[i] = L2[i2]             i2 = ...         i += 1     while i1 &lt; n1:     \tL12[i] = ...     \ti1 = i1 + 1     \ti = ...     while i2 &lt; n2:     \tL12[i] = ...     \ti2 = i2 + 1     \ti = ...     return L12"},{"location":"officiels/Annales/EP/2021/21-NSI-24/21-NSI-24/","title":"21 NSI 24","text":"In\u00a0[\u00a0]: Copied! <pre>class AdresseIP:\n\n    def __init__(self, adresse):\n        self.adresse = ...\n   \n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n           la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")] \n        \n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n           r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n             \n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse \n           IP qui suit l\u2019adresse self\n           si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</pre> class AdresseIP:      def __init__(self, adresse):         self.adresse = ...         def liste_octet(self):         \"\"\"renvoie une liste de nombres entiers,            la liste des octets de l'adresse IP\"\"\"         return [int(i) for i in self.adresse.split(\".\")]               def est_reservee(self):         \"\"\"renvoie True si l'adresse IP est une adresse            r\u00e9serv\u00e9e, False sinon\"\"\"         return ... or ...                   def adresse_suivante(self):         \"\"\"renvoie un objet de AdresseIP avec l'adresse             IP qui suit l\u2019adresse self            si elle existe et False sinon\"\"\"         if ... &lt; 254:             octet_nouveau = ... + ...             return AdresseIP('192.168.0.' + ...)         else:             return False"},{"location":"officiels/Annales/EP/2021/21-NSI-25/21-NSI-25/","title":"21 NSI 25","text":"In\u00a0[\u00a0]: Copied! <pre>def propager(M, i, j, val):\n    if M[i][j]== ...:\n        return\n\n    M[i][j]=val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, ..., val)\n</pre> def propager(M, i, j, val):     if M[i][j]== ...:         return      M[i][j]=val      # l'\u00e9l\u00e9ment en haut fait partie de la composante     if ((i-1) &gt;= 0 and M[i-1][j] == ...):         propager(M, i-1, j, val)      # l'\u00e9l\u00e9ment en bas fait partie de la composante     if ((...) &lt; len(M) and M[i+1][j] == 1):         propager(M, ..., j, val)      # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante     if ((...) &gt;= 0 and M[i][j-1] == 1):         propager(M, i, ..., val)      # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante     if ((...) &lt; len(M) and M[i][j+1] == 1):         propager(M, i, ..., val)"},{"location":"officiels/Annales/EP/2021/21-NSI-26/21-NSI-26/","title":"21 NSI 26","text":"In\u00a0[\u00a0]: Copied! <pre>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n</pre> def nbLig(image):     '''renvoie le nombre de lignes de l'image'''     return ... In\u00a0[\u00a0]: Copied! <pre>def nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n</pre> def nbCol(image):     '''renvoie la largeur de l'image'''     return ... In\u00a0[\u00a0]: Copied! <pre>def negatif(image):\n'''renvoie le n\u00e9gatif de l'image sous la forme \n       d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cre\u0301e\u0301 une image de 0 aux me\u0302mes dimensions que le parame\u0300tre image \n    for i in range(len(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n</pre> def negatif(image):     '''renvoie le n\u00e9gatif de l'image sous la forme         d'une liste de listes'''     L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cre\u0301e\u0301 une image de 0 aux me\u0302mes dimensions que le parame\u0300tre image      for i in range(len(image)):         for j in range(...):             L[i][j] = ...     return L In\u00a0[\u00a0]: Copied! <pre>def binaire(image, seuil):\n'''renvoie une image binaris\u00e9e de l'image sous la forme \n       d'une liste de listes contenant des 0 si la valeur \n       du pixel est strictement inf\u00e9rieure au seuil \n       et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image \n    for i in range(len(image)):\n        for j in range(...):\n            if L[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</pre> def binaire(image, seuil):     '''renvoie une image binaris\u00e9e de l'image sous la forme         d'une liste de listes contenant des 0 si la valeur         du pixel est strictement inf\u00e9rieure au seuil         et 1 sinon'''     L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image      for i in range(len(image)):         for j in range(...):             if L[i][j] &lt; ... :                 L[i][j] = ...             else:                 L[i][j] = ...     return L"},{"location":"officiels/Annales/EP/2021/21-NSI-27/21-NSI-27/","title":"21 NSI 27","text":"In\u00a0[\u00a0]: Copied! <pre>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n         [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n         [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n         [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n         [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n</pre> coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\          [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\          [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\          [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\          [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\          [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\          [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\          [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] In\u00a0[\u00a0]: Copied! <pre>def affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \"*\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\",end=\"\")\n            else:\n                print(\"  \",end=\"\")\n        print()\n</pre> def affiche(dessin):     ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par          des \"*\" , les 0 par deux espaces \"  \" '''     for ligne in dessin:         for col in ligne:             if col == 1:                 print(\" *\",end=\"\")             else:                 print(\"  \",end=\"\")         print() In\u00a0[\u00a0]: Copied! <pre>def zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n       \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n</pre> def zoomListe(liste_depart,k):     '''renvoie une liste contenant k fois chaque         \u00e9l\u00e9ment de liste_depart'''     liste_zoom = ...     for elt in ... :         for i in range(k):             ...     return liste_zoom In\u00a0[\u00a0]: Copied! <pre>def zoomDessin(grille,k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n       ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</pre> def zoomDessin(grille,k):     '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois         ET r\u00e9p\u00e9t\u00e9es k fois'''     grille_zoom=[]     for elt in grille:         liste_zoom = ...         for i in range(k):             ... .append(...)     return grille_zoom"},{"location":"officiels/Annales/EP/2021/21-NSI-28/21-NSI-28/","title":"21 NSI 28","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_iteratif(tab):\n    for k in range( ... , 0, -1):\n        imax = ...\n        for i in range(0 , ... ):\n            if tab[i] &gt; ... :\n                imax = i\n        if tab[max] &gt; ... :\n            ... , tab[imax] = tab[imax] , ...\n    return tab\n</pre> def tri_iteratif(tab):     for k in range( ... , 0, -1):         imax = ...         for i in range(0 , ... ):             if tab[i] &gt; ... :                 imax = i         if tab[max] &gt; ... :             ... , tab[imax] = tab[imax] , ...     return tab"},{"location":"officiels/Annales/EP/2021/21-NSI-29/21-NSI-29/","title":"21 NSI 29","text":"In\u00a0[\u00a0]: Copied! <pre>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n        \"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n        \"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n        \"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n</pre> dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\         \"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\         \"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\         \"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26} In\u00a0[\u00a0]: Copied! <pre>def est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</pre> def est_parfait(mot) :     #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)     code_c = \"\"     code_a = ???     for c in mot :         code_c = code_c + ???         code_a = ???     code_c = int(code_c)     if ??? :         mot_est_parfait = True     else :         mot_est_parfait = False     return [code_a, code_c, mot_est_parfait]"},{"location":"officiels/Annales/EP/2021/21-NSI-30/21-NSI-30/","title":"21 NSI 30","text":"In\u00a0[\u00a0]: Copied! <pre>def chercher(T,n,i,j):\n    if i &lt; 0 or ??? :\n        print(\"Erreur\")\n        return None    \n    if i &gt; j :\n        return None\n    m = (i+j) // ???\n    if T[m] &lt; ??? :\n        return chercher(T, n, ??? , ???)\n    elif ??? :\n        return chercher(T, n, ??? , ??? )\n    else :\n        return ???\n</pre> def chercher(T,n,i,j):     if i &lt; 0 or ??? :         print(\"Erreur\")         return None         if i &gt; j :         return None     m = (i+j) // ???     if T[m] &lt; ??? :         return chercher(T, n, ??? , ???)     elif ??? :         return chercher(T, n, ??? , ??? )     else :         return ???"},{"location":"officiels/Annales/EP/2022/rename/","title":"Rename","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>for num  in range(1,40):\n    snum=str(num).zfill(2)\n    os.system(f\"mv ./22_NSI_{snum} ./22-NSI-{snum}\")\n</pre> for num  in range(1,40):     snum=str(num).zfill(2)     os.system(f\"mv ./22_NSI_{snum} ./22-NSI-{snum}\")"},{"location":"officiels/Annales/EP/2022/22-NSI-01/22-NSI-01/","title":"22 NSI 01","text":"In\u00a0[\u00a0]: Copied! <pre>Pieces = [100,50,20,10,5,2,1]\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = Pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution, i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</pre> Pieces = [100,50,20,10,5,2,1] def rendu_glouton(arendre, solution=[], i=0):     if arendre == 0:         return ...     p = Pieces[i]     if p &lt;= ... :         solution.append(...)         return rendu_glouton(arendre - p, solution, i)     else :         return rendu_glouton(arendre, solution, ...)"},{"location":"officiels/Annales/EP/2022/22-NSI-02/22-NSI-02/","title":"22 NSI 02","text":"In\u00a0[\u00a0]: Copied! <pre>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</pre> def pascal(n):     C= [[1]]     for k in range(1,...):         Ck = [...]         for i in range(1,k):             Ck.append(C[...][i-1]+C[...][...] )         Ck.append(...)         C.append(Ck)     return C"},{"location":"officiels/Annales/EP/2022/22-NSI-03/22-NSI-03/","title":"22 NSI 03","text":"In\u00a0[\u00a0]: Copied! <pre>class Noeud:\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n    \n    def __str__(self):\n        return str(self.valeur)\n    \n    def est_une_feuille(self):\n'''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n</pre> class Noeud:     def __init__(self, g, v, d):         self.gauche = g         self.valeur = v         self.droit = d          def __str__(self):         return str(self.valeur)          def est_une_feuille(self):         '''Renvoie True si et seulement si le noeud est une feuille'''         return self.gauche is None and self.droit is None In\u00a0[\u00a0]: Copied! <pre>def expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    if ... :\n        return s\n</pre> def expression_infixe(e):     s = ...     if e.gauche is not None:         s = '(' + s + expression_infixe(...)     s = s + ...     if ... is not None:         s = s + ... + ...     if ... :         return s In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"officiels/Annales/EP/2022/22-NSI-04/22-NSI-04/","title":"22 NSI 04","text":"In\u00a0[\u00a0]: Copied! <pre>def propager(M, i, j, val):\n    if M[i][j]== ...:\n        return\n\n    M[i][j]=val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, ..., val)\n</pre> def propager(M, i, j, val):     if M[i][j]== ...:         return      M[i][j]=val      # l'\u00e9l\u00e9ment en haut fait partie de la composante     if ((i-1) &gt;= 0 and M[i-1][j] == ...):         propager(M, i-1, j, val)      # l'\u00e9l\u00e9ment en bas fait partie de la composante     if ((...) &lt; len(M) and M[i+1][j] == 1):         propager(M, ..., j, val)      # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante     if ((...) &gt;= 0 and M[i][j-1] == 1):         propager(M, i, ..., val)      # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante     if ((...) &lt; len(M) and M[i][j+1] == 1):         propager(M, i, ..., val)"},{"location":"officiels/Annales/EP/2022/22-NSI-05/22-NSI-05/","title":"22 NSI 05","text":"In\u00a0[\u00a0]: Copied! <pre>class Carte:\n\"\"\"Initialise Couleur (entre 1 a 4), et Valeur (entre 1 a 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n\"\"\"Renvoie le nom de la Carte As, 2, ... 10, \n       Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n\"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur - 1]\n</pre> class Carte:     \"\"\"Initialise Couleur (entre 1 a 4), et Valeur (entre 1 a 13)\"\"\"     def __init__(self, c, v):         self.Couleur = c         self.Valeur = v      \"\"\"Renvoie le nom de la Carte As, 2, ... 10,         Valet, Dame, Roi\"\"\"     def getNom(self):         if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):             return str( self.Valeur)         elif self.Valeur == 11:             return \"Valet\"         elif self.Valeur == 12:             return \"Dame\"         elif self.Valeur == 13:             return \"Roi\"         else:             return \"As\"      \"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"     def getCouleur(self):         return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur - 1] In\u00a0[\u00a0]: Copied! <pre>class PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n\"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n\t??? = [ ??? for couleur in range(1, ???) for valeur in range( 1, ???)]\n\n\"\"\"Renvoie la Carte qui se trouve \u00e0 la position donnee\"\"\"\n    def getCarteAt(self, pos):\n        if 0 &lt;= pos &lt; ??? :\n            return ???\n</pre> class PaquetDeCarte:     def __init__(self):         self.contenu = []      \"\"\"Remplit le paquet de cartes\"\"\"     def remplir(self): \t??? = [ ??? for couleur in range(1, ???) for valeur in range( 1, ???)]      \"\"\"Renvoie la Carte qui se trouve \u00e0 la position donnee\"\"\"     def getCarteAt(self, pos):         if 0 &lt;= pos &lt; ??? :             return ???"},{"location":"officiels/Annales/EP/2022/22-NSI-06/22-NSI-06/","title":"22 NSI 06","text":"In\u00a0[\u00a0]: Copied! <pre>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</pre> def recherche(gene, seq_adn):     n = len(seq_adn)     g = len(gene)     i = ...     trouve = False     while i &lt; ... and trouve == ... :         j = 0         while j &lt; g and gene[j] == seq_adn[i+j]:             ...         if j == g:             trouve = True         ...     return trouve"},{"location":"officiels/Annales/EP/2022/22-NSI-07/22-NSI-07/","title":"22 NSI 07","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</pre> def tri_bulles(T):     n = len(T)     for i in range(...,...,-1):         for j in range(i):             if T[j] &gt; T[...]:                 ... = T[j]                 T[j] = T[...]                 T[j+1] = temp     return T"},{"location":"officiels/Annales/EP/2022/22-NSI-08/22-NSI-08/","title":"22 NSI 08","text":"In\u00a0[\u00a0]: Copied! <pre>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0: \n      l[i+1] = ...\n      l[i] = a\n      i = ...\n    return l\n</pre> def insere(a, tab):     l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab     l.append(a)     i = ...     while a &lt; ... and i &gt;= 0:        l[i+1] = ...       l[i] = a       i = ...     return l"},{"location":"officiels/Annales/EP/2022/22-NSI-09/22-NSI-09/","title":"22 NSI 09","text":"In\u00a0[\u00a0]: Copied! <pre>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n        \"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n        \"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n        \"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n</pre> dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\         \"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\         \"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\         \"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26} In\u00a0[\u00a0]: Copied! <pre>def est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</pre> def est_parfait(mot) :     #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)     code_c = \"\"     code_a = ???     for c in mot :         code_c = code_c + ???         code_a = ???     code_c = int(code_c)     if ??? :         mot_est_parfait = True     else :         mot_est_parfait = False     return [code_a, code_c, mot_est_parfait]"},{"location":"officiels/Annales/EP/2022/22-NSI-10/22-NSI-10/","title":"22 NSI 10","text":"In\u00a0[\u00a0]: Copied! <pre>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n    \tL12[i] = ...\n    \ti1 = i1 + 1\n    \ti = ...\n    while i2 &lt; n2:\n    \tL12[i] = ...\n    \ti2 = i2 + 1\n    \ti = ...\n    return L12\n</pre> def fusion(L1,L2):     n1 = len(L1)     n2 = len(L2)     L12 = [0]*(n1+n2)     i1 = 0     i2 = 0     i = 0     while i1 &lt; n1 and ... :         if L1[i1] &lt; L2[i2]:             L12[i] = ...             i1 = ...         else:             L12[i] = L2[i2]             i2 = ...         i += 1     while i1 &lt; n1:     \tL12[i] = ...     \ti1 = i1 + 1     \ti = ...     while i2 &lt; n2:     \tL12[i] = ...     \ti2 = i2 + 1     \ti = ...     return L12"},{"location":"officiels/Annales/EP/2022/22-NSI-11/22-NSI-11/","title":"22 NSI 11","text":"In\u00a0[\u00a0]: Copied! <pre>ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n</pre> ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ' In\u00a0[\u00a0]: Copied! <pre>def position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n</pre> def position_alphabet(lettre):     return ALPHABET.find(lettre) In\u00a0[\u00a0]: Copied! <pre>def cesar(message, decalage):\n    resultat = ''\n    for ... in message :\n        if lettre in ALPHABET :\n            indice = ( ... )%26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</pre> def cesar(message, decalage):     resultat = ''     for ... in message :         if lettre in ALPHABET :             indice = ( ... )%26             resultat = resultat + ALPHABET[indice]         else:             resultat = ...     return resultat"},{"location":"officiels/Annales/EP/2022/22-NSI-12/22-NSI-12/","title":"22 NSI 12","text":"In\u00a0[\u00a0]: Copied! <pre>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice. \n    #Au debut, la zone non triee est le tableau entier.\n    i= ...\n    j= ...\n    while i != j :\n        if tab[i]== 0:\n            i= ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j= ...\n    ...\n</pre> def tri(tab):     #i est le premier indice de la zone non triee, j le dernier indice.      #Au debut, la zone non triee est le tableau entier.     i= ...     j= ...     while i != j :         if tab[i]== 0:             i= ...         else :             valeur = tab[j]             tab[j] = ...             ...             j= ...     ..."},{"location":"officiels/Annales/EP/2022/22-NSI-13/22-NSI-13/","title":"22 NSI 13","text":"In\u00a0[\u00a0]: Copied! <pre>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</pre> class Maillon :     def __init__(self,v) :         self.valeur = v         self.suivant = None In\u00a0[\u00a0]: Copied! <pre>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...) \n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</pre> class File :     def __init__(self) :         self.dernier_file = None      def enfile(self,element) :         nouveau_maillon = Maillon(...)          nouveau_maillon.suivant = self.dernier_file         self.dernier_file = ...      def est_vide(self) :         return self.dernier_file == None      def affiche(self) :         maillon = self.dernier_file         while maillon != ... :             print(maillon.valeur)             maillon = ...      def defile(self) :         if not self.est_vide() :             if self.dernier_file.suivant == None :                 resultat = self.dernier_file.valeur                 self.dernier_file = None                 return resultat             maillon = ...             while maillon.suivant.suivant != None :                 maillon = maillon.suivant             resultat = ...             maillon.suivant = None             return resultat         return None"},{"location":"officiels/Annales/EP/2022/22-NSI-14/22-NSI-14/","title":"22 NSI 14","text":"In\u00a0[\u00a0]: Copied! <pre>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \n    \u00e0 un plan d'envoi de messages entre `N` personnes A, B, C, \n    D, E, F ...(avec N &lt;= 26).\n    Renvoie True si le plan d'envoi de messages est cyclique\n    et False sinon. \n    '''\n    personne = 'A'\n    N = len(...)                          \n    for i in range(...):\n        if plan[...] == ...:\n            return ...\n        else:\n            personne = ...\n    return ...\n</pre> def est_cyclique(plan):     '''     Prend en param\u00e8tre un dictionnaire `plan` correspondant      \u00e0 un plan d'envoi de messages entre `N` personnes A, B, C,      D, E, F ...(avec N &lt;= 26).     Renvoie True si le plan d'envoi de messages est cyclique     et False sinon.      '''     personne = 'A'     N = len(...)                               for i in range(...):         if plan[...] == ...:             return ...         else:             personne = ...     return ..."},{"location":"officiels/Annales/EP/2022/22-NSI-15/22-NSI-15/","title":"22 NSI 15","text":"In\u00a0[\u00a0]: Copied! <pre>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</pre> def binaire(a):     bin_a = str(...)     a = a // 2     while a ... :         bin_a = ...(a%2) + ...         a = ...     return bin_a"},{"location":"officiels/Annales/EP/2022/22-NSI-16/22-NSI-16/","title":"22 NSI 16","text":"In\u00a0[\u00a0]: Copied! <pre>def positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</pre> def positif(T):     T2 = ...(T)     T3 = ...     while T2 != []:         x = ...         if ... &gt;= 0:             T3.append(...)     T2 = []     while T3 != ...:         x = T3.pop()         ...     print('T = ',T)     return T2"},{"location":"officiels/Annales/EP/2022/22-NSI-17/22-NSI-17/","title":"22 NSI 17","text":"In\u00a0[\u00a0]: Copied! <pre>class Noeud:\n'''\n    Classe impl\u00e9mentant un noeud d'arbre binaire \n    disposant de 3 attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit.\n    '''\n    def __init__(self, v, g, d):\n        self.valeur = v\n        self.gauche = g\n        self.droite = d\n</pre> class Noeud:     '''     Classe impl\u00e9mentant un noeud d'arbre binaire      disposant de 3 attributs :     - valeur : la valeur de l'\u00e9tiquette,     - gauche : le sous-arbre gauche.     - droit : le sous-arbre droit.     '''     def __init__(self, v, g, d):         self.valeur = v         self.gauche = g         self.droite = d In\u00a0[\u00a0]: Copied! <pre>class ABR:\n'''\n    Classe impl\u00e9mentant une structure \n    d'arbre binaire de recherche.\n    '''\n    \n    def __init__(self):\n'''Cr\u00e9e un arbre binaire de recherche vide'''\n        self.racine = None\n        \n    def est_vide(self):\n'''Renvoie True si l'ABR est vide et False sinon.'''\n        return self.racine is None\n    \n    def parcours(self, tab = []):\n'''\n\t  Renvoie la liste tab compl\u00e9t\u00e9e avec tous les \n        \u00e9l\u00e9ments de \n        l'ABR tri\u00e9s par ordre croissant.\n        '''\n        if self.est_vide():\n            return tab\n        else:\n            self.racine.gauche.parcours(tab)\n            tab.append(...)\n            ...\n            return tab\n        \n    def insere(self, element):\n'''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''\n        if self.est_vide():\n            self.racine = Noeud(element, ABR(), ABR())\n        else:\n            if element &lt; self.racine.valeur:\n                self.racine.gauche.insere(element)\n            else : \n                self.racine.droite.insere(element)\n    \n    def recherche(self, element):\n'''\n        Renvoie True si element est pr\u00e9sent dans l'arbre \n        binaire et False sinon.\n\t '''\n        if self.est_vide():\n            return ...\n        else:\n            if element &lt; self.racine.valeur:\n                return ...\n            elif element &gt; self.racine.valeur:\n                return ...\n            else:\n                return ...\n</pre> class ABR:     '''     Classe impl\u00e9mentant une structure      d'arbre binaire de recherche.     '''          def __init__(self):         '''Cr\u00e9e un arbre binaire de recherche vide'''         self.racine = None              def est_vide(self):         '''Renvoie True si l'ABR est vide et False sinon.'''         return self.racine is None          def parcours(self, tab = []):         ''' \t  Renvoie la liste tab compl\u00e9t\u00e9e avec tous les          \u00e9l\u00e9ments de          l'ABR tri\u00e9s par ordre croissant.         '''         if self.est_vide():             return tab         else:             self.racine.gauche.parcours(tab)             tab.append(...)             ...             return tab              def insere(self, element):         '''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''         if self.est_vide():             self.racine = Noeud(element, ABR(), ABR())         else:             if element &lt; self.racine.valeur:                 self.racine.gauche.insere(element)             else :                  self.racine.droite.insere(element)          def recherche(self, element):         '''         Renvoie True si element est pr\u00e9sent dans l'arbre          binaire et False sinon. \t '''         if self.est_vide():             return ...         else:             if element &lt; self.racine.valeur:                 return ...             elif element &gt; self.racine.valeur:                 return ...             else:                 return ..."},{"location":"officiels/Annales/EP/2022/22-NSI-18/22-NSI-18/","title":"22 NSI 18","text":"In\u00a0[\u00a0]: Copied! <pre>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n       result = ...\n    return result\n</pre> def inverse_chaine(chaine):     result = ...     for caractere in chaine:        result = ...     return result In\u00a0[\u00a0]: Copied! <pre>def est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n</pre> def est_palindrome(chaine):     inverse = inverse_chaine(chaine)     return ... In\u00a0[\u00a0]: Copied! <pre>def est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</pre> def est_nbre_palindrome(nbre):     chaine = ...     return est_palindrome(chaine)"},{"location":"officiels/Annales/EP/2022/22-NSI-19/22-NSI-19/","title":"22 NSI 19","text":"In\u00a0[\u00a0]: Copied! <pre>def chercher(T,n,i,j):\n    if i &lt; 0 or ??? :\n        print(\"Erreur\")\n        return None    \n    if i &gt; j :\n        return None\n    m = (i+j) // ???\n    if T[m] &lt; ??? :\n        return chercher(T, n, ??? , ???)\n    elif ??? :\n        return chercher(T, n, ??? , ??? )\n    else :\n        return ???\n</pre> def chercher(T,n,i,j):     if i &lt; 0 or ??? :         print(\"Erreur\")         return None         if i &gt; j :         return None     m = (i+j) // ???     if T[m] &lt; ??? :         return chercher(T, n, ??? , ???)     elif ??? :         return chercher(T, n, ??? , ??? )     else :         return ???"},{"location":"officiels/Annales/EP/2022/22-NSI-20/22-NSI-20/","title":"22 NSI 20","text":"In\u00a0[\u00a0]: Copied! <pre>class Carre:\n    def __init__(self, tableau = [[]]):\n        self.ordre = len(tableau)\n        self.valeurs = tableau\n    \n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.valeurs[i])\n    \n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        return sum(self.valeurs[i])\n    \n    def somme_col(self, j):\n'''calcule la somme des valeurs de la colonne j'''\n        return sum([self.valeurs[i][j] for i in range(self.ordre)])\n</pre> class Carre:     def __init__(self, tableau = [[]]):         self.ordre = len(tableau)         self.valeurs = tableau          def affiche(self):         '''Affiche un carr\u00e9'''         for i in range(self.ordre):             print(self.valeurs[i])          def somme_ligne(self, i):         '''Calcule la somme des valeurs de la ligne i'''         return sum(self.valeurs[i])          def somme_col(self, j):         '''calcule la somme des valeurs de la colonne j'''         return sum([self.valeurs[i][j] for i in range(self.ordre)]) In\u00a0[\u00a0]: Copied! <pre>def est_magique(carre):\n    n = carre.ordre\n    s = carre.somme_ligne(0)\n        \n    #test de la somme de chaque ligne\n    for i in range(..., ...):\n        if carre.somme_ligne(i) != s:\n            return ...\n        \n    #test de la somme de chaque colonne\n    for j in range(n):\n        if ... != s:\n            return False\n         \n    #test de la somme de chaque diagonale\n    if sum([carre.valeurs[...][...] for k in range(n)]) != s:\n            return False\n    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:\n            return False\n    \n    return ...\n</pre> def est_magique(carre):     n = carre.ordre     s = carre.somme_ligne(0)              #test de la somme de chaque ligne     for i in range(..., ...):         if carre.somme_ligne(i) != s:             return ...              #test de la somme de chaque colonne     for j in range(n):         if ... != s:             return False               #test de la somme de chaque diagonale     if sum([carre.valeurs[...][...] for k in range(n)]) != s:             return False     if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:             return False          return ...    In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"officiels/Annales/EP/2022/22-NSI-21/22-NSI-21/","title":"22 NSI 21","text":"In\u00a0[\u00a0]: Copied! <pre>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n\n    debut = 0 \n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n             fin = ...\t\t\t\n    return ...\n</pre> def dichotomie(tab, x):     \"\"\"         tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant         x : nombre entier         La fonction renvoie True si tab contient x et False sinon     \"\"\"      debut = 0      fin = len(tab) - 1     while debut &lt;= fin:         m = ...         if x == tab[m]:             return ...         if x &gt; tab[m]:             debut = m + 1         else:              fin = ...\t\t\t     return ..."},{"location":"officiels/Annales/EP/2022/22-NSI-22/22-NSI-22/","title":"22 NSI 22","text":"In\u00a0[\u00a0]: Copied! <pre>def crible(N):\n\"\"\"renvoie un tableau contenant tous les nombres premiers plus petit que N\"\"\"\n    premiers = []\n    tab = [True] * N\n    tab[0], tab[1] = False, False\n    for i in range(..., N):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, N, ...):\n                tab[multiple] = ...\n    return premiers\n</pre> def crible(N):     \"\"\"renvoie un tableau contenant tous les nombres premiers plus petit que N\"\"\"     premiers = []     tab = [True] * N     tab[0], tab[1] = False, False     for i in range(..., N):         if tab[i] == ...:             premiers.append(...)             for multiple in range(2*i, N, ...):                 tab[multiple] = ...     return premiers In\u00a0[\u00a0]: Copied! <pre>assert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</pre> assert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]"},{"location":"officiels/Annales/EP/2022/22-NSI-23/22-NSI-23/","title":"22 NSI 23","text":"In\u00a0[\u00a0]: Copied! <pre>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n</pre> class Pile:     \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"     def __init__(self):         self.contenu = []      def est_vide(self):         \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"         return self.contenu == []      def empiler(self, v):         \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"         self.contenu.append(v)      def depiler(self):         \"\"\"         Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,         si la pile n\u2019est pas vide.         \"\"\"         if not self.est_vide():             return self.contenu.pop() In\u00a0[\u00a0]: Copied! <pre>def eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</pre> def eval_expression(tab):     p = Pile()     for ... in tab:         if element != '+' ... element != '*':             p.empiler(...)         else:             if element == ...:                 resultat = p.depiler() + ...             else:                 resultat = ...             p.empiler(...)     return ..."},{"location":"officiels/Annales/EP/2022/22-NSI-24/22-NSI-24/","title":"22 NSI 24","text":"In\u00a0[\u00a0]: Copied! <pre>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self, valeurs=[]):\n        self.valeurs = valeurs\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</pre> class Pile:     \"\"\" Classe d\u00e9finissant une pile \"\"\"     def __init__(self, valeurs=[]):         self.valeurs = valeurs      def est_vide(self):         \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"         return self.valeurs == []      def empiler(self, c):         \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"         self.valeurs.append(c)      def depiler(self):         \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"         if self.est_vide() == False:             self.valeurs.pop() In\u00a0[\u00a0]: Copied! <pre>def parenthesage (ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</pre> def parenthesage (ch):     \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"     p = Pile()     for c in ch:         if c == ...:             p.empiler(c)         elif c == ...:             if p.est_vide():                 return ...             else:                 ...     return p.est_vide() In\u00a0[\u00a0]: Copied! <pre>assert parenthesage(\"((()())(()))\") == True\nassert parenthesage(\"())(()\") == False\nassert parenthesage(\"(())(()\") == False\n</pre> assert parenthesage(\"((()())(()))\") == True assert parenthesage(\"())(()\") == False assert parenthesage(\"(())(()\") == False"},{"location":"officiels/Annales/EP/2022/22-NSI-25/22-NSI-25/","title":"22 NSI 25","text":"In\u00a0[\u00a0]: Copied! <pre>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 \n\ttab v\u00e9rifie les conditions de l'exercice,\n    \tg et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n    \n    else:\n        nombre_de_triplets = (d - g)// ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</pre> def trouver_intrus(tab, g, d):     '''     Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d      dans la liste tab o\u00f9  \ttab v\u00e9rifie les conditions de l'exercice,     \tg et d sont des multiples de 3.     '''     if g == d:         return ...          else:         nombre_de_triplets = (d - g)// ...         indice = g + 3 * (nombre_de_triplets // 2)         if ... :             return ...         else:             return ..."},{"location":"officiels/Annales/EP/2022/22-NSI-26/22-NSI-26/","title":"22 NSI 26","text":"In\u00a0[\u00a0]: Copied! <pre>def separe(tab):\n    i = 0\n    j = ...\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = ...\n        else :\n            tab[i], tab[j] = ...\n            j = ...\n    return tab\n</pre> def separe(tab):     i = 0     j = ...     while i &lt; j :         if tab[i] == 0 :             i = ...         else :             tab[i], tab[j] = ...             j = ...     return tab"},{"location":"officiels/Annales/EP/2022/22-NSI-27/22-NSI-27/","title":"22 NSI 27","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_iteratif(tab):\n    for k in range( ... , 0, -1):\n        imax = ...\n        for i in range(0 , ... ):\n            if tab[i] &gt; ... :\n                imax = i\n        if tab[imax] &gt; ... :\n            ... , tab[imax] = tab[imax] , ...\n    return tab\n</pre> def tri_iteratif(tab):     for k in range( ... , 0, -1):         imax = ...         for i in range(0 , ... ):             if tab[i] &gt; ... :                 imax = i         if tab[imax] &gt; ... :             ... , tab[imax] = tab[imax] , ...     return tab"},{"location":"officiels/Annales/EP/2022/22-NSI-28/22-NSI-28/","title":"22 NSI 28","text":"In\u00a0[\u00a0]: Copied! <pre>def dec_to_bin(a):\n    bin_a = ...\n    a = a//2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</pre> def dec_to_bin(a):     bin_a = ...     a = a//2     while a ... :         bin_a = ... + bin_a         a = ...     return bin_a"},{"location":"officiels/Annales/EP/2022/22-NSI-29/22-NSI-29/","title":"22 NSI 29","text":"In\u00a0[\u00a0]: Copied! <pre>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n</pre> liste_eleves = ['a','b','c','d','e','f','g','h','i','j'] liste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24] In\u00a0[\u00a0]: Copied! <pre>def meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi =  ...\n    \n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n            \n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</pre> def meilleures_notes():     note_maxi = 0     nb_eleves_note_maxi = ...     liste_maxi =  ...          for compteur in range(...):         if liste_notes[compteur] == ...:             nb_eleves_note_maxi = nb_eleves_note_maxi + 1             liste_maxi.append(liste_eleves[...])         if liste_notes[compteur] &gt; note_maxi:             note_maxi = liste_notes[compteur]             nb_eleves_note_maxi = ...             liste_maxi = [...]                  return (note_maxi,nb_eleves_note_maxi,liste_maxi)"},{"location":"officiels/Annales/EP/2022/22-NSI-30/22-NSI-30/","title":"22 NSI 30","text":"In\u00a0[\u00a0]: Copied! <pre>def rom_to_dec (nombre):\n\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"\n\n    dico = {\"I\":1, \"V\":5, ...}\n    if len(nombre) == 1:\n        return ...`\n\n    else:\n        ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre\n\t\t ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite\n        nombre_droite = nombre[1:]\n    \n        \n        if dico[nombre[0]] &gt;= dico[nombre[1]]:\n            return dico[nombre[0]] + ...\n        else:\n            return ...\n</pre> def rom_to_dec (nombre):      \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"      dico = {\"I\":1, \"V\":5, ...}     if len(nombre) == 1:         return ...`      else:         ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre \t\t ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite         nombre_droite = nombre[1:]                       if dico[nombre[0]] &gt;= dico[nombre[1]]:             return dico[nombre[0]] + ...         else:             return ... In\u00a0[\u00a0]: Copied! <pre>assert rom_to_dec(\"CXLII\") == 142\n</pre> assert rom_to_dec(\"CXLII\") == 142"},{"location":"officiels/Annales/EP/2022/22-NSI-31/22-NSI-31/","title":"22 NSI 31","text":"In\u00a0[\u00a0]: Copied! <pre>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</pre> def rendu_monnaie_centimes(s_due, s_versee):     pieces = [1, 2, 5, 10, 20, 50, 100, 200]     rendu = ...     a_rendre = ...     i = len(pieces) - 1     while a_rendre &gt; ... :         if pieces[i] &lt;= a_rendre :             rendu.append(...)             a_rendre = ...         else :             i = ...     return rendu"},{"location":"officiels/Annales/EP/2022/22-NSI-32/22-NSI-32/","title":"22 NSI 32","text":"In\u00a0[\u00a0]: Copied! <pre>class AdresseIP:\n\n    def __init__(self, adresse):\n        self.adresse = ...\n   \n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n           la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")] \n        \n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n           r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n             \n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse \n           IP qui suit l\u2019adresse self\n           si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</pre> class AdresseIP:      def __init__(self, adresse):         self.adresse = ...         def liste_octet(self):         \"\"\"renvoie une liste de nombres entiers,            la liste des octets de l'adresse IP\"\"\"         return [int(i) for i in self.adresse.split(\".\")]               def est_reservee(self):         \"\"\"renvoie True si l'adresse IP est une adresse            r\u00e9serv\u00e9e, False sinon\"\"\"         return ... or ...                   def adresse_suivante(self):         \"\"\"renvoie un objet de AdresseIP avec l'adresse             IP qui suit l\u2019adresse self            si elle existe et False sinon\"\"\"         if ... &lt; 254:             octet_nouveau = ... + ...             return AdresseIP('192.168.0.' + ...)         else:             return False"},{"location":"officiels/Annales/EP/2022/22-NSI-33/22-NSI-33/","title":"22 NSI 33","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n        # A l'etape j, le sous-tableau L[0,j-1] est trie\n        # et on insere L[j] dans ce sous-tableau en determinant\n        # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n        while  i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n        \n        # si i != j, on decale le sous tableau L[i,j-1] d'un cran\n        # vers la droite et on place L[j] en position i\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</pre> def tri_insertion(L):     n = len(L)      # cas du tableau vide     if ...:         return L      for j in range(1,n):         e = L[j]         i = j          # A l'etape j, le sous-tableau L[0,j-1] est trie         # et on insere L[j] dans ce sous-tableau en determinant         # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].         while  i &gt; 0 and L[i-1] &gt; ...:             i = ...                  # si i != j, on decale le sous tableau L[i,j-1] d'un cran         # vers la droite et on place L[j] en position i         if i != j:             for k in range(j,i,...):                 L[k] = L[...]             L[i] = ...     return L"},{"location":"officiels/Annales/EP/2022/22-NSI-34/22-NSI-34/","title":"22 NSI 34","text":"In\u00a0[\u00a0]: Copied! <pre>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n</pre> def nbLig(image):     '''renvoie le nombre de lignes de l'image'''     return ... In\u00a0[\u00a0]: Copied! <pre>def nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n</pre> def nbCol(image):     '''renvoie la largeur de l'image'''     return ... In\u00a0[\u00a0]: Copied! <pre>def negatif(image):\n'''renvoie le negatif de l'image sous la forme \n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image \n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(len(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n</pre> def negatif(image):     '''renvoie le negatif de l'image sous la forme         d'une liste de listes'''      # on cree une image de 0 aux memes dimensions que le parametre image      L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]      for i in range(len(image)):         for j in range(...):             L[i][j] = ...     return L In\u00a0[\u00a0]: Copied! <pre>def binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme \n       d'une liste de listes contenant des 0 si la valeur \n       du pixel est strictement inferieure au seuil \n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image \n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] \n    \n    for i in range(len(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</pre> def binaire(image, seuil):     '''renvoie une image binarisee de l'image sous la forme         d'une liste de listes contenant des 0 si la valeur         du pixel est strictement inferieure au seuil         et 1 sinon'''      # on cree une image de 0 aux memes dimensions que le parametre image      L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]           for i in range(len(image)):         for j in range(...):             if image[i][j] &lt; ... :                 L[i][j] = ...             else:                 L[i][j] = ...     return L"},{"location":"officiels/Annales/EP/2022/22-NSI-35/22-NSI-35/","title":"22 NSI 35","text":"In\u00a0[\u00a0]: Copied! <pre>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau trie dans l'ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n\n    # cas ou x n'est pas compris entre les valeurs extremes\n    if (x &lt; tab[0]) or ...:\n        return False,2\n    \n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\t\t\t\n    return ...\n</pre> def dichotomie(tab, x):     \"\"\"         tab : tableau trie dans l'ordre croissant         x : nombre entier         La fonction renvoie True si tab contient x et False sinon     \"\"\"     # cas du tableau vide     if ...:         return False,1      # cas ou x n'est pas compris entre les valeurs extremes     if (x &lt; tab[0]) or ...:         return False,2          debut = 0     fin = len(tab) - 1     while debut &lt;= fin:         m = ...         if x == tab[m]:             return ...         if x &gt; tab[m]:             debut = m + 1         else:             fin = ...\t\t\t     return ..."},{"location":"officiels/Annales/EP/2022/22-NSI-36/22-NSI-36/","title":"22 NSI 36","text":"In\u00a0[\u00a0]: Copied! <pre>from math import sqrt   # import de la fonction racine carree\n</pre> from math import sqrt   # import de la fonction racine carree In\u00a0[\u00a0]: Copied! <pre>def distance(point1, point2): \n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n</pre> def distance(point1, point2):      \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"     return sqrt((...)**2 + (...)**2) In\u00a0[\u00a0]: Copied! <pre>assert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n</pre> assert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\" In\u00a0[\u00a0]: Copied! <pre>def plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant a la plus     \n    courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</pre> def plus_courte_distance(tab, depart):     \"\"\" Renvoie le point du tableau tab se trouvant a la plus          courte distance du point depart.\"\"\"     point = tab[0]     min_dist = ...     for i in range (1, ...):         if distance(tab[i], depart)...:             point = ...             min_dist = ...     return point In\u00a0[\u00a0]: Copied! <pre>assert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</pre> assert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\""},{"location":"officiels/Annales/EP/2022/22-NSI-37/22-NSI-37/","title":"22 NSI 37","text":"In\u00a0[\u00a0]: Copied! <pre>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n</pre> urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B'] In\u00a0[\u00a0]: Copied! <pre>def depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n</pre> def depouille(urne):     resultat = ...     for bulletin in urne:         if ...:             resultat[bulletin] = resultat[bulletin] + 1         else:             ...     return resultat In\u00a0[\u00a0]: Copied! <pre>def vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</pre> def vainqueur(election):     vainqueur = ''     nmax = 0     for candidat in election:         if ... &gt; ... :             nmax = ...             vainqueur = candidat     liste_finale = [nom for nom in election if election[nom] == ...]     return ... In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"officiels/Annales/EP/2022/22-NSI-38/22-NSI-38/","title":"22 NSI 38","text":"In\u00a0[\u00a0]: Copied! <pre>from random import randint\n</pre> from random import randint In\u00a0[\u00a0]: Copied! <pre>def plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre etait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre etait \",...)\n</pre> def plus_ou_moins():     nb_mystere = randint(1,...)     nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))     compteur = ...      while nb_mystere != ... and compteur &lt; ... :         compteur = compteur + ...         if nb_mystere ... nb_test:             nb_test = int(input(\"Trop petit ! Testez encore : \"))         else:             nb_test = int(input(\"Trop grand ! Testez encore : \"))      if nb_mystere == nb_test:         print (\"Bravo ! Le nombre etait \",...)         print(\"Nombre d'essais: \",...)     else:         print (\"Perdu ! Le nombre etait \",...)"},{"location":"officiels/Annales/EP/2022/22-NSI-39/22-NSI-39/","title":"22 NSI 39","text":"In\u00a0[\u00a0]: Copied! <pre>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n         [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n         [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n         [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n         [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n         [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n</pre> coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\          [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\          [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\          [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\          [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\          [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\          [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\          [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] In\u00a0[\u00a0]: Copied! <pre>def affiche(dessin):\n''' affichage d'une grille : les 1 sont repreente par \n        des \"*\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\",end=\"\")\n            else:\n                print(\"  \",end=\"\")\n        print()\n</pre> def affiche(dessin):     ''' affichage d'une grille : les 1 sont repreente par          des \"*\" , les 0 par deux espaces \"  \" '''     for ligne in dessin:         for col in ligne:             if col == 1:                 print(\" *\",end=\"\")             else:                 print(\"  \",end=\"\")         print() In\u00a0[\u00a0]: Copied! <pre>def zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n       element de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n</pre> def zoomListe(liste_depart,k):     '''renvoie une liste contenant k fois chaque         element de liste_depart'''     liste_zoom = ...     for elt in ... :         for i in range(k):             ...     return liste_zoom In\u00a0[\u00a0]: Copied! <pre>def zoomDessin(grille,k):\n'''renvoie une grille ou les lignes sont zoomees k fois \n       ET repetees k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</pre> def zoomDessin(grille,k):     '''renvoie une grille ou les lignes sont zoomees k fois         ET repetees k fois'''     grille_zoom=[]     for elt in grille:         liste_zoom = ...         for i in range(k):             ... .append(...)     return grille_zoom"},{"location":"officiels/Annales/EP/2022/22-NSI-40/22-NSI-40/","title":"22 NSI 40","text":"In\u00a0[\u00a0]: Copied! <pre>resultats = {'Dupont':{'DS1' : [15.5, 4],\n                       'DM1' : [14.5, 1],\n                       'DS2' : [13, 4],\n                       'PROJET1' : [16, 3],\n                       'DS3' : [14, 4]},\n             'Durand':{'DS1' : [6 , 4],\n                       'DM1' : [14.5, 1],\n                       'DS2' : [8, 4],\n                       'PROJET1' : [9, 3],\n                       'IE1' : [7, 2],\n                       'DS3' : [8, 4],\n                       'DS4' :[15, 4]}}\n</pre> resultats = {'Dupont':{'DS1' : [15.5, 4],                        'DM1' : [14.5, 1],                        'DS2' : [13, 4],                        'PROJET1' : [16, 3],                        'DS3' : [14, 4]},              'Durand':{'DS1' : [6 , 4],                        'DM1' : [14.5, 1],                        'DS2' : [8, 4],                        'PROJET1' : [9, 3],                        'IE1' : [7, 2],                        'DS3' : [8, 4],                        'DS4' :[15, 4]}} In\u00a0[\u00a0]: Copied! <pre>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</pre> def moyenne(nom):     if nom in ...:         notes = resultats[nom]         total_points = ...         total_coefficients = ...         for ...  in notes.values():             note , coefficient = valeurs             total_points = total_points + ... * coefficient             total_coefficients = ... + coefficient         return round( ... / total_coefficients , 1 )     else:         return -1"},{"location":"officiels/Annales/EP/2023/rename/","title":"Rename","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>import os\n</pre> import os In\u00a0[\u00a0]: Copied! <pre>for num  in range(1,46):\n    snum=str(num).zfill(2)\n    os.system(f\"mkdir 23-NSI-{snum}\")\n    os.system(f\"mv {snum}.pdf ./23-NSI-{snum}/23-NSI-{snum}.pdf\")\n    os.system(f\"mv {snum}.py ./23-NSI-{snum}/23-NSI-{snum}.py\")\n</pre> for num  in range(1,46):     snum=str(num).zfill(2)     os.system(f\"mkdir 23-NSI-{snum}\")     os.system(f\"mv {snum}.pdf ./23-NSI-{snum}/23-NSI-{snum}.pdf\")     os.system(f\"mv {snum}.py ./23-NSI-{snum}/23-NSI-{snum}.py\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"officiels/Annales/EP/2023/2023-S01/2022-S01/","title":"Corrig\u00e9 sujet 01 - Ann\u00e9e : 2022","text":"<p>Sujet 01 - 2022 </p>"},{"location":"officiels/Annales/EP/2023/2023-S01/2022-S01/#exercice-1","title":"Exercice 1","text":"\ud83d\udc0d Script Python<pre><code>def recherche(caractere,mot):\n    occurrence = 0\n    for c in mot:\n        if c == caractere:\n            occurrence += 1\n    return occurrence\n</code></pre> <p>Commentaires</p> <p>C'est un exercice classique de parcours d'un it\u00e9rable en comptant les occurrences d'apparition d'une valeur. Un parcours par \u00e9l\u00e9ment suffit, les indices des occurrences n'\u00e9tant pas utilis\u00e9es.</p>"},{"location":"officiels/Annales/EP/2023/2023-S01/2022-S01/#exercice-2","title":"Exercice 2","text":"\ud83d\udc0d Script Python<pre><code>Pieces = [100,50,20,10,5,2,1]\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\nreturn solution #(1)\np = Pieces[i]\nif p &lt;= arendre : #(2)\nsolution.append(p)\n        return rendu_glouton(arendre - p, solution, i)\n    else :\nreturn rendu_glouton(arendre, solution, i+1) #(3)\n</code></pre> <ol> <li>Lorsqu'il n'y a plus rien \u00e0 rendre on renvoie la solution</li> <li>Si la pi\u00e8ce est plus petite que la somme \u00e0 rendre on l'ajoute \u00e0 la solution et on diminue la somme \u00e0 rendre</li> <li>La pi\u00e8ce d\u00e9passe la somme \u00e0 rendre, on relance le processus en regardant la pi\u00e8ce suivante dans la liste</li> </ol> <p>Attention<ul> <li>Le code fourni utilise un objet mutable (une liste) comme param\u00e8tre par d\u00e9faut d'une fonction : \ud83d\udc0d Script Python<pre><code>def rendu_glouton(arendre, solution=[], i=0):\n</code></pre> C'est une tr\u00e8s mauvaise pratique car source d'erreurs, en effet la variable <code>solution</code> \u00e9tant mutable elle est modifi\u00e9e par la fonction lors d'un premier appel et ne sera donc plus vide lors des appels suivants. Pour constater le probl\u00e8me, faire plusieurs appels \u00e0 cette fonction sans sp\u00e9cifier les arguments ayant des valeurs par d\u00e9faut. Pour une solution \u00e0 ce probl\u00e8me, on pourra par exemple consulter ce site</li> </ul> </p>"},{"location":"officiels/Annales/EP/2023/2023-S01/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S01_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\nresultat = {}\nfor bulletin in urne:\nif bulletin in resultat:\nresultat[bulletin] = resultat[bulletin] + 1\n        else:\nresultat[bulletin] = 1\nreturn resultat\n\ndef vainqueur(election):\n    vainqueur = '' #(1)\n    nmax = 0\n    for candidat in election:\nif election[candidat] &gt; nmax :\nnmax = election[candidat]\nvainqueur = candidat #(2)\nliste_finale = [nom for nom in election if election[nom] == nmax]\nreturn liste_finale\n</code></pre> <ol> <li>Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient...</li> <li>Cette variable <code>vainqueur</code> est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.</li> </ol>"},{"location":"officiels/Annales/EP/2023/2023-S01_2/enonce/","title":"Enonce","text":"<p>Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S02_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S02_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>indices_maxi</code> qui prend en param\u00e8tre une liste <code>tab</code>, non vide, de nombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette liste et d\u2019autre part la liste des indices de la liste <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S02_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def positif(pile):\npile_1 = list(pile)\npile_2 = []\nwhile pile_1 != []:\nx = pile_1.pop()\nif x &gt;= 0:\npile_2.append(x)\nwhile pile_2 != []:\nx = pile_2.pop()\npile_1.append(x)\nreturn pile_1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S02_2/enonce/","title":"Enonce","text":"<p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>liste_1 = list(liste)</code> fait une copie de <code>liste</code>ind\u00e9pendante de <code>liste</code>, que l\u2019expression <code>x = liste.pop()</code> enl\u00e8ve le sommet de la pile <code>liste</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>liste.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>liste</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>liste</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>liste</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(pile):\n    pile_1 = ...(pile)\n    pile_2 = ...\n    while pile_1 != []:\n        x = ...\n        if ... &gt;= 0:\n            pile_2.append(...)\n    while pile_2 != ...:\n        x = pile_2.pop()\n        ...\n    return pile_1\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positif([-2])\n[]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S03_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S03_1/enonce/","title":"Enonce","text":"<p>Dans cet exercice, les nombres sont des entiers ou des flottants.</p> <p>\u00c9crire une fonction <code>moyenne</code> renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide, pass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme (<code>valeur</code>, <code>coefficient</code>) o\u00f9 <code>valeur</code> et <code>coefficient</code> sont des nombres positifs ou nuls. Si la somme des coefficients est nulle, la fonction renvoie <code>None</code>, si la somme des coefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des valeurs affect\u00e9es de leur coefficient.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre></p> <p>Dans le premier exemple la moyenne est calcul\u00e9e par la formule :</p> <p>\\(\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}\\)</p>"},{"location":"officiels/Annales/EP/2023/2023-S03_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n'''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\nliste_zoom = []\nfor elt in liste_depart:\nfor i in range(k):\nliste_zoom.append(elt)\nreturn liste_zoom\n\ndef zoomDessin(grille, k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom = []\n    for elt in grille:\nliste_zoom = zoomListe(elt, k)\nfor i in range(k):\ngrille_zoom.append(liste_zoom)\nreturn grille_zoom\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S03_2/enonce/","title":"Enonce","text":"<p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n'''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n'''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> \ud83d\udccb Texte<pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S04_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def a_doublon(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S04_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre une liste tri\u00e9e de nombres et renvoie <code>True</code> si la liste contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Par exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S04_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\nvoisins = voisinage(len(grille), ligne, colonne)\nfor l, c in voisins:\nif grille[l][c] != -1: # si ce n'est pas une bombe\ngrille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\ndef genere_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\ngrille[ligne][colonne] = -1 # place la bombe\nincremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\nreturn grille\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S04_2/enonce/","title":"Enonce","text":"<p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> \ud83d\udc0d Script Python<pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction <code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code> produit bien la liste donn\u00e9e en exemple.</p> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S05_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1,6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;=2 :\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S05_1/enonce/","title":"Enonce","text":"<p>\u00c9crire en python deux fonctions :</p> <ul> <li> <p><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de type <code>list</code> de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</p> </li> <li> <p><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de type <code>list</code> de <code>n</code> entiers entre 1 et 6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</p> </li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S05_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\nreturn len(image)\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\nreturn len(image[0])\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\nfor j in range(nbCol(image)):\nL[i][j] = 255 - image[i][j]\nreturn L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\nfor j in range(nbCol(image)):\nif image[i][j] &lt; seuil :\nL[i][j] = 0\nelse:\nL[i][j] = 1\nreturn L\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S05_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>Compl\u00e9ter le programme suivant : \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n'''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</code></pre></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174,\n207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186], [58, 81, 48, 230,\n168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S06_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S06_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S06_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\nreturn sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\nmin_dist = distance(point, depart)\nfor i in range (1, len(tab)):\nif distance(tab[i], depart) &lt; min_dist:\npoint = tab[i]\nmin_dist = distance(tab[i], depart)\nreturn point\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S06_2/enonce/","title":"Enonce","text":"<p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>Compl\u00e9ter le code des fonctions <code>distance</code> et <code>plus_courte_distance</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\ndef plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; distance((1, 0), (5, 3))\n5.0\n&gt;&gt;&gt; distance((1, 0), (0, 1))\n1.4142135623730951\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S07_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S07_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S07_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\nreturn romains[nombre]\nelif romains[nombre[0]] &gt;= romains[nombre[1]]:\nreturn romains[nombre[0]] + traduire_romain(nombre[1:])\nelse:\nreturn traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S07_2/enonce/","title":"Enonce","text":"<p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> \ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n\"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>traduire_romain</code> et le tester.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIII\")\n2023\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S08_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S08_1/enonce/","title":"Enonce","text":"<p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S08_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\nfor element in tab:\nif element != '+' and element != '*':\np.empiler(element)\nelse:\nif element == '+':\nresultat = p.depiler() + p.depiler()\nelse:\nresultat = p.depiler() * p.depiler()\np.empiler(resultat)\nreturn p.depiler()\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S08_2/enonce/","title":"Enonce","text":"<p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p>[3, 2, '*', 5, '+']. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S09_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S09_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S09_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\nm = (i + j) // 2\nif tab[m] &lt; n :\nreturn chercher(tab, n, m+1 , j)\nelif tab[m] &gt; n :\nreturn chercher(tab, n, i , m-1 )\nelse :\nreturn m\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S09_2/enonce/","title":"Enonce","text":"<p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ...\n    if ... &lt; n :\n        return chercher(tab, n, ... , ...)\n    elif ... &gt; n :\n        return chercher(tab, n, ... , ... )\n    else :\n        return ...\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S10_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def maxliste(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S10_1/enonce/","title":"Enonce","text":"<p>\u00c9crire la fonction <code>maxliste</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S10_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\ndef parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\nif c == '(':\np.empiler(c)\nelif c == ')':\nif p.est_vide():\nreturn False\nelse:\np.depiler()\nreturn p.est_vide()\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S10_2/enonce/","title":"Enonce","text":"<p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n\"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n\"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; parenthesage(\"(())(()\")\nFalse\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S11_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n    puissance = 0\n    total = 0\n    for i in range(len(tab)-1, -1, -1):\n        total += tab[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S11_1/enonce/","title":"Enonce","text":"<p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction <code>convertir</code> r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n\"\"\"\n    tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau tab\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S11_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\nvaleur_insertion = tab[i]\n# la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\nj = i\n# tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\nwhile j &gt; 0 and valeur_insertion &lt; tab[j-1]:\ntab[j] = tab[j-1]\nj = j - 1\ntab[j] = valeur_insertion\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S11_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>tab</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque \u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e.  </p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[...]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = ...\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]:\n            tab[j] = tab[j-1]\n            j = ...\n        tab[j] = ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6]\n&gt;&gt;&gt; tri_insertion(liste)\n&gt;&gt;&gt; liste\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S12_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute(cle, a): \n    if a is None:\n        a = ABR(None, cle, None)\n    elif cle &gt; a.cle:\n        a.droit = ajoute(cle, a.droit)\n    elif cle &lt; a.cle:\n        a.gauche = ajoute(cle, a.gauche)\n    return a\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S12_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la classe <code>ABR</code>, dont le constructeur est le suivant :</p> \ud83d\udc0d Script Python<pre><code>class ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n</code></pre> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> \ud83d\udc0d Script Python<pre><code>n0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nn3 = ABR(n0, 1, n2)\n</code></pre> <p>Dans tout le code, <code>None</code> correspondra \u00e0 un arbre vide.</p> <p>La classe <code>ABR</code> dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation (<code>__repr__</code> ), qui affiche entre parenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le contenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; abr1\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>ajoute(cle, a)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>  , et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie l\u2019arbre <code>a</code> inchang\u00e9.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = ajoute(4, abr1)\n&gt;&gt;&gt; a\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n\n&gt;&gt;&gt; ajoute(-5, abr1)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n\n&gt;&gt;&gt; ajoute(2, abr1)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S12_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def empaqueterR(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\nfor masse in liste_masses :\ni = 0\nwhile i &lt;= nb_boites and boites[i] + masse &gt; c:\ni = i + 1\n        if i == nb_boites + 1:\nnb_boites = nb_boites + 1\nboites[i] = boites[i] + masse\nreturn nb_boites + 1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S12_2/enonce/","title":"Enonce","text":"<p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> \ud83d\udc0d Script Python<pre><code>def empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in ... :\n        i = 0\n        while i &lt;= nb_boites and boites[i] + ... &gt; C:\n            i = i + 1\n        if i == nb_boites + 1:\n            ...\n        boites[i] = ...\n    return ...\n</code></pre> <p>Tester ensuite votre fonction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S13_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(a, tab):\n    nb = 0\n    for element in tab:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S13_1/enonce/","title":"Enonce","text":"<p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>tab</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5, [])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5, [-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S13_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\nrendu = []\na_rendre = somme_versee - somme_due\ni = len(pieces) - 1\nwhile a_rendre &gt; 0 :\nif pieces[i] &lt;= a_rendre :\nrendu.append(pieces[i])\na_rendre = a_rendre - pieces[i]\nelse :\ni = i - 1\nreturn rendu\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S13_2/enonce/","title":"Enonce","text":"<p>La fonction <code>rendu_monnaie</code> prend en param\u00e8tres deux nombres entiers positifs <code>somme_due</code> et <code>somme_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>somme_versee \u2013 somme_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on assimilera les billets \u00e0 des pi\u00e8ces.</p> <p>La fonction <code>rendu_monnaie</code> renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102,500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S14_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n'''\n    renvoie l\u2019indice de la premi\u00e8re occurrence de\n    elt dans tab si elt est dans tab et -1 sinon. \n    '''\n    assert tab != [], \"le tableau est vide\"\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S14_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S14_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n\"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\ni = len(l) - 2\nwhile a &lt; l[i] and i &gt;= 0:\nl[i+1] = l[i]\nl[i] = a\ni = i - 1\nreturn l\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S14_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n\"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3, [1, 2, 4, 5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(30, [1, 2, 7, 12, 14, 25])\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere(1, [2, 3, 4])\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere(1, [])\n[1]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S15_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S15_1/enonce/","title":"Enonce","text":"<p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres un tableau <code>releve</code> des relev\u00e9s et un tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S15_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\nresult = ''\nfor caractere in chaine:\nresult = caractere + result\nreturn result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\nreturn chaine == inverse\ndef est_nbre_palindrome(nbre):\nchaine = str(nbre)\nreturn est_palindrome(chaine)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S15_2/enonce/","title":"Enonce","text":"<p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S16_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S16_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et une liste d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs de la liste <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S16_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\nif nom in dico_result:\nnotes = dico_result[nom]\ntotal_points = 0.\ntotal_coefficients = 0\nfor valeurs  in notes.values():\nnote, coefficient = valeurs\ntotal_points = total_points + note * coefficient\ntotal_coefficients = total_coefficients + coefficient\nreturn round( total_points / total_coefficients, 1 )\nelse:\n        return -1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S16_2/enonce/","title":"Enonce","text":"<p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4],\n                        'DS4':[15, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\n    if nom in ...:\n        notes = dico_result[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S17_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S17_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne(liste_notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans la liste <code>liste_notes</code>, non vide, donn\u00e9e en param\u00e8tre. Cette liste contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p>"},{"location":"officiels/Annales/EP/2023/2023-S17_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\nfor k in range(1, n+1):\nligne_k = [1]\nfor i in range(1, k):\nligne_k.append(triangle[k-1][i-1] + triangle[k-1][i])\nligne_k.append(1)\ntriangle.append(ligne_k)\n    return triangle\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S17_2/enonce/","title":"Enonce","text":"<p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s prenant en param\u00e8tre un entier <code>n</code> sup\u00e9rieur ou \u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la ligne 0 \u00e0 la ligne <code>n</code>. Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la variable <code>triangle</code>.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\n    for k in range(1,...):\n        ligne_k = [...]\n        for i in range(1,k):\n            ligne_k.append(triangle[...][i-1]+triangle[...][...])\n        ligne_k.append(...)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S18_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def max_et_indice(tab):\n'''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans cette liste.\n    '''\n    assert tab != [], 'le tableau est vide'\n\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S18_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre une liste non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S18_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\nfor i in range(1, len(tab)+1):\nif i not in tab:\nreturn False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert est_un_ordre(ordre) # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\nif ordre[0] != 1: # le premier n'est pas 1\nnb = nb + 1\n    i = 0\nwhile i &lt; n-1:\nif ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1\nnb = nb + 1\n        i = i + 1\nif ordre[n-1] != n: # le dernier n'est pas n\nnb = nb + 1\n    return nb\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S18_2/enonce/","title":"Enonce","text":"<p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> \ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1,...):\n        if ...:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert ... # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; ...:\n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[...] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S19_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S19_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S19_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\nfor c in message:\nif 'A' &lt;= c and c &lt;= 'Z':\nindice = (position_alphabet(c) + decalage) % 26\nresultat = resultat + ALPHABET[indice]\n        else:\nresultat = resultat + c\nreturn resultat\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S19_2/enonce/","title":"Enonce","text":"<p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S20_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute_dictionnaires(d1, d2):\nfor cle in d2:\n    if cle in d1:\n        d1[cle] += d2[cle]\n    else:\n        d1[cle] = d2[cle]\nreturn d1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S20_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire d est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S20_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\nn = 0\ncases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\nwhile len(cases_vues) &lt; nbre_cases:\nx = randint(1, 6)\ncase_en_cours = (case_en_cours + x) % nbre_cases\nif case_en_cours not in cases_vues:\ncases_vues.append(case_en_cours)\nn = n + 1\nreturn n\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S20_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nbre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <p>Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\n    n = ...\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while ... &lt; ...:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ...\n        if ...:\n            cases_vues.append(case_en_cours)\n        n = ...\n    return n\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S21_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S21_1/enonce/","title":"Enonce","text":"<p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S21_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\ns = ''\nif e.gauche is not None:\ns = '(' + s + expression_infixe(e.gauche)\ns = s + str(e.valeur)\nif e.droit is not None:\ns = s + expression_infixe(e.droit) + ')'\nreturn s\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S21_2/enonce/","title":"Enonce","text":"<p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n'''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S22_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def liste_puissances(a,n):\n    puissances = [a]\n    for i in range(n-1):\n        puissances.append(puissances[-1] * a)\n    return puissances\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S22_1/enonce/","title":"Enonce","text":"<p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet \\(n\\) fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en argument un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en argument un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S22_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\ncode_additionne = 0\nfor c in mot:\ncode_concatene = code_concatene + str(dico[c])\ncode_additionne = code_additionne + dico[c]\ncode_concatene = int(code_concatene)\nif code_concatene % code_additionne == 0:\nmot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S22_2/enonce/","title":"Enonce","text":"<p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = ...\n    for c in mot:\n        code_concatene = code_concatene + ...\n        code_additionne = ...\n    code_concatene = int(code_concatene)\n    if ... :\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S23_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux, num_enclos):\n    table = []\n    for animal in table_animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S23_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>. Voici un exemple d'une telle table :</p> \ud83d\udc0d Script Python<pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>table_animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>table_animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S23_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\nreturn tab[g]\nelse:\nnombre_de_triplets = (d - g) // 3\nindice = g + 3 * (nombre_de_triplets // 2)\nif tab[indice] != tab[indice + 1] :\nreturn trouver_intrus(tab, g, indice)\nelse:\nreturn trouver_intrus(tab, indice + 3, d)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S23_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S24_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S24_1/enonce/","title":"Enonce","text":"<p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p>"},{"location":"officiels/Annales/EP/2023/2023-S24_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def fusion(lst1, lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\nwhile i1 &lt; n1 and i2 &lt; n2 :\nif lst1[i1] &lt; lst2[i2]:\nlst12[i] = lst1[i1]\ni1 = i1 + 1\nelse:\n            lst12[i] = lst2[i2]\ni2 = i2 + 1\ni += 1\n    while i1 &lt; n1:\nlst12[i] = lst1[i1]\ni1 = i1 + 1\ni = i + 1\nwhile i2 &lt; n2:\nlst12[i] = lst2[i2]\ni2 = i2 + 1\ni = i + 1\nreturn lst12\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S24_2/enonce/","title":"Enonce","text":"<p>La fonction <code>fusion</code> prend deux listes <code>lst1</code>, <code>lst2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>lst12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction <code>fusion</code> est</p> \ud83d\udc0d Script Python<pre><code>def fusion(lst1,lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = ...\n            i1 = ...\n        else:\n            lst12[i] = lst2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        lst12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return lst12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S25_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def enumere(L):\n    d = {}\n    for i in range(len(L)):\n        if L[i] in d:\n            d[L[i]].append(i)\n        else:\n            d[L[i]] = [i]\n    return d\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S25_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre une liste <code>L</code> et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>L</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans la liste <code>L</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S25_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n    un arbre binaire de recherche.\n\"\"\"\nif cle &lt; arbre.v:\nif arbre.fg is not None:\ninsere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\nif arbre.fd is not None:\ninsere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = Arbre(5)\n&gt;&gt;&gt; insere(a, 2)\n&gt;&gt;&gt; insere(a, 7)\n&gt;&gt;&gt; insere(a, 3)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; insere(a, 1)\n&gt;&gt;&gt; insere(a, 4)\n&gt;&gt;&gt; insere(a, 6)\n&gt;&gt;&gt; insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S25_2/enonce/","title":"Enonce","text":"<p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code> qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette <code>cle</code> en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</p> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\n    if ...:\n        if ...:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if ...:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S26_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S26_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S26_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut + fin) // 2\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m - 1\nreturn False\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S26_2/enonce/","title":"Enonce","text":"<p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S27_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S27_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S27_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\ndroite = len(tab) - 1\nwhile gauche &lt; droite :\n        if tab[gauche] == 0 :\ngauche = gauche + 1\nelse :\ntab[gauche], tab[droite] = tab[droite], tab[gauche]\ndroite = droite - 1\nreturn tab\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S27_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\n    droite = ...\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = ...\n        else :\n            tab[gauche], tab[droite] = ...\n            droite = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : <code>tab = [1, 0, 1, 0, 1, 0, 1, 0]</code></p> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <p>Compl\u00e9ter la fonction <code>separe</code> pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente</p>"},{"location":"officiels/Annales/EP/2023/2023-S28_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S28_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n'''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7]) == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S28_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\nif tab == []:\nreturn False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\nif (x &lt; tab[0]) or (x &gt; tab[-1]):\nreturn False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\nm = (debut + fin) // 2\nif x == tab[m]:\nreturn True\nif x &gt; tab[m]:\n            debut = m + 1\n        else:\nfin = m - 1\nreturn False, 3\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S28_2/enonce/","title":"Enonce","text":"<p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S29_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def taille(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + taille(a.fg) + taille(a.fd)\n\ndef hauteur(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + max(hauteur(a.fg), hauteur(a.fd))\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>a = Arbre(0)\na.fg = Arbre(1)\na.fd = Arbre(2)\na.fg.fg = Arbre(3)\na.fd.fg = Arbre(4)\na.fd.fd = Arbre(5)\na.fd.fg.fd = Arbre(6)\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a)\n7\n&gt;&gt;&gt; hauteur(a)\n4\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S29_1/enonce/","title":"Enonce","text":"<p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : \ud83d\udc0d Script Python<pre><code>a = Arbre(1)\na.fg = Arbre(4)\na.fd = Arbre(0)\na.fd.fd = Arbre(7)\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>Si un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1. S\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0.</p> <p>Tester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous :</p> <p></p>"},{"location":"officiels/Annales/EP/2023/2023-S29_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\nif indice &lt; nbre_elts:\nfor i in range(indice):\nL[i] = liste[i]\nL[indice] = element\nfor i in range(indice + 1, nbre_elts + 1):\nL[i] = liste[i-1]\nelse:\n        for i in range(nbre_elts):\nL[i] = liste[i]\nL[nbre_elts] = element \nreturn L\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S29_2/enonce/","title":"Enonce","text":"<p>La m\u00e9thode <code>insert</code> de la classe <code>list</code> permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un <code>indice</code> donn\u00e9.</p> <p>Le but de cet exercice est, sans utiliser cette m\u00e9thode, d\u2019\u00e9crire une fonction <code>ajoute</code> r\u00e9alisant cette insertion en produisant une nouvelle liste.</p> <p>Cette fonction <code>ajoute</code> prend en param\u00e8tres trois variables <code>indice</code>, <code>element</code> et <code>liste</code> et renvoie une liste <code>L</code> dans laquelle les \u00e9l\u00e9ments sont ceux de la liste <code>liste</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>. On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>liste</code> sont \u00e9galement des entiers positifs. Les \u00e9l\u00e9ments de la liste <code>liste</code>, dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans la liste <code>L</code>. Si <code>indice</code> est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste <code>liste</code>, l\u2019\u00e9l\u00e9ment element est ajout\u00e9 dans <code>L</code> apr\u00e8s tous les \u00e9l\u00e9ments de la liste <code>liste</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre></p> <p>Compl\u00e9ter et tester le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if ...:\n        for i in range(indice):\n            L[i] = ...\n        L[...] = ...\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = ...\n    else:\n        for i in range(nbre_elts):\n            L[i] = ...\n        L[...] = ...\n    return L\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S30_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S30_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S30_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a\na = a // 2\nreturn bin_a\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S30_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>binaire</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S31_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S31_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S31_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def binaire(a):\nbin_a = str(a%2)\na = a // 2\nwhile a != 0 :\nbin_a = str(a%2) + bin_a\na = a // 2\nreturn bin_a\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S31_2/enonce/","title":"Enonce","text":"<p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S32_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S32_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S32_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\nself.contenu = [Carte(c, v) for c in range(1, 5) for v in range(1, 14)]  \ndef get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\nassert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\nreturn self.contenu[pos]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S32_2/enonce/","title":"Enonce","text":"<p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>get_carte</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        # A compl\u00e9ter\n\n    def get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        # A compl\u00e9ter\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>Exemple :\n&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.get_carte(20)\n&gt;&gt;&gt; print(carte1.get_valeur() + \" de \" + carte1.get_couleur())\n8 de coeur\n&gt;&gt;&gt; carte2 = jeu.get_carte(0)\n&gt;&gt;&gt; print(carte2.get_valeur() + \" de \" + carte2.get_couleur())\nAs de pique\n&gt;&gt;&gt; carte3 = jeu.get_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S33_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre> <p>ou plus simplement :</p> \ud83d\udc0d Script Python<pre><code>def taille(arbre, lettre):\n    if lettre == '':\n        return 0\n    return 1 + taille(arbre, arbre[lettre][0]) + taille(arbre, arbre[lettre][1])\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S33_1/enonce/","title":"Enonce","text":"<p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S33_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\nfor k in range(N):\nimin = k\nfor i in range(k, N):\nif tab[i] &lt; tab[imin] :\nimin = i\ntab[k] , tab[imin] = tab[imin] , tab[k]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S33_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>La code de la fonction <code>tri_selection</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\n    for k in range(...):\n        imin = ...\n        for i in range(... , N):\n            if tab[i] &lt; ... :\n                imin = i\n        ... , tab[imin] = tab[imin] , ...\n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et de <code>b</code>.</p>"},{"location":"officiels/Annales/EP/2023/2023-S34_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S34_1/enonce/","title":"Enonce","text":"<p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S34_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\ni = 0\nj = len(tab) - 1\nwhile i != j :\n        if tab[i] == 0:\ni = i + 1\nelse :\n            valeur = tab[j]\ntab[j] = tab[i]\ntab[i] = valeur\nj = j - 1\nreturn tab\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S34_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> Zone de 0Zone non tri\u00e9eZone de 1 <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = ...\n    j = ...\n    while i != j:\n        if tab[i]== 0:\n            i = ...\n        else:\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S35_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> \ud83d\udc0d Script Python<pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> \ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S35_1/enonce/","title":"Enonce","text":"<p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>a = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n</code></pre> <p>\u00c9crire la fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <p>En consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ou_exclusif(a, b)\n[1, 1, 0, 1, 1, 0, 0, 1])\n&gt;&gt;&gt; ou_exclusif(c, d)\n[1, 1, 1, 0]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S35_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\nfor i in range(self.ordre):\nif self.somme_ligne(i) != s:\nreturn False\n#test de la somme de chaque colonne\nfor j in range(self.ordre):\nif self.somme_col(j) != s:\nreturn False\nreturn True\n</code></pre> <p>Tests avec :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S35_2/enonce/","title":"Enonce","text":"<p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = (3, 4, 5, 4, 4, 4, 5, 4, 3)\n&gt;&gt;&gt; c3 = Carre(liste, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. Puis tester la fonction <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S36_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S36_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre une liste de nombres entiers <code>tab</code> non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S36_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\nif M[i][j] == 1:\nM[i][j] = val\n\n    # l'element en haut fait partie de la composante\nif i-1 &gt;= 0 and M[i-1][j] == 1:\npropager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\nif i+1 &lt; len(M) and M[i+1][j] == 1:\npropager(M, i+1, j, val)\n# l'element \u00e0 gauche fait partie de la composante\nif j-1 &gt;= 0 and M[i][j-1] == 1:\npropager(M, i, j-1, val)\n# l'element \u00e0 droite fait partie de la composante\nif j+1 &lt; len(M[i]) and M[i][j+1] == 1:\npropager(M, i, j+1, val)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S36_2/enonce/","title":"Enonce","text":"<p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et unevaleur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j] == ...:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == ...:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if ... &lt; len(M) and M[i+1][j] == 1:\n        propager(M, ..., j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if ... and M[i][j-1] == 1:\n        propager(M, ..., ..., val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if ... and ...:\n        propager(..., ..., ..., ...)\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; propager(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S37_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return -1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S37_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S37_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\nself.adresse = adresse\ndef liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\nreturn self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\ndef adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\nif self.liste_octet()[3] &lt; 254:\noctet_nouveau = self.liste_octet()[3] + 1\nreturn AdresseIP('192.168.0.' + str(octet_nouveau))\nelse:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S37_2/enonce/","title":"Enonce","text":"<p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S38_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S38_1/enonce/","title":"Enonce","text":"<p>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res <code>*</code>. Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S38_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\ndestinataire = plan[expediteur]\nnb_destinaires = 1\nwhile destinataire != expediteur:\ndestinataire = plan[destinataire]\nnb_destinaires += 1\nreturn nb_destinaires == len(plan)\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S38_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>Remarque : la fonction python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[ ... ]\n    nb_destinaires = 1\n\n    while destinataire != ...:\n        destinataire = plan[ ... ]\n        nb_destinaires += ...\n\n    return nb_destinaires == ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S39_1/correction/","title":"Correction","text":"<p>Version r\u00e9cursive :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    if n == 1 :\n        return 1   \n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version imp\u00e9rative : \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    a = 1\n    b = 1\n    for k in range(n-2):\n        t = b\n        b = a + b\n        a = t\n    return b\n</code></pre></p> <p>Version programmation dynamique :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> <p>On peut constater que la version r\u00e9cursive \u00e9choue \u00e0 calculer <code>fibonacci(45)</code>, alors que les deux autres versions le font quasi-imm\u00e9diatement. </p>"},{"location":"officiels/Annales/EP/2023/2023-S39_1/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premiers termes sont \u00e9gaux \u00e0 1,</li> <li>ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le pr\u00e9c\u00e8dent.</li> </ul> <p>En math\u00e9matiques, on le formule ainsi :</p> <p>\\(U_1 = 1\\), \\(U_2 = 1\\) et, pour tout entier naturel non nul \\(n\\), par \\(U_{n+2} = U_{n+1} + U_n\\).</p> <p>Cette suite est connue sous le nom de suite de Fibonacci. \u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S39_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\nmeilleurs_eleves =  []\nfor i in range(len(eleves)) :\nif notes[i] == note_maxi :\nmeilleurs_eleves.append(eleves[i])\nelif notes[i] &gt; note_maxi:\nnote_maxi = notes[i]\nmeilleurs_eleves = [eleves[i]]\nreturn (note_maxi, meilleurs_eleves)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S39_2/enonce/","title":"Enonce","text":"<p>On consid\u00e8re la fonction <code>pantheon</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>. Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau. Ainsi, l\u2019instruction <code>pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> \ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; pantheon(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; pantheon([],[])\n(0, [])\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S40_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S40_1/enonce/","title":"Enonce","text":"<p>Pour cet exercice :</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Exemples :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S40_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\nif cle &lt; self.valeur:\n# on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\nself.gauche.inserer(cle)\nelse:\n                # on cr\u00e9e un fils gauche\nself.gauche = Noeud(cle)\nelif cle &gt; self.valeur:\n# on ins\u00e8re \u00e0 droite\nif self.droitExiste():\n# on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\nself.droit.inserer(cle)\nelse:\n                # on cr\u00e9e un fils droit\nself.droit = Noeud(cle)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S40_2/enonce/","title":"Enonce","text":"<p>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; ...:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = ...\n        elif cle &gt; ... :\n            # on ins\u00e8re \u00e0 droite\n            if ... :\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils droit\n                ... = Noeud(cle)\n</code></pre> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>inserer</code> afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9.</p> <p>Voici un exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.getValeur()\n3\n&gt;&gt;&gt; arbre.droit.getValeur()\n9\n&gt;&gt;&gt; arbre.gauche.gauche.getValeur()\n1\n&gt;&gt;&gt; arbre.gauche.droit.getValeur()\n6\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S41_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def recherche(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S41_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>recherche(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1), et <code>chaine</code>, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans chaine.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S41_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\nreturn []\nv = valeurs[rang]\nif v &lt;= a_rendre :\nreturn [v] + rendu_glouton(a_rendre - v, rang)\nelse :\nreturn rendu_glouton(a_rendre, rang + 1)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S41_2/enonce/","title":"Enonce","text":"<p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S42_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S42_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de nouvelle liste mais de modifier celle fournie.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1, 52, 6, -9, 12])\n[-9, 1, 6, 12, 52]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S42_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\nnb_mystere = randint(1,99)\nnb_test = int(input('Proposez un nombre entre 1 et 99 : '))\ncompteur = 1\nwhile nb_mystere != nb_test and compteur &lt; 10 :\ncompteur = compteur + 1\nif nb_mystere &gt; nb_test:\nnb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\nprint ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\nprint('Nombre d essais: ', compteur)\nelse:\nprint ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S42_2/enonce/","title":"Enonce","text":"<p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S43_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def ecriture_binaire_entier_positif(n):\n    # cas particulier pour n = 0\n    if n == 0:\n        return [0]\n    # cas g\u00e9n\u00e9ral\n    b = []\n    while n != 0:\n        b.append(n % 2)\n        n = n // 2\n    b.reverse()\n    return b\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S43_1/enonce/","title":"Enonce","text":"<p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n[0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n[1, 0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n[1, 1, 0, 1, 0, 0, 1]\n</code></pre> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p>"},{"location":"officiels/Annales/EP/2023/2023-S43_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n'''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\nfor i in range(n-1,-1,-1):\nfor j in range(i):\nif T[j] &gt; T[j+1]:\ntemp = T[j]\nT[j] = T[j+1]\nT[j+1] = temp\n    return T\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S43_2/enonce/","title":"Enonce","text":"<p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier la liste <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n'''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_bulles([])\n[]\n&gt;&gt;&gt; tri_bulles([7])\n[7]\n&gt;&gt;&gt; tri_bulles([9, 3, 7, 2, 3, 1, 6])\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tri_bulles([9, 7, 4, 3])\n[3, 4, 7, 9]\n</code></pre></p>"},{"location":"officiels/Annales/EP/2023/2023-S44_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S44_1/enonce/","title":"Enonce","text":"<p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene <code>mot</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S44_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def crible(n):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\nfor i in range(2, n):\nif tab[i] == True:\npremiers.append(i)\nfor multiple in range(2*i, n, i):\ntab[multiple] = False\nreturn premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S44_2/enonce/","title":"Enonce","text":"<p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code> strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> \ud83d\udc0d Script Python<pre><code>def crible(n):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(..., n):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, n, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p>"},{"location":"officiels/Annales/EP/2023/2023-S45_1/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def rangement_valeurs(notes_eval):\n    lst = [0]*11\n    for note in notes_eval:\n        lst[note] += 1\n    return lst\n\ndef notes_triees(effectifs_notes):\n    triees = []\n    for i in range(11):\n        if effectifs_notes[i] != 0:\n            for _ in range(effectifs_notes[i]):\n                triees.append(i)\n    return triees\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S45_1/enonce/","title":"Enonce","text":"<p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans une liste <code>notes_eval</code>.</p> <p>\u00c9crire une fonction <code>rangement_valeurs</code> prenant en param\u00e8tre la liste <code>notes_eval</code> et renvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est \u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de note 0, le terme de rang 1 le nombre de note 1, etc.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre la liste des effectifs des notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes des \u00e9l\u00e8ves.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n\n&gt;&gt;&gt; effectifs_notes = rangement_valeurs(notes_eval)\n&gt;&gt;&gt; effectifs_notes\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n\n&gt;&gt;&gt; notes_triees(effectifs_notes)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S45_2/correction/","title":"Correction","text":"\ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\nif q == 0:\nreturn str(r)\n    else:\nreturn dec_to_bin(q) + str(r)\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\nelif nb_bin == '1':\nreturn 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\nbit_droit = 1\nreturn 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre>"},{"location":"officiels/Annales/EP/2023/2023-S45_2/enonce/","title":"Enonce","text":"<p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...:\n        return str(r)\n    else:\n        return dec_to_bin(...) + ...\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif ...:\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ...\n</code></pre>"},{"location":"officiels/Annales/EP/2023/23-NSI-01/23-NSI-01/","title":"23 NSI 01","text":"In\u00a0[\u00a0]: Copied! <pre>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n</pre> urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B'] In\u00a0[\u00a0]: Copied! <pre>def depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n</pre> def depouille(urne):     resultat = ...     for bulletin in urne:         if ...:             resultat[bulletin] = resultat[bulletin] + 1         else:             ...     return resultat In\u00a0[\u00a0]: Copied! <pre>def vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</pre> def vainqueur(election):     vainqueur = ''     nmax = 0     for candidat in election:         if ... &gt; ... :             nmax = ...             vainqueur = candidat     liste_finale = [nom for nom in election if election[nom] == ...]     return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-02/23-NSI-02/","title":"23 NSI 02","text":"In\u00a0[\u00a0]: Copied! <pre>def positif(pile):\n    pile_1 = ...(pile)\n    pile_2 = ...\n    while pile_1 != []:\n        x = ...\n        if ... &gt;= 0:\n            pile_2.append(...)\n    while pile_2 != ...:\n        x = pile_2.pop()\n        ...\n    return pile_1\n</pre> def positif(pile):     pile_1 = ...(pile)     pile_2 = ...     while pile_1 != []:         x = ...         if ... &gt;= 0:             pile_2.append(...)     while pile_2 != ...:         x = pile_2.pop()         ...     return pile_1"},{"location":"officiels/Annales/EP/2023/23-NSI-03/23-NSI-03/","title":"23 NSI 03","text":"In\u00a0[\u00a0]: Copied! <pre>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0],\n         [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n         [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n         [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n         [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n         [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n</pre> coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],          [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0],          [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],          [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],          [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],          [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],          [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],          [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] In\u00a0[\u00a0]: Copied! <pre>def affiche(dessin):\n''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par\n        des \" *\" , les 0 par deux espaces \"  \" \n        La valeur \"\" donn\u00e9e au param\u00e8tre end permet \n        de ne pas avoir de  saut de ligne. '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n</pre> def affiche(dessin):     ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par         des \" *\" , les 0 par deux espaces \"  \"          La valeur \"\" donn\u00e9e au param\u00e8tre end permet          de ne pas avoir de  saut de ligne. '''     for ligne in dessin:         for col in ligne:             if col == 1:                 print(\" *\", end=\"\")             else:                 print(\"  \", end=\"\")         print() In\u00a0[\u00a0]: Copied! <pre>def zoomListe(liste_depart, k):\n'''renvoie une liste contenant k fois chaque\n       \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n</pre> def zoomListe(liste_depart, k):     '''renvoie une liste contenant k fois chaque        \u00e9l\u00e9ment de liste_depart'''     liste_zoom = ...     for elt in ... :         for i in range(k):             ...     return liste_zoom In\u00a0[\u00a0]: Copied! <pre>def zoomDessin(grille, k):\n'''renvoie une grille ou les lignes sont zoom\u00e9es k fois\n       ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</pre> def zoomDessin(grille, k):     '''renvoie une grille ou les lignes sont zoom\u00e9es k fois        ET r\u00e9p\u00e9t\u00e9es k fois'''     grille_zoom=[]     for elt in grille:         liste_zoom = ...         for i in range(k):             ... .append(...)     return grille_zoom"},{"location":"officiels/Annales/EP/2023/23-NSI-04/23-NSI-04/","title":"23 NSI 04","text":"In\u00a0[\u00a0]: Copied! <pre>bombes = [(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)]\ngrille_test = [[1, 1, 1, 0, 0], [1, -1, 1, 1, 1], [2, 2, 3, 2, -1], [1, -1, 2, -1, 3], [1, 1, 2, 2, -1]]\n</pre> bombes = [(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)] grille_test = [[1, 1, 1, 0, 0], [1, -1, 1, 1, 1], [2, 2, 3, 2, -1], [1, -1, 2, -1, 3], [1, 1, 2, 2, -1]] In\u00a0[\u00a0]: Copied! <pre>def voisinage(n, ligne, colonne):\n\"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n        (ligne, colonne) en g\u00e8rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n</pre> def voisinage(n, ligne, colonne):     \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case         (ligne, colonne) en g\u00e8rant les cases sur les bords. \"\"\"     voisins = []     for l in range(max(0,ligne-1), min(n, ligne+2)):         for c in range(max(0, colonne-1), min(n, colonne+2)):             if (l, c) != (ligne, colonne):                 voisins.append((l,c))     return voisins In\u00a0[\u00a0]: Copied! <pre>def incr\u00e9mente_voisins(grille, ligne, colonne):\n\"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe. \"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  \t\t# on ajoute 1 \u00e0 sa valeur\n</pre> def incr\u00e9mente_voisins(grille, ligne, colonne):     \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe. \"\"\"     voisins = ...     for l, c in voisins:         if grille[l][c] != ...: # si ce n'est pas une bombe             ...  \t\t# on ajoute 1 \u00e0 sa valeur In\u00a0[\u00a0]: Copied! <pre>def g\u00e9n\u00e8re_grille(bombes):\n\"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n        le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n        la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n        param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ...  # place la bombe\n        ...  # incr\u00e9mente ses voisins\n\n    return grille\n</pre> def g\u00e9n\u00e8re_grille(bombes):     \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est         le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de         la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en         param\u00e8tre. \"\"\"     n = len(bombes)     # Initialisation d'une grille nxn remplie de 0     grille = [[0 for colonne in range(n)] for ligne in range(n)]      # Place les bombes et calcule les valeurs des autres cases     for ligne, colonne in bombes:         grille[ligne][colonne] = ...  # place la bombe         ...  # incr\u00e9mente ses voisins      return grille"},{"location":"officiels/Annales/EP/2023/23-NSI-05/23-NSI-05/","title":"23 NSI 05","text":"In\u00a0[\u00a0]: Copied! <pre>img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n</pre> img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174, 207, 25, 87], [255, 0, 24, 197, 189]] In\u00a0[\u00a0]: Copied! <pre>def nbLig(image):\n'''renvoie le nombre de lignes de l'image'''\n    return ...\n</pre> def nbLig(image):     '''renvoie le nombre de lignes de l'image'''     return ... In\u00a0[\u00a0]: Copied! <pre>def nbCol(image):\n'''renvoie la largeur de l'image'''\n    return ...\n</pre> def nbCol(image):     '''renvoie la largeur de l'image'''     return ... In\u00a0[\u00a0]: Copied! <pre>def negatif(image):\n'''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n</pre> def negatif(image):     '''renvoie le negatif de l'image sous la forme        d'une liste de listes'''      # on cree une image de 0 aux memes dimensions que le parametre image     L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]      for i in range(nbLig(image)):         for j in range(...):             L[i][j] = ...     return L In\u00a0[\u00a0]: Copied! <pre>def binaire(image, seuil):\n'''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</pre> def binaire(image, seuil):     '''renvoie une image binarisee de l'image sous la forme        d'une liste de listes contenant des 0 si la valeur        du pixel est strictement inferieure au seuil        et 1 sinon'''      # on cree une image de 0 aux memes dimensions que le parametre image     L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]      for i in range(nbLig(image)):         for j in range(...):             if image[i][j] &lt; ... :                 L[i][j] = ...             else:                 L[i][j] = ...     return L"},{"location":"officiels/Annales/EP/2023/23-NSI-06/23-NSI-06/","title":"23 NSI 06","text":"In\u00a0[\u00a0]: Copied! <pre>from math import sqrt   # import de la fonction racine carree\n</pre> from math import sqrt   # import de la fonction racine carree In\u00a0[\u00a0]: Copied! <pre>def distance(point1, point2):\n\"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n</pre> def distance(point1, point2):     \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"     return sqrt((...)**2 + (...)**2) In\u00a0[\u00a0]: Copied! <pre>def plus_courte_distance(tab, depart):\n\"\"\" Renvoie le point du tableau tab se trouvant a la plus\n    courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</pre> def plus_courte_distance(tab, depart):     \"\"\" Renvoie le point du tableau tab se trouvant a la plus     courte distance du point depart.\"\"\"     point = tab[0]     min_dist = ...     for i in range (1, ...):         if distance(tab[i], depart)...:             point = ...             min_dist = ...     return point"},{"location":"officiels/Annales/EP/2023/23-NSI-07/23-NSI-07/","title":"23 NSI 07","text":"In\u00a0[\u00a0]: Copied! <pre>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n</pre> romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000} In\u00a0[\u00a0]: Copied! <pre>def traduire_romain(nombre) :\n\"\"\" Renvoie l'ecriture decimale du nombre donn\u00c3\u00a9 en chiffres romains \"\"\"\n\n    if len(nombre) == 1:\n        return ...\n\n    elif romains[nombre[0]] &gt;= ... :\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</pre> def traduire_romain(nombre) :     \"\"\" Renvoie l'ecriture decimale du nombre donn\u00c3\u00a9 en chiffres romains \"\"\"      if len(nombre) == 1:         return ...      elif romains[nombre[0]] &gt;= ... :         return romains[nombre[0]] + ...     else:         return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-08/23-NSI-08/","title":"23 NSI 08","text":"In\u00a0[\u00a0]: Copied! <pre>class Pile:\n\"\"\"\n    Classe definissant une structure de pile.\n    \"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n\"\"\"\n        Renvoie le booleen True si la pile est vide, False sinon.\n        \"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n\"\"\"\n        Place l'element v au sommet de la pile\n        \"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n\"\"\"\n        Retire et renvoie l'element place au sommet de la pile,\n        si la pile n'est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n</pre> class Pile:     \"\"\"     Classe definissant une structure de pile.     \"\"\"     def __init__(self):         self.contenu = []      def est_vide(self):         \"\"\"         Renvoie le booleen True si la pile est vide, False sinon.         \"\"\"         return self.contenu == []      def empiler(self, v):         \"\"\"         Place l'element v au sommet de la pile         \"\"\"         self.contenu.append(v)      def depiler(self):         \"\"\"         Retire et renvoie l'element place au sommet de la pile,         si la pile n'est pas vide.         \"\"\"         if not self.est_vide():             return self.contenu.pop() In\u00a0[\u00a0]: Copied! <pre>def eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</pre> def eval_expression(tab):     p = Pile()     for ... in tab:         if element != '+' ... element != '*':             p.empiler(...)         else:             if element == ...:                 resultat = p.depiler() + ...             else:                 resultat = ...             p.empiler(...)     return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-09/23-NSI-09/","title":"-*- coding: utf-8 -*-","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab):\n        return None\n    elif i &gt; j:\n        return None\n    m = (i + j) // ...\n    if ... &lt; n:\n        return chercher(tab, n, ..., ...)\n    elif ... &gt; n:\n        return chercher(tab, n, ..., ...)\n    else:\n        return ...\n</pre> def chercher(tab, n, i, j):     if i &lt; 0 or j &gt; len(tab):         return None     elif i &gt; j:         return None     m = (i + j) // ...     if ... &lt; n:         return chercher(tab, n, ..., ...)     elif ... &gt; n:         return chercher(tab, n, ..., ...)     else:         return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-10/23-NSI-10/","title":"23 NSI 10","text":"In\u00a0[\u00a0]: Copied! <pre>class Pile:\n\"\"\"\n    Classe definissant une pile\n    \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n\"\"\"\n        Renvoie True si la pile est vide, False sinon\n        \"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n\"\"\"\n        Place l'element c au sommet de la pile\n        \"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n\"\"\"\n        Supprime l'element place au sommet de la pile, a condition qu'elle soit non vide\n        \"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</pre> class Pile:     \"\"\"     Classe definissant une pile     \"\"\"     def __init__(self):         self.valeurs = []      def est_vide(self):         \"\"\"         Renvoie True si la pile est vide, False sinon         \"\"\"         return self.valeurs == []      def empiler(self, c):         \"\"\"         Place l'element c au sommet de la pile         \"\"\"         self.valeurs.append(c)      def depiler(self):         \"\"\"         Supprime l'element place au sommet de la pile, a condition qu'elle soit non vide         \"\"\"         if self.est_vide() == False:             self.valeurs.pop() In\u00a0[\u00a0]: Copied! <pre>def parenthesage(ch):\n\"\"\"\n    Renvoie True si la chaine ch est bien parenthesee et False sinon\n    \"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</pre> def parenthesage(ch):     \"\"\"     Renvoie True si la chaine ch est bien parenthesee et False sinon     \"\"\"     p = Pile()     for c in ch:         if c == ...:             p.empiler(c)         elif c == ...:             if p.est_vide():                 return ...             else:                 ...     return p.est_vide()"},{"location":"officiels/Annales/EP/2023/23-NSI-11/23-NSI-11/","title":"Exercice 2","text":"In\u00a0[\u00a0]: Copied! <pre>liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6]\n</pre> liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6] In\u00a0[\u00a0]: Copied! <pre>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[...]\n        # la variable j sert \u00c3  d\u00c3\u00a9terminer o\u00c3\u00b9 placer la valeur \u00c3  ranger\n        j = ...\n        # tant qu'on a pas trouv\u00c3\u00a9 la place de l'\u00c3\u00a9l\u00c3\u00a9ment \u00c3  ins\u00c3\u00a9rer\n        # on d\u00c3\u00a9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]:\n            tab[j] = tab[j-1]\n            j = ...\n        tab[j] = ...\n</pre> def tri_insertion(tab):     n = len(tab)     for i in range(1, n):         valeur_insertion = tab[...]         # la variable j sert \u00c3  d\u00c3\u00a9terminer o\u00c3\u00b9 placer la valeur \u00c3  ranger         j = ...         # tant qu'on a pas trouv\u00c3\u00a9 la place de l'\u00c3\u00a9l\u00c3\u00a9ment \u00c3  ins\u00c3\u00a9rer         # on d\u00c3\u00a9cale les valeurs du tableau vers la droite         while j &gt; ... and valeur_insertion &lt; tab[...]:             tab[j] = tab[j-1]             j = ...         tab[j] = ..."},{"location":"officiels/Annales/EP/2023/23-NSI-11/23-NSI-11/#exercice-2","title":"Exercice 2\u00b6","text":""},{"location":"officiels/Annales/EP/2023/23-NSI-12/23-NSI-12/","title":"23 NSI 12","text":"In\u00a0[\u00a0]: Copied! <pre>#------------EXERCICE 1---------------------------\n#---------ajout d'une valeur dans un ABR----------\nclass ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n</pre> #------------EXERCICE 1--------------------------- #---------ajout d'une valeur dans un ABR---------- class ABR:     def __init__(self, g0, v0, d0):         self.gauche = g0         self.cle = v0         self.droit = d0      def __repr__(self):         if self is None:             return ''         else:             return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')' In\u00a0[\u00a0]: Copied! <pre>n0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nabr1 = ABR(n0, 1, n2)\n</pre> n0 = ABR(None, 0, None) n3 = ABR(None, 3, None) n2 = ABR(None, 2, n3) abr1 = ABR(n0, 1, n2) In\u00a0[\u00a0]: Copied! <pre>def ajoute(cle, a):\n    pass\n</pre> def ajoute(cle, a):     pass <p>------------EXERCICE 2--------------------------- -------algorithme glouton de mise en boite-------</p> In\u00a0[\u00a0]: Copied! <pre>def empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in ... :\n        i=0\n        while i &lt;= nb_boites and boites[i] + ... &gt; c:\n                i = i + 1\n        if i == nb_boites + 1:\n                ...\n        boites[i] = ...\n    return ...\n</pre> def empaqueter(liste_masses, c):     n = len(liste_masses)     nb_boites = 0     boites = [0]*n     for masse in ... :         i=0         while i &lt;= nb_boites and boites[i] + ... &gt; c:                 i = i + 1         if i == nb_boites + 1:                 ...         boites[i] = ...     return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-13/23-NSI-13/","title":"23 NSI 13","text":"In\u00a0[\u00a0]: Copied! <pre>pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n</pre> pieces = [1, 2, 5, 10, 20, 50, 100, 200] In\u00a0[\u00a0]: Copied! <pre>def rendu_monnaie(somme_due, somme_versee):\n\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</pre> def rendu_monnaie(somme_due, somme_versee):      rendu = ...     a_rendre = ...     i = len(pieces) - 1     while ... :         if pieces[i] &lt;= a_rendre :             rendu.append(...)             a_rendre = ...         else :             i = ...     return rendu"},{"location":"officiels/Annales/EP/2023/23-NSI-14/23-NSI-14/","title":"23 NSI 14","text":"In\u00a0[\u00a0]: Copied! <pre>def insere(a, tab):\n\"\"\" Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n        tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n        nouveau tableau. \"\"\"\n    l = list(tab) #l contient les memes elements que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0: \n      l[i+1] = ...\n      l[i] = a\n      i = ...\n    return l\n</pre> def insere(a, tab): \t\"\"\" Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)         tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le         nouveau tableau. \"\"\"     l = list(tab) #l contient les memes elements que tab     l.append(a)     i = ...     while a &lt; ... and i &gt;= 0:        l[i+1] = ...       l[i] = a       i = ...     return l"},{"location":"officiels/Annales/EP/2023/23-NSI-15/23-NSI-15/","title":"23 NSI 15","text":"In\u00a0[\u00a0]: Copied! <pre>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n       result = ...\n    return result\n</pre> def inverse_chaine(chaine):     result = ...     for caractere in chaine:        result = ...     return result In\u00a0[\u00a0]: Copied! <pre>def est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n</pre> def est_palindrome(chaine):     inverse = inverse_chaine(chaine)     return ... In\u00a0[\u00a0]: Copied! <pre>def est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</pre> def est_nbre_palindrome(nbre):     chaine = ...     return est_palindrome(chaine)"},{"location":"officiels/Annales/EP/2023/23-NSI-16/23-NSI-16/","title":"23 NSI 16","text":"In\u00a0[\u00a0]: Copied! <pre>resultats = {'Dupont': {\n                           'DS1': [15.5, 4],\n                           'DM1': [14.5, 1],\n                           'DS2': [13, 4],\n                           'PROJET1': [16, 3],\n                           'DS3': [14, 4]\n                       },\n             'Durand': {\n                           'DS1': [6 , 4],\n                           'DM1': [14.5, 1],\n                           'DS2': [8, 4],\n                           'PROJET1': [9, 3],\n                           'IE1': [7, 2],\n                           'DS3': [8, 4],\n                           'DS4':[15, 4]\n                       }\n            }\n</pre> resultats = {'Dupont': {                            'DS1': [15.5, 4],                            'DM1': [14.5, 1],                            'DS2': [13, 4],                            'PROJET1': [16, 3],                            'DS3': [14, 4]                        },              'Durand': {                            'DS1': [6 , 4],                            'DM1': [14.5, 1],                            'DS2': [8, 4],                            'PROJET1': [9, 3],                            'IE1': [7, 2],                            'DS3': [8, 4],                            'DS4':[15, 4]                        }             } In\u00a0[\u00a0]: Copied! <pre>def moyenne(nom, dico_result):\n    if nom in ...:\n        notes = dico_result[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients, 1 )\n    else:\n        return -1\n</pre> def moyenne(nom, dico_result):     if nom in ...:         notes = dico_result[nom]         total_points = ...         total_coefficients = ...         for ...  in notes.values():             note, coefficient = valeurs             total_points = total_points + ... * coefficient             total_coefficients = ... + coefficient         return round( ... / total_coefficients, 1 )     else:         return -1"},{"location":"officiels/Annales/EP/2023/23-NSI-17/23-NSI-17/","title":"23 NSI 17","text":"In\u00a0[\u00a0]: Copied! <pre>def pascal(n):\n    triangle= [[1]]\n    for k in range(1,...):\n        ligne_k = [...]\n        for i in range(1,k):\n            ligne_k.append(triangle[...][i-1]+triangle[...][...])\n        ligne_k.append(...)\n        triangle.append(ligne_k)\n    return triangle\n</pre> def pascal(n):     triangle= [[1]]     for k in range(1,...):         ligne_k = [...]         for i in range(1,k):             ligne_k.append(triangle[...][i-1]+triangle[...][...])         ligne_k.append(...)         triangle.append(ligne_k)     return triangle"},{"location":"officiels/Annales/EP/2023/23-NSI-18/23-NSI-18/","title":"23 NSI 18","text":"In\u00a0[\u00a0]: Copied! <pre>def est_un_ordre(tab):\n'''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00c3  n, False sinon\n    '''\n    for i in range(1,...):\n        if ...:\n            return False\n    return True\n</pre> def est_un_ordre(tab):     '''     Renvoie True si tab est de longueur n et contient tous les entiers     de 1 \u00c3  n, False sinon     '''     for i in range(1,...):         if ...:             return False     return True In\u00a0[\u00a0]: Copied! <pre>def nombre_points_rupture(ordre):\n'''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00c3\u00a9sente un ordre\n    de g\u00c3\u00a8nes de chromosome\n    '''\n    assert ... # ordre n'est pas un ordre de g\u00c3\u00a8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; ...:\n        if ... not in [-1, 1]: # l'\u00c3\u00a9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[...] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</pre> def nombre_points_rupture(ordre):     '''     Renvoie le nombre de point de rupture de ordre qui repr\u00c3\u00a9sente un ordre     de g\u00c3\u00a8nes de chromosome     '''     assert ... # ordre n'est pas un ordre de g\u00c3\u00a8nes     n = len(ordre)     nb = 0     if ordre[...] != 1: # le premier n'est pas 1         nb = nb + 1     i = 0     while i &lt; ...:         if ... not in [-1, 1]: # l'\u00c3\u00a9cart n'est pas 1             nb = nb + 1         i = i + 1     if ordre[...] != n: # le dernier n'est pas n         nb = nb + 1     return nb"},{"location":"officiels/Annales/EP/2023/23-NSI-19/23-NSI-19/","title":"23 NSI 19","text":"In\u00a0[\u00a0]: Copied! <pre>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n</pre> ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' In\u00a0[\u00a0]: Copied! <pre>def position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n</pre> def position_alphabet(lettre):     return ord(lettre) - ord('A') In\u00a0[\u00a0]: Copied! <pre>def cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</pre> def cesar(message, decalage):     resultat = ''     for ... in message:         if 'A' &lt;= c and c &lt;= 'Z':             indice = ( ... ) % 26             resultat = resultat + ALPHABET[indice]         else:             resultat = ...     return resultat"},{"location":"officiels/Annales/EP/2023/23-NSI-20/23-NSI-20/","title":"23 NSI 20","text":"In\u00a0[\u00a0]: Copied! <pre>from random import randint\n</pre> from random import randint In\u00a0[\u00a0]: Copied! <pre>def nbre_coups():\n    n = ...\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while ... &lt; ...:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ...\n        if ...:\n            cases_vues.append(case_en_cours)\n        n = ...\n    return n\n</pre> def nbre_coups():     n = ...     cases_vues = [0]     case_en_cours = 0     nbre_cases = 12     while ... &lt; ...:         x = randint(1, 6)         case_en_cours = (case_en_cours + ...) % ...         if ...:             cases_vues.append(case_en_cours)         n = ...     return n"},{"location":"officiels/Annales/EP/2023/23-NSI-21/23-NSI-21/","title":"23 NSI 21","text":"In\u00a0[\u00a0]: Copied! <pre>e = Noeud(Noeud(Noeud(None, 3, None),\n    '*', Noeud(Noeud(None, 8, None), '+', Noeud(None, 7, None))),\n    '-', Noeud(Noeud(None, 2, None), '+', Noeud(None, 1, None)))\n</pre> e = Noeud(Noeud(Noeud(None, 3, None),     '*', Noeud(Noeud(None, 8, None), '+', Noeud(None, 7, None))),     '-', Noeud(Noeud(None, 2, None), '+', Noeud(None, 1, None))) In\u00a0[\u00a0]: Copied! <pre>class Noeud:\n'''\n    classe impl\u00c3\u00a9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n'''\n        un objet Noeud poss\u00c3\u00a8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00c3\u00a9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n'''\n        renvoie la repr\u00c3\u00a9sentation du noeud en chaine de caract\u00c3\u00a8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n'''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n</pre> class Noeud:     '''     classe impl\u00c3\u00a9mentant un noeud d'arbre binaire     '''      def __init__(self, g, v, d):         '''         un objet Noeud poss\u00c3\u00a8de 3 attributs :         - gauche : le sous-arbre gauche,         - valeur : la valeur de l'\u00c3\u00a9tiquette,         - droit : le sous-arbre droit.         '''         self.gauche = g         self.valeur = v         self.droit = d      def __str__(self):         '''         renvoie la repr\u00c3\u00a9sentation du noeud en chaine de caract\u00c3\u00a8res         '''         return str(self.valeur)      def est_une_feuille(self):         '''         renvoie True si et seulement si le noeud est une feuille         '''         return self.gauche is None and self.droit is None In\u00a0[\u00a0]: Copied! <pre>def expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s\n</pre> def expression_infixe(e):     s = ...     if e.gauche is not None:         s = '(' + s + expression_infixe(...)     s = s + ...     if ... is not None:         s = s + ... + ...     return s"},{"location":"officiels/Annales/EP/2023/23-NSI-22/23-NSI-22/","title":"23 NSI 22","text":"In\u00a0[\u00a0]: Copied! <pre>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n</pre> dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,         \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,         \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,         \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,         \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26} In\u00a0[\u00a0]: Copied! <pre>def est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = ...\n    for c in mot:\n        code_concatene = code_concatene + ...\n        code_additionne = ...\n    code_concatene = int(code_concatene)\n    if ... :\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</pre> def est_parfait(mot):     # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)     code_concatene = \"\"     code_additionne = ...     for c in mot:         code_concatene = code_concatene + ...         code_additionne = ...     code_concatene = int(code_concatene)     if ... :         mot_est_parfait = True     else:         mot_est_parfait = False     return code_additionne, code_concatene, mot_est_parfait"},{"location":"officiels/Annales/EP/2023/23-NSI-23/23-NSI-23/","title":"23 NSI 23","text":"In\u00a0[\u00a0]: Copied! <pre>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n</pre> tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5] In\u00a0[\u00a0]: Copied! <pre>tab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n</pre> tab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3] In\u00a0[\u00a0]: Copied! <pre>tab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n</pre> tab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8] In\u00a0[\u00a0]: Copied! <pre>def trouver_intrus(tab, g, d):\n'''\n    Renvoie la valeur de l'intrus situe entre les indices g et d\n    dans la liste tab ou :\n        tab verifie les conditions de l'exercice,\n        g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g)// ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</pre> def trouver_intrus(tab, g, d):     '''     Renvoie la valeur de l'intrus situe entre les indices g et d     dans la liste tab ou :         tab verifie les conditions de l'exercice,         g et d sont des multiples de 3.     '''     if g == d:         return ...      else:         nombre_de_triplets = (d - g)// ...         indice = g + 3 * (nombre_de_triplets // 2)         if ... :             return ...         else:             return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-24/23-NSI-24/","title":"23 NSI 24","text":"In\u00a0[\u00a0]: Copied! <pre>def fusion(lst1, lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = ...\n            i1 = ...\n        else:\n            lst12[i] = lst2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        lst12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return lst12\n</pre> def fusion(lst1, lst2):     n1 = len(lst1)     n2 = len(lst2)     lst12 = [0] * (n1 + n2)     i1 = 0     i2 = 0     i = 0     while i1 &lt; n1 and ... :         if lst1[i1] &lt; lst2[i2]:             lst12[i] = ...             i1 = ...         else:             lst12[i] = lst2[i2]             i2 = ...         i += 1     while i1 &lt; n1:         lst12[i] = ...         i1 = i1 + 1         i = ...     while i2 &lt; n2:         lst12[i] = ...         i2 = i2 + 1         i = ...     return lst12"},{"location":"officiels/Annales/EP/2023/23-NSI-25/23-NSI-25/","title":"23 NSI 25","text":"In\u00a0[\u00a0]: Copied! <pre>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n</pre> class Arbre:     def __init__(self, etiquette):         self.v = etiquette         self.fg = None         self.fd = None In\u00a0[\u00a0]: Copied! <pre>def parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n</pre> def parcours(arbre, liste):     if arbre != None:         parcours(arbre.fg, liste)         liste.append(arbre.v)         parcours(arbre.fd, liste)     return liste In\u00a0[\u00a0]: Copied! <pre>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\n    if ...:\n        if ...:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if ...:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</pre> def insere(arbre, cle):     \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente         un arbre binaire de recherche.     \"\"\"     if ...:         if ...:             insere(arbre.fg, cle)         else:             arbre.fg = Arbre(cle)     else:         if ...:             insere(arbre.fd, cle)         else:             arbre.fd = Arbre(cle)"},{"location":"officiels/Annales/EP/2023/23-NSI-26/23-NSI-26/","title":"23 NSI 26","text":"In\u00a0[\u00a0]: Copied! <pre>def dichotomie(tab, x):\n\"\"\"\n    tab : tableau d'entiers trie dans l'ordre croissant\n    x   : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    \n    debut = 0 \n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n             fin = ...\t\t\t\n    return ...\n</pre> def dichotomie(tab, x):     \"\"\"     tab : tableau d'entiers trie dans l'ordre croissant     x   : nombre entier     La fonction renvoie True si tab contient x et False sinon     \"\"\"          debut = 0      fin = len(tab) - 1     while debut &lt;= fin:         m = ...         if x == tab[m]:             return ...         if x &gt; tab[m]:             debut = m + 1         else:              fin = ...\t\t\t     return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-27/23-NSI-27/","title":"23 NSI 27","text":"In\u00a0[\u00a0]: Copied! <pre>def separe(tab):\n\n    gauche = 0\n    droite = ...\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = ...\n        else :\n            tab[gauche], tab[droite] = ...\n            droite = ...\n    return tab\n</pre> def separe(tab):      gauche = 0     droite = ...     while gauche &lt; droite :         if tab[gauche] == 0 :             gauche = ...         else :             tab[gauche], tab[droite] = ...             droite = ...     return tab"},{"location":"officiels/Annales/EP/2023/23-NSI-28/23-NSI-28/","title":"23 NSI 28","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! <pre>def dichotomie(tab, x):\n\"\"\"\n        tab : tableau tri\u00e9 dans l\u2019ordre croissant\n        x : nombre entier\n        La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n    \n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\t\t\t\n    return ...\n</pre> def dichotomie(tab, x):     \"\"\"         tab : tableau tri\u00e9 dans l\u2019ordre croissant         x : nombre entier         La fonction renvoie True si tab contient x et False sinon     \"\"\"     # cas du tableau vide     if ...:         return False, 1      # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames     if (x &lt; tab[0]) or ...:         return False, 2          debut = 0     fin = len(tab) - 1     while debut &lt;= fin:         m = ...         if x == tab[m]:             return ...         if x &gt; tab[m]:             debut = m + 1         else:             fin = ...\t\t\t     return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-29/23-NSI-29/","title":"23 NSI 29","text":"In\u00a0[\u00a0]: Copied! <pre>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n</pre> class Arbre:     def __init__(self, etiquette):         self.v = etiquette         self.fg = None         self.fd = None In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if ...:\n        for i in range(indice):\n            L[i] = ...\n        L[...] = ...\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = ...\n    else:\n        for i in range(nbre_elts):\n            L[i] = ...\n        L[...] = ...\n    return L\n</pre> def ajoute(indice, element, liste):     nbre_elts = len(liste)     L = [0 for i in range(nbre_elts + 1)]     if ...:         for i in range(indice):             L[i] = ...         L[...] = ...         for i in range(indice + 1, nbre_elts + 1):             L[i] = ...     else:         for i in range(nbre_elts):             L[i] = ...         L[...] = ...     return L"},{"location":"officiels/Annales/EP/2023/23-NSI-30/23-NSI-30/","title":"23 NSI 30","text":"In\u00a0[\u00a0]: Copied! <pre>def binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</pre> def binaire(a):     bin_a = ...     a = a // 2     while a ... :         bin_a = ... + bin_a         a = ...     return bin_a"},{"location":"officiels/Annales/EP/2023/23-NSI-31/23-NSI-31/","title":"23 NSI 31","text":"In\u00a0[\u00a0]: Copied! <pre>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</pre> def binaire(a):     bin_a = str(...)     a = a // 2     while a ... :         bin_a = ...(a%2) + ...         a = ...     return bin_a"},{"location":"officiels/Annales/EP/2023/23-NSI-32/23-NSI-32/","title":"23 NSI 32","text":"In\u00a0[\u00a0]: Copied! <pre>class Carte:\n    def __init__(self, c, v):\n\"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n\"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n\"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n</pre> class Carte:     def __init__(self, c, v):         \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"         self.couleur = c         self.valeur = v      def get_valeur(self):         \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"         valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']         return valeurs[self.valeur - 1]      def get_couleur(self):         \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"         couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']         return couleurs[self.couleur - 1] In\u00a0[\u00a0]: Copied! <pre>class Paquet_de_cartes:\n    def __init__(self):\n\"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        # A compl\u00e9ter\n\n    def get_carte(self, pos):\n\"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        # A compl\u00e9ter\n</pre> class Paquet_de_cartes:     def __init__(self):         \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles             rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,             carreau et tr\u00e9fle. \"\"\"         # A compl\u00e9ter      def get_carte(self, pos):         \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"         # A compl\u00e9ter"},{"location":"officiels/Annales/EP/2023/23-NSI-33/23-NSI-33/","title":"23 NSI 33","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_selection(tab):\n    N = len(tab)\n    for k in range(...):\n        imin = ...\n        for i in range(... , N):\n            if tab[i] &lt; ... :\n                imin = i\n        ... , tab[imin] = tab[imin] , ...\n</pre> def tri_selection(tab):     N = len(tab)     for k in range(...):         imin = ...         for i in range(... , N):             if tab[i] &lt; ... :                 imin = i         ... , tab[imin] = tab[imin] , ..."},{"location":"officiels/Annales/EP/2023/23-NSI-34/23-NSI-34/","title":"23 NSI 34","text":"In\u00a0[\u00a0]: Copied! <pre>def tri(tab):\n    # i est le premier indice de la zone non triee,\n    # j est le dernier indice de cette zone non tri\u00e9e. \n    # Au debut, la zone non triee est le tableau complet.\n    i= ...\n    j= ...\n    while i != j :\n        if tab[i] == 0:\n            i= ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j= ...\n    ...\n</pre> def tri(tab):     # i est le premier indice de la zone non triee,     # j est le dernier indice de cette zone non tri\u00e9e.      # Au debut, la zone non triee est le tableau complet.     i= ...     j= ...     while i != j :         if tab[i] == 0:             i= ...         else :             valeur = tab[j]             tab[j] = ...             ...             j= ...     ..."},{"location":"officiels/Annales/EP/2023/23-NSI-35/23-NSI-35/","title":"Exercice 2","text":"In\u00a0[\u00a0]: Copied! <pre>c2 = [[1, 7], [7, 1]]\nc3 = [[3, 4, 5], [4, 4, 4], [5, 4, 3]]\nc3bis = [[2, 9, 4], [7, 0, 3], [6, 1, 8]]\n</pre> c2 = [[1, 7], [7, 1]] c3 = [[3, 4, 5], [4, 4, 4], [5, 4, 3]] c3bis = [[2, 9, 4], [7, 0, 3], [6, 1, 8]] In\u00a0[\u00a0]: Copied! <pre>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n'''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n'''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n'''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</pre> class Carre:     def __init__(self, liste, n):         self.ordre = n         self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]      def affiche(self):         '''Affiche un carr\u00e9'''         for i in range(self.ordre):             print(self.tableau[i])      def somme_ligne(self, i):         '''Calcule la somme des valeurs de la ligne i'''         somme = 0         for j in range(self.ordre):             somme = somme + self.tableau[i][j]         return somme      def somme_col(self, j):         '''Calcule la somme des valeurs de la colonne j'''         somme = 0         for i in range(self.ordre):             somme = somme + self.tableau[i][j]         return somme      def est_semimagique(self):         s = self.somme_ligne(0)          #test de la somme de chaque ligne         for i in range(...):             if ... != s:                 return ...          #test de la somme de chaque colonne         for j in range(...):             if ... != s:                 return ...          return ..."},{"location":"officiels/Annales/EP/2023/23-NSI-35/23-NSI-35/#exercice-2","title":"Exercice 2\u00b6","text":""},{"location":"officiels/Annales/EP/2023/23-NSI-36/23-NSI-36/","title":"23 NSI 36","text":"In\u00a0[\u00a0]: Copied! <pre>def propager(M, i, j, val):\n    if M[i][j] == ...:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == ...:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if ... &lt; len(M) and M[i+1][j] == 1:\n        propager(M, ..., j, val)\n\n    # l'element \u00c3  gauche fait partie de la composante\n    if ... and M[i][j-1] == 1:\n        propager(M, ..., ..., val)\n\n    # l'element \u00c3  droite fait partie de la composante\n    if ... and ...:\n        propager(..., ..., ..., ...)\n</pre> def propager(M, i, j, val):     if M[i][j] == ...:         M[i][j] = val      # l'element en haut fait partie de la composante     if i-1 &gt;= 0 and M[i-1][j] == ...:         propager(M, i-1, j, val)      # l'element en bas fait partie de la composante     if ... &lt; len(M) and M[i+1][j] == 1:         propager(M, ..., j, val)      # l'element \u00c3  gauche fait partie de la composante     if ... and M[i][j-1] == 1:         propager(M, ..., ..., val)      # l'element \u00c3  droite fait partie de la composante     if ... and ...:         propager(..., ..., ..., ...)"},{"location":"officiels/Annales/EP/2023/23-NSI-37/23-NSI-37/","title":"23 NSI 37","text":"In\u00a0[\u00a0]: Copied! <pre>class AdresseIP:\n\n    def __init__(self, adresse):\n        self.adresse = ...\n   \n    def liste_octet(self):\n\"\"\"renvoie une liste de nombres entiers,\n           la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")] \n        \n    def est_reservee(self):\n\"\"\"renvoie True si l'adresse IP est une adresse\n           reservee, False sinon\"\"\"\n        return ... or ...\n             \n    def adresse_suivante(self):\n\"\"\"renvoie un objet de AdresseIP avec l'adresse \n           IP qui suit l'adresse self\n           si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</pre> class AdresseIP:      def __init__(self, adresse):         self.adresse = ...         def liste_octet(self):         \"\"\"renvoie une liste de nombres entiers,            la liste des octets de l'adresse IP\"\"\"         return [int(i) for i in self.adresse.split(\".\")]               def est_reservee(self):         \"\"\"renvoie True si l'adresse IP est une adresse            reservee, False sinon\"\"\"         return ... or ...                   def adresse_suivante(self):         \"\"\"renvoie un objet de AdresseIP avec l'adresse             IP qui suit l'adresse self            si elle existe et False sinon\"\"\"         if ... &lt; 254:             octet_nouveau = ... + ...             return AdresseIP('192.168.0.' + ...)         else:             return False"},{"location":"officiels/Annales/EP/2023/23-NSI-38/23-NSI-38/","title":"23 NSI 38","text":"In\u00a0[\u00a0]: Copied! <pre>def est_cyclique(plan):\n'''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[ ... ]\n    nb_destinaires = 1\n    \n    while destinataire != ...:\n        destinataire = plan[ ... ]\n        nb_destinaires += ...\n\n    return nb_destinaires == ...\n</pre> def est_cyclique(plan):     '''     Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).     Renvoie True si le plan d'envoi de messages est cyclique et False sinon.     '''     expediteur = 'A'     destinataire = plan[ ... ]     nb_destinaires = 1          while destinataire != ...:         destinataire = plan[ ... ]         nb_destinaires += ...      return nb_destinaires == ..."},{"location":"officiels/Annales/EP/2023/23-NSI-39/23-NSI-39/","title":"23 NSI 39","text":"In\u00a0[\u00a0]: Copied! <pre>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</pre> def pantheon(eleves, notes):     note_maxi = 0     meilleurs_eleves =  ...      for i in range(...) :         if notes[i] == ... :             meilleurs_eleves.append(...)         elif notes[i] &gt; note_maxi:             note_maxi = ...             meilleurs_eleves = [...]      return (note_maxi,meilleurs_eleves) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\nnotes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n</pre> eleves_nsi = ['a','b','c','d','e','f','g','h','i','j'] notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]"},{"location":"officiels/Annales/EP/2023/23-NSI-40/23-NSI-40/","title":"23 NSI 40","text":"In\u00a0[\u00a0]: Copied! <pre>class Noeud:\n    def __init__(self, valeur):\n'''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n'''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n'''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n'''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; ...:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = ...\n        elif cle &gt; ... :\n            # on ins\u00e8re \u00e0 droite\n            if ... :\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils droit\n                ... = Noeud(cle)\n</pre> \ufeffclass Noeud:     def __init__(self, valeur):         '''M\u00e9thode constructeur pour la classe Noeud.         Param\u00e8tre d'entr\u00e9e : valeur (str)'''         self.valeur = valeur         self.gauche = None         self.droit = None      def getValeur(self):         '''M\u00e9thode accesseur pour obtenir la valeur du noeud         Aucun param\u00e8tre en entr\u00e9e'''         return self.valeur      def droitExiste(self):         '''M\u00e9thode renvoyant True si l'enfant droit existe         Aucun param\u00e8tre en entr\u00e9e'''         return (self.droit is not None)      def gaucheExiste(self):         '''M\u00e9thode renvoyant True si l'enfant gauche existe         Aucun param\u00e8tre en entr\u00e9e'''         return (self.gauche is not None)      def inserer(self, cle):         '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche         Param\u00e8tre d'entr\u00e9e : cle (int)'''         if cle &lt; ...:             # on ins\u00e8re \u00e0 gauche             if self.gaucheExiste():                 # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9                 ...             else:                 # on cr\u00e9e un fils gauche                 self.gauche = ...         elif cle &gt; ... :             # on ins\u00e8re \u00e0 droite             if ... :                 # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9                 ...             else:                 # on cr\u00e9e un fils droit                 ... = Noeud(cle) In\u00a0[\u00a0]: Copied! <pre>arbre = Noeud(7)\nfor cle in (3, 9, 1, 6):\n    arbre.inserer(cle)\n</pre> arbre = Noeud(7) for cle in (3, 9, 1, 6):     arbre.inserer(cle)"},{"location":"officiels/Annales/EP/2023/23-NSI-41/23-NSI-41/","title":"23 NSI 41","text":"In\u00a0[\u00a0]: Copied! <pre>valeurs = [100,50,20,10,5,2,1]\n</pre> valeurs = [100,50,20,10,5,2,1] In\u00a0[\u00a0]: Copied! <pre>def rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</pre> def rendu_glouton(a_rendre, rang):     if a_rendre == 0:         return ...     v = valeurs[rang]     if v &lt;= ... :         return ... + rendu_glouton(a_rendre - v, rang)     else :         return rendu_glouton(a_rendre, ...)"},{"location":"officiels/Annales/EP/2023/23-NSI-42/23-NSI-42/","title":"23 NSI 42","text":"In\u00a0[\u00a0]: Copied! <pre>from random import randint\n</pre> from random import randint In\u00a0[\u00a0]: Copied! <pre>def plus_ou_moins():\n    nb_mystere = randint(1, ...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ...:\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print(\"Bravo ! Le nombre etait \", ...)\n        print(\"Nombre d'essais: \", ...)\n    else:\n        print(\"Perdu ! Le nombre etait \", ...)\n</pre> def plus_ou_moins():     nb_mystere = randint(1, ...)     nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))     compteur = ...      while nb_mystere != ... and compteur &lt; ...:         compteur = compteur + ...         if nb_mystere ... nb_test:             nb_test = int(input(\"Trop petit ! Testez encore : \"))         else:             nb_test = int(input(\"Trop grand ! Testez encore : \"))      if nb_mystere == nb_test:         print(\"Bravo ! Le nombre etait \", ...)         print(\"Nombre d'essais: \", ...)     else:         print(\"Perdu ! Le nombre etait \", ...)"},{"location":"officiels/Annales/EP/2023/23-NSI-43/23-NSI-43/","title":"23 NSI 43","text":"In\u00a0[\u00a0]: Copied! <pre>def tri_bulles(T):\n'''\n\tRenvoie le tableau T tri\u00c3\u00a9 par ordre croissant\n\t'''\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</pre> def tri_bulles(T):     ''' \tRenvoie le tableau T tri\u00c3\u00a9 par ordre croissant \t'''     n = len(T)     for i in range(...,...,-1):         for j in range(i):             if T[j] &gt; T[...]:                 ... = T[j]                 T[j] = T[...]                 T[j+1] = temp     return T"},{"location":"officiels/Annales/EP/2023/23-NSI-44/23-NSI-44/","title":"23 NSI 44","text":"In\u00a0[\u00a0]: Copied! <pre>def crible(n):\n\"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits\n    que n\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(..., n):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2 * i, n, ...):\n                tab[multiple] = ...\n    return premiers\n</pre> def crible(n):     \"\"\"     Renvoie un tableau contenant tous les nombres premiers plus petits     que n     \"\"\"     premiers = []     tab = [True] * n     tab[0], tab[1] = False, False     for i in range(..., n):         if tab[i] == ...:             premiers.append(...)             for multiple in range(2 * i, n, ...):                 tab[multiple] = ...     return premiers In\u00a0[\u00a0]: Copied! <pre>assert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</pre> assert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]"},{"location":"officiels/Annales/EP/2023/23-NSI-45/23-NSI-45/","title":"Exercice 1","text":"In\u00a0[\u00a0]: Copied! <pre>notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n</pre> notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4] In\u00a0[\u00a0]: Copied! <pre>def dec_to_bin (nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...:\n        return str(r)\n    else:\n        return dec_to_bin(...) + ...\n</pre> def dec_to_bin (nb_dec):     q, r = nb_dec // 2, nb_dec % 2     if q == ...:         return str(r)     else:         return dec_to_bin(...) + ... In\u00a0[\u00a0]: Copied! <pre>def bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif ...:\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ...\n</pre> def bin_to_dec(nb_bin):     if nb_bin == '0':         return 0     elif ...:         return 1     else:         if nb_bin[-1] == '0':             bit_droit = 0         else:             bit_droit = ...         return ... * bin_to_dec(nb_bin[:-1]) + ... In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"officiels/Annales/EP/2023/23-NSI-45/23-NSI-45/#exercice-1","title":"Exercice 1\u00b6","text":""},{"location":"officiels/Annales/EP/2023/23-NSI-45/23-NSI-45/#exercice-2","title":"Exercice 2\u00b6","text":""},{"location":"oral/oral/","title":"Grand Oral","text":"Qu'est-ce que c'est?D\u00e9roulement de l'\u00e9preuve\u00c9laboration de la questionJ'organise mon argumentaireProjet d'orientationGrille d'\u00e9valuationExemples questions <ul> <li>Vous devez pr\u00e9parer deux sujets, dont au moins un a un rapport avec le programme de NSI. </li> <li>Ce sujet peut \u00eatre crois\u00e9 avec l'autre sp\u00e9cialit\u00e9.</li> <li>L'oral dure 20 minutes (5 minutes d'expos\u00e9 et 10 + 5 minutes d'\u00e9changes avec le jury) apr\u00e8s une pr\u00e9paration de 20 minutes.</li> </ul> <p> - Cette pr\u00e9sentation dure ensuite 5 minutes, pendant lesquelles le candidat expose les motivations qui l\u2019ont conduit \u00e0 choisir cette question, puis pr\u00e9sente la r\u00e9ponse qu\u2019il a \u00e9labor\u00e9e. - \u00c0 l\u2019issue de ces 5 premi\u00e8res minutes, le candidat et le jury \u00e9changent durant 10 minutes. A cette occasion, le jury am\u00e8ne le candidat \u00e0 pr\u00e9ciser et approfondir sa pens\u00e9e. C\u2019est une opportunit\u00e9 \u00e0 saisir, pour apporter des compl\u00e9ments \u00e0 son propos, et montrer sa capacit\u00e9 \u00e0 \u00e9couter, dialoguer, expliciter et argumenter. Enfin, pendant les 5 derni\u00e8res minutes de l\u2019\u00e9preuve, le candidat d\u00e9crit son projet d\u2019orientation, puis \u00e9change avec le jury sur ce projet. </p> <p>Pendant l\u2019\u00e9preuve le candidat dispose du support qu\u2019il a pr\u00e9par\u00e9 pendant le temps de pr\u00e9paration (20 minutes), s'il a fait le choix d'en r\u00e9aliser pour accompagner sa prise de parole. Il s\u2019agit de notes, d\u2019un plan d\u2019expos\u00e9, de trame de prise de parole, de mots-clefs ou d\u2019id\u00e9es directrices. Ces notes peuvent aussi servir de document d\u2019appui \u00e0 l\u2019argumentation (sch\u00e9ma, courbe, diagramme, tableau, formule math\u00e9matique\u2026). Ce support n\u2019a pas vocation \u00e0 \u00eatre donn\u00e9 au jury. Il n\u2019est pas \u00e9valu\u00e9 ; il ne sert qu\u2019\u00e0 appuyer le propos du candidat, si celui-ci le juge n\u00e9cessaire. Le candidat peut par ailleurs recourir \u00e0 ce support pour \u00e9clairer ses r\u00e9ponses aux questions du jury. - si la salle d\u2019examen dispose d\u2019un tableau, son utilisation durant ce deuxi\u00e8me temps est interdite </p> <p> </p> <p>Le jury mesure la capacit\u00e9 du candidat \u00e0 conduire et \u00e0 exprimer une r\u00e9flexion personnelle t\u00e9moignant de sa curiosit\u00e9 intellectuelle et de son aptitude \u00e0 exprimer ses motivations.  </p> <p> </p> <p>Ne recopie pas mot pour mot les sujets qui suivent : ils sont seulement l\u00e0 pour t\u2019inspirer. Si l\u2019un d\u2019eux t\u2019int\u00e9resse, n\u2019h\u00e9site pas \u00e0 creuser pour d\u00e9finir ta propre probl\u00e9matique et adapter le sujet \u00e0 ton profil et ton projet d\u2019\u00e9tudes.</p> <ul> <li> <p>Faut-il autoriser les voitures autonomes ?  Th\u00e8me \u00ab Interfaces Hommes Machines \u00bb.</p> </li> <li> <p>Quels sont les enjeux de l\u2019intelligence artificielle ?  Th\u00e8me \u00ab Histoire de l\u2019informatique \u00bb.</p> </li> <li> <p>Femmes et num\u00e9rique : quelle histoire ? quel avenir ?  Th\u00e8me \u00ab Algorithmique \u00bb.</p> </li> <li> <p>Comment prot\u00e9ger les donn\u00e9es num\u00e9riques sur les r\u00e9seaux sociaux ?  Th\u00e8me \u00ab Algorithmique \u00bb.</p> </li> <li> <p>L\u2019informatisation des m\u00e9tros : progr\u00e8s ou outil de surveillance ? Th\u00e8me \u00ab Donn\u00e9es structur\u00e9es \u00bb.</p> </li> <li> <p>Donn\u00e9es personnelles : la vie priv\u00e9e en voie d\u2019extinction ? Th\u00e8me \u00ab Base de donn\u00e9es \u00bb.</p> </li> <li> <p>Cyberguerre : la 3\u00e8me guerre mondiale ? Th\u00e8me \u00ab Architecture mat\u00e9rielles \u00bb.</p> </li> <li> <p>Les bugs : b\u00eate noire des d\u00e9veloppeurs ? Th\u00e8me \u00ab Langages et Programmation \u00bb.</p> </li> <li> <p>Un robot peut-il apprendre comme un \u00eatre humain ? Th\u00e8me \u00ab Algorithmique \u00bb.</p> </li> <li> <p>Le big data est-il le nouveau nerf de la guerre \u00e9conomique ? Th\u00e8me \u00ab Base de donn\u00e9es \u00bb.</p> </li> <li> <p>Comment l\u2019IA va et r\u00e9volutionne d\u00e9j\u00e0 le monde d\u2019aujourd\u2019hui ? Th\u00e8me \u00ab Algorithmique \u00bb</p> </li> <li> <p>La r\u00e9alit\u00e9 virtuelle : un nouveau monde ? Th\u00e8me \u00ab Interface Hommes-Machines \u00bb</p> </li> <li> <p>Les r\u00e9seaux sociaux sont-ils dangereux ? Th\u00e8me \u00ab Impact soci\u00e9tal et \u00e9thique de l\u2019informatique \u00ab </p> </li> <li> <p>Les r\u00e9seaux sociaux sont-ils compatibles avec le journalisme ? Th\u00e8me \u00ab Impact soci\u00e9tal et \u00e9thique de l\u2019informatique \u00ab </p> </li> <li> <p>L\u2019informatisation des m\u00e9tros : progr\u00e8s ou outil de surveillance ? Th\u00e8me : \u00ab Donn\u00e9es structur\u00e9es et structures de donn\u00e9es \u00bb</p> </li> <li> <p>La course \u00e0 l\u2019infiniment petit : jusqu\u2019o\u00f9 ? Th\u00e8me : \u00ab Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux \u00bb</p> </li> <li> <p>Ada Lovelace, pionni\u00e8re du langage informatique. Th\u00e8me : \u00ab L\u2019histoire de l\u2019informatique \u00bb</p> </li> <li> <p>Quelle est la diff\u00e9rence entre le web 1.0 et le web 2.0 ? Th\u00e8me : \u00ab L\u2019histoire de l\u2019informatique \u00bb</p> </li> <li> <p>P = NP, un probl\u00e8me \u00e0 un million de dollars ? Th\u00e8me : \u00ab Langages et programmation \u00bb</p> </li> <li> <p>L\u2019informatique va-t-elle r\u00e9volutionner l\u2019art ? Th\u00e8me : \u00ab Impact soci\u00e9tal et \u00e9thique de l\u2019informatique \u00bb</p> </li> </ul>"},{"location":"oral/oral/#lanalyse-du-sujet","title":"L\u2019analyse du sujet","text":"<p>C\u2019est une \u00e9tape indispensable \u00e0 la pr\u00e9paration de la recherche documentaire mais aussi pour \u00e9laborer votre futur plan de votre oral et votre introduction. Pour cela, vous devez :</p> <ul> <li>d\u00e9finir les termes et les limites (chrono-spatiales) de votre sujet</li> <li>noter les notions en lien avec votre sujet et auxquelles il faudra faire r\u00e9f\u00e9rence au cours de votre oral</li> <li>noter les id\u00e9es-cl\u00e9s, dates essentielles, acteurs, etc.</li> </ul>"},{"location":"oral/oral/#les-references-bibliographiques","title":"Les r\u00e9f\u00e9rences bibliographiques","text":"<p>La recherche bibliographique est indispensable pour trouver les arguments et exemples n\u00e9cessaires \u00e0 votre oral. Les outils \u00e0 disposition :</p> <ul> <li>La biblioth\u00e8que du lyc\u00e9e : livres, p\u00e9riodiques, usuels (encyclop\u00e9dies, dictionnaires etc)</li> <li>M\u00e9diath\u00e8que ou biblioth\u00e8que municipale</li> <li>Web : pr\u00e9f\u00e9rez les sites institutionnels aux blogs, les sites de journaux sp\u00e9cialis\u00e9s.</li> </ul>"},{"location":"oral/oral/#conseils","title":"Conseils","text":"<ul> <li>Varier les sources</li> <li>V\u00e9rifier la fiabilit\u00e9 de vos sources</li> <li>Noter vos r\u00e9f\u00e9rences afin de retrouver les informations</li> </ul>"},{"location":"oral/oral/#introduction","title":"Introduction","text":"<p>Elle doit \u00eatre soign\u00e9e car elle donne la 1\u00e8re impression sur votre prestation orale. Elle doit comporter les \u00e9l\u00e9ments suivants :</p> <ul> <li>une accroche (ex : un fait d\u2019 actualit\u00e9 en lien avec le sujet etc.)</li> <li>d\u00e9finir les enjeux de votre Question et justifier le choix de votre sujet</li> <li>La QUESTION</li> <li>L\u2019annonce du plan</li> </ul>"},{"location":"oral/oral/#conclusion","title":"Conclusion","text":"<p>Ne pas la n\u00e9gliger car c\u2019est la derni\u00e8re impression que vous laissez \u00e0 votre jury. Elle doit comporter </p> <ul> <li>la r\u00e9ponse claire \u00e0 votre QUESTION</li> <li>Le bilan de votre argumentation (elle peut comporter une ouverture)</li> </ul>"},{"location":"oral/oral/#developpement","title":"D\u00e9veloppement","text":"<ul> <li>Il est compos\u00e9 de parties (2 ou 3) qu\u2019il faut rappeler pour que votre jury puisse suivre votre expos\u00e9.</li> <li>Chaque partie comporte des sous-parties, chacune d\u2019elles pr\u00e9sentant un argument et un exemple pour appuyer votre d\u00e9monstration</li> </ul>"},{"location":"oral/oral/#ne-pas-oublier-quil-sagit-dun-oral-penser-aussi-aux-elements-suivants-voir-grille-devaluation","title":"Ne pas oublier qu\u2019il s\u2019agit d\u2019un oral. Penser aussi aux \u00e9l\u00e9ments suivants (voir grille d\u2019\u00e9valuation) :","text":"<ul> <li>la voix : \u00eatre audible avec un d\u00e9bit adapt\u00e9 et fluide</li> <li>le regard : dirig\u00e9 vers le jury (se d\u00e9tacher de ses notes)</li> <li>la respiration : faire de courtes pauses</li> <li>la posture : debout lors des 5 premi\u00e8res mn (puis vous pouvez vous assoir), droit , souriant</li> <li>la gestuelle : \u00e9viter les gestes parasites</li> <li>le vocabulaire/niveau de langue adapt\u00e9</li> <li>respecter le temps imparti (+/- 30 s)</li> </ul>"},{"location":"pdf/C11/implementationArbre/","title":"implementationArbre","text":"In\u00a0[1]: Copied! <pre>class Arbre:\n    def __init__(self, etiquette):\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def ajout_gauche(self, sousarbre): # mutateur\n        self.gauche = sousarbre\n\n    def ajout_droit(self, sousarbre): # mutateur\n        self.droit = sousarbre  \n\n    def get_gauche(self): # accesseur\n        return self.gauche\n\n    def get_droit(self): # accesseur\n        return self.droit\n\n    def get_etiquette(self): # accesseur\n        return self.etiquette\n    \n    def affiche(self):\n\"\"\"permet d'afficher un arbre\"\"\"\n        if self==None:\n            return None\n        else :\n            return [self.etiquette,Arbre.affiche(self.gauche),Arbre.affiche(self.droit)]\n</pre> class Arbre:     def __init__(self, etiquette):         self.etiquette = etiquette         self.gauche = None         self.droit = None      def ajout_gauche(self, sousarbre): # mutateur         self.gauche = sousarbre      def ajout_droit(self, sousarbre): # mutateur         self.droit = sousarbre        def get_gauche(self): # accesseur         return self.gauche      def get_droit(self): # accesseur         return self.droit      def get_etiquette(self): # accesseur         return self.etiquette          def affiche(self):         \"\"\"permet d'afficher un arbre\"\"\"         if self==None:             return None         else :             return [self.etiquette,Arbre.affiche(self.gauche),Arbre.affiche(self.droit)] In\u00a0[3]: Copied! <pre>a = Arbre(4)\na.ajout_gauche(Arbre(3))\na.ajout_droit(Arbre(1))\na.get_droit().ajout_gauche(Arbre(2))\na.get_droit().ajout_droit(Arbre(7))\na.get_gauche().ajout_gauche(Arbre(6))\na.get_droit().get_droit().ajout_gauche(Arbre(9))\na.affiche()\n</pre> a = Arbre(4) a.ajout_gauche(Arbre(3)) a.ajout_droit(Arbre(1)) a.get_droit().ajout_gauche(Arbre(2)) a.get_droit().ajout_droit(Arbre(7)) a.get_gauche().ajout_gauche(Arbre(6)) a.get_droit().get_droit().ajout_gauche(Arbre(9)) a.affiche() Out[3]: <pre>[4,\n [3, [6, None, None], None],\n [1, [2, None, None], [7, [9, None, None], None]]]</pre> In\u00a0[5]: Copied! <pre>print(a.get_droit().get_gauche().get_etiquette())\n</pre> print(a.get_droit().get_gauche().get_etiquette()) <pre>2\n</pre> In\u00a0[6]: Copied! <pre>class Arbre:\n    def __init__(self,valeur):\n\"\"\"Initialisation de l'arbre racine + sous-arbre gauche et sous-arbre droit\"\"\"\n        self.v=valeur\n        self.gauche=None\n        self.droit=None\n        \n    def ajout_gauche(self,val):\n\"\"\"On ajoute valeur dans le sous-arbre gauche sous la forme [val,None,None]\"\"\"\n        self.gauche=Arbre(val)\n        \n    def ajout_droit(self,val):\n\"\"\" On ajoute valeur dans le sous-arbre droit sous la forme [val,None,None]\"\"\"\n        self.droit=Arbre(val)\n\n    def get_gauche(self):\n        return self.gauche\n\n    def get_droit(self):\n        return self.droit\n    \n    \n    def get_valeur(self):\n        if self==None:\n            return None\n        else:\n            return self.v\n        \n    def affiche(self):\n\"\"\"permet d'afficher un arbre\"\"\"\n        if self==None:\n            return None\n        else :\n            return [self.v,Arbre.affiche(self.gauche),Arbre.affiche(self.droit)]\n</pre> class Arbre:     def __init__(self,valeur):         \"\"\"Initialisation de l'arbre racine + sous-arbre gauche et sous-arbre droit\"\"\"         self.v=valeur         self.gauche=None         self.droit=None              def ajout_gauche(self,val):         \"\"\"On ajoute valeur dans le sous-arbre gauche sous la forme [val,None,None]\"\"\"         self.gauche=Arbre(val)              def ajout_droit(self,val):         \"\"\" On ajoute valeur dans le sous-arbre droit sous la forme [val,None,None]\"\"\"         self.droit=Arbre(val)      def get_gauche(self):         return self.gauche      def get_droit(self):         return self.droit               def get_valeur(self):         if self==None:             return None         else:             return self.v              def affiche(self):         \"\"\"permet d'afficher un arbre\"\"\"         if self==None:             return None         else :             return [self.v,Arbre.affiche(self.gauche),Arbre.affiche(self.droit)] In\u00a0[7]: Copied! <pre>a = Arbre(4)\na.ajout_gauche(3)\na.ajout_droit(1)\na.droit.ajout_gauche(2)\na.droit.ajout_droit(7)\na.gauche.ajout_gauche(6)\na.droit.droit.ajout_gauche(9)\nprint(a.affiche())\na.get_droit().affiche()\n</pre> a = Arbre(4) a.ajout_gauche(3) a.ajout_droit(1) a.droit.ajout_gauche(2) a.droit.ajout_droit(7) a.gauche.ajout_gauche(6) a.droit.droit.ajout_gauche(9) print(a.affiche()) a.get_droit().affiche() <pre>[4, [3, [6, None, None], None], [1, [2, None, None], [7, [9, None, None], None]]]\n</pre> Out[7]: <pre>[1, [2, None, None], [7, [9, None, None], None]]</pre> In\u00a0[72]: Copied! <pre>class Arbre:\n    def __init__(self, etiquette):\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n    \n    def est_feuille(self):\n        if self.gauche==None and self.droit==None:\n            return True\n        else:\n            return False\n\n    def affiche(self):\n\"\"\"permet d'afficher un arbre\"\"\"\n        if self==None:\n            return None\n        else :\n            return [self.etiquette,Arbre.affiche(self.gauche),Arbre.affiche(self.droit)]\n</pre> class Arbre:     def __init__(self, etiquette):         self.etiquette = etiquette         self.gauche = None         self.droit = None          def est_feuille(self):         if self.gauche==None and self.droit==None:             return True         else:             return False      def affiche(self):         \"\"\"permet d'afficher un arbre\"\"\"         if self==None:             return None         else :             return [self.etiquette,Arbre.affiche(self.gauche),Arbre.affiche(self.droit)] In\u00a0[91]: Copied! <pre>class Arbre:\n    def __init__(self, etiquette,gauche=None,droit=None):\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n    \n    def est_feuille(self):\n        if self.gauche==None and self.droit==None:\n            return True\n        else:\n            return False\n    \n    def arbre_digraph(self):\n        noeuds=[]\n        aretes=[]\n        if self!=None:\n            noeuds=[self.etiquette]\n            if self.gauche!=None:\n                aretes.append([self.etiquette,self.gauche.etiquette])\n                sag = Arbre(self.gauche)\n                pg = sag.arbre_digraph()\n                noeuds = noeuds + pg[0]\n                aretes = aretes + pg[1]\n            if self.droit!=None:\n                aretes.append([self.etiquette,self.droit.etiquette])\n                sad = Arbre(self.droit)\n                pd = sad.arbre_digraph()\n                noeuds = noeuds + pd[0]\n                aretes = aretes + pd[1]\n        return noeuds,aretes\n            \n    def affiche(self):\n        # cr\u00e9ation de l'objet graphviz qui sera renvoy\u00e9\n        img_arbre = Digraph()\n        noeuds, aretes = self.arbre_digraph()\n        for n in noeuds:\n            img_arbre.node(n,n)\n        for a in aretes:\n            img_arbre.edge(a[0],a[1])\n        return img_arbre\n</pre> class Arbre:     def __init__(self, etiquette,gauche=None,droit=None):         self.etiquette = etiquette         self.gauche = None         self.droit = None          def est_feuille(self):         if self.gauche==None and self.droit==None:             return True         else:             return False          def arbre_digraph(self):         noeuds=[]         aretes=[]         if self!=None:             noeuds=[self.etiquette]             if self.gauche!=None:                 aretes.append([self.etiquette,self.gauche.etiquette])                 sag = Arbre(self.gauche)                 pg = sag.arbre_digraph()                 noeuds = noeuds + pg[0]                 aretes = aretes + pg[1]             if self.droit!=None:                 aretes.append([self.etiquette,self.droit.etiquette])                 sad = Arbre(self.droit)                 pd = sad.arbre_digraph()                 noeuds = noeuds + pd[0]                 aretes = aretes + pd[1]         return noeuds,aretes                  def affiche(self):         # cr\u00e9ation de l'objet graphviz qui sera renvoy\u00e9         img_arbre = Digraph()         noeuds, aretes = self.arbre_digraph()         for n in noeuds:             img_arbre.node(n,n)         for a in aretes:             img_arbre.edge(a[0],a[1])         return img_arbre          In\u00a0[92]: Copied! <pre>a = Arbre(4)\na.gauche = Arbre(3)\na.droit = Arbre(1)\na.droit.gauche = Arbre(2)\na.droit.droit = Arbre(7)\na.gauche.gauche = Arbre(6)\na.droit.droit.gauche = Arbre(9)\n</pre> a = Arbre(4) a.gauche = Arbre(3) a.droit = Arbre(1) a.droit.gauche = Arbre(2) a.droit.droit = Arbre(7) a.gauche.gauche = Arbre(6) a.droit.droit.gauche = Arbre(9) In\u00a0[93]: Copied! <pre>a.affiche()\n</pre> a.affiche() <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In [93], line 1\n----&gt; 1 a.affiche()\n\nCell In [91], line 37, in Arbre.affiche(self)\n     35 noeuds, aretes = self.arbre_digraph()\n     36 for n in noeuds:\n---&gt; 37     img_arbre.node(n,n)\n     38 for a in aretes:\n     39     img_arbre.edge(a[0],a[1])\n\nFile ~/.local/lib/python3.10/site-packages/graphviz/_tools.py:171, in deprecate_positional_args.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(*args, **kwargs)\n    162     wanted = ', '.join(f'{name}={value!r}'\n    163                        for name, value in deprecated.items())\n    164     warnings.warn(f'The signature of {func.__name__} will be reduced'\n    165                   f' to {supported_number} positional args'\n    166                   f' {list(supported)}: pass {wanted}'\n    167                   ' as keyword arg(s)',\n    168                   stacklevel=stacklevel,\n    169                   category=category)\n--&gt; 171 return func(*args, **kwargs)\n\nFile ~/.local/lib/python3.10/site-packages/graphviz/dot.py:195, in Dot.node(self, name, label, _attributes, **attrs)\n    184 @_tools.deprecate_positional_args(supported_number=3)\n    185 def node(self, name: str,\n    186          label: typing.Optional[str] = None,\n    187          _attributes=None, **attrs) -&gt; None:\n    188     \"\"\"Create a node.\n    189 \n    190     Args:\n   (...)\n    193         attrs: Any additional node attributes (must be strings).\n    194     \"\"\"\n--&gt; 195     name = self._quote(name)\n    196     attr_list = self._attr_list(label, kwargs=attrs, attributes=_attributes)\n    197     line = self._node(name, attr_list)\n\nFile ~/.local/lib/python3.10/site-packages/graphviz/_tools.py:171, in deprecate_positional_args.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(*args, **kwargs)\n    162     wanted = ', '.join(f'{name}={value!r}'\n    163                        for name, value in deprecated.items())\n    164     warnings.warn(f'The signature of {func.__name__} will be reduced'\n    165                   f' to {supported_number} positional args'\n    166                   f' {list(supported)}: pass {wanted}'\n    167                   ' as keyword arg(s)',\n    168                   stacklevel=stacklevel,\n    169                   category=category)\n--&gt; 171 return func(*args, **kwargs)\n\nFile ~/.local/lib/python3.10/site-packages/graphviz/quoting.py:82, in quote(identifier, is_html_string, is_valid_id, dot_keywords, endswith_odd_number_of_backslashes, escape_unescaped_quotes)\n     40 @_tools.deprecate_positional_args(supported_number=1)\n     41 def quote(identifier: str,\n     42           is_html_string=HTML_STRING.match,\n   (...)\n     45           endswith_odd_number_of_backslashes=FINAL_ODD_BACKSLASHES.search,\n     46           escape_unescaped_quotes=ESCAPE_UNESCAPED_QUOTES) -&gt; str:\n     47     r\"\"\"Return DOT identifier from string, quote if needed.\n     48 \n     49     &gt;&gt;&gt; quote('')  # doctest: +NO_EXE\n   (...)\n     80     \"\\\\\\\"\"\n     81     \"\"\"\n---&gt; 82     if is_html_string(identifier) and not isinstance(identifier, NoHtml):\n     83         pass\n     84     elif not is_valid_id(identifier) or identifier.lower() in dot_keywords:\n\nTypeError: expected string or bytes-like object</pre> In\u00a0[94]: Copied! <pre>a.droit.gauche.etiquette\n</pre> a.droit.gauche.etiquette Out[94]: <pre>2</pre> In\u00a0[95]: Copied! <pre>a.droit.gauche.est_feuille()\n</pre> a.droit.gauche.est_feuille() Out[95]: <pre>True</pre> In\u00a0[96]: Copied! <pre>a.droit.droit.gauche.est_feuille()\n</pre> a.droit.droit.gauche.est_feuille() Out[96]: <pre>True</pre> In\u00a0[97]: Copied! <pre>a.droit.gauche.est_feuille()\n</pre> a.droit.gauche.est_feuille() Out[97]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>class Noeud:\n    def __init__(self, etiquette,gauche=None,droit=None):\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n</pre> class Noeud:     def __init__(self, etiquette,gauche=None,droit=None):         self.etiquette = etiquette         self.gauche = None         self.droit = None In\u00a0[66]: Copied! <pre>class ArbreBinaire:\n    \n    def __init__(self,racine):\n        # racine est soit None (arbre vide) soit un objet de la classe noeud\n        self.racine=racine\n\n    def affiche(self):\n\"\"\"permet d'afficher un arbre\"\"\"\n        if self==None:\n            return None\n        else :\n            return [self.racine.etiquette,ArbreBinaire.affiche(self.racine.gauche),ArbreBinaire.affiche(self.racine.droit)]\n</pre> class ArbreBinaire:          def __init__(self,racine):         # racine est soit None (arbre vide) soit un objet de la classe noeud         self.racine=racine      def affiche(self):         \"\"\"permet d'afficher un arbre\"\"\"         if self==None:             return None         else :             return [self.racine.etiquette,ArbreBinaire.affiche(self.racine.gauche),ArbreBinaire.affiche(self.racine.droit)] In\u00a0[67]: Copied! <pre>C = Noeud(\"C\")\nD = Noeud(\"D\")\nF = Noeud(\"F\")\n</pre> C = Noeud(\"C\") D = Noeud(\"D\") F = Noeud(\"F\") In\u00a0[68]: Copied! <pre># On peut \u00e0 pr\u00e9sent \"remonter\" dans l'arbre et d\u00e9clarer les noeuds parents\nE = Noeud(\"E\",F)\nB = Noeud(\"B\",D,E)\n</pre> # On peut \u00e0 pr\u00e9sent \"remonter\" dans l'arbre et d\u00e9clarer les noeuds parents E = Noeud(\"E\",F) B = Noeud(\"B\",D,E) In\u00a0[69]: Copied! <pre>A=Noeud('A',B,C)\n</pre> A=Noeud('A',B,C) In\u00a0[70]: Copied! <pre>A1=ArbreBinaire(A)\n</pre> A1=ArbreBinaire(A) In\u00a0[71]: Copied! <pre>print(A1.affiche())\n</pre> print(A1.affiche()) <pre>['A', None, None]\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}